# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang |release| |ReleaseNotesTitle|"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:14
msgid ""
"These are in-progress notes for the upcoming Clang |version| release. "
"Release notes for previous releases can be found on `the Releases Page "
"<https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:21
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release |release|. Here "
"we describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <https://llvm.org/docs/ReleaseNotes."
"html>`_. For the libc++ release notes, see `this page <https://libcxx.llvm."
"org/ReleaseNotes.html>`_. All LLVM releases may be downloaded from the `LLVM "
"releases web site <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:35
msgid "Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:37
msgid "The Objective-C ARC migrator (ARCMigrate) has been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:38
msgid ""
"Fix missing diagnostics for uses of declarations when performing typename "
"access, such as when performing member access on a ``[[deprecated]]`` type "
"alias. (`#58547 <https://github.com/llvm/llvm-project/issues/58547>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:41
msgid ""
"For ARM targets when compiling assembly files, the features included in the "
"selected CPU or Architecture's FPU are included. If you wish not to use a "
"specific feature, the relevant ``+no`` option will need to be amended to the "
"command line option."
msgstr ""

#: ../../../ReleaseNotes.rst:44
msgid ""
"When compiling with branch target enforcement, ``asm goto`` statements will "
"no longer guarantee to place a ``bti`` or ``endbr64`` instruction at the "
"labels named as possible branch destinations, so it is not safe to use a "
"register-controlled branch instruction to branch to one. (In line with gcc.)"
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid "C/C++ Language Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:53
msgid ""
"New LLVM optimizations have been implemented that optimize pointer "
"arithmetic on null pointers more aggressively.  As part of this, clang has "
"implemented a special case for old-style offsetof idioms like ``((int)"
"(&(((struct S *)0)->field)))``, to ensure they are not caught by these "
"optimizations.  It is also possible to use ``-fwrapv-pointer`` or   ``-fno-"
"delete-null-pointer-checks`` to make pointer arithmetic on null pointers "
"well-defined. (`#130734 <https://github.com/llvm/llvm-project/"
"issues/130734>`_, `#130952 <https://github.com/llvm/llvm-project/"
"issues/130952>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:61
msgid "C++ Specific Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:63
msgid ""
"The type trait builtin ``__is_referenceable`` has been removed, since it has "
"very few users and all the type traits that could benefit from it in the "
"standard library already have their own bespoke builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid ""
"A workaround for libstdc++4.7 has been removed. Note that 4.8.3 remains the "
"oldest supported libstdc++ version."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"Added ``!nonnull/!align`` metadata to load of references for better codegen."
msgstr ""

#: ../../../ReleaseNotes.rst:69
msgid ""
"Checking for integer to enum conversions in constant expressions is more "
"strict; in particular, ``const E x = (E)-1;`` is not treated as a constant "
"if it's out of range. The Boost numeric_conversion library is impacted by "
"this; it was fixed in Boost 1.81. (`#143034 <https://github.com/llvm/llvm-"
"project/issues/143034>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"Fully implemented `CWG400 Using-declarations and the ` `\"struct hack\" "
"<https://wg21.link/CWG400>`_. Invalid member using-declaration whose nested-"
"name-specifier doesn't refer to a base class such as ``using CurrentClass::"
"Foo;`` is now rejected in C++98 mode."
msgstr ""

#: ../../../ReleaseNotes.rst:80
msgid "ABI Changes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:82
msgid ""
"Return larger CXX records in memory instead of using AVX registers. Code "
"compiled with older clang will be incompatible with newer version of the "
"clang unless -fclang-abi-compat=20 is provided. (`#120670 <https://github."
"com/llvm/llvm-project/issues/120670>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:85
msgid "AST Dumping Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid "Added support for dumping template arguments of structural value kinds."
msgstr ""

#: ../../../ReleaseNotes.rst:90
msgid "Clang Frontend Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:92
msgid ""
"The ``-Wglobal-constructors`` flag now applies to ``[[gnu::constructor]]`` "
"and ``[[gnu::destructor]]`` attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:96
msgid "Clang Python Bindings Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"``Cursor.from_location`` now returns ``None`` instead of a null cursor. This "
"eliminates the last known source of null cursors."
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid ""
"Almost all ``Cursor`` methods now assert that they are called on non-null "
"cursors. Most of the time null cursors were mapped to ``None``, so no "
"widespread breakages are expected."
msgstr ""

#: ../../../ReleaseNotes.rst:104
msgid "What's New in Clang |release|?"
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid "C++ Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"Added a :ref:`__builtin_structured_binding_size "
"<builtin_structured_binding_size-doc>` (T) builtin that returns the number "
"of structured bindings that would be produced by destructuring ``T``."
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid ""
"Similarly to GCC, Clang now supports constant expressions in the strings of "
"a GNU ``asm`` statement."
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid ""
"Clang now implements the changes to overload resolution proposed by section "
"1 and 2 of `P3606 <https://wg21.link/P3606R0>`_. If a non-template candidate "
"exists in an overload set that is a perfect match (all conversion sequences "
"are identity conversions) template candidates are not instantiated. "
"Diagnostics that would have resulted from the instantiation of these "
"template candidates are no longer produced. This aligns Clang closer to the "
"behavior of GCC, and fixes (`#62096 <https://github.com/llvm/llvm-project/"
"issues/62096>`_), (`#74581 <https://github.com/llvm/llvm-project/"
"issues/74581>`_), and (`#74581 <https://github.com/llvm/llvm-project/"
"issues/74581>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid ""
"Implemented `P2719R5 Type-aware allocation and deallocation functions "
"<https://wg21.link/P2719>`_ as an extension in all C++ language modes."
msgstr ""

#: ../../../ReleaseNotes.rst:130
msgid "C++2c Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:132
msgid ""
"Implemented `P1061R10 Structured Bindings can introduce a Pack <https://wg21."
"link/P1061R10>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"Implemented `P2786R13 Trivial Relocatability <https://wg21.link/P2786R13>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:136
msgid ""
"Implemented `P0963R3 Structured binding declaration as a condition <https://"
"wg21.link/P0963R3>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid ""
"Implemented `P3618R0 Allow attaching main to the global module <https://wg21."
"link/P3618>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:141
msgid "C++23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid "C++20 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:145
msgid ""
"Fixed a crash with a defaulted spaceship (``<=>``) operator when the class "
"contains a member declaration of vector type. Vector types cannot yet be "
"compared directly, so this causes the operator to be deleted. (`#137452 "
"<https://github.com/llvm/llvm-project/issues/137452>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid ""
"Implement constant evaluation of lambdas that capture structured bindings. "
"(`#145956 <https://github.com/llvm/llvm-project/issues/145956>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:152
msgid "C++17 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid "Resolutions to C++ Defect Reports"
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"The flag `-frelaxed-template-template-args` and its negation have been "
"removed, having been deprecated since the previous two releases. The "
"improvements to template template parameter matching implemented in the "
"previous release, as described in P3310 and P3579, made this flag "
"unnecessary."
msgstr ""

#: ../../../ReleaseNotes.rst:162
msgid ""
"Implemented `CWG2918 Consideration of constraints for address of overloaded "
"` `function <https://cplusplus.github.io/CWG/issues/2918.html>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid ""
"Bumped the ``__cpp_constexpr`` feature-test macro to ``202002L`` in C++20 "
"mode as indicated in `P2493R0 <https://wg21.link/P2493R0>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid ""
"Implemented `CWG2517 Useless restriction on use of parameter in ` "
"`constraint-expression <https://cplusplus.github.io/CWG/issues/2517.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid ""
"Implemented `CWG3005 Function parameters should never be name-independent "
"<https://wg21.link/CWG3005>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid ""
"Implemented `CWG2496 ref-qualifiers and virtual overriding <https://wg21."
"link/CWG2496>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid "C Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid ""
"Clang now allows an ``inline`` specifier on a typedef declaration of a "
"function type in Microsoft compatibility mode. `#124869 <https://github.com/"
"llvm/llvm-project/issues/124869>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid ""
"Clang now allows ``restrict`` qualifier for array types with pointer "
"elements (`#92847 <https://github.com/llvm/llvm-project/issues/92847>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:180
msgid ""
"Clang now diagnoses ``const``-qualified object definitions without an "
"initializer. If the object is a variable or field which is zero-initialized, "
"it will be diagnosed under the new warning ``-Wdefault-const-init-var`` or "
"``-Wdefault-const-init-field``, respectively. Similarly, if the variable or "
"field is not zero-initialized, it will be diagnosed under the new diagnostic "
"``-Wdefault-const-init-var-unsafe`` or ``-Wdefault-const-init-field-"
"unsafe``, respectively. The unsafe diagnostic variants are grouped under a "
"new diagnostic ``-Wdefault-const-init-unsafe``, which itself is grouped "
"under the new diagnostic ``-Wdefault-const-init``. Finally, ``-Wdefault-"
"const-init`` is grouped under ``-Wc++-compat`` because these constructs are "
"not compatible with C++. `#19297 <https://github.com/llvm/llvm-project/"
"issues/19297>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:191
msgid ""
"Added ``-Wimplicit-void-ptr-cast``, grouped under ``-Wc++-compat``, which "
"diagnoses implicit conversion from ``void *`` to another pointer type as "
"being incompatible with C++. (`#17792 <https://github.com/llvm/llvm-project/"
"issues/17792>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid ""
"Added ``-Wc++-keyword``, grouped under ``-Wc++-compat``, which diagnoses "
"when a C++ keyword is used as an identifier in C. (`#21898 <https://github."
"com/llvm/llvm-project/issues/21898>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Added ``-Wc++-hidden-decl``, grouped under ``-Wc++-compat``, which diagnoses "
"use of tag types which are visible in C but not visible in C++ due to "
"scoping rules. e.g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid ""
"Added ``-Wimplicit-int-enum-cast``, grouped under ``-Wc++-compat``, which "
"diagnoses implicit conversion from integer types to an enumeration type in "
"C, which is not compatible with C++. `#37027 <https://github.com/llvm/llvm-"
"project/issues/37027>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid ""
"Split \"implicit conversion from enum type to different enum type\" "
"diagnostic from ``-Wenum-conversion`` into its own diagnostic group, ``-"
"Wimplicit-enum-enum-cast``, which is grouped under both ``-Wenum-"
"conversion`` and ``-Wimplicit-int-enum-cast``. This conversion is an int-to-"
"enum conversion because the enumeration on the right-hand side is promoted "
"to ``int`` before the assignment."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid ""
"Added ``-Wtentative-definition-compat``, grouped under ``-Wc++-compat``, "
"which diagnoses tentative definitions in C with multiple declarations as "
"being incompatible with C++. e.g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid ""
"Added ``-Wunterminated-string-initialization``, grouped under ``-Wextra``, "
"which diagnoses an initialization from a string literal where only the null "
"terminator cannot be stored. e.g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid ""
"This diagnostic can be suppressed by adding the new ``nonstring`` attribute "
"to the field or variable being initialized. `#137705 <https://github.com/"
"llvm/llvm-project/issues/137705>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid ""
"Added ``-Wc++-unterminated-string-initialization``, grouped under ``-Wc++-"
"compat``, which also diagnoses the same cases as ``-Wunterminated-string-"
"initialization``. However, this diagnostic is not silenced by the "
"``nonstring`` attribute as these initializations are always incompatible "
"with C++."
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid ""
"Added ``-Wjump-misses-init``, which is off by default and grouped under ``-"
"Wc++-compat``. It diagnoses when a jump (``goto`` to its label, ``switch`` "
"to its ``case``) will bypass the initialization of a local variable, which "
"is invalid in C++."
msgstr ""

#: ../../../ReleaseNotes.rst:248
msgid ""
"Added the existing ``-Wduplicate-decl-specifier`` diagnostic, which is on by "
"default, to ``-Wc++-compat`` because duplicated declaration specifiers are "
"not valid in C++."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"The ``[[clang::assume()]]`` attribute is now correctly recognized in C. The "
"``__attribute__((assume()))`` form has always been supported, so the fix is "
"specific to the attribute syntax used."
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"The ``clang-cl`` driver now recognizes ``/std:clatest`` and sets the "
"language mode to C23. (`#147233 <https://github.com/llvm/llvm-project/"
"issues/147233>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid "C2y Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"Implement `WG14 N3409 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3409.pdf>`_ which removes UB around use of ``void`` expressions. In "
"practice, this means that ``_Generic`` selection associations may now have "
"``void`` type, but it also removes UB with code like ``(void)(void)1;``."
msgstr ""

#: ../../../ReleaseNotes.rst:263
msgid ""
"Implemented `WG14 N3411 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3411.pdf>`_ which allows a source file to not end with a newline character. "
"Note, ``-pedantic`` will no longer diagnose this in either C or C++ modes. "
"This feature was adopted as applying to obsolete versions of C in WG14 and "
"as a defect report in WG21 (CWG787)."
msgstr ""

#: ../../../ReleaseNotes.rst:268
msgid ""
"Implemented `WG14 N3353 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3353.htm>`_ which adds the new ``0o`` and ``0O`` ocal literal prefixes and "
"deprecates octal literals other than ``0`` which do not start with the new "
"prefix. This feature is exposed in earlier language modes and in C++ as an "
"extension. The paper also introduced octal and hexadecimal delimited escape "
"sequences (e.g., ``\"\\x{12}\\o{12}\"``) which are also supported as an "
"extension in older C language modes."
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid ""
"Implemented `WG14 N3369 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3369.pdf>`_ which introduces the ``_Lengthof`` operator, and `WG14 N3469 "
"<https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3469.htm>`_ which renamed "
"``_Lengthof`` to ``_Countof``. This feature is implemented as a conforming "
"extension in earlier C language modes, but not in C++ language modes (``std::"
"extent`` and ``std::size`` already provide the same functionality but with "
"more granularity). The feature can be tested via "
"``__has_feature(c_countof)`` or ``__has_extension(c_countof)``. This also "
"adds the ``<stdcountof.h>`` header file which exposes the ``countof`` macro "
"which expands to ``_Countof``."
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid "C23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid "Clang now accepts ``-std=iso9899:2024`` as an alias for C23."
msgstr ""

#: ../../../ReleaseNotes.rst:288
msgid ""
"Added ``__builtin_c23_va_start()`` for compatibility with GCC and to enable "
"better diagnostic behavior for the ``va_start()`` macro in C23 and later. "
"This also updates the definition of ``va_start()`` in ``<stdarg.h>`` to use "
"the new builtin. Fixes `#124031 <https://github.com/llvm/llvm-project/"
"issues/124031>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid ""
"Implemented `WG14 N2819 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n2819.pdf>`_ which clarified that a compound literal used within a function "
"prototype is treated as if the compound literal were within the body rather "
"than at file scope."
msgstr ""

#: ../../../ReleaseNotes.rst:296
msgid ""
"Fixed a bug where you could not cast a null pointer constant to type "
"``nullptr_t``. Fixes `#133644 <https://github.com/llvm/llvm-project/"
"issues/133644>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid ""
"Implemented `WG14 N3037 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3037.pdf>`_ which allows tag types to be redefined within the same "
"translation unit so long as both definitions are structurally equivalent "
"(same tag types, same tag names, same tag members, etc). As a result of this "
"paper, ``-Wvisibility`` is no longer diagnosed in C23 if the parameter is a "
"complete tag type (it does still fire when the parameter is an incomplete "
"tag type as that cannot be completed)."
msgstr ""

#: ../../../ReleaseNotes.rst:305
msgid ""
"Fixed a failed assertion with an invalid parameter to the ``#embed`` "
"directive. Fixes `#126940 <https://github.com/llvm/llvm-project/"
"issues/126940>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid ""
"Fixed a crash when a declaration of a ``constexpr`` variable with an invalid "
"type. Fixes `#140887 <https://github.com/llvm/llvm-project/issues/140887>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid ""
"Documented `WG14 N3006 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3006.htm>`_ which clarified how Clang is handling underspecified object "
"declarations."
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid ""
"Clang now accepts single variadic parameter in type-name. It's a part of "
"`WG14 N2975 <https://open-std.org/JTC1/SC22/WG14/www/docs/n2975.pdf>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid ""
"Fixed a bug with handling the type operand form of ``typeof`` when it is "
"used to specify a fixed underlying type for an enumeration. `#146351 "
"<https://github.com/llvm/llvm-project/issues/146351>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"Fixed a rejects-valid bug where Clang would reject an enumeration with an "
"``_Atomic`` underlying type. The underlying type is the non-atomic, "
"unqualified version of the specified type. Due to the perhaps surprising "
"lack of atomic behavior, this is diagnosed under ``-Wunderlying-atomic-"
"qualifier-ignored``, which defaults to an error. This can be downgraded with "
"``-Wno-underlying-atomic-qualifier-ignored`` or ``-Wno-error=underlying-"
"atomic-qualifier-ignored``. Clang now also diagnoses cv-qualifiers as being "
"ignored, but that warning does not default to an error. It can be controlled "
"by ``-Wunderlying-cv-qualifier-ignore``. (`#147736 <https://github.com/llvm/"
"llvm-project/issues/147736>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid "C11 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:327
msgid ""
"Implemented `WG14 N1285 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n1285.htm>`_ which introduces the notion of objects with a temporary "
"lifetime. When an expression resulting in an rvalue with structure or union "
"type and that type contains a member of array type, the expression result is "
"an automatic storage duration object with temporary lifetime which begins "
"when the expression is evaluated and ends at the evaluation of the "
"containing full expression. This functionality is also implemented for "
"earlier C language modes because the C99 semantics will never be implemented "
"(it would require dynamic allocations of memory which leaks, which users "
"would not appreciate)."
msgstr ""

#: ../../../ReleaseNotes.rst:338
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:340
msgid ""
"Support parsing the `cc` operand modifier and alias it to the `c` modifier "
"(`#127719 <https://github.com/llvm/llvm-project/issues/127719>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "Added `__builtin_elementwise_exp10`."
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid ""
"For AMDPGU targets, added `__builtin_v_cvt_off_f32_i4` that maps to the "
"`v_cvt_off_f32_i4` instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid ""
"Added `__builtin_elementwise_minnum` and `__builtin_elementwise_maxnum`."
msgstr ""

#: ../../../ReleaseNotes.rst:344
msgid ""
"No longer crashing on invalid Objective-C categories and extensions when "
"dumping the AST as JSON. (`#137320 <https://github.com/llvm/llvm-project/"
"issues/137320>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:346
msgid ""
"Clang itself now uses split stacks instead of threads for allocating more "
"stack space when running on Apple AArch64 based platforms. This means that "
"stack traces of Clang from debuggers, crashes, and profilers may look "
"different than before."
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid ""
"Fixed a crash when a VLA with an invalid size expression was used within a "
"``sizeof`` or ``typeof`` expression. (`#138444 <https://github.com/llvm/llvm-"
"project/issues/138444>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:352
msgid ""
"``__builtin_invoke`` has been added to improve the compile time of ``std::"
"invoke``."
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid ""
"Deprecation warning is emitted for the deprecated "
"``__reference_binds_to_temporary`` intrinsic. "
"``__reference_constructs_from_temporary`` should be used instead. (`#44056 "
"<https://github.com/llvm/llvm-project/issues/44056>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid ""
"Added `__builtin_get_vtable_pointer` to directly load the primary vtable "
"pointer from a polymorphic object."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid ""
"``libclang`` receives a family of new bindings to query basic facts about "
"GCC-style inline assembly blocks, including whether the block is "
"``volatile`` and its template string following the LLVM IR ``asm`` format. "
"(`#143424 <https://github.com/llvm/llvm-project/issues/143424>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:360
msgid ""
"Clang no longer rejects reinterpret_cast conversions between indirect ARC-"
"managed pointers and other pointer types. The prior behavior was overly "
"strict and inconsistent with the ARC specification."
msgstr ""

#: ../../../ReleaseNotes.rst:364
msgid ""
"Use of ``__has_feature`` to detect the ``ptrauth_qualifier`` and "
"``ptrauth_intrinsics`` features has been deprecated, and is restricted to "
"the arm64e target only. The correct method to check for these features is to "
"test for the ``__PTRAUTH__`` macro."
msgstr ""

#: ../../../ReleaseNotes.rst:371
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"New option ``-Wundef-true`` added and enabled by default to warn when `true` "
"is used in the C preprocessor without being defined before C23."
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid ""
"New option ``-fprofile-continuous`` added to enable continuous profile "
"syncing to file (`#124353 <https://github.com/llvm/llvm-project/"
"issues/124353>`_, `docs <https://clang.llvm.org/docs/UsersManual."
"html#cmdoption-fprofile-continuous>`_). The feature has `existed <https://"
"clang.llvm.org/docs/SourceBasedCodeCoverage.html#running-the-instrumented-"
"program>`_) for a while and this is just a user facing option."
msgstr ""

#: ../../../ReleaseNotes.rst:379
msgid ""
"New option ``-ftime-report-json`` added which outputs the same timing data "
"as ``-ftime-report`` but formatted as JSON."
msgstr ""

#: ../../../ReleaseNotes.rst:381
msgid ""
"New option ``-Wnrvo`` added and disabled by default to warn about missed "
"NRVO opportunities."
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid ""
"New option ``-ignore-pch`` added to disable precompiled headers. It "
"overrides ``-emit-pch`` and ``-include-pch``. (`#142409 <https://github.com/"
"llvm/llvm-project/issues/142409>`_, `PCHDocs <https://clang.llvm.org/docs/"
"UsersManual.html#ignoring-a-pch-file>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:385
msgid ""
"New options ``-g[no-]key-instructions`` added, disabled by default. Reduces "
"jumpiness of debug stepping for optimized code in some debuggers (not LLDB "
"at this time). Not recommended for use without optimizations. DWARF only. "
"Note both the positive and negative flags imply ``-g``."
msgstr ""

#: ../../../ReleaseNotes.rst:387
msgid ""
"New options ``-fthinlto-distributor=`` and ``-Xthinlto-distributor=`` added "
"for Integrated Distributed ThinLTO (DTLTO). DTLTO enables the distribution "
"of backend ThinLTO compilations via external distribution systems, such as "
"Incredibuild, during the traditional link step. (`#147265 <https://github."
"com/llvm/llvm-project/issues/147265>`_, `ThinLTODocs <https://clang.llvm.org/"
"docs/ThinLTO.html#integrated-distributed-thinlto-dtlto>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:389
msgid ""
"A new flag - `-static-libclosure` was introduced to support statically "
"linking the runtime for the Blocks extension on Windows. This flag currently "
"only changes the code generation, and even then, only on Windows. This does "
"not impact the linker behaviour like the other `-static-*` flags."
msgstr ""

#: ../../../ReleaseNotes.rst:395
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:398
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:400
msgid ""
"The ARM AArch32 ``-mtp`` option accepts and defaults to ``auto``, a value of "
"``auto`` uses the best available method of providing the frame pointer "
"supported by the hardware. This matches the behavior of ``-mtp`` in gcc. "
"This changes the default behavior for ARM targets that provide the "
"``TPIDRURO`` register as this will be used instead of a call to the "
"``__aeabi_read_tp``. Programs that use ``__aeabi_read_tp`` but do not use "
"the ``TPIDRURO`` register must use ``-mtp=soft``. Fixes #123864"
msgstr ""

#: ../../../ReleaseNotes.rst:404
msgid ""
"The compiler flag `-fbracket-depth` default value is increased from 256 to "
"2048. (`#94728 <https://github.com/llvm/llvm-project/issues/94728>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:406
msgid ""
"`-Wpadded` option implemented for the `x86_64-windows-msvc` target. Fixes "
"#61702"
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"The ``-mexecute-only`` and ``-mpure-code`` flags are now accepted for "
"AArch64 targets. (`#125688 <https://github.com/llvm/llvm-project/"
"issues/125688>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:410
msgid ""
"The ``-fchar8_t`` flag is no longer considered in non-C++ languages modes. "
"(`#55373 <https://github.com/llvm/llvm-project/issues/55373>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:412
msgid ""
"The ``-fveclib=libmvec`` option now supports AArch64 targets (requires GLIBC "
"2.40 or newer)."
msgstr ""

#: ../../../ReleaseNotes.rst:414
msgid ""
"The ``-Og`` optimization flag now sets ``-fextend-variable-liveness``, "
"reducing performance slightly while reducing the number of optimized-out "
"variables. (`#118026 <https://github.com/llvm/llvm-project/issues/118026>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid "Removed Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:422
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:423
msgid ""
"Adding [[clang::unsafe_buffer_usage]] attribute to a method definition now "
"turns off all -Wunsafe-buffer-usage related warnings within the method body."
msgstr ""

#: ../../../ReleaseNotes.rst:426
msgid ""
"The ``no_sanitize`` attribute now accepts both ``gnu`` and ``clang`` names."
msgstr ""

#: ../../../ReleaseNotes.rst:427
msgid ""
"The ``ext_vector_type(n)`` attribute can now be used as a generic type "
"attribute."
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"Clang now diagnoses use of declaration attributes on void parameters. "
"(`#108819 <https://github.com/llvm/llvm-project/issues/108819>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:429
msgid ""
"Clang now allows ``__attribute__((model(\"small\")))`` and "
"``__attribute__((model(\"large\")))`` on non-TLS globals in x86-64 "
"compilations. This forces the global to be considered small or large in "
"regards to the x86-64 code model, regardless of the code model specified for "
"the compilation."
msgstr ""

#: ../../../ReleaseNotes.rst:433
msgid ""
"Clang now emits a warning ``-Wreserved-init-priority`` instead of a hard "
"error when ``__attribute__((init_priority(n)))`` is used with values of n in "
"the reserved range [0, 100]. The warning will be treated as an error by "
"default."
msgstr ""

#: ../../../ReleaseNotes.rst:437
msgid ""
"There is a new ``format_matches`` attribute to complement the existing "
"``format`` attribute. ``format_matches`` allows the compiler to verify that "
"a format string argument is equivalent to a reference format string: it is "
"useful when a function accepts a format string without its accompanying "
"arguments to format. For instance:"
msgstr ""

#: ../../../ReleaseNotes.rst:458
msgid ""
"Before the introducion of ``format_matches``, this code cannot be verified "
"at compile-time. ``format_matches`` plugs that hole:"
msgstr ""

#: ../../../ReleaseNotes.rst:476
msgid ""
"Like with ``format``, the first argument is the format string flavor and the "
"second argument is the index of the format string parameter. "
"``format_matches`` accepts an example valid format string as its third "
"argument. For more information, see the Clang attributes documentation."
msgstr ""

#: ../../../ReleaseNotes.rst:481
msgid ""
"Introduced a new statement attribute ``[[clang::atomic]]`` that enables fine-"
"grained control over atomic code generation on a per-statement basis. "
"Supported options include ``[no_]remote_memory``, "
"``[no_]fine_grained_memory``, and ``[no_]ignore_denormal_mode``. These are "
"particularly relevant for AMDGPU targets, where they map to corresponding IR "
"metadata."
msgstr ""

#: ../../../ReleaseNotes.rst:488
msgid ""
"Clang now disallows the use of attributes applied before an ``extern "
"template`` declaration (`#79893 <https://github.com/llvm/llvm-project/"
"issues/79893>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:491
msgid ""
"Clang will print the \"reason\" string argument passed on to ``[[clang::"
"warn_unused_result(\"reason\")]]`` as part of the warning diagnostic."
msgstr ""

#: ../../../ReleaseNotes.rst:495
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:497
msgid ""
"Improve the diagnostics for deleted default constructor errors for C++ class "
"initializer lists that don't explicitly list a class member and thus attempt "
"to implicitly default construct that member."
msgstr ""

#: ../../../ReleaseNotes.rst:500
msgid ""
"The ``-Wunique-object-duplication`` warning has been added to warn about "
"objects which are supposed to only exist once per program, but may get "
"duplicated when built into a shared library."
msgstr ""

#: ../../../ReleaseNotes.rst:503
msgid ""
"Fixed a bug where Clang's Analysis did not correctly model the destructor "
"behavior of ``union`` members (`#119415 <https://github.com/llvm/llvm-"
"project/issues/119415>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:504
msgid ""
"A statement attribute applied to a ``case`` label no longer suppresses "
"'bypassing variable initialization' diagnostics (#84072)."
msgstr ""

#: ../../../ReleaseNotes.rst:506
msgid ""
"The ``-Wunsafe-buffer-usage`` warning has been updated to warn about unsafe "
"libc function calls.  Those new warnings are emitted under the subgroup ``-"
"Wunsafe-buffer-usage-in-libc-call``."
msgstr ""

#: ../../../ReleaseNotes.rst:509
msgid ""
"Diagnostics on chained comparisons (``a < b < c``) are now an error by "
"default. This can be disabled with ``-Wno-error=parentheses``."
msgstr ""

#: ../../../ReleaseNotes.rst:511
msgid ""
"Similarly, fold expressions over a comparison operator are now an error by "
"default."
msgstr ""

#: ../../../ReleaseNotes.rst:512
msgid "Clang now better preserves the sugared types of pointers to member."
msgstr ""

#: ../../../ReleaseNotes.rst:513
msgid ""
"Clang now better preserves the presence of the template keyword with "
"dependent prefixes."
msgstr ""

#: ../../../ReleaseNotes.rst:515
msgid ""
"Clang now in more cases avoids printing 'type-parameter-X-X' instead of the "
"name of the template parameter."
msgstr ""

#: ../../../ReleaseNotes.rst:517
msgid ""
"Clang now respects the current language mode when printing expressions in "
"diagnostics. This fixes a bunch of `bool` being printed as `_Bool`, and also "
"a bunch of HLSL types being printed as their C++ equivalents."
msgstr ""

#: ../../../ReleaseNotes.rst:520
msgid "Clang now consistently quotes expressions in diagnostics."
msgstr ""

#: ../../../ReleaseNotes.rst:521
msgid ""
"When printing types for diagnostics, clang now doesn't suppress the scopes "
"of template arguments contained within nested names."
msgstr ""

#: ../../../ReleaseNotes.rst:523
msgid ""
"The ``-Wshift-bool`` warning has been added to warn about shifting a "
"boolean. (`#28334 <https://github.com/llvm/llvm-project/issues/28334>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:524
msgid ""
"Fixed diagnostics adding a trailing ``::`` when printing some source code "
"constructs, like base classes."
msgstr ""

#: ../../../ReleaseNotes.rst:526
msgid ""
"The :doc:`ThreadSafetyAnalysis` now supports ``-Wthread-safety-pointer``, "
"which enables warning on passing or returning pointers to guarded variables "
"as function arguments or return value respectively. Note that :doc:"
"`ThreadSafetyAnalysis` still does not perform alias analysis. The feature "
"will be default-enabled with ``-Wthread-safety`` in a future release."
msgstr ""

#: ../../../ReleaseNotes.rst:531
msgid "The :doc:`ThreadSafetyAnalysis` now supports reentrant capabilities."
msgstr ""

#: ../../../ReleaseNotes.rst:532
msgid ""
"Clang will now do a better job producing common nested names, when producing "
"common types for ternary operator, template argument deduction and multiple "
"return auto deduction."
msgstr ""

#: ../../../ReleaseNotes.rst:534
msgid ""
"The ``-Wsign-compare`` warning now treats expressions with bitwise not(~) "
"and minus(-) as signed integers except for the case where the operand is an "
"unsigned integer and throws warning if they are compared with unsigned "
"integers (##18878)."
msgstr ""

#: ../../../ReleaseNotes.rst:537
msgid ""
"The ``-Wunnecessary-virtual-specifier`` warning (included in ``-Wextra``) "
"has been added to warn about methods which are marked as virtual inside a "
"``final`` class, and hence can never be overridden."
msgstr ""

#: ../../../ReleaseNotes.rst:541
msgid ""
"Improve the diagnostics for chained comparisons to report actual expressions "
"and operators (`#129069 <https://github.com/llvm/llvm-project/"
"issues/129069>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:543
msgid ""
"Improve the diagnostics for shadows template parameter to report correct "
"location (`#129060 <https://github.com/llvm/llvm-project/issues/129060>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:545
msgid ""
"Improve the ``-Wundefined-func-template`` warning when a function template "
"is not instantiated due to being unreachable in modules."
msgstr ""

#: ../../../ReleaseNotes.rst:547
msgid ""
"Fixed an assertion when referencing an out-of-bounds parameter via a "
"function attribute whose argument list refers to parameters by index and the "
"function is variadic. e.g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:555
msgid "Fixes `#61635 <https://github.com/llvm/llvm-project/issues/61635>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:557
msgid ""
"Split diagnosing base class qualifiers from the ``-Wignored-Qualifiers`` "
"diagnostic group into a new ``-Wignored-base-class-qualifiers`` diagnostic "
"group (which is grouped under ``-Wignored-qualifiers``). Fixes `#131935 "
"<https://github.com/llvm/llvm-project/issues/131935>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:559
msgid ""
"``-Wc++98-compat`` no longer diagnoses use of ``__auto_type`` or "
"``decltype(auto)`` as though it was the extension for ``auto``. (`#47900 "
"<https://github.com/llvm/llvm-project/issues/47900>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:561
msgid ""
"Clang now issues a warning for missing return in ``main`` in C89 mode. "
"(`#21650 <https://github.com/llvm/llvm-project/issues/21650>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:563
msgid ""
"Now correctly diagnose a tentative definition of an array with static "
"storage duration in pedantic mode in C. (`#50661 <https://github.com/llvm/"
"llvm-project/issues/50661>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:565
msgid ""
"No longer diagnosing idiomatic function pointer casts on Windows under ``-"
"Wcast-function-type-mismatch`` (which is enabled by ``-Wextra``). Clang "
"would previously warn on this construct, but will no longer do so on Windows:"
msgstr ""

#: ../../../ReleaseNotes.rst:576
msgid ""
"An error is now emitted when a ``musttail`` call is made to a function "
"marked with the ``not_tail_called`` attribute. (`#133509 <https://github.com/"
"llvm/llvm-project/issues/133509>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:578
msgid "``-Whigher-precision-for-complex-divison`` warns when:"
msgstr ""

#: ../../../ReleaseNotes.rst:580
msgid "The divisor is complex."
msgstr ""

#: ../../../ReleaseNotes.rst:581
msgid ""
"When the complex division happens in a higher precision type due to "
"arithmetic promotion."
msgstr ""

#: ../../../ReleaseNotes.rst:582
msgid "When using the divide and assign operator (``/=``)."
msgstr ""

#: ../../../ReleaseNotes.rst:584
msgid "Fixes `#131127 <https://github.com/llvm/llvm-project/issues/131127>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:586
msgid ""
"``-Wuninitialized`` now diagnoses when a class does not declare any "
"constructors to initialize their non-modifiable members. The diagnostic is "
"not new; being controlled via a warning group is what's new. Fixes `#41104 "
"<https://github.com/llvm/llvm-project/issues/41104>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:590
msgid ""
"Analysis-based diagnostics (like ``-Wconsumed`` or ``-Wunreachable-code``) "
"can now be correctly controlled by ``#pragma clang diagnostic``. `#42199 "
"<https://github.com/llvm/llvm-project/issues/42199>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:593
msgid "Improved Clang's error recovery for invalid function calls."
msgstr ""

#: ../../../ReleaseNotes.rst:595
msgid ""
"Improved bit-field diagnostics to consider the type specified by the "
"``preferred_type`` attribute. These diagnostics are controlled by the flags "
"``-Wpreferred-type-bitfield-enum-conversion`` and ``-Wpreferred-type-"
"bitfield-width``. These warnings are on by default as they they're only "
"triggered if the authors are already making the choice to use "
"``preferred_type`` attribute."
msgstr ""

#: ../../../ReleaseNotes.rst:602
msgid ""
"``-Winitializer-overrides`` and ``-Wreorder-init-list`` are now grouped "
"under the ``-Wc99-designator`` diagnostic group, as they also are about the "
"behavior of the C99 feature as it was introduced into C++20. Fixes `#47037 "
"<https://github.com/llvm/llvm-project/issues/47037>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:605
msgid ""
"``-Wreserved-identifier`` now fires on reserved parameter names in a "
"function declaration which is not a definition."
msgstr ""

#: ../../../ReleaseNotes.rst:607
msgid ""
"Clang now prints the namespace for an attribute, if any, when emitting an "
"unknown attribute diagnostic."
msgstr ""

#: ../../../ReleaseNotes.rst:610
msgid ""
"``-Wvolatile`` now warns about volatile-qualified class return types as well "
"as volatile-qualified scalar return types. Fixes `#133380 <https://github."
"com/llvm/llvm-project/issues/133380>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:613
msgid ""
"Several compatibility diagnostics that were incorrectly being grouped under "
"``-Wpre-c++20-compat`` are now part of ``-Wc++20-compat``. (`#138775 "
"<https://github.com/llvm/llvm-project/issues/138775>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:616
msgid ""
"Improved the ``-Wtautological-overlap-compare`` diagnostics to warn about "
"overlapping and non-overlapping ranges involving character literals and "
"floating-point literals. The warning message for non-overlapping cases has "
"also been improved (`#13473 <https://github.com/llvm/llvm-project/"
"issues/13473>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:619
msgid ""
"Fixed a duplicate diagnostic when performing typo correction on function "
"template calls with explicit template arguments. (`#139226 <https://github."
"com/llvm/llvm-project/issues/139226>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:622
msgid ""
"Explanatory note is printed when ``assert`` fails during evaluation of a "
"constant expression. Prior to this, the error inaccurately implied that "
"assert could not be used at all in a constant expression (`#130458 <https://"
"github.com/llvm/llvm-project/issues/130458>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:626
msgid ""
"A new off-by-default warning ``-Wms-bitfield-padding`` has been added to "
"alert to cases where bit-field packing may differ under the MS struct ABI "
"(`#117428 <https://github.com/llvm/llvm-project/issues/117428>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:629
msgid "``-Watomic-access`` no longer fires on unreachable code. e.g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:643
msgid ""
"A new ``-Wcharacter-conversion`` warns where comparing or implicitly "
"converting between different Unicode character types (``char8_t``, "
"``char16_t``, ``char32_t``). This warning only triggers in C++ as these "
"types are aliases in C. (`#138526 <https://github.com/llvm/llvm-project/"
"issues/138526>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:647
msgid ""
"Fixed a crash when checking a ``__thread``-specified variable declaration "
"with a dependent type in C++. (`#140509 <https://github.com/llvm/llvm-"
"project/issues/140509>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:650
msgid "Clang now suggests corrections for unknown attribute names."
msgstr ""

#: ../../../ReleaseNotes.rst:652
msgid ""
"``-Wswitch`` will now diagnose unhandled enumerators in switches also when "
"the enumerator is deprecated. Warnings about using deprecated enumerators in "
"switch cases have moved behind a new ``-Wdeprecated-declarations-switch-"
"case`` flag."
msgstr ""

#: ../../../ReleaseNotes.rst:657
msgid "For example:"
msgstr ""

#: ../../../ReleaseNotes.rst:673
msgid ""
"will result in a warning about ``Blue`` not being handled in the switch."
msgstr ""

#: ../../../ReleaseNotes.rst:675
msgid ""
"The warning can be fixed either by adding a ``default:``, or by adding "
"``case Blue:``. Since the enumerator is deprecated, the latter approach will "
"trigger a ``'Blue' is deprecated`` warning, which can be turned off with ``-"
"Wno-deprecated-declarations-switch-case``."
msgstr ""

#: ../../../ReleaseNotes.rst:680
msgid ""
"Split diagnosis of implicit integer conversion on negation to a new "
"diagnostic group ``-Wimplicit-int-conversion-on-negation``, grouped under ``-"
"Wimplicit-int-conversion``, so user can turn it off independently."
msgstr ""

#: ../../../ReleaseNotes.rst:684
msgid "Improved the FixIts for unused lambda captures."
msgstr ""

#: ../../../ReleaseNotes.rst:686
msgid ""
"Delayed typo correction was removed from the compiler; immediate typo "
"correction behavior remains the same. Delayed typo correction facilities "
"were fragile and unmaintained, and the removal closed the following issues: "
"`#142457 <https://github.com/llvm/llvm-project/issues/142457>`_, `#139913 "
"<https://github.com/llvm/llvm-project/issues/139913>`_, `#138850 <https://"
"github.com/llvm/llvm-project/issues/138850>`_, `#137867 <https://github.com/"
"llvm/llvm-project/issues/137867>`_, `#137860 <https://github.com/llvm/llvm-"
"project/issues/137860>`_, `#107840 <https://github.com/llvm/llvm-project/"
"issues/107840>`_, `#93308 <https://github.com/llvm/llvm-project/"
"issues/93308>`_, `#69470 <https://github.com/llvm/llvm-project/"
"issues/69470>`_, `#59391 <https://github.com/llvm/llvm-project/"
"issues/59391>`_, `#58172 <https://github.com/llvm/llvm-project/"
"issues/58172>`_, `#46215 <https://github.com/llvm/llvm-project/"
"issues/46215>`_, `#45915 <https://github.com/llvm/llvm-project/"
"issues/45915>`_, `#45891 <https://github.com/llvm/llvm-project/"
"issues/45891>`_, `#44490 <https://github.com/llvm/llvm-project/"
"issues/44490>`_, `#36703 <https://github.com/llvm/llvm-project/"
"issues/36703>`_, `#32903 <https://github.com/llvm/llvm-project/"
"issues/32903>`_, `#23312 <https://github.com/llvm/llvm-project/"
"issues/23312>`_, `#69874 <https://github.com/llvm/llvm-project/"
"issues/69874>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:693
msgid ""
"Clang no longer emits a spurious -Wdangling-gsl warning in C++23 when "
"iterating over an element of a temporary container in a range-based for loop."
"(`#109793 <https://github.com/llvm/llvm-project/issues/109793>`_, `#145164 "
"<https://github.com/llvm/llvm-project/issues/145164>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:697
msgid ""
"Fixed false positives in ``-Wformat-truncation`` and ``-Wformat-overflow`` "
"diagnostics when floating-point numbers had both width field and plus or "
"space prefix specified. (`#143951 <https://github.com/llvm/llvm-project/"
"issues/143951>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:701
msgid ""
"A warning is now emitted when ``main`` is attached to a named module, which "
"can be turned off with ``-Wno-main-attached-to-named-module``. (`#146247 "
"<https://github.com/llvm/llvm-project/issues/146247>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:704
msgid ""
"Clang now avoids issuing `-Wreturn-type` warnings in some cases where the "
"final statement of a non-void function is a `throw` expression, or a call to "
"a function that is trivially known to always throw (i.e., its body consists "
"solely of a `throw` statement). This avoids certain false positives in "
"exception-heavy code, though only simple patterns are currently recognized."
msgstr ""

#: ../../../ReleaseNotes.rst:711
msgid ""
"Clang now accepts ``@tparam`` comments on variable template partial "
"specializations. (`#144775 <https://github.com/llvm/llvm-project/"
"issues/144775>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:714
msgid ""
"Fixed a bug that caused diagnostic line wrapping to not function correctly "
"on some systems. (`#139499 <https://github.com/llvm/llvm-project/"
"issues/139499>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:717
msgid ""
"Clang now tries to avoid printing file paths that contain ``..``, instead "
"preferring the canonical file path if it ends up being shorter."
msgstr ""

#: ../../../ReleaseNotes.rst:720
msgid ""
"Improve the diagnostics for placement new expression when const-qualified "
"object was passed as the storage argument. (`#143708 <https://github.com/"
"llvm/llvm-project/issues/143708>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:723
msgid ""
"Clang now does not issue a warning about returning from a function declared "
"with the ``[[noreturn]]`` attribute when the function body is ended with a "
"call via pointer, provided it can be proven that the pointer only points to "
"``[[noreturn]]`` functions."
msgstr ""

#: ../../../ReleaseNotes.rst:729
msgid "Improvements to Clang's time-trace"
msgstr ""

#: ../../../ReleaseNotes.rst:732
msgid "Improvements to Coverage Mapping"
msgstr ""

#: ../../../ReleaseNotes.rst:735
msgid "Bug Fixes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:737
msgid ""
"Clang now outputs correct values when #embed data contains bytes with "
"negative signed char values (`#102798 <https://github.com/llvm/llvm-project/"
"issues/102798>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:739
msgid ""
"Fixed a crash when merging named enumerations in modules (`#114240 <https://"
"github.com/llvm/llvm-project/issues/114240>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:740
msgid ""
"Fixed rejects-valid problem when #embed appears in std::initializer_list or "
"when it can affect template argument deduction (`#122306 <https://github.com/"
"llvm/llvm-project/issues/122306>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:742
msgid ""
"Fix crash on code completion of function calls involving partial order of "
"function templates (`#125500 <https://github.com/llvm/llvm-project/"
"issues/125500>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:744
msgid ""
"Fixed clang crash when #embed data does not fit into an array (`#128987 "
"<https://github.com/llvm/llvm-project/issues/128987>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:746
msgid ""
"Non-local variable and non-variable declarations in the first clause of a "
"``for`` loop in C are no longer incorrectly considered an error in C23 mode "
"and are allowed as an extension in earlier language modes."
msgstr ""

#: ../../../ReleaseNotes.rst:749
msgid ""
"Remove the ``static`` specifier for the value of ``_FUNCTION_`` for static "
"functions, in MSVC compatibility mode."
msgstr ""

#: ../../../ReleaseNotes.rst:750
msgid ""
"Fixed a modules crash where exception specifications were not propagated "
"properly (`#121245 <https://github.com/llvm/llvm-project/issues/121245>`_, "
"relanded in `#129982 <https://github.com/llvm/llvm-project/issues/129982>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:751
msgid ""
"Fixed a problematic case with recursive deserialization within "
"``FinishedDeserializing()`` where ``PassInterestingDeclsToConsumer()`` was "
"called before the declarations were safe to be passed. (`#129982 <https://"
"github.com/llvm/llvm-project/issues/129982>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:753
msgid ""
"Fixed a modules crash where an explicit Constructor was deserialized. "
"(`#132794 <https://github.com/llvm/llvm-project/issues/132794>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:754
msgid ""
"Defining an integer literal suffix (e.g., ``LL``) before including ``<stdint."
"h>`` in a freestanding build no longer causes invalid token pasting when "
"using the ``INTn_C`` macros. (`#85995 <https://github.com/llvm/llvm-project/"
"issues/85995>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:757
msgid ""
"Fixed an assertion failure in the expansion of builtin macros like "
"``__has_embed()`` with line breaks before the closing paren. (`#133574 "
"<https://github.com/llvm/llvm-project/issues/133574>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:759
msgid ""
"Fixed a crash in error recovery for expressions resolving to templates. "
"(`#135621 <https://github.com/llvm/llvm-project/issues/135621>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:760
msgid ""
"Clang no longer accepts invalid integer constants which are too large to fit "
"into any (standard or extended) integer type when the constant is "
"unevaluated. Merely forming the token is sufficient to render the program "
"invalid. Code like this was previously accepted and is now rejected "
"(`#134658 <https://github.com/llvm/llvm-project/issues/134658>`_): .. code-"
"block:: c"
msgstr ""

#: ../../../ReleaseNotes.rst:766
msgid "#if 1 ? 1 : 999999999999999999999 #endif"
msgstr ""

#: ../../../ReleaseNotes.rst:768
msgid ""
"``#embed`` directive now diagnoses use of a non-character file (device file) "
"such as ``/dev/urandom`` as an error. This restriction may be relaxed in the "
"future. See (`#126629 <https://github.com/llvm/llvm-project/"
"issues/126629>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:771
msgid ""
"Fixed a clang 20 regression where diagnostics attached to some calls to "
"member functions using C++23 \"deducing this\" did not have a diagnostic "
"location (`#135522 <https://github.com/llvm/llvm-project/issues/135522>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:774
msgid ""
"Fixed a crash when a ``friend`` function is redefined as deleted. (`#135506 "
"<https://github.com/llvm/llvm-project/issues/135506>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:775
msgid ""
"Fixed a crash when ``#embed`` appears as a part of a failed constant "
"evaluation. The crashes were happening during diagnostics emission due to "
"unimplemented statement printer. (`#132641 <https://github.com/llvm/llvm-"
"project/issues/132641>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:778
msgid ""
"Fixed visibility calculation for template functions. (`#103477 <https://"
"github.com/llvm/llvm-project/issues/103477>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:779
msgid ""
"Fixed a bug where an attribute before a ``pragma clang attribute`` or "
"``pragma clang __debug`` would cause an assertion. Instead, this now "
"diagnoses the invalid attribute location appropriately. (`#137861 <https://"
"github.com/llvm/llvm-project/issues/137861>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:782
msgid ""
"Fixed a crash when a malformed ``_Pragma`` directive appears as part of an "
"``#include`` directive. (`#138094 <https://github.com/llvm/llvm-project/"
"issues/138094>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:784
msgid ""
"Fixed a crash during constant evaluation involving invalid lambda captures "
"(`#138832 <https://github.com/llvm/llvm-project/issues/138832>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:786
msgid ""
"Fixed compound literal is not constant expression inside initializer list "
"(`#87867 <https://github.com/llvm/llvm-project/issues/87867>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:788
msgid ""
"Fixed a crash when instantiating an invalid dependent friend template "
"specialization. (`#139052 <https://github.com/llvm/llvm-project/"
"issues/139052>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:790
msgid ""
"Fixed a crash with an invalid member function parameter list with a default "
"argument which contains a pragma. (`#113722 <https://github.com/llvm/llvm-"
"project/issues/113722>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:792
msgid ""
"Fixed assertion failures when generating name lookup table in modules. "
"(`#61065 <https://github.com/llvm/llvm-project/issues/61065>`_, `#134739 "
"<https://github.com/llvm/llvm-project/issues/134739>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:793
msgid ""
"Fixed an assertion failure in constant compound literal statements. "
"(`#139160 <https://github.com/llvm/llvm-project/issues/139160>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:794
msgid ""
"Fix crash due to unknown references and pointer implementation and handling "
"of base classes. (GH139452)"
msgstr ""

#: ../../../ReleaseNotes.rst:796
msgid ""
"Fixed an assertion failure in serialization of constexpr structs containing "
"unions. (`#140130 <https://github.com/llvm/llvm-project/issues/140130>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:797
msgid ""
"Fixed duplicate entries in TableGen that caused the wrong attribute to be "
"selected. (GH#140701)"
msgstr ""

#: ../../../ReleaseNotes.rst:798
msgid ""
"Fixed type mismatch error when 'builtin-elementwise-math' arguments have "
"different qualifiers, this should be well-formed. (`#141397 <https://github."
"com/llvm/llvm-project/issues/141397>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:799
msgid ""
"Constant evaluation now correctly runs the destructor of a variable declared "
"in the second clause of a C-style ``for`` loop. (`#139818 <https://github."
"com/llvm/llvm-project/issues/139818>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:801
msgid ""
"Fixed a bug with constexpr evaluation for structs containing unions in case "
"of C++ modules. (`#143168 <https://github.com/llvm/llvm-project/"
"issues/143168>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:802
msgid ""
"Fixed incorrect token location when emitting diagnostics for tokens expanded "
"from macros. (`#143216 <https://github.com/llvm/llvm-project/"
"issues/143216>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:803
msgid ""
"Fixed an infinite recursion when checking constexpr destructors. (`#141789 "
"<https://github.com/llvm/llvm-project/issues/141789>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:804
msgid ""
"Fixed a crash when a malformed using declaration appears in a ``constexpr`` "
"function. (`#144264 <https://github.com/llvm/llvm-project/issues/144264>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:805
msgid ""
"Fixed a bug when use unicode character name in macro concatenation. "
"(`#145240 <https://github.com/llvm/llvm-project/issues/145240>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:806
msgid ""
"Clang doesn't erroneously inject a ``static_assert`` macro in ms-"
"compatibility and -std=c99 mode. This resulted in deletion of ``-W/Wno-"
"microsoft-static-assert`` flag and diagnostic because the macro injection "
"was used to emit this warning. Unfortunately there is no other good way to "
"diagnose usage of ``static_assert`` macro without inclusion of ``<assert."
"h>``."
msgstr ""

#: ../../../ReleaseNotes.rst:811
msgid ""
"In C23, something like ``[[/*possible attributes*/]];`` is an attribute "
"declaration, not a statement. So it is not allowed by the syntax in places "
"where a statement is required, specifically as the secondary block of a "
"selection or iteration statement. This differs from C++, since C++ allows "
"declaration statements. Clang now emits a warning for these patterns. "
"(`#141659 <https://github.com/llvm/llvm-project/issues/141659>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:816
msgid ""
"Fixed false positives for redeclaration errors of using enum in nested "
"scopes. (`#147495 <https://github.com/llvm/llvm-project/issues/147495>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:818
msgid ""
"Fixed a crash in `clang-scan-deps` when a module with the same name is found "
"in different locations (`#134404 <https://github.com/llvm/llvm-project/"
"issues/134404>`_, `#146976 <https://github.com/llvm/llvm-project/"
"issues/146976>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:822
msgid "Bug Fixes to Compiler Builtins"
msgstr ""

#: ../../../ReleaseNotes.rst:824
msgid ""
"The behaviour of ``__add_pointer`` and ``__remove_pointer`` for Objective-C+"
"+'s ``id`` and interfaces has been fixed."
msgstr ""

#: ../../../ReleaseNotes.rst:826
msgid ""
"The signature for ``__builtin___clear_cache`` was changed from ``void(char "
"*, char *)`` to ``void(void *, void *)`` to match GCC's signature for the "
"same builtin. (`#47833 <https://github.com/llvm/llvm-project/issues/47833>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:830
msgid ""
"``__has_unique_object_representations(Incomplete[])`` is no longer accepted, "
"per `LWG4113 <https://cplusplus.github.io/LWG/issue4113>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:833
msgid ""
"``__builtin_is_cpp_trivially_relocatable``, ``__builtin_is_replaceable`` and "
"``__builtin_trivially_relocate`` have been added to support standard C++26 "
"relocation."
msgstr ""

#: ../../../ReleaseNotes.rst:836
msgid ""
"``__is_trivially_relocatable`` has been deprecated, and uses should be "
"replaced by ``__builtin_is_cpp_trivially_relocatable``. Note that, it is "
"generally unsafe to ``memcpy`` non-trivially copyable types that are "
"``__builtin_is_cpp_trivially_relocatable``. It is recommended to use "
"``__builtin_trivially_relocate`` instead."
msgstr ""

#: ../../../ReleaseNotes.rst:842
msgid ""
"``__reference_binds_to_temporary``, "
"``__reference_constructs_from_temporary`` and "
"``__reference_converts_from_temporary`` intrinsics no longer consider "
"function references can bind to temporary objects. (`#114344 <https://github."
"com/llvm/llvm-project/issues/114344>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:846
msgid ""
"``__reference_constructs_from_temporary`` and "
"``__reference_converts_from_temporary`` intrinsics detect reference binding "
"to prvalue instead of xvalue now if the second operand is an object type, "
"per `LWG3819 <https://cplusplus.github.io/LWG/issue3819>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:852
msgid "Bug Fixes to Attribute Support"
msgstr ""

#: ../../../ReleaseNotes.rst:853
msgid ""
"Fixed crash when a parameter to the ``clang::annotate`` attribute evaluates "
"to ``void``. See `#119125 <https://github.com/llvm/llvm-project/"
"issues/119125>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:855
msgid ""
"Clang now emits a warning instead of an error when using the one or two "
"argument form of GCC 11's ``__attribute__((malloc(deallocator)))`` or "
"``__attribute__((malloc(deallocator, ptr-index)))`` (`#51607 <https://github."
"com/llvm/llvm-project/issues/51607>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:860
msgid ""
"Corrected the diagnostic for the ``callback`` attribute when passing too "
"many or too few attribute argument indicies for the specified callback "
"function. (`#47451 <https://github.com/llvm/llvm-project/issues/47451>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:864
msgid ""
"No longer crashing on ``__attribute__((align_value(N)))`` during template "
"instantiation when the function parameter type is not a pointer or "
"reference. (`#26612 <https://github.com/llvm/llvm-project/issues/26612>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:867
msgid ""
"Now allowing the ``[[deprecated]]``, ``[[maybe_unused]]``, and "
"``[[nodiscard]]`` to be applied to a redeclaration after a definition in "
"both C and C++ mode for the standard spellings (other spellings, such as "
"``__attribute__((unused))`` are still ignored after the definition, though "
"this behavior may be relaxed in the future). (`#135481 <https://github.com/"
"llvm/llvm-project/issues/135481>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:873
msgid ""
"Clang will warn if a complete type specializes a deprecated partial "
"specialization. (`#44496 <https://github.com/llvm/llvm-project/"
"issues/44496>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:877
msgid "Bug Fixes to C++ Support"
msgstr ""

#: ../../../ReleaseNotes.rst:879
msgid ""
"Clang now supports implicitly defined comparison operators for friend "
"declarations. (`#132249 <https://github.com/llvm/llvm-project/"
"issues/132249>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:880
msgid ""
"Clang now diagnoses copy constructors taking the class by value in template "
"instantiations. (`#130866 <https://github.com/llvm/llvm-project/"
"issues/130866>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:881
msgid ""
"Clang is now better at keeping track of friend function template instance "
"contexts. (`#55509 <https://github.com/llvm/llvm-project/issues/55509>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:882
msgid ""
"Clang now prints the correct instantiation context for diagnostics "
"suppressed by template argument deduction."
msgstr ""

#: ../../../ReleaseNotes.rst:884
msgid ""
"Errors that occur during evaluation of certain type traits and builtins are "
"no longer incorrectly emitted when they are used in an SFINAE context. The "
"type traits are:"
msgstr ""

#: ../../../ReleaseNotes.rst:888
msgid "``__is_constructible`` and variants,"
msgstr ""

#: ../../../ReleaseNotes.rst:889
msgid "``__is_convertible`` and variants,"
msgstr ""

#: ../../../ReleaseNotes.rst:890
msgid "``__is_assignable`` and variants,"
msgstr ""

#: ../../../ReleaseNotes.rst:891
msgid ""
"``__reference_binds_to_temporary``, "
"``__reference_constructs_from_temporary``, "
"``__reference_converts_from_temporary``,"
msgstr ""

#: ../../../ReleaseNotes.rst:894
msgid "``__is_trivially_equality_comparable``."
msgstr ""

#: ../../../ReleaseNotes.rst:896
msgid ""
"The builtin is ``__builtin_common_type``. (`#132044 <https://github.com/llvm/"
"llvm-project/issues/132044>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:897
msgid ""
"Clang is now better at instantiating the function definition after its use "
"inside of a constexpr lambda. (`#125747 <https://github.com/llvm/llvm-"
"project/issues/125747>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:899
msgid ""
"Fixed a local class member function instantiation bug inside dependent "
"lambdas. (`#59734 <https://github.com/llvm/llvm-project/issues/59734>`_), "
"(`#132208 <https://github.com/llvm/llvm-project/issues/132208>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:900
msgid ""
"Clang no longer crashes when trying to unify the types of arrays with "
"certain differences in qualifiers (this could happen during template "
"argument deduction or when building a ternary operator). (`#97005 <https://"
"github.com/llvm/llvm-project/issues/97005>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:903
msgid ""
"Fixed type alias CTAD issues involving default template arguments. (`#133132 "
"<https://github.com/llvm/llvm-project/issues/133132>`_), (`#134471 <https://"
"github.com/llvm/llvm-project/issues/134471>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:904
msgid ""
"Fixed CTAD issues when initializing anonymous fields with designated "
"initializers. (`#67173 <https://github.com/llvm/llvm-project/issues/67173>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:905
msgid ""
"The initialization kind of elements of structured bindings direct-list-"
"initialized from an array is corrected to direct-initialization."
msgstr ""

#: ../../../ReleaseNotes.rst:907
msgid ""
"Clang no longer crashes when a coroutine is declared ``[[noreturn]]``. "
"(`#127327 <https://github.com/llvm/llvm-project/issues/127327>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:908
msgid ""
"Clang now uses the parameter location for abbreviated function templates in "
"``extern \"C\"``. (`#46386 <https://github.com/llvm/llvm-project/"
"issues/46386>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:909
msgid ""
"Clang will emit an error instead of crash when use co_await or co_yield in C+"
"+26 braced-init-list template parameter initialization. (`#78426 <https://"
"github.com/llvm/llvm-project/issues/78426>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:911
msgid ""
"Improved fix for an issue with pack expansions of type constraints, where "
"this now also works if the constraint has non-type or template template "
"parameters. (`#131798 <https://github.com/llvm/llvm-project/issues/131798>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:914
msgid ""
"Fixes to partial ordering of non-type template parameter packs. (`#132562 "
"<https://github.com/llvm/llvm-project/issues/132562>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:915
msgid ""
"Fix crash when evaluating the trailing requires clause of generic lambdas "
"which are part of a pack expansion."
msgstr ""

#: ../../../ReleaseNotes.rst:917
msgid ""
"Fixes matching of nested template template parameters. (`#130362 <https://"
"github.com/llvm/llvm-project/issues/130362>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:918
msgid ""
"Correctly diagnoses template template parameters which have a pack parameter "
"not in the last position."
msgstr ""

#: ../../../ReleaseNotes.rst:920
msgid ""
"Disallow overloading on struct vs class on dependent types, which is IFNDR, "
"as this makes the problem diagnosable."
msgstr ""

#: ../../../ReleaseNotes.rst:922
msgid ""
"Improved preservation of the presence or absence of typename specifier when "
"printing types in diagnostics."
msgstr ""

#: ../../../ReleaseNotes.rst:924
msgid ""
"Clang now correctly parses ``if constexpr`` expressions in immediate "
"function context. (`#123524 <https://github.com/llvm/llvm-project/"
"issues/123524>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:925
msgid ""
"Fixed an assertion failure affecting code that uses C++23 \"deducing this\". "
"(`#130272 <https://github.com/llvm/llvm-project/issues/130272>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:926
msgid ""
"Clang now properly instantiates destructors for initialized members within "
"non-delegating constructors. (`#93251 <https://github.com/llvm/llvm-project/"
"issues/93251>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:927
msgid ""
"Correctly diagnoses if unresolved using declarations shadows template "
"parameters (`#129411 <https://github.com/llvm/llvm-project/issues/129411>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:928
msgid ""
"Fixed C++20 aggregate initialization rules being incorrectly applied in "
"certain contexts. (`#131320 <https://github.com/llvm/llvm-project/"
"issues/131320>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:929
msgid ""
"Clang was previously coalescing volatile writes to members of volatile base "
"class subobjects. The issue has been addressed by propagating qualifiers "
"during derived-to-base conversions in the AST. (`#127824 <https://github.com/"
"llvm/llvm-project/issues/127824>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:931
msgid ""
"Correctly propagates the instantiated array type to the ``DeclRefExpr`` that "
"refers to it. (`#79750 <https://github.com/llvm/llvm-project/"
"issues/79750>`_), (`#113936 <https://github.com/llvm/llvm-project/"
"issues/113936>`_), (`#133047 <https://github.com/llvm/llvm-project/"
"issues/133047>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:932
msgid ""
"Fixed a Clang regression in C++20 mode where unresolved dependent call "
"expressions were created inside non-dependent contexts (`#122892 <https://"
"github.com/llvm/llvm-project/issues/122892>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:933
msgid ""
"Clang now emits the ``-Wunused-variable`` warning when some structured "
"bindings are unused and the ``[[maybe_unused]]`` attribute is not applied. "
"(`#125810 <https://github.com/llvm/llvm-project/issues/125810>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:935
msgid ""
"Fixed ``static_cast`` not performing access or ambiguity checks when "
"converting to an rvalue reference to a base class. (`#121429 <https://github."
"com/llvm/llvm-project/issues/121429>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:936
msgid ""
"Declarations using class template argument deduction with redundant "
"parentheses around the declarator are no longer rejected. (`#39811 <https://"
"github.com/llvm/llvm-project/issues/39811>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:938
msgid ""
"Fixed a crash caused by invalid declarations of ``std::initializer_list``. "
"(`#132256 <https://github.com/llvm/llvm-project/issues/132256>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:939
msgid ""
"Clang no longer crashes when establishing subsumption between some "
"constraint expressions. (`#122581 <https://github.com/llvm/llvm-project/"
"issues/122581>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:940
msgid ""
"Clang now issues an error when placement new is used to modify a const-"
"qualified variable in a ``constexpr`` function. (`#131432 <https://github."
"com/llvm/llvm-project/issues/131432>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:942
msgid ""
"Fixed an incorrect TreeTransform for calls to ``consteval`` functions if a "
"conversion template is present. (`#137885 <https://github.com/llvm/llvm-"
"project/issues/137885>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:943
msgid ""
"Clang now emits a warning when class template argument deduction for alias "
"templates is used in C++17. (`#133806 <https://github.com/llvm/llvm-project/"
"issues/133806>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:944
msgid ""
"Fixed a missed initializer instantiation bug for variable templates. "
"(`#134526 <https://github.com/llvm/llvm-project/issues/134526>`_), (`#138122 "
"<https://github.com/llvm/llvm-project/issues/138122>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:945
msgid ""
"Fix a crash when checking the template template parameters of a dependent "
"lambda appearing in an alias declaration. (`#136432 <https://github.com/llvm/"
"llvm-project/issues/136432>`_), (`#137014 <https://github.com/llvm/llvm-"
"project/issues/137014>`_), (`#138018 <https://github.com/llvm/llvm-project/"
"issues/138018>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:947
msgid ""
"Fixed an assertion when trying to constant-fold various builtins when the "
"argument referred to a reference to an incomplete type. (`#129397 <https://"
"github.com/llvm/llvm-project/issues/129397>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:949
msgid ""
"Fixed a crash when a cast involved a parenthesized aggregate initialization "
"in dependent context. (`#72880 <https://github.com/llvm/llvm-project/"
"issues/72880>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:950
msgid ""
"No longer crashes when instantiating invalid variable template "
"specialization whose type depends on itself. (`#51347 <https://github.com/"
"llvm/llvm-project/issues/51347>`_), (`#55872 <https://github.com/llvm/llvm-"
"project/issues/55872>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:952
msgid ""
"Improved parser recovery of invalid requirement expressions. In turn, this "
"fixes crashes from follow-on processing of the invalid requirement. "
"(`#138820 <https://github.com/llvm/llvm-project/issues/138820>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:954
msgid ""
"Fixed the handling of pack indexing types in the constraints of a member "
"function redeclaration. (`#138255 <https://github.com/llvm/llvm-project/"
"issues/138255>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:955
msgid ""
"Clang now correctly parses arbitrary order of ``[[]]``, ``__attribute__`` "
"and ``alignas`` attributes for declarations (`#133107 <https://github.com/"
"llvm/llvm-project/issues/133107>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:956
msgid ""
"Fixed a crash when forming an invalid function type in a dependent context. "
"(`#138657 <https://github.com/llvm/llvm-project/issues/138657>`_) (`#115725 "
"<https://github.com/llvm/llvm-project/issues/115725>`_) (`#68852 <https://"
"github.com/llvm/llvm-project/issues/68852>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:957
msgid ""
"Fixed a function declaration mismatch that caused inconsistencies between "
"concepts and variable template declarations. (`#139476 <https://github.com/"
"llvm/llvm-project/issues/139476>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:958
msgid ""
"Fixed an out-of-line declaration mismatch involving nested template "
"parameters. (`#145521 <https://github.com/llvm/llvm-project/issues/145521>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:959
msgid ""
"Clang no longer segfaults when there is a configuration mismatch between "
"modules and their users (http://crbug.com/400353616)."
msgstr ""

#: ../../../ReleaseNotes.rst:960
msgid ""
"Fix an incorrect deduction when calling an explicit object member function "
"template through an overload set address."
msgstr ""

#: ../../../ReleaseNotes.rst:961
msgid ""
"Fixed bug in constant evaluation that would allow using the value of a "
"reference in its own initializer in C++23 mode (`#131330 <https://github.com/"
"llvm/llvm-project/issues/131330>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:963
msgid ""
"Clang could incorrectly instantiate functions in discarded contexts "
"(`#140449 <https://github.com/llvm/llvm-project/issues/140449>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:964
msgid ""
"Fix instantiation of default-initialized variable template specialization. "
"(`#140632 <https://github.com/llvm/llvm-project/issues/140632>`_) (`#140622 "
"<https://github.com/llvm/llvm-project/issues/140622>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:965
msgid ""
"Clang modules now allow a module and its user to differ on "
"TrivialAutoVarInit*"
msgstr ""

#: ../../../ReleaseNotes.rst:966
msgid ""
"Fixed an access checking bug when initializing non-aggregates in default "
"arguments (`#62444 <https://github.com/llvm/llvm-project/issues/62444>`_), "
"(`#83608 <https://github.com/llvm/llvm-project/issues/83608>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:967
msgid ""
"Fixed a pack substitution bug in deducing class template partial "
"specializations. (`#53609 <https://github.com/llvm/llvm-project/"
"issues/53609>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:968
msgid ""
"Fixed a crash when constant evaluating some explicit object member "
"assignment operators. (`#142835 <https://github.com/llvm/llvm-project/"
"issues/142835>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:969
msgid ""
"Fix a bug where private access specifier of overloaded function not "
"respected. (`#107629 <https://github.com/llvm/llvm-project/issues/107629>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:970
msgid ""
"Correctly handles calling an explicit object member function template "
"overload set through its address (``(&Foo::bar<baz>)()``)."
msgstr ""

#: ../../../ReleaseNotes.rst:972
msgid ""
"Fix a crash when using an explicit object parameter in a non-member "
"function. (`#113185 <https://github.com/llvm/llvm-project/issues/113185>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:973
msgid ""
"Fix a crash when forming an invalid call to an operator with an explicit "
"object member. (`#147121 <https://github.com/llvm/llvm-project/"
"issues/147121>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:974
msgid ""
"Correctly handle allocations in the condition of a ``if constexpr``."
"(`#120197 <https://github.com/llvm/llvm-project/issues/120197>`_) (`#134820 "
"<https://github.com/llvm/llvm-project/issues/134820>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:975
msgid ""
"Fixed a crash when handling invalid member using-declaration in C++20+ mode. "
"(`#63254 <https://github.com/llvm/llvm-project/issues/63254>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:976
msgid ""
"Fixed parsing of lambda expressions that appear after ``*`` or ``&`` in "
"contexts where a declaration can appear. (`#63880 <https://github.com/llvm/"
"llvm-project/issues/63880>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:977
msgid ""
"Fix name lookup in lambda appearing in the body of a requires expression. "
"(`#147650 <https://github.com/llvm/llvm-project/issues/147650>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:978
msgid ""
"Fix a crash when trying to instantiate an ambiguous specialization. (`#51866 "
"<https://github.com/llvm/llvm-project/issues/51866>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:979
msgid ""
"Improved handling of variables with ``consteval`` constructors, to "
"consistently treat the initializer as manifestly constant-evaluated. "
"(`#135281 <https://github.com/llvm/llvm-project/issues/135281>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:982
msgid ""
"Fix a crash in the presence of invalid base classes. (`#147186 <https://"
"github.com/llvm/llvm-project/issues/147186>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:983
msgid "Fix a crash with NTTP when instantiating local class."
msgstr ""

#: ../../../ReleaseNotes.rst:984
msgid ""
"Fixed a crash involving list-initialization of an empty class with a non-"
"empty initializer list. (`#147949 <https://github.com/llvm/llvm-project/"
"issues/147949>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:986
msgid ""
"Fixed constant evaluation of equality comparisons of constexpr-unknown "
"references. (`#147663 <https://github.com/llvm/llvm-project/issues/147663>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:989
msgid "Bug Fixes to AST Handling"
msgstr ""

#: ../../../ReleaseNotes.rst:990
msgid ""
"Fixed type checking when a statement expression ends in an l-value of atomic "
"type. (`#106576 <https://github.com/llvm/llvm-project/issues/106576>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:991
msgid ""
"Fixed uninitialized use check in a lambda within CXXOperatorCallExpr. "
"(`#129198 <https://github.com/llvm/llvm-project/issues/129198>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:992
msgid ""
"Fixed a malformed printout of ``CXXParenListInitExpr`` in certain contexts."
msgstr ""

#: ../../../ReleaseNotes.rst:993
msgid ""
"Fixed a malformed printout of certain calling convention function "
"attributes. (`#143160 <https://github.com/llvm/llvm-project/issues/143160>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:994
msgid ""
"Fixed dependency calculation for TypedefTypes (`#89774 <https://github.com/"
"llvm/llvm-project/issues/89774>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:995
msgid ""
"The ODR checker now correctly hashes the names of conversion operators. "
"(`#143152 <https://github.com/llvm/llvm-project/issues/143152>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:996
msgid ""
"Fixed the right parenthesis source location of ``CXXTemporaryObjectExpr``. "
"(`#143711 <https://github.com/llvm/llvm-project/issues/143711>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:997
msgid ""
"Fixed a crash when performing an ``IgnoreUnlessSpelledInSource`` traversal "
"of ASTs containing ``catch(...)`` statements. (`#146103 <https://github.com/"
"llvm/llvm-project/issues/146103>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1000
msgid "Miscellaneous Bug Fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1002
msgid ""
"HTML tags in comments that span multiple lines are now parsed correctly by "
"Clang's comment parser. (`#120843 <https://github.com/llvm/llvm-project/"
"issues/120843>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1005
msgid "Miscellaneous Clang Crashes Fixed"
msgstr ""

#: ../../../ReleaseNotes.rst:1007
msgid ""
"Fixed crash when ``-print-stats`` is enabled in compiling IR files. "
"(`#131608 <https://github.com/llvm/llvm-project/issues/131608>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1008
msgid ""
"Fix code completion crash involving PCH serialized templates. (`#139019 "
"<https://github.com/llvm/llvm-project/issues/139019>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1011
msgid "OpenACC Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1013
msgid ""
"OpenACC support, enabled via `-fopenacc` has reached a level of completeness "
"to finally be at least notionally usable. Currently, the OpenACC 3.4 "
"specification has been completely implemented for Sema and AST creation, so "
"nodes will show up in the AST after having been properly checked. Lowering "
"is currently a work in progress, with compute, loop, and combined constructs "
"partially implemented, plus a handful of data and executable constructs "
"implemented. Lowering will only work in Clang-IR mode (so only with a "
"compiler built with Clang-IR enabled, and with `-fclangir` used on the "
"command line). However, note that the Clang-IR implementation status is also "
"quite partial, so frequent 'not yet implemented' diagnostics should be "
"expected.  Also, the ACC MLIR dialect does not currently implement any "
"lowering to LLVM-IR, so no code generation is possible for OpenACC."
msgstr ""

#: ../../../ReleaseNotes.rst:1027
msgid "Target Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1030
msgid "AMDGPU Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1032
msgid ""
"Bump the default code object version to 6. ROCm 6.3 is required to run any "
"program compiled with COV6."
msgstr ""

#: ../../../ReleaseNotes.rst:1035
msgid "NVPTX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1038
msgid "Hexagon Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1040
msgid "The default compilation target has been changed from V60 to V68."
msgstr ""

#: ../../../ReleaseNotes.rst:1043
msgid "X86 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1045
msgid ""
"The 256-bit maximum vector register size control was removed from `AVX10 "
"whitepaper <https://cdrdv2.intel.com/v1/dl/getContent/784343>_`. * Re-target "
"``m[no-]avx10.1`` to enable AVX10.1 with 512-bit maximum vector register "
"size. * Emit warning for ``mavx10.x-256``, noting AVX10/256 is not "
"supported. * Emit warning for ``mavx10.x-512``, noting to use ``m[no-]avx10."
"x`` instead. * Emit warning for ``m[no-]evex512``, noting AVX10/256 is not "
"supported. * The features avx10.x-256/512 keep unchanged and will be removed "
"in the next release."
msgstr ""

#: ../../../ReleaseNotes.rst:1054
msgid "Arm and AArch64 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1056
msgid ""
"Implementation of modal 8-bit floating point intrinsics in accordance with "
"the Arm C Language Extensions (ACLE) `as specified here <https://github.com/"
"ARM-software/acle/blob/main/main/acle.md#modal-8-bit-floating-point-"
"extensions>`_ is now available."
msgstr ""

#: ../../../ReleaseNotes.rst:1060
msgid ""
"Support has been added for the following processors (command-line "
"identifiers in parentheses):"
msgstr ""

#: ../../../ReleaseNotes.rst:1062
msgid "Arm Cortex-A320 (``cortex-a320``)"
msgstr ""

#: ../../../ReleaseNotes.rst:1064
msgid ""
"For ARM targets, cc1as now considers the FPU's features for the selected CPU "
"or Architecture."
msgstr ""

#: ../../../ReleaseNotes.rst:1065
msgid ""
"The ``+nosimd`` attribute is now fully supported for ARM. Previously, this "
"had no effect when being used with ARM targets, however this will now "
"disable NEON instructions being generated. The ``simd`` option is also now "
"printed when the ``--print-supported-extensions`` option is used."
msgstr ""

#: ../../../ReleaseNotes.rst:1068
msgid ""
"When a feature that depends on NEON (``simd``) is used, NEON is now "
"automatically enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:1069
msgid ""
"When NEON is disabled (``+nosimd``), all features that depend on NEON will "
"now be disabled."
msgstr ""

#: ../../../ReleaseNotes.rst:1071
msgid "Pointer authentication"
msgstr ""

#: ../../../ReleaseNotes.rst:1073
msgid "Support for __ptrauth type qualifier has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:1074
msgid "Objective-C adoption of pointer authentication"
msgstr ""

#: ../../../ReleaseNotes.rst:1076
msgid ""
"``isa`` and ``super`` pointers are protected with address diversity and "
"separate usage specific discriminators."
msgstr ""

#: ../../../ReleaseNotes.rst:1078
msgid ""
"methodlist pointers and content are protected with address diversity and "
"methodlist pointers have a usage specific discriminator."
msgstr ""

#: ../../../ReleaseNotes.rst:1080
msgid ""
"``class_ro_t`` pointers are protected with address diversity and usage "
"specific discriminators."
msgstr ""

#: ../../../ReleaseNotes.rst:1082
msgid ""
"``SEL`` typed ivars are protected with address diversity and usage specific "
"discriminators."
msgstr ""

#: ../../../ReleaseNotes.rst:1085
msgid ""
"For AArch64, added support for generating executable-only code sections by "
"using the ``-mexecute-only`` or ``-mpure-code`` compiler flags. (`#125688 "
"<https://github.com/llvm/llvm-project/issues/125688>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1087
msgid ""
"Added ``-msve-streaming-vector-bits=`` flag, which allows specifying the SVE "
"vector width in streaming mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1091
msgid "Android Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1094
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1096
msgid ""
"Clang now defines ``_CRT_USE_BUILTIN_OFFSETOF`` macro in MSVC-compatible "
"mode, which makes ``offsetof`` provided by Microsoft's ``<stddef.h>`` to be "
"defined correctly. (`#59689 <https://github.com/llvm/llvm-project/"
"issues/59689>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1100
msgid ""
"Clang now can process the `i128` and `ui128` integral suffixes when MSVC "
"extensions are enabled. This allows for properly processing ``intsafe.h`` in "
"the Windows SDK."
msgstr ""

#: ../../../ReleaseNotes.rst:1104
msgid ""
"Clang now supports `mipsel-windows-gnu` and `mipsel-windows-msvc` targets."
msgstr ""

#: ../../../ReleaseNotes.rst:1107
msgid "LoongArch Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1109
msgid "Add support for OHOS on loongarch64."
msgstr ""

#: ../../../ReleaseNotes.rst:1111
msgid ""
"Add target attribute support for function. Supported formats include: * "
"`arch=<arch>` strings - specifies architecture features for a function "
"(equivalent to `-march=<arch>`). * `tune=<cpu>` strings - specifies the tune "
"CPU for a function (equivalent to `-mtune`). * `<feature>`/`no-<feature>` - "
"enables/disables specific features."
msgstr ""

#: ../../../ReleaseNotes.rst:1116
msgid ""
"Add support for the `_Float16` type. And fix incorrect ABI lowering of "
"`_Float16` in the case of structs containing fp16 that are eligible for "
"passing via `GPR+FPR` or `FPR+FPR`. Also fix `int16` -> `__fp16` conversion "
"code gen, which uses generic LLVM IR rather than `llvm.convert.to.fp16` "
"intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:1121
msgid "Add support for the `__bf16` type."
msgstr ""

#: ../../../ReleaseNotes.rst:1123
msgid ""
"Fix incorrect _BitInt(N>64) alignment. Now consistently uses 16-byte "
"alignment for all `_BitInt(N)` where N > 64."
msgstr ""

#: ../../../ReleaseNotes.rst:1127
msgid "RISC-V Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1129
msgid "Add support for `-mtune=generic-ooo` (a generic out-of-order model)."
msgstr ""

#: ../../../ReleaseNotes.rst:1130
msgid ""
"Adds support for `__attribute__((interrupt(\"SiFive-CLIC-preemptible\")))` "
"and `__attribute__((interrupt(\"SiFive-CLIC-stack-swap\")))`. The former "
"automatically saves some interrupt CSRs before re-enabling interrupts in the "
"function prolog, the latter swaps `sp` with the value in a CSR before it is "
"used or modified. These two can also be combined, and can be combined with "
"`interrupt(\"machine\")`."
msgstr ""

#: ../../../ReleaseNotes.rst:1137
msgid ""
"Adds support for `__attribute__((interrupt(\"qci-nest\")))` and "
"`__attribute__((interrupt(\"qci-nonest\")))`. These use instructions from "
"Qualcomm's `Xqciint` extension to save and restore some GPRs in interrupt "
"service routines."
msgstr ""

#: ../../../ReleaseNotes.rst:1142
msgid ""
"`Zicsr` / `Zifencei` are allowed to be duplicated in the presence of `g` in "
"`-march`."
msgstr ""

#: ../../../ReleaseNotes.rst:1144
msgid ""
"Add support for the `__builtin_riscv_pause()` intrinsic from the "
"`Zihintpause` extension."
msgstr ""

#: ../../../ReleaseNotes.rst:1147
msgid "CUDA/HIP Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1149
msgid ""
"Provide a __device__ version of std::__glibcxx_assert_fail() in a header "
"wrapper."
msgstr ""

#: ../../../ReleaseNotes.rst:1152
msgid "CUDA Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1155
msgid "PowerPC Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1157
msgid "Add `__dmr1024` type for Dense Math Facility."
msgstr ""

#: ../../../ReleaseNotes.rst:1158
msgid "Add prototype for Dense Math Facility integer calculation builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:1161
msgid "AIX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1163
msgid ""
"Fixed `-print-runtime-dir` to fallback to the target subdirectory (rather "
"than OS subdirectory) if the runtime path is not found."
msgstr ""

#: ../../../ReleaseNotes.rst:1164
msgid ""
"Fixed `-print-runtime-dir` to find the correct runtime path if the triple "
"has \"unknown\" as the environment component."
msgstr ""

#: ../../../ReleaseNotes.rst:1165
msgid ""
"Changed AIX targets to use the per-target runtime directories for compiler "
"runtimes (i.e. `lib/clang/20/lib/aix` became `lib/clang/21/lib/powerpc-ibm-"
"aix` and `clang/21/lib/powerpc64-ibm-aix`)."
msgstr ""

#: ../../../ReleaseNotes.rst:1168
msgid "NetBSD Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1171
msgid "WebAssembly Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1174
msgid "AVR Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1177
msgid "DWARF Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1180
msgid "Floating Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1183
msgid "Fixed Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1186
msgid "AST Matchers"
msgstr ""

#: ../../../ReleaseNotes.rst:1188
msgid ""
"Ensure ``isDerivedFrom`` matches the correct base in case more than one "
"alias exists."
msgstr ""

#: ../../../ReleaseNotes.rst:1189
msgid ""
"Extend ``templateArgumentCountIs`` to support function and variable template "
"specialization."
msgstr ""

#: ../../../ReleaseNotes.rst:1193
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:1195
msgid "Adds ``BreakBeforeTemplateCloser`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1196
msgid ""
"Adds ``BinPackLongBracedList`` option to override bin packing options in "
"long (20 item or more) braced list initializer lists."
msgstr ""

#: ../../../ReleaseNotes.rst:1198
msgid "Add the C language instead of treating it like C++."
msgstr ""

#: ../../../ReleaseNotes.rst:1199
msgid ""
"Allow specifying the language (C, C++, or Objective-C) for a ``.h`` file by "
"adding a special comment (e.g. ``// clang-format Language: ObjC``) near the "
"top of the file."
msgstr ""

#: ../../../ReleaseNotes.rst:1202
msgid ""
"Add ``EnumTrailingComma`` option for inserting/removing commas at the end of "
"``enum`` enumerator lists."
msgstr ""

#: ../../../ReleaseNotes.rst:1204
msgid ""
"Add ``OneLineFormatOffRegex`` option for turning formatting off for one line."
msgstr ""

#: ../../../ReleaseNotes.rst:1205
msgid "Add ``SpaceAfterOperatorKeyword`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1206
msgid ""
"Add ``MacrosSkippedByRemoveParentheses`` option so that their invocations "
"are skipped by ``RemoveParentheses``."
msgstr ""

#: ../../../ReleaseNotes.rst:1210
msgid "clang-refactor"
msgstr ""

#: ../../../ReleaseNotes.rst:1211
msgid ""
"Reject `0` as column or line number in 1-based command-line source "
"locations. Fixes crash caused by `0` input in `-selection=<file>:<line>:"
"<column>[-<line>:<column>]`. (`#139457 <https://github.com/llvm/llvm-project/"
"issues/139457>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1215
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:1216
msgid ""
"Fixed a bug in ``clang_File_isEqual`` that sometimes led to different in-"
"memory files to be considered as equal."
msgstr ""

#: ../../../ReleaseNotes.rst:1218
msgid ""
"Added ``clang_visitCXXMethods``, which allows visiting the methods of a "
"class."
msgstr ""

#: ../../../ReleaseNotes.rst:1220
msgid ""
"Added ``clang_getFullyQualifiedName``, which provides fully qualified type "
"names as instructed by a PrintingPolicy."
msgstr ""

#: ../../../ReleaseNotes.rst:1223
msgid ""
"Fixed a buffer overflow in ``CXString`` implementation. The fix may result "
"in increased memory allocation."
msgstr ""

#: ../../../ReleaseNotes.rst:1226
msgid ""
"Deprecate ``clang_Cursor_GetBinaryOpcode`` and "
"``clang_Cursor_getBinaryOpcodeStr`` implementations, which are duplicates of "
"``clang_getCursorBinaryOperatorKind`` and "
"``clang_getBinaryOperatorKindSpelling`` respectively."
msgstr ""

#: ../../../ReleaseNotes.rst:1231
msgid "Code Completion"
msgstr ""

#: ../../../ReleaseNotes.rst:1232
msgid ""
"Reject `0` as column or line number in 1-based command-line source "
"locations. Fixes crash caused by `0` input in `-code-completion-at=<file>:"
"<line>:<column>`. (`#139457 <https://github.com/llvm/llvm-project/"
"issues/139457>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1236
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:1239
msgid "New features"
msgstr ""

#: ../../../ReleaseNotes.rst:1241
msgid ""
"Added support for the ``[[clang::assume(cond)]]`` attribute, treating it as "
"``__builtin_assume(cond)`` for better static analysis. (`#129234 <https://"
"github.com/llvm/llvm-project/issues/129234>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1244
msgid ""
"Introduced per-entry-point statistics to provide more detailed analysis "
"metrics. Documentation: :doc:`analyzer/developer-docs/Statistics` (`#131175 "
"<https://github.com/llvm/llvm-project/issues/131175>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1247
msgid ""
"Added time-trace scopes for high-level analyzer steps to improve performance "
"debugging. Documentation: :doc:`analyzer/developer-docs/"
"PerformanceInvestigation` (`#125508 <https://github.com/llvm/llvm-project/"
"issues/125508>`_, `#125884 <https://github.com/llvm/llvm-project/"
"issues/125884>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1251
msgid ""
"Enhanced the ``check::BlockEntrance`` checker callback to provide more "
"granular control over block-level analysis. `Documentation (check::"
"BlockEntrance) <https://clang.llvm.org/doxygen/"
"CheckerDocumentation_8cpp_source.html>`_ (`#140924 <https://github.com/llvm/"
"llvm-project/issues/140924>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1257
msgid ""
"Added a new checker ``core.FixedAddressDereference`` to detect dereferences "
"of fixed addresses, which can be useful for finding hard-coded memory "
"accesses. (`#127191 <https://github.com/llvm/llvm-project/issues/127191>`_, "
"`#132404 <https://github.com/llvm/llvm-project/issues/132404>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1262
msgid "Crash and bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1264
msgid ""
"Fixed a regression introduced by clang-20 in `#115918 <https://github.com/"
"llvm/llvm-project/issues/115918>`_ that lead to false positive reports when "
"``[[no_unique_address]]`` or empty base class optimization techniques were "
"used. Most notably, some ``std::unique_ptr`` implementations. (`#157467 "
"<https://github.com/llvm/llvm-project/issues/157467>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1269
msgid ""
"Fixed a crash when C++20 parenthesized initializer lists are used. This "
"affected a crash of the well-known lambda overloaded pattern. (`#136041 "
"<https://github.com/llvm/llvm-project/issues/136041>`_, `#135665 <https://"
"github.com/llvm/llvm-project/issues/135665>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1273
msgid ""
"Dropped an unjustified assertion, that was triggered in "
"``BugReporterVisitors.cpp`` for variable initialization detection. (`#125044 "
"<https://github.com/llvm/llvm-project/issues/125044>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1276
msgid ""
"Fixed a crash in ``unix.API`` and ``unix.Malloc`` when analyzing code with "
"non-standard ``getline`` or ``getdelim`` function signatures. (`#144884 "
"<https://github.com/llvm/llvm-project/issues/144884>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1279
msgid ""
"Fixed crashes involving ``__builtin_bit_cast``. (`#139188 <https://github."
"com/llvm/llvm-project/issues/139188>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1281
msgid ""
"``__datasizeof`` (C++) and ``_Countof`` (C) no longer cause a failed "
"assertion when given an operand of VLA type. (`#151711 <https://github.com/"
"llvm/llvm-project/issues/151711>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1284
msgid ""
"Fixed a crash in ``alpha.core.CastSize``. (`#134387 <https://github.com/llvm/"
"llvm-project/issues/134387>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1286
msgid ""
"Some ``cplusplus.PlacementNew`` false positives were fixed. (`#150161 "
"<https://github.com/llvm/llvm-project/issues/150161>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1289 ../../../ReleaseNotes.rst:1400
msgid "Improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:1291
msgid ""
"Added option to assume at least one iteration in loops to reduce false "
"positives. (`#125494 <https://github.com/llvm/llvm-project/issues/125494>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1294
msgid ""
"The checker option ``optin.cplusplus.VirtualCall:PureOnly`` was removed, "
"because it had been deprecated since 2019. (`#131823 <https://github.com/"
"llvm/llvm-project/issues/131823>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1297
msgid ""
"Enhanced the ``core.StackAddressEscape`` to detect more cases of stack "
"address escapes, including return values for child stack frames. (`#126620 "
"<https://github.com/llvm/llvm-project/issues/126620>`_, `#126986 <https://"
"github.com/llvm/llvm-project/issues/126986>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1300
msgid ""
"Improved the ``unix.BlockInCriticalSection`` to recognize ``O_NONBLOCK`` "
"streams and suppress reports in those cases. (`#127049 <https://github.com/"
"llvm/llvm-project/issues/127049>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1303
msgid ""
"Better support for lambda-converted function pointers in analysis. (`#144906 "
"<https://github.com/llvm/llvm-project/issues/144906>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1305
msgid ""
"Improved modeling of ``getcwd`` function in ``unix.StdCLibraryFunctions`` "
"checker. (`#141076 <https://github.com/llvm/llvm-project/issues/141076>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1308
msgid ""
"Enhanced the ``optin.core.EnumCastOutOfRange`` checker to ignore ``[[clang::"
"flag_enum]]`` enums. (`#141232 <https://github.com/llvm/llvm-project/"
"issues/141232>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1311
msgid ""
"Improved handling of structured bindings captured by lambdas. (`#132579 "
"<https://github.com/llvm/llvm-project/issues/132579>`_, `#91835 <https://"
"github.com/llvm/llvm-project/issues/91835>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1313
msgid ""
"Fixed unnamed bitfield handling in ``optin.cplusplus.UninitializedObject``. "
"(`#132427 <https://github.com/llvm/llvm-project/issues/132427>`_, `#132001 "
"<https://github.com/llvm/llvm-project/issues/132001>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1315
msgid ""
"Enhanced iterator checker modeling for ``insert`` operations. (`#132596 "
"<https://github.com/llvm/llvm-project/issues/132596>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1317
msgid ""
"Improved ``format`` attribute handling in ``optin.taint.GenericTaint``. "
"(`#132765 <https://github.com/llvm/llvm-project/issues/132765>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1319
msgid ""
"Added support for ``consteval`` in ``ConditionBRVisitor::VisitTerminator``. "
"(`#146859 <https://github.com/llvm/llvm-project/issues/146859>`_, `#139130 "
"<https://github.com/llvm/llvm-project/issues/139130>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1322
msgid ""
"C standard streams are no longer invalidated by all C library function "
"calls. (`#147766 <https://github.com/llvm/llvm-project/issues/147766>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1325
msgid ""
"Enhanced store management with region-store-binding-limit to improve "
"performance. See `region-store-max-binding-fanout <https://clang.llvm.org/"
"docs/analyzer/user-docs/Options.html#region-store-max-binding-fanout>`_ "
"config option. Overriding these options are discouraged, unless you know "
"what you do. (`#127602 <https://github.com/llvm/llvm-project/"
"issues/127602>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1331
msgid ""
"Updated undefined assignment checker (``core.uninitialized.Assign``) "
"diagnostics to avoid using the term ``garbage``. (`#126596 <https://github."
"com/llvm/llvm-project/issues/126596>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1334
msgid ""
"Fixed false memory leak reports involving placement new. (`#144341 <https://"
"github.com/llvm/llvm-project/issues/144341>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1336
msgid ""
"Avoided unnecessary super region invalidation in ``unix.cstring.*`` "
"checkers. (`#146212 <https://github.com/llvm/llvm-project/issues/146212>`_, "
"`#143807 <https://github.com/llvm/llvm-project/issues/143807>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1339
msgid ""
"Enhanced handling of tainted division-by-zero error paths in the ``optin."
"taint.TaintedDiv`` checker. (`#144491 <https://github.com/llvm/llvm-project/"
"issues/144491>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1343
msgid "Moved checkers"
msgstr ""

#: ../../../ReleaseNotes.rst:1345
msgid ""
"After lots of improvements, the checker ``alpha.security.ArrayBoundV2`` was "
"renamed to ``security.ArrayBound``. As this checker is stable now, the old "
"checker ``alpha.security.ArrayBound`` was removed."
msgstr ""

#: ../../../ReleaseNotes.rst:1352
msgid "Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:1354
msgid "``-fsanitize=vptr`` is no longer a part of ``-fsanitize=undefined``."
msgstr ""

#: ../../../ReleaseNotes.rst:1355
msgid ""
"Sanitizer ignorelists now support the syntax ``src:*=sanitize``, ``type:"
"*=sanitize``, ``fun:*=sanitize``, ``global:*=sanitize``, and ``mainfile:"
"*=sanitize``."
msgstr ""

#: ../../../ReleaseNotes.rst:1360
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1361
msgid "Made ``Cursor`` hashable."
msgstr ""

#: ../../../ReleaseNotes.rst:1362
msgid ""
"Added ``Cursor.has_attrs``, a binding for ``clang_Cursor_hasAttrs``, to "
"check whether a cursor has any attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:1364
msgid ""
"Added ``Cursor.specialized_template``, a binding for "
"``clang_getSpecializedCursorTemplate``, to retrieve the primary template "
"that the cursor is a specialization of."
msgstr ""

#: ../../../ReleaseNotes.rst:1367
msgid ""
"Added ``Type.get_methods``, a binding for ``clang_visitCXXMethods``, which "
"allows visiting the methods of a class."
msgstr ""

#: ../../../ReleaseNotes.rst:1369
msgid ""
"Added ``Type.get_fully_qualified_name``, which provides fully qualified type "
"names as instructed by a PrintingPolicy."
msgstr ""

#: ../../../ReleaseNotes.rst:1371
msgid "Add equality comparison operators for ``File`` type"
msgstr ""

#: ../../../ReleaseNotes.rst:1374
msgid "OpenMP Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1375
msgid "Added support 'no_openmp_constructs' assumption clause."
msgstr ""

#: ../../../ReleaseNotes.rst:1376
msgid "Added support for 'self_maps' in map and requirement clause."
msgstr ""

#: ../../../ReleaseNotes.rst:1377
msgid "Added support for 'omp stripe' directive."
msgstr ""

#: ../../../ReleaseNotes.rst:1378
msgid ""
"Fixed a crashing bug with ``omp unroll partial`` if the argument to "
"``partial`` was an invalid expression. (`#139267 <https://github.com/llvm/"
"llvm-project/issues/139267>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1380
msgid ""
"Fixed a crashing bug with ``omp tile sizes`` if the argument to ``sizes`` "
"was an invalid expression. (`#139073 <https://github.com/llvm/llvm-project/"
"issues/139073>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1382
msgid ""
"Fixed a crashing bug with ``omp simd collapse`` if the argument to "
"``collapse`` was an invalid expression. (`#138493 <https://github.com/llvm/"
"llvm-project/issues/138493>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1384
msgid ""
"Fixed a crashing bug with a malformed ``cancel`` directive. (`#139360 "
"<https://github.com/llvm/llvm-project/issues/139360>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1385
msgid ""
"Fixed a crashing bug with ``omp distribute dist_schedule`` if the argument "
"to ``dist_schedule`` was not strictly positive. (`#139266 <https://github."
"com/llvm/llvm-project/issues/139266>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1387
msgid ""
"Fixed two crashing bugs with a malformed ``metadirective`` directive. One "
"was a crash if the next token after ``metadirective`` was a paren, bracket, "
"or brace. The other was if the next token after the meta directive was not "
"an open parenthesis. (`#139665 <https://github.com/llvm/llvm-project/"
"issues/139665>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1391
msgid ""
"An error is now emitted when OpenMP ``collapse`` and ``ordered`` clauses "
"have an argument larger than what can fit within a 64-bit integer."
msgstr ""

#: ../../../ReleaseNotes.rst:1393
msgid "Added support for private variable reduction."
msgstr ""

#: ../../../ReleaseNotes.rst:1394
msgid ""
"Fixed mapping of arrays of structs containing nested structs with user "
"defined mappers, by using compiler-generated default mappers for the outer "
"structs for such maps."
msgstr ""

#: ../../../ReleaseNotes.rst:1397
msgid ""
"Deprecation warning has been emitted for deprecated delimited form of "
"``declare target``."
msgstr ""

#: ../../../ReleaseNotes.rst:1402
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:1406
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Git version of the source code. "
"You can access versions of these documents specific to this release by going "
"into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:1413
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us on the `Discourse forums (Clang Frontend category) <https://"
"discourse.llvm.org/c/clang/6>`_."
msgstr ""
