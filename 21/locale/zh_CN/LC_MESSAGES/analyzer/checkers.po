# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/checkers.rst:3
msgid "Available Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:5
msgid ""
"The analyzer performs checks that are categorized into families or "
"\"checkers\"."
msgstr ""

#: ../../../analyzer/checkers.rst:7
msgid ""
"The default set of checkers covers a variety of checks targeted at finding "
"security and API usage bugs, dead code, and other logic errors. See the :ref:"
"`default-checkers` checkers list below."
msgstr ""

#: ../../../analyzer/checkers.rst:10
msgid ""
"In addition to these, the analyzer contains a number of :ref:`alpha-"
"checkers` (aka *alpha* checkers). These checkers are under development and "
"are switched off by default. They may crash or emit a higher number of false "
"positives."
msgstr ""

#: ../../../analyzer/checkers.rst:13
msgid ""
"The :ref:`debug-checkers` package contains checkers for analyzer developers "
"for debugging purposes."
msgstr ""

#: ../../../analyzer/checkers.rst:17
msgid "Table of Contents"
msgstr ""

#: ../../../analyzer/checkers.rst:22
msgid "Default Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:27
msgid "core"
msgstr ""

#: ../../../analyzer/checkers.rst:28
msgid ""
"Models core language features and contains general-purpose checkers such as "
"division by zero, null pointer dereference, usage of uninitialized values, "
"etc. *These checkers must be always switched on as other checker rely on "
"them.*"
msgstr ""

#: ../../../analyzer/checkers.rst:35
msgid "core.BitwiseShift (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:37
msgid ""
"Finds undefined behavior caused by the bitwise left- and right-shift "
"operator operating on integer types."
msgstr ""

#: ../../../analyzer/checkers.rst:40
msgid ""
"By default, this checker only reports situations when the right operand is "
"either negative or larger than the bit width of the type of the left "
"operand; these are logically unsound."
msgstr ""

#: ../../../analyzer/checkers.rst:44
msgid ""
"Moreover, if the pedantic mode is activated by ``-analyzer-config core."
"BitwiseShift:Pedantic=true``, then this checker also reports situations "
"where the _left_ operand of a shift operator is negative or overflow occurs "
"during the right shift of a signed value. (Most compilers handle these "
"predictably, but the C standard and the C++ standards before C++20 say that "
"they're undefined behavior. In the C++20 standard these constructs are well-"
"defined, so activating pedantic mode in C++20 has no effect.)"
msgstr ""

#: ../../../analyzer/checkers.rst:52
msgid "**Examples**"
msgstr ""

#: ../../../analyzer/checkers.rst:78
msgid "**Solution**"
msgstr ""

#: ../../../analyzer/checkers.rst:80
msgid "Ensure the shift operands are in proper range before shifting."
msgstr ""

#: ../../../analyzer/checkers.rst:85
msgid "core.CallAndMessage (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:86
msgid ""
"Check for logical errors for function calls and Objective-C message "
"expressions (e.g., uninitialized arguments, null function pointers)."
msgstr ""

#: ../../../analyzer/checkers.rst:94
msgid "core.DivideZero (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:95
msgid "Check for division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:103
msgid "core.FixedAddressDereference (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:104
msgid "Check for dereferences of fixed addresses."
msgstr ""

#: ../../../analyzer/checkers.rst:106
msgid ""
"A pointer contains a fixed address if it was set to a hard-coded value or it "
"becomes otherwise obvious that at that point it can have only a single fixed "
"numerical value."
msgstr ""

#: ../../../analyzer/checkers.rst:128
msgid ""
"If the analyzer option ``suppress-dereferences-from-any-address-space`` is "
"set to true (the default value), then this checker never reports dereference "
"of pointers with a specified address space. If the option is set to false, "
"then reports from the specific x86 address spaces 256, 257 and 258 are still "
"suppressed, but fixed address dereferences from other address spaces are "
"reported."
msgstr ""

#: ../../../analyzer/checkers.rst:138
msgid "core.NonNullParamChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:139
msgid ""
"Check for null pointers passed as arguments to a function whose arguments "
"are references or marked with the 'nonnull' attribute."
msgstr ""

#: ../../../analyzer/checkers.rst:153
msgid "core.NullDereference (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:154
msgid "Check for dereferences of null pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:195
msgid ""
"Null pointer dereferences of pointers with address spaces are not always "
"defined as error. Specifically on x86/x86-64 target if the pointer address "
"space is 256 (x86 GS Segment), 257 (x86 FS Segment), or 258 (x86 SS "
"Segment), a null dereference is not defined as error. See `X86/X86-64 "
"Language Extensions <https://clang.llvm.org/docs/LanguageExtensions."
"html#memory-references-to-specified-segments>`__ for reference."
msgstr ""

#: ../../../analyzer/checkers.rst:202
msgid ""
"If the analyzer option ``suppress-dereferences-from-any-address-space`` is "
"set to true (the default value), then this checker never reports dereference "
"of pointers with a specified address space. If the option is set to false, "
"then reports from the specific x86 address spaces 256, 257 and 258 are still "
"suppressed, but null dereferences from other address spaces are reported."
msgstr ""

#: ../../../analyzer/checkers.rst:211
msgid "core.StackAddressEscape (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:212
msgid "Check that addresses to stack memory do not escape the function."
msgstr ""

#: ../../../analyzer/checkers.rst:237
msgid "core.UndefinedBinaryOperatorResult (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:238
msgid "Check for undefined results of binary operators."
msgstr ""

#: ../../../analyzer/checkers.rst:250
msgid "core.VLASize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:251
msgid ""
"Check for declarations of Variable Length Arrays (VLA) of undefined, zero or "
"negative size."
msgstr ""

#: ../../../analyzer/checkers.rst:267
msgid ""
"The checker also gives warning if the `TaintPropagation` checker is switched "
"on and an unbound, attacker controlled (tainted) value is used to define the "
"size of the VLA."
msgstr ""

#: ../../../analyzer/checkers.rst:291
msgid "core.uninitialized.ArraySubscript (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:292
msgid "Check for uninitialized values used as array subscripts."
msgstr ""

#: ../../../analyzer/checkers.rst:304
msgid "core.uninitialized.Assign (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:305
msgid "Check for assigning uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:317
msgid "core.uninitialized.Branch (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:318
msgid "Check for uninitialized values used as branch conditions."
msgstr ""

#: ../../../analyzer/checkers.rst:331
msgid "core.uninitialized.CapturedBlockVariable (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:332
msgid "Check for blocks that capture uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:344
msgid "core.uninitialized.UndefReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:345
msgid "Check for uninitialized values being returned to the caller."
msgstr ""

#: ../../../analyzer/checkers.rst:357
msgid "core.uninitialized.NewArraySize (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:359
msgid "Check if the element count in new[] is garbage or undefined."
msgstr ""

#: ../../../analyzer/checkers.rst:374
msgid "cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:376
msgid "C++ Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:381
msgid "cplusplus.ArrayDelete (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:383
msgid ""
"Reports destructions of arrays of polymorphic objects that are destructed as "
"their base class. If the dynamic type of the array is different from its "
"static type, calling `delete[]` is undefined."
msgstr ""

#: ../../../analyzer/checkers.rst:387
msgid ""
"This checker corresponds to the SEI CERT rule `EXP51-CPP: Do not delete an "
"array through a pointer of the incorrect type <https://wiki.sei.cmu.edu/"
"confluence/display/cplusplus/EXP51-CPP."
"+Do+not+delete+an+array+through+a+pointer+of+the+incorrect+type>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:407 ../../../analyzer/checkers.rst:773
#: ../../../analyzer/checkers.rst:1335 ../../../analyzer/checkers.rst:1896
#: ../../../analyzer/checkers.rst:2003 ../../../analyzer/checkers.rst:2211
#: ../../../analyzer/checkers.rst:2335
msgid "**Limitations**"
msgstr ""

#: ../../../analyzer/checkers.rst:409
msgid ""
"The checker does not emit note tags when casting to and from reference "
"types, even though the pointer values are tracked across references."
msgstr ""

#: ../../../analyzer/checkers.rst:426
msgid "cplusplus.InnerPointer (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:427
msgid "Check for inner pointers of C++ containers used after re/deallocation."
msgstr ""

#: ../../../analyzer/checkers.rst:429
msgid ""
"Many container methods in the C++ standard library are known to invalidate "
"\"references\" (including actual references, iterators and raw pointers) to "
"elements of the container. Using such references after they are invalidated "
"causes undefined behavior, which is a common source of memory errors in C++ "
"that this checker is capable of finding."
msgstr ""

#: ../../../analyzer/checkers.rst:435
msgid ""
"The checker is currently limited to ``std::string`` objects and doesn't "
"recognize some of the more sophisticated approaches to passing unowned "
"pointers around, such as ``std::string_view``."
msgstr ""

#: ../../../analyzer/checkers.rst:457
msgid "cplusplus.Move (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:458
msgid ""
"Find use-after-move bugs in C++. This includes method calls on moved-from "
"objects, assignment of a moved-from object, and repeated move of a moved-"
"from object."
msgstr ""

#: ../../../analyzer/checkers.rst:486
msgid ""
"The checker option ``WarnOn`` controls on what objects the use-after-move is "
"checked:"
msgstr ""

#: ../../../analyzer/checkers.rst:489
msgid ""
"The most strict value is ``KnownsOnly``, in this mode only objects are "
"checked whose type is known to be move-unsafe. These include most STL "
"objects (but excluding move-safe ones) and smart pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:492
msgid ""
"With option value ``KnownsAndLocals`` local variables (of any type) are "
"additionally checked. The idea behind this is that local variables are "
"usually not tempting to be re-used so an use after move is more likely a bug "
"than with member variables."
msgstr ""

#: ../../../analyzer/checkers.rst:496
msgid ""
"With option value ``All`` any use-after move condition is checked on all "
"kinds of variables, excluding global variables and known move-safe cases."
msgstr ""

#: ../../../analyzer/checkers.rst:499
msgid "Default value is ``KnownsAndLocals``."
msgstr ""

#: ../../../analyzer/checkers.rst:501
msgid ""
"Calls of methods named ``empty()`` or ``isEmpty()`` are allowed on moved-"
"from objects because these methods are considered as move-safe. Functions "
"called ``reset()``, ``destroy()``, ``clear()``, ``assign``, ``resize``,  "
"``shrink`` are treated as state-reset functions and are allowed on moved-"
"from objects, these make the object valid again. This applies to any type of "
"object (not only STL ones)."
msgstr ""

#: ../../../analyzer/checkers.rst:511
msgid "cplusplus.NewDelete (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:512
msgid ""
"Check for double-free and use-after-free problems. Traces memory managed by "
"new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:514 ../../../analyzer/checkers.rst:526
#: ../../../analyzer/checkers.rst:1363 ../../../analyzer/checkers.rst:2019
#: ../../../analyzer/checkers.rst:2031 ../../../analyzer/checkers.rst:2049
msgid ""
"Custom allocation/deallocation functions can be defined using :ref:"
"`ownership attributes<analyzer-ownership-attrs>`."
msgstr ""

#: ../../../analyzer/checkers.rst:523
msgid "cplusplus.NewDeleteLeaks (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:524
msgid "Check for memory leaks. Traces memory managed by new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:538
msgid "cplusplus.PlacementNew (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:539
msgid ""
"Check if default placement new is provided with pointers to sufficient "
"storage capacity."
msgstr ""

#: ../../../analyzer/checkers.rst:553
msgid "cplusplus.SelfAssignment (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:554
msgid "Checks C++ copy and move assignment operators for self assignment."
msgstr ""

#: ../../../analyzer/checkers.rst:559
msgid "cplusplus.StringChecker (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:560
msgid "Checks std::string operations."
msgstr ""

#: ../../../analyzer/checkers.rst:562
msgid ""
"Checks if the cstring pointer from which the ``std::string`` object is "
"constructed is ``NULL`` or not. If the checker cannot reason about the "
"nullness of the pointer it will assume that it was non-null to satisfy the "
"precondition of the constructor."
msgstr ""

#: ../../../analyzer/checkers.rst:567
msgid ""
"This checker is capable of checking the `SEI CERT C++ coding rule STR51-CPP. "
"Do not attempt to create a std::string from a null pointer <https://wiki.sei."
"cmu.edu/confluence/x/E3s-BQ>`__."
msgstr ""

#: ../../../analyzer/checkers.rst:584
msgid "cplusplus.PureVirtualCall (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:586 ../../../analyzer/checkers.rst:912
msgid ""
"When `virtual methods are called during construction and destruction "
"<https://en.cppreference.com/w/cpp/language/"
"virtual#During_construction_and_destruction>`__ the polymorphism is "
"restricted to the class that's being constructed or destructed because the "
"more derived contexts are either not yet initialized or already destructed."
msgstr ""

#: ../../../analyzer/checkers.rst:592
msgid ""
"This checker reports situations where this restricted polymorphism causes a "
"call to a pure virtual method, which is undefined behavior. (See also the "
"related checker :ref:`optin-cplusplus-VirtualCall` which reports situations "
"where the restricted polymorphism affects a call and the called method is "
"not pure virtual – but may be still surprising for the programmer.)"
msgstr ""

#: ../../../analyzer/checkers.rst:620
msgid "deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:622
msgid "Dead Code Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:627
msgid "deadcode.DeadStores (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:628
msgid "Check for values stored to variables that are never read afterwards."
msgstr ""

#: ../../../analyzer/checkers.rst:637
msgid ""
"The ``WarnForDeadNestedAssignments`` option enables the checker to emit "
"warnings for nested dead assignments. You can disable with the ``-analyzer-"
"config deadcode.DeadStores:WarnForDeadNestedAssignments=false``. *Defaults "
"to true*."
msgstr ""

#: ../../../analyzer/checkers.rst:642
msgid "Would warn for this e.g.: if ((y = make_int())) { }"
msgstr ""

#: ../../../analyzer/checkers.rst:649
msgid "nullability"
msgstr ""

#: ../../../analyzer/checkers.rst:651
msgid ""
"Checkers (mostly Objective C) that warn for null pointer passing and "
"dereferencing errors."
msgstr ""

#: ../../../analyzer/checkers.rst:656
msgid "nullability.NullPassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:657
msgid ""
"Warns when a null pointer is passed to a pointer which has a _Nonnull type."
msgstr ""

#: ../../../analyzer/checkers.rst:669
msgid "nullability.NullReturnedFromNonnull (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:670
msgid ""
"Warns when a null pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:684
msgid ""
"Warns when a null pointer is returned from a function annotated with "
"``__attribute__((returns_nonnull))``"
msgstr ""

#: ../../../analyzer/checkers.rst:703
msgid "nullability.NullableDereferenced (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:704
msgid "Warns when a nullable pointer is dereferenced."
msgstr ""

#: ../../../analyzer/checkers.rst:724
msgid "nullability.NullablePassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:725
msgid ""
"Warns when a nullable pointer is passed to a pointer which has a _Nonnull "
"type."
msgstr ""

#: ../../../analyzer/checkers.rst:741
msgid "nullability.NullableReturnedFromNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:742
msgid ""
"Warns when a nullable pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:747
msgid "optin"
msgstr ""

#: ../../../analyzer/checkers.rst:749
msgid ""
"Checkers for portability, performance, optional security and coding style "
"specific rules."
msgstr ""

#: ../../../analyzer/checkers.rst:754
msgid "optin.core.EnumCastOutOfRange (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:755
msgid ""
"Check for integer to enumeration casts that would produce a value with no "
"corresponding enumerator. This is not necessarily undefined behavior, but "
"can lead to nasty surprises, so projects may decide to use a coding standard "
"that disallows these \"unusual\" conversions."
msgstr ""

#: ../../../analyzer/checkers.rst:760
msgid ""
"Note that no warnings are produced when the enum type (e.g. `std::byte`) has "
"no enumerators at all."
msgstr ""

#: ../../../analyzer/checkers.rst:775
msgid ""
"This checker does not accept the coding pattern where an enum type is used "
"to store combinations of flag values. Such enums should be annotated with "
"the `__attribute__((flag_enum))` or by the `[[clang::flag_enum]]` attribute "
"to signal this intent. Refer to the `documentation <https://clang.llvm.org/"
"docs/AttributeReference.html#flag-enum>`_ of this Clang attribute."
msgstr ""

#: ../../../analyzer/checkers.rst:799
msgid "Projects that use this pattern should not enable this optin checker."
msgstr ""

#: ../../../analyzer/checkers.rst:804
msgid "optin.cplusplus.UninitializedObject (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:806
msgid ""
"This checker reports uninitialized fields in objects created after a "
"constructor call. It doesn't only find direct uninitialized fields, but "
"rather makes a deep inspection of the object, analyzing all of its fields' "
"subfields. The checker regards inherited fields as direct fields, so one "
"will receive warnings for uninitialized inherited data members as well."
msgstr ""

#: ../../../analyzer/checkers.rst:886
msgid "**Options**"
msgstr ""

#: ../../../analyzer/checkers.rst:888
msgid ""
"This checker has several options which can be set from command line (e.g. ``-"
"analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true``):"
msgstr ""

#: ../../../analyzer/checkers.rst:891
msgid ""
"``Pedantic`` (boolean). If to false, the checker won't emit warnings for "
"objects that don't have at least one initialized field. Defaults to false."
msgstr ""

#: ../../../analyzer/checkers.rst:894
msgid ""
"``NotesAsWarnings``  (boolean). If set to true, the checker will emit a "
"warning for each uninitialized field, as opposed to emitting one warning per "
"constructor call, and listing the uninitialized fields that belongs to it in "
"notes. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:899
msgid ""
"``CheckPointeeInitialization`` (boolean). If set to false, the checker will "
"not analyze the pointee of pointer/reference fields, and will only check "
"whether the object itself is initialized. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:903
msgid ""
"``IgnoreRecordsWithField`` (string). If supplied, the checker will not "
"analyze structures that have a field with a name or type name that matches  "
"the given pattern. *Defaults to \"\"*."
msgstr ""

#: ../../../analyzer/checkers.rst:910
msgid "optin.cplusplus.VirtualCall (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:918
msgid ""
"Although this behavior is well-defined, it can surprise the programmer and "
"cause unintended behavior, so this checker reports calls that appear to be "
"virtual calls but can be affected by this restricted polymorphism."
msgstr ""

#: ../../../analyzer/checkers.rst:922
msgid ""
"Note that situations where this restricted polymorphism causes a call to a "
"pure virtual method (which is definitely invalid, triggers undefined "
"behavior) are **reported by another checker:** :ref:`cplusplus-"
"PureVirtualCall` and **this checker does not report them**."
msgstr ""

#: ../../../analyzer/checkers.rst:950
msgid "optin.mpi.MPI-Checker (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:951
msgid "Checks MPI code."
msgstr ""

#: ../../../analyzer/checkers.rst:981
msgid "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:982
msgid "Check that NSLocalizedString macros include a comment for context."
msgstr ""

#: ../../../analyzer/checkers.rst:996
msgid "optin.osx.cocoa.localizability.NonLocalizedStringChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:997
msgid ""
"Warns about uses of non-localized NSStrings passed to UI methods expecting "
"localized NSStrings."
msgstr ""

#: ../../../analyzer/checkers.rst:1014
msgid "optin.performance.GCDAntipattern"
msgstr ""

#: ../../../analyzer/checkers.rst:1015
msgid "Check for performance anti-patterns when using Grand Central Dispatch."
msgstr ""

#: ../../../analyzer/checkers.rst:1020
msgid "optin.performance.Padding (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1021
msgid "Check for excessively padded structs."
msgstr ""

#: ../../../analyzer/checkers.rst:1023
msgid ""
"This checker detects structs with excessive padding, which can lead to "
"wasted memory thus decreased performance by reducing the effectiveness of "
"the processor cache. Padding bytes are added by compilers to align data "
"accesses as some processors require data to be aligned to certain "
"boundaries. On others, unaligned data access are possible, but impose "
"significantly larger latencies."
msgstr ""

#: ../../../analyzer/checkers.rst:1029
msgid ""
"To avoid padding bytes, the fields of a struct should be ordered by "
"decreasing by alignment. Usually, its easier to think of the ``sizeof`` of "
"the fields, and ordering the fields by ``sizeof`` would usually also lead to "
"the same optimal layout."
msgstr ""

#: ../../../analyzer/checkers.rst:1034
msgid ""
"In rare cases, one can use the ``#pragma pack(1)`` directive to enforce a "
"packed layout too, but it can significantly increase the access times, so "
"reordering the fields is usually a better solution."
msgstr ""

#: ../../../analyzer/checkers.rst:1091
msgid ""
"The ``AllowedPad`` option can be used to specify a threshold for the number "
"padding bytes raising the warning. If the number of padding bytes of the "
"struct and the optimal number of padding bytes differ by more than the "
"threshold value, a warning will be raised."
msgstr ""

#: ../../../analyzer/checkers.rst:1096
msgid "By default, the ``AllowedPad`` threshold is 24 bytes."
msgstr ""

#: ../../../analyzer/checkers.rst:1098
msgid ""
"To override this threshold to e.g. 4 bytes, use the ``-analyzer-config optin."
"performance.Padding:AllowedPad=4`` option."
msgstr ""

#: ../../../analyzer/checkers.rst:1105
msgid "optin.portability.UnixAPI"
msgstr ""

#: ../../../analyzer/checkers.rst:1106
msgid "Finds implementation-defined behavior in UNIX/Posix functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1110
msgid "optin.taint"
msgstr ""

#: ../../../analyzer/checkers.rst:1112
msgid ""
"Checkers implementing `taint analysis <https://en.wikipedia.org/wiki/"
"Taint_checking>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1118
msgid "optin.taint.GenericTaint (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1120
msgid ""
"Taint analysis identifies potential security vulnerabilities where the "
"attacker can inject malicious data to the program to execute an attack "
"(privilege escalation, command injection, SQL injection etc.)."
msgstr ""

#: ../../../analyzer/checkers.rst:1124
msgid ""
"The malicious data is injected at the taint source (e.g. ``getenv()`` call) "
"which is then propagated through function calls and being used as arguments "
"of sensitive operations, also called as taint sinks (e.g. ``system()`` call)."
msgstr ""

#: ../../../analyzer/checkers.rst:1128
msgid ""
"One can defend against this type of vulnerability by always checking and "
"sanitizing the potentially malicious, untrusted user input."
msgstr ""

#: ../../../analyzer/checkers.rst:1131
msgid ""
"The goal of the checker is to discover and show to the user these potential "
"taint source-sink pairs and the propagation call chain."
msgstr ""

#: ../../../analyzer/checkers.rst:1134
msgid "The most notable examples of taint sources are:"
msgstr ""

#: ../../../analyzer/checkers.rst:1136
msgid "data from network"
msgstr ""

#: ../../../analyzer/checkers.rst:1137
msgid "files or standard input"
msgstr ""

#: ../../../analyzer/checkers.rst:1138
msgid "environment variables"
msgstr ""

#: ../../../analyzer/checkers.rst:1139
msgid "data from databases"
msgstr ""

#: ../../../analyzer/checkers.rst:1141
msgid "Let us examine a practical example of a Command Injection attack."
msgstr ""

#: ../../../analyzer/checkers.rst:1155
msgid ""
"The program prints the content of any user specified file. Unfortunately the "
"attacker can execute arbitrary commands with shell escapes. For example with "
"the following input the `ls` command is also executed after the contents of "
"`/etc/shadow` is printed. `Input: /etc/shadow ; ls /`"
msgstr ""

#: ../../../analyzer/checkers.rst:1161
msgid "The analysis implemented in this checker points out this problem."
msgstr ""

#: ../../../analyzer/checkers.rst:1163
msgid ""
"One can protect against such attack by for example checking if the provided "
"input refers to a valid file and removing any invalid user input."
msgstr ""

#: ../../../analyzer/checkers.rst:1187
msgid ""
"Unfortunately, the checker cannot discover automatically that the programmer "
"have performed data sanitation, so it still emits the warning."
msgstr ""

#: ../../../analyzer/checkers.rst:1190
msgid ""
"One can get rid of this superfluous warning by telling by specifying the "
"sanitation functions in the taint configuration file (see :doc:`user-docs/"
"TaintAnalysisConfiguration`)."
msgstr ""

#: ../../../analyzer/checkers.rst:1200
msgid "The clang invocation to pass the configuration file location:"
msgstr ""

#: ../../../analyzer/checkers.rst:1206
msgid ""
"If you are validating your inputs instead of sanitizing them, or don't want "
"to mention each sanitizing function in our configuration, you can use a more "
"generic approach."
msgstr ""

#: ../../../analyzer/checkers.rst:1210
msgid ""
"Introduce a generic no-op `csa_mark_sanitized(..)` function to tell the "
"Clang Static Analyzer that the variable is safe to be used on that analysis "
"path."
msgstr ""

#: ../../../analyzer/checkers.rst:1240
msgid ""
"Similarly to the previous example, you need to define a `Filter` function in "
"a `YAML` configuration file and add the `csa_mark_sanitized` function."
msgstr ""

#: ../../../analyzer/checkers.rst:1250
msgid ""
"Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe "
"to be used after this point, because its contents are verified. It is the "
"responsibility of the programmer to ensure that this verification was indeed "
"correct. Please note that `csa_mark_sanitized` function is only declared and "
"used during Clang Static Analysis and skipped in (production) builds."
msgstr ""

#: ../../../analyzer/checkers.rst:1256
msgid "Further examples of injection vulnerabilities this checker can find."
msgstr ""

#: ../../../analyzer/checkers.rst:1275
msgid ""
"There are built-in sources, propagations and sinks even if no external taint "
"configuration is provided."
msgstr ""

#: ../../../analyzer/checkers.rst:1283
msgid "Default sources:"
msgstr ""

#: ../../../analyzer/checkers.rst:1279
msgid ""
"``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``, "
"``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``, "
"``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, "
"``getnameinfo``, ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, "
"``readlinkat``, ``scanf``, ``scanf_s``, ``socket``, ``wgetch``"
msgstr ""

#: ../../../analyzer/checkers.rst:1298
msgid "Default propagations rules:"
msgstr ""

#: ../../../analyzer/checkers.rst:1286
msgid ""
"``atoi``, ``atol``, ``atoll``, ``basename``, ``dirname``, ``fgetc``, "
"``fgetln``, ``fgets``, ``fnmatch``, ``fread``, ``fscanf``, ``fscanf_s``, "
"``index``, ``inflate``, ``isalnum``, ``isalpha``, ``isascii``, ``isblank``, "
"``iscntrl``, ``isdigit``, ``isgraph``, ``islower``, ``isprint``, "
"``ispunct``, ``isspace``, ``isupper``, ``isxdigit``, ``memchr``, "
"``memrchr``, ``sscanf``, ``getc``, ``getc_unlocked``, ``getdelim``, "
"``getline``, ``getw``, ``memcmp``, ``memcpy``, ``memmem``, ``memmove``, "
"``mbtowc``, ``pread``, ``qsort``, ``qsort_r``, ``rawmemchr``, ``read``, "
"``recv``, ``recvfrom``, ``rindex``, ``strcasestr``, ``strchr``, "
"``strchrnul``, ``strcasecmp``, ``strcmp``, ``strcspn``, ``strncasecmp``, "
"``strncmp``, ``strndup``, ``strndupa``, ``strpbrk``, ``strrchr``, "
"``strsep``, ``strspn``, ``strstr``, ``strtol``, ``strtoll``, ``strtoul``, "
"``strtoull``, ``tolower``, ``toupper``, ``ttyname``, ``ttyname_r``, "
"``wctomb``, ``wcwidth``"
msgstr ""

#: ../../../analyzer/checkers.rst:1302
msgid "Default sinks:"
msgstr ""

#: ../../../analyzer/checkers.rst:1301
msgid ""
"``printf``, ``setproctitle``, ``system``, ``popen``, ``execl``, ``execle``, "
"``execlp``, ``execv``, ``execvp``, ``execvP``, ``execve``, ``dlopen``"
msgstr ""

#: ../../../analyzer/checkers.rst:1304
msgid "Please note that there are no built-in filter functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1306
msgid ""
"One can configure their own taint sources, sinks, and propagation rules by "
"providing a configuration file via checker option ``optin.taint."
"TaintPropagation:Config``. The configuration file is in `YAML <http://llvm."
"org/docs/YamlIO.html#introduction-to-yaml>`_ format. The taint-related "
"options defined in the config file extend but do not override the built-in "
"sources, rules, sinks. The format of the external taint configuration file "
"is not stable, and could change without any notice even in a non-backward "
"compatible way."
msgstr ""

#: ../../../analyzer/checkers.rst:1315
msgid ""
"For a more detailed description of configuration options, please see the :"
"doc:`user-docs/TaintAnalysisConfiguration`. For an example see :ref:`clangsa-"
"taint-configuration-example`."
msgstr ""

#: ../../../analyzer/checkers.rst:1319
msgid "**Configuration**"
msgstr ""

#: ../../../analyzer/checkers.rst:1321
msgid ""
"`Config`  Specifies the name of the YAML configuration file. The user can "
"define their own taint sources and sinks."
msgstr ""

#: ../../../analyzer/checkers.rst:1324
msgid "**Related Guidelines**"
msgstr ""

#: ../../../analyzer/checkers.rst:1326
msgid ""
"`CWE Data Neutralization Issues <https://cwe.mitre.org/data/definitions/137."
"html>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:1328
msgid ""
"`SEI Cert STR02-C. Sanitize data passed to complex subsystems <https://wiki."
"sei.cmu.edu/confluence/display/c/STR02-C."
"+Sanitize+data+passed+to+complex+subsystems>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:1330
msgid ""
"`SEI Cert ENV33-C. Do not call system() <https://wiki.sei.cmu.edu/confluence/"
"pages/viewpage.action?pageId=87152177>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:1332
msgid ""
"`ENV03-C. Sanitize the environment when invoking external programs <https://"
"wiki.sei.cmu.edu/confluence/display/c/ENV03-C."
"+Sanitize+the+environment+when+invoking+external+programs>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:1337
msgid ""
"The taintedness property is not propagated through function calls which are "
"unknown (or too complex) to the analyzer, unless there is a specific "
"propagation rule built-in to the checker or given in the YAML configuration "
"file. This causes potential true positive findings to be lost."
msgstr ""

#: ../../../analyzer/checkers.rst:1346
msgid "optin.taint.TaintedAlloc (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1348
msgid ""
"This checker warns for cases when the ``size`` parameter of the ``malloc`` , "
"``calloc``, ``realloc``, ``alloca`` or the size parameter of the array new C+"
"+ operator is tainted (potentially attacker controlled). If an attacker can "
"inject a large value as the size parameter, memory exhaustion denial of "
"service attack can be carried out."
msgstr ""

#: ../../../analyzer/checkers.rst:1354
msgid ""
"The analyzer emits warning only if it cannot prove that the size parameter "
"is within reasonable bounds (``<= SIZE_MAX/4``). This functionality "
"partially covers the SEI Cert coding standard rule `INT04-C <https://wiki."
"sei.cmu.edu/confluence/display/c/INT04-C."
"+Enforce+limits+on+integer+values+originating+from+tainted+sources>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1359
msgid ""
"You can silence this warning either by bound checking the ``size`` "
"parameter, or by explicitly marking the ``size`` parameter as sanitized. See "
"the :ref:`optin-taint-GenericTaint` checker for an example."
msgstr ""

#: ../../../analyzer/checkers.rst:1394
msgid "optin.taint.TaintedDiv (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1395
msgid ""
"This checker warns when the denominator in a division operation is a tainted "
"(potentially attacker controlled) value. If the attacker can set the "
"denominator to 0, a runtime error can be triggered. The checker warns when "
"the denominator is a tainted value and the analyzer cannot prove that it is "
"not 0. This warning is more pessimistic than the :ref:`core-DivideZero` "
"checker which warns only when it can prove that the denominator is 0."
msgstr ""

#: ../../../analyzer/checkers.rst:1422
msgid "security"
msgstr ""

#: ../../../analyzer/checkers.rst:1424
msgid "Security related checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:1429
msgid "security.ArrayBound (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1430
msgid ""
"Report out of bounds access to memory that is before the start or after the "
"end of the accessed region (array, heap-allocated region, string literal "
"etc.). This usually means incorrect indexing, but the checker also detects "
"access via the operators ``*`` and ``->``."
msgstr ""

#: ../../../analyzer/checkers.rst:1449
msgid ""
"If checkers like :ref:`unix-Malloc` or :ref:`cplusplus-NewDelete` are "
"enabled to model the behavior of ``malloc()``, ``operator new`` and similar "
"allocators), then this checker can also reports out of bounds access to "
"dynamically allocated memory:"
msgstr ""

#: ../../../analyzer/checkers.rst:1462
msgid ""
"In uncertain situations (when the checker can neither prove nor disprove "
"that overflow occurs), the checker assumes that the the index (more "
"precisely, the memory offeset) is within bounds."
msgstr ""

#: ../../../analyzer/checkers.rst:1466
msgid ""
"However, if :ref:`optin-taint-GenericTaint` is enabled and the index/offset "
"is tainted (i.e. it is influenced by an untrusted source), then this checker "
"reports the potential out of bounds access:"
msgstr ""

#: ../../../analyzer/checkers.rst:1480
msgid ""
"This checker is an improved and renamed version of the checker that was "
"previously known as ``alpha.security.ArrayBoundV2``. The old checker ``alpha."
"security.ArrayBound`` was removed when the (previously \"experimental\") V2 "
"variant became stable enough for regular use."
msgstr ""

#: ../../../analyzer/checkers.rst:1488
msgid "security.cert.env.InvalidPtr"
msgstr ""

#: ../../../analyzer/checkers.rst:1490
msgid ""
"Corresponds to SEI CERT Rules `ENV31-C <https://wiki.sei.cmu.edu/confluence/"
"display/c/ENV31-C."
"+Do+not+rely+on+an+environment+pointer+following+an+operation+that+may+invalidate+it>`_ "
"and `ENV34-C <https://wiki.sei.cmu.edu/confluence/display/c/ENV34-C."
"+Do+not+store+pointers+returned+by+certain+functions>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1492
msgid ""
"**ENV31-C**: Rule is about the possible problem with ``main`` function's "
"third argument, environment pointer, \"envp\". When environment array is "
"modified using some modification function such as ``putenv``, ``setenv`` or "
"others, It may happen that memory is reallocated, however \"envp\" is not "
"updated to reflect the changes and points to old memory region."
msgstr ""

#: ../../../analyzer/checkers.rst:1499
msgid ""
"**ENV34-C**: Some functions return a pointer to a statically allocated "
"buffer. Consequently, subsequent call of these functions will invalidate "
"previous pointer. These functions include: ``getenv``, ``localeconv``, "
"``asctime``, ``setlocale``, ``strerror``"
msgstr ""

#: ../../../analyzer/checkers.rst:1534
msgid ""
"The ``InvalidatingGetEnv`` option is available for treating ``getenv`` calls "
"as invalidating. When enabled, the checker issues a warning if ``getenv`` is "
"called multiple times and their results are used without first creating a "
"copy. This level of strictness might be considered overly pedantic for the "
"commonly used ``getenv`` implementations."
msgstr ""

#: ../../../analyzer/checkers.rst:1540
msgid ""
"To enable this option, use: ``-analyzer-config security.cert.env.InvalidPtr:"
"InvalidatingGetEnv=true``."
msgstr ""

#: ../../../analyzer/checkers.rst:1543
msgid "By default, this option is set to *false*."
msgstr ""

#: ../../../analyzer/checkers.rst:1545
msgid ""
"When this option is enabled, warnings will be generated for scenarios like "
"the following:"
msgstr ""

#: ../../../analyzer/checkers.rst:1557
msgid "security.FloatLoopCounter (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1558
msgid ""
"Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-"
"CPP)."
msgstr ""

#: ../../../analyzer/checkers.rst:1569
msgid "security.insecureAPI.UncheckedReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1570
msgid "Warn on uses of functions whose return values must be always checked."
msgstr ""

#: ../../../analyzer/checkers.rst:1581
msgid "security.insecureAPI.bcmp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1582
msgid "Warn on uses of the 'bcmp' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1593
msgid "security.insecureAPI.bcopy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1594
msgid "Warn on uses of the 'bcopy' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1605
msgid "security.insecureAPI.bzero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1606
msgid "Warn on uses of the 'bzero' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1617
msgid "security.insecureAPI.getpw (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1618
msgid "Warn on uses of the 'getpw' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1630
msgid "security.insecureAPI.gets (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1631
msgid "Warn on uses of the 'gets' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1643
msgid "security.insecureAPI.mkstemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1644
msgid "Warn when 'mkstemp' is passed fewer than 6 X's in the format string."
msgstr ""

#: ../../../analyzer/checkers.rst:1655
msgid "security.insecureAPI.mktemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1656
msgid "Warn on uses of the ``mktemp`` function."
msgstr ""

#: ../../../analyzer/checkers.rst:1667
msgid "security.insecureAPI.rand (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1668
msgid ""
"Warn on uses of inferior random number generating functions (only if "
"arc4random function is available): ``drand48, erand48, jrand48, lcong48, "
"lrand48, mrand48, nrand48, random, rand_r``."
msgstr ""

#: ../../../analyzer/checkers.rst:1680
msgid "security.insecureAPI.strcpy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1681
msgid "Warn on uses of the ``strcpy`` and ``strcat`` functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1696
msgid "security.insecureAPI.vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1697
msgid "Warn on uses of the 'vfork' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1708
msgid "security.insecureAPI.DeprecatedOrUnsafeBufferHandling (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1709
msgid ""
"Warn on occurrences of unsafe or deprecated buffer handling functions, which "
"now have a secure variant: ``sprintf, fprintf, vsprintf, scanf, wscanf, "
"fscanf, fwscanf, vscanf, vwscanf, vfscanf, vfwscanf, sscanf, swscanf, "
"vsscanf, vswscanf, swprintf, snprintf, vswprintf, vsnprintf, memcpy, "
"memmove, strncpy, strncat, memset``"
msgstr ""

#: ../../../analyzer/checkers.rst:1721
msgid "security.MmapWriteExec (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1722
msgid "Warn on ``mmap()`` calls with both writable and executable access."
msgstr ""

#: ../../../analyzer/checkers.rst:1737
msgid "security.PointerSub (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1738
msgid ""
"Check for pointer subtractions on two pointers pointing to different memory "
"chunks. According to the C standard §6.5.6 only subtraction of pointers that "
"point into (or one past the end) the same array object is valid (for this "
"purpose non-array variables are like arrays of size 1). This checker only "
"searches for different memory objects at subtraction, but does not check if "
"the array index is correct. Furthermore, only cases are reported where stack-"
"allocated objects are involved (no warnings on pointers to memory allocated "
"by `malloc`)."
msgstr ""

#: ../../../analyzer/checkers.rst:1772
msgid ""
"There may be existing applications that use code like above for calculating "
"offsets of members in a structure, using pointer subtractions. This is still "
"undefined behavior according to the standard and code like this can be "
"replaced with the `offsetof` macro."
msgstr ""

#: ../../../analyzer/checkers.rst:1780
msgid "security.PutenvStackArray (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1781
msgid ""
"Finds calls to the ``putenv`` function which pass a pointer to a stack-"
"allocated (automatic) array as the argument. Function ``putenv`` does not "
"copy the passed string, only a pointer to the data is stored and this data "
"can be read even by other threads. Content of a stack-allocated array is "
"likely to be overwritten after exiting from the function."
msgstr ""

#: ../../../analyzer/checkers.rst:1787
msgid ""
"The problem can be solved by using a static array variable or dynamically "
"allocated memory. Even better is to avoid using ``putenv`` (it has other "
"problems related to memory leaks) and use ``setenv`` instead."
msgstr ""

#: ../../../analyzer/checkers.rst:1791
msgid ""
"The check corresponds to CERT rule `POS34-C. Do not call putenv() with a "
"pointer to an automatic variable as the argument <https://wiki.sei.cmu.edu/"
"confluence/display/c/POS34-C."
"+Do+not+call+putenv%28%29+with+a+pointer+to+an+automatic+variable+as+the+argument>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1802
msgid ""
"There is one case where the checker can report a false positive. This is "
"when the stack-allocated array is used at `putenv` in a function or code "
"branch that does not return (process is terminated on all execution paths)."
msgstr ""

#: ../../../analyzer/checkers.rst:1806
msgid ""
"Another special case is if the `putenv` is called from function `main`. Here "
"the stack is deallocated at the end of the program and it should be no "
"problem to use the stack-allocated string (a multi-threaded program may "
"require more attention). The checker does not warn for cases when stack "
"space of `main` is used at the `putenv` call."
msgstr ""

#: ../../../analyzer/checkers.rst:1813
msgid "security.SetgidSetuidOrder (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1814
msgid ""
"When dropping user-level and group-level privileges in a program by using "
"``setuid`` and ``setgid`` calls, it is important to reset the group-level "
"privileges (with ``setgid``) first. Function ``setgid`` will likely fail if "
"the superuser privileges are already dropped."
msgstr ""

#: ../../../analyzer/checkers.rst:1819
msgid ""
"The checker checks for sequences of ``setuid(getuid())`` and "
"``setgid(getgid())`` calls (in this order). If such a sequence is found and "
"there is no other privilege-changing function call (``seteuid``, "
"``setreuid``, ``setresuid`` and the GID versions of these) in between, a "
"warning is generated. The checker finds only exactly ``setuid(getuid())`` "
"calls (and the GID versions), not for example if the result of ``getuid()`` "
"is stored in a variable."
msgstr ""

#: ../../../analyzer/checkers.rst:1845
msgid ""
"In the code above the problem is that ``setuid(getuid())`` removes superuser "
"privileges before ``setgid(getgid())`` is called. To fix the problem the "
"``setgid(getgid())`` should be called first. Further attention is needed to "
"avoid code like ``setgid(getuid())`` (this checker does not detect bugs like "
"this) and always check the return value of these calls."
msgstr ""

#: ../../../analyzer/checkers.rst:1851
msgid ""
"This check corresponds to SEI CERT Rule `POS36-C <https://wiki.sei.cmu.edu/"
"confluence/display/c/POS36-C."
"+Observe+correct+revocation+order+while+relinquishing+privileges>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1856
msgid "unix"
msgstr ""

#: ../../../analyzer/checkers.rst:1857
msgid "POSIX/Unix checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:1862
msgid "unix.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1863
msgid ""
"Check calls to various UNIX/Posix functions: ``open, pthread_once, calloc, "
"malloc, realloc, alloca``."
msgstr ""

#: ../../../analyzer/checkers.rst:1871
msgid "unix.BlockInCriticalSection (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1872
msgid ""
"Check for calls to blocking functions inside a critical section. Blocking "
"functions detected by this checker: ``sleep, getc, fgets, read, recv``. "
"Critical section handling functions modeled by this checker: ``lock, unlock, "
"pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock, mtx_lock, "
"mtx_timedlock, mtx_trylock, mtx_unlock, lock_guard, unique_lock``."
msgstr ""

#: ../../../analyzer/checkers.rst:1898
msgid ""
"The ``trylock`` and ``timedlock`` versions of acquiring locks are currently "
"assumed to always succeed. This can lead to false positives."
msgstr ""

#: ../../../analyzer/checkers.rst:1915
msgid "unix.Chroot (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1916
msgid ""
"Check improper use of chroot described by SEI Cert C recommendation `POS05-"
"C. Limit access to files by creating a jail <https://wiki.sei.cmu.edu/"
"confluence/display/c/POS05-C.+Limit+access+to+files+by+creating+a+jail>`_. "
"The checker finds usage patterns where ``chdir(\"/\")`` is not called "
"immediately after a call to ``chroot(path)``."
msgstr ""

#: ../../../analyzer/checkers.rst:1946
msgid "unix.Errno (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1948
msgid ""
"Check for improper use of ``errno``. This checker implements partially CERT "
"rule `ERR30-C. Set errno to zero before calling a library function known to "
"set errno, and check errno only after the function returns a value "
"indicating failure <https://wiki.sei.cmu.edu/confluence/pages/viewpage."
"action?pageId=87152351>`_. The checker can find the first read of ``errno`` "
"after successful standard function calls."
msgstr ""

#: ../../../analyzer/checkers.rst:1956
msgid ""
"The C and POSIX standards often do not define if a standard library function "
"may change value of ``errno`` if the call does not fail. Therefore, "
"``errno`` should only be used if it is known from the return value of a "
"function that the call has failed. There are exceptions to this rule (for "
"example ``strtol``) but the affected functions are not yet supported by the "
"checker. The return values for the failure cases are documented in the "
"standard Linux man pages of the functions and in the `POSIX standard "
"<https://pubs.opengroup.org/onlinepubs/9699919799/>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1977
msgid ""
"The checker :ref:`unix-StdCLibraryFunctions` must be turned on to get the "
"warnings from this checker. The supported functions are the same as by :ref:"
"`unix-StdCLibraryFunctions`. The ``ModelPOSIX`` option of that checker "
"affects the set of checked functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1982 ../../../analyzer/checkers.rst:2223
msgid "**Parameters**"
msgstr ""

#: ../../../analyzer/checkers.rst:1984
msgid ""
"The ``AllowErrnoReadOutsideConditionExpressions`` option allows read of the "
"errno value if the value is not used in a condition (in ``if`` statements, "
"loops, conditional expressions, ``switch`` statements). For example "
"``errno`` can be stored into a variable without getting a warning by the "
"checker."
msgstr ""

#: ../../../analyzer/checkers.rst:2000
msgid ""
"Default value of this option is ``true``. This allows save of the errno "
"value for possible later error handling."
msgstr ""

#: ../../../analyzer/checkers.rst:2005
msgid ""
"Only the very first usage of ``errno`` is checked after an affected function "
"call. Value of ``errno`` is not followed when it is stored into a variable "
"or returned from a function."
msgstr ""

#: ../../../analyzer/checkers.rst:2008
msgid ""
"Documentation of function ``lseek`` is not clear about what happens if the "
"function returns different value than the expected file position but not -1. "
"To avoid possible false-positives ``errno`` is allowed to be used in this "
"case."
msgstr ""

#: ../../../analyzer/checkers.rst:2016
msgid "unix.Malloc (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2017
msgid ""
"Check for memory leaks, double free, and use-after-free problems. Traces "
"memory managed by malloc()/free()."
msgstr ""

#: ../../../analyzer/checkers.rst:2028
msgid "unix.MallocSizeof (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2029
msgid "Check for dubious ``malloc`` arguments involving ``sizeof``."
msgstr ""

#: ../../../analyzer/checkers.rst:2046
msgid "unix.MismatchedDeallocator (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2047
msgid "Check for mismatched deallocators."
msgstr ""

#: ../../../analyzer/checkers.rst:2058
msgid "unix.Vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2059
msgid "Check for proper usage of ``vfork``."
msgstr ""

#: ../../../analyzer/checkers.rst:2090
msgid "unix.cstring.BadSizeArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2091
msgid ""
"Check the size argument passed into C string functions for common erroneous "
"patterns. Use ``-Wno-strncat-size`` compiler option to mute other "
"``strncat``-related compiler warnings."
msgstr ""

#: ../../../analyzer/checkers.rst:2104
msgid "unix.cstring.NotNullTerminated (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2105
msgid ""
"Check for arguments which are not null-terminated strings; applies to the "
"``strlen``, ``strcpy``, ``strcat``, ``strcmp`` family of functions."
msgstr ""

#: ../../../analyzer/checkers.rst:2108
msgid ""
"Only very fundamental cases are detected where the passed memory block is "
"absolutely different from a null-terminated string. This checker does not "
"find if a memory buffer is passed where the terminating zero character is "
"missing."
msgstr ""

#: ../../../analyzer/checkers.rst:2127
msgid "unix.cstring.NullArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2128
msgid ""
"Check for null pointers being passed as arguments to C string functions: "
"``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, "
"strcasecmp, strncasecmp, wcslen, wcsnlen``."
msgstr ""

#: ../../../analyzer/checkers.rst:2140
msgid "unix.StdCLibraryFunctions (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2141
msgid ""
"Check for calls of standard library functions that violate predefined "
"argument constraints. For example, according to the C standard the behavior "
"of function ``int isalnum(int ch)`` is undefined if the value of ``ch`` is "
"not representable as ``unsigned char`` and is not equal to ``EOF``."
msgstr ""

#: ../../../analyzer/checkers.rst:2146
msgid ""
"You can think of this checker as defining restrictions (pre- and "
"postconditions) on standard library functions. Preconditions are checked, "
"and when they are violated, a warning is emitted. Postconditions are added "
"to the analysis, e.g. that the return value of a function is not greater "
"than 255. Preconditions are added to the analysis too, in the case when the "
"affected values are not known before the call."
msgstr ""

#: ../../../analyzer/checkers.rst:2153
msgid ""
"For example, if an argument to a function must be in between 0 and 255, but "
"the value of the argument is unknown, the analyzer will assume that it is in "
"this interval. Similarly, if a function mustn't be called with a null "
"pointer and the analyzer cannot prove that it is null, then it will assume "
"that it is non-null."
msgstr ""

#: ../../../analyzer/checkers.rst:2170
msgid ""
"These are the possible checks on the values passed as function arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:2159
msgid ""
"The argument has an allowed range (or multiple ranges) of values. The "
"checker can detect if a passed value is outside of the allowed range and "
"show the actual and allowed values."
msgstr ""

#: ../../../analyzer/checkers.rst:2162
msgid ""
"The argument has pointer type and is not allowed to be null pointer. Many "
"(but not all) standard functions can produce undefined behavior if a null "
"pointer is passed, these cases can be detected by the checker."
msgstr ""

#: ../../../analyzer/checkers.rst:2165
msgid ""
"The argument is a pointer to a memory block and the minimal size of this "
"buffer is determined by another argument to the function, or by "
"multiplication of two arguments (like at function ``fread``), or is a fixed "
"value (for example ``asctime_r`` requires at least a buffer of size 26). The "
"checker can detect if the buffer size is too small and in optimal case show "
"the size of the buffer and the values of the corresponding arguments."
msgstr ""

#: ../../../analyzer/checkers.rst:2204
msgid ""
"Additionally to the argument and return value conditions, this checker also "
"adds state of the value ``errno`` if applicable to the analysis. Many system "
"functions set the ``errno`` value only if an error occurs (together with a "
"specific return value of the function), otherwise it becomes undefined. This "
"checker changes the analysis state to contain such information. This data is "
"used by other checkers, for example :ref:`unix-Errno`."
msgstr ""

#: ../../../analyzer/checkers.rst:2213
msgid ""
"The checker can not always provide notes about the values of the arguments. "
"Without this information it is hard to confirm if the constraint is indeed "
"violated. The argument values are shown if they are known constants or the "
"value is determined by previous (not too complicated) assumptions."
msgstr ""

#: ../../../analyzer/checkers.rst:2218
msgid ""
"The checker can produce false positives in cases such as if the program has "
"invariants not known to the analyzer engine or the bug report path contains "
"calls to unknown functions. In these cases the analyzer fails to detect the "
"real range of the argument."
msgstr ""

#: ../../../analyzer/checkers.rst:2225
msgid ""
"The ``ModelPOSIX`` option controls if functions from the POSIX standard are "
"recognized by the checker."
msgstr ""

#: ../../../analyzer/checkers.rst:2228
msgid ""
"With ``ModelPOSIX=true``, many POSIX functions are modeled according to the "
"`POSIX standard`_. This includes ranges of parameters and possible return "
"values. Furthermore the behavior related to ``errno`` in the POSIX case is "
"often that ``errno`` is set only if a function call fails, and it becomes "
"undefined after a successful function call."
msgstr ""

#: ../../../analyzer/checkers.rst:2234
msgid ""
"With ``ModelPOSIX=false``, this checker follows the C99 language standard "
"and only models the functions that are described there. It is possible that "
"the same functions are modeled differently in the two cases because "
"differences in the standards. The C standard specifies less aspects of the "
"functions, for example exact ``errno`` behavior is often unspecified (and "
"not modeled by the checker)."
msgstr ""

#: ../../../analyzer/checkers.rst:2241
msgid "Default value of the option is ``true``."
msgstr ""

#: ../../../analyzer/checkers.rst:2246
msgid "unix.Stream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2247
msgid ""
"Check C stream handling functions: ``fopen, fdopen, freopen, tmpfile, "
"fclose, fread, fwrite, fgetc, fgets, fputc, fputs, fprintf, fscanf, ungetc, "
"getdelim, getline, fseek, fseeko, ftell, ftello, fflush, rewind, fgetpos, "
"fsetpos, clearerr, feof, ferror, fileno``."
msgstr ""

#: ../../../analyzer/checkers.rst:2250
msgid ""
"The checker maintains information about the C stream objects (``FILE *``) "
"and can detect error conditions related to use of streams. The following "
"conditions are detected:"
msgstr ""

#: ../../../analyzer/checkers.rst:2254
msgid ""
"The ``FILE *`` pointer passed to the function is NULL (the single exception "
"is ``fflush`` where NULL is allowed)."
msgstr ""

#: ../../../analyzer/checkers.rst:2256
msgid "Use of stream after close."
msgstr ""

#: ../../../analyzer/checkers.rst:2257
msgid "Opened stream is not closed."
msgstr ""

#: ../../../analyzer/checkers.rst:2258
msgid ""
"Read from a stream after end-of-file. (This is not a fatal error but "
"reported by the checker. Stream remains in EOF state and the read operation "
"fails.)"
msgstr ""

#: ../../../analyzer/checkers.rst:2260
msgid ""
"Use of stream when the file position is indeterminate after a previous "
"failed operation. Some functions (like ``ferror``, ``clearerr``, ``fseek``) "
"are allowed in this state."
msgstr ""

#: ../../../analyzer/checkers.rst:2263
msgid "Invalid 3rd (\"``whence``\") argument to ``fseek``."
msgstr ""

#: ../../../analyzer/checkers.rst:2265
msgid ""
"The stream operations are by this checker usually split into two cases, a "
"success and a failure case. On the success case it also assumes that the "
"current value of ``stdout``, ``stderr``, or ``stdin`` can't be equal to the "
"file pointer returned by ``fopen``. Operations performed on ``stdout``, "
"``stderr``, or ``stdin`` are not checked by this checker in contrast to the "
"streams opened by ``fopen``."
msgstr ""

#: ../../../analyzer/checkers.rst:2272
msgid ""
"In the case of write operations (like ``fwrite``, ``fprintf`` and even "
"``fsetpos``) this behavior could produce a large amount of unwanted reports "
"on projects that don't have error checks around the write operations, so by "
"default the checker assumes that write operations always succeed. This "
"behavior can be controlled by the ``Pedantic`` flag: With ``-analyzer-config "
"unix.Stream:Pedantic=true`` the checker will model the cases where a write "
"operation fails and report situations where this leads to erroneous "
"behavior. (The default is ``Pedantic=false``, where write operations are "
"assumed to succeed.)"
msgstr ""

#: ../../../analyzer/checkers.rst:2337
msgid ""
"The checker does not track the correspondence between integer file "
"descriptors and ``FILE *`` pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:2343
msgid "osx"
msgstr ""

#: ../../../analyzer/checkers.rst:2344
msgid "macOS checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:2349
msgid "osx.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2350
msgid "Check for proper uses of various Apple APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:2362
msgid "osx.NumberObjectConversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2363
msgid ""
"Check for erroneous conversions of objects representing numbers into numbers."
msgstr ""

#: ../../../analyzer/checkers.rst:2377
msgid "osx.ObjCProperty (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2378
msgid "Check for proper uses of Objective-C properties."
msgstr ""

#: ../../../analyzer/checkers.rst:2393
msgid "osx.SecKeychainAPI (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2394
msgid "Check for proper uses of Secure Keychain APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:2402
msgid "osx.cocoa.AtSync (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2403
msgid "Check for nil pointers used as mutexes for @synchronized."
msgstr ""

#: ../../../analyzer/checkers.rst:2420
msgid "osx.cocoa.AutoreleaseWrite"
msgstr ""

#: ../../../analyzer/checkers.rst:2421
msgid ""
"Warn about potentially crashing writes to autoreleasing objects from "
"different autoreleasing pools in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:2426
msgid "osx.cocoa.ClassRelease (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2427
msgid ""
"Check for sending 'retain', 'release', or 'autorelease' directly to a Class."
msgstr ""

#: ../../../analyzer/checkers.rst:2441
msgid "osx.cocoa.Dealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2442
msgid ""
"Warn about Objective-C classes that lack a correct implementation of -dealloc"
msgstr ""

#: ../../../analyzer/checkers.rst:2450
msgid "osx.cocoa.IncompatibleMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2451
msgid "Warn about Objective-C method signatures with type incompatibilities."
msgstr ""

#: ../../../analyzer/checkers.rst:2474
msgid "osx.cocoa.Loops"
msgstr ""

#: ../../../analyzer/checkers.rst:2475
msgid "Improved modeling of loops using Cocoa collection types."
msgstr ""

#: ../../../analyzer/checkers.rst:2480
msgid "osx.cocoa.MissingSuperCall (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2481
msgid "Warn about Objective-C methods that lack a necessary call to super."
msgstr ""

#: ../../../analyzer/checkers.rst:2495
msgid "osx.cocoa.NSAutoreleasePool (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2496
msgid "Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode."
msgstr ""

#: ../../../analyzer/checkers.rst:2508
msgid "osx.cocoa.NSError (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2509
msgid "Check usage of NSError parameters."
msgstr ""

#: ../../../analyzer/checkers.rst:2538
msgid "osx.cocoa.NilArg (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2539
msgid "Check for prohibited nil arguments to ObjC method calls."
msgstr ""

#: ../../../analyzer/checkers.rst:2541
msgid "caseInsensitiveCompare:"
msgstr ""

#: ../../../analyzer/checkers.rst:2542
msgid "compare:"
msgstr ""

#: ../../../analyzer/checkers.rst:2543
msgid "compare:options:"
msgstr ""

#: ../../../analyzer/checkers.rst:2544
msgid "compare:options:range:"
msgstr ""

#: ../../../analyzer/checkers.rst:2545
msgid "compare:options:range:locale:"
msgstr ""

#: ../../../analyzer/checkers.rst:2546
msgid "componentsSeparatedByCharactersInSet:"
msgstr ""

#: ../../../analyzer/checkers.rst:2547
msgid "initWithFormat:"
msgstr ""

#: ../../../analyzer/checkers.rst:2562
msgid "osx.cocoa.NonNilReturnValue"
msgstr ""

#: ../../../analyzer/checkers.rst:2563
msgid "Models the APIs that are guaranteed to return a non-nil value."
msgstr ""

#: ../../../analyzer/checkers.rst:2568
msgid "osx.cocoa.ObjCGenerics (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2569
msgid "Check for type errors when using Objective-C generics."
msgstr ""

#: ../../../analyzer/checkers.rst:2583
msgid "osx.cocoa.RetainCount (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2584
msgid "Check for leaks and improper reference count management"
msgstr ""

#: ../../../analyzer/checkers.rst:2601
msgid "osx.cocoa.RunLoopAutoreleaseLeak"
msgstr ""

#: ../../../analyzer/checkers.rst:2602
msgid ""
"Check for leaked memory in autorelease pools that will never be drained."
msgstr ""

#: ../../../analyzer/checkers.rst:2607
msgid "osx.cocoa.SelfInit (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2608
msgid "Check that 'self' is properly initialized inside an initializer method."
msgstr ""

#: ../../../analyzer/checkers.rst:2641
msgid "osx.cocoa.SuperDealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2642
msgid "Warn about improper use of '[super dealloc]' in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:2661
msgid "osx.cocoa.UnusedIvars (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2662
msgid "Warn about private ivars that are never used."
msgstr ""

#: ../../../analyzer/checkers.rst:2678
msgid "osx.cocoa.VariadicMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2679
msgid ""
"Check for passing non-Objective-C types to variadic collection "
"initialization methods that expect only Objective-C types."
msgstr ""

#: ../../../analyzer/checkers.rst:2692
msgid "osx.coreFoundation.CFError (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2693
msgid "Check usage of CFErrorRef* parameters"
msgstr ""

#: ../../../analyzer/checkers.rst:2710
msgid "osx.coreFoundation.CFNumber (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2711
msgid "Check for proper uses of CFNumber APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:2723
msgid "osx.coreFoundation.CFRetainRelease (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2724
msgid "Check for null arguments to CFRetain/CFRelease/CFMakeCollectable."
msgstr ""

#: ../../../analyzer/checkers.rst:2743
msgid "osx.coreFoundation.containers.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2744
msgid "Checks for index out-of-bounds when using 'CFArray' API."
msgstr ""

#: ../../../analyzer/checkers.rst:2756
msgid "osx.coreFoundation.containers.PointerSizedValues (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2757
msgid ""
"Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-"
"size values."
msgstr ""

#: ../../../analyzer/checkers.rst:2768
msgid "Fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:2770
msgid ""
"Fuchsia is an open source capability-based operating system currently being "
"developed by Google. This section describes checkers that can find various "
"misuses of Fuchsia APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:2777
msgid "fuchsia.HandleChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:2778
msgid ""
"Handles identify resources. Similar to pointers they can be leaked, double "
"freed, or use after freed. This check attempts to find such problems."
msgstr ""

#: ../../../analyzer/checkers.rst:2793
msgid "WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:2795
msgid ""
"WebKit is an open-source web browser engine available for macOS, iOS and "
"Linux. This section describes checkers that can find issues in WebKit "
"codebase."
msgstr ""

#: ../../../analyzer/checkers.rst:2798
msgid ""
"Most of the checkers focus on memory management for which WebKit uses custom "
"implementation of reference counted smartpointers."
msgstr ""

#: ../../../analyzer/checkers.rst:2803
msgid "Checkers are formulated in terms related to ref-counting:"
msgstr ""

#: ../../../analyzer/checkers.rst:2801
msgid "*Ref-counted type* is either ``Ref<T>`` or ``RefPtr<T>``."
msgstr ""

#: ../../../analyzer/checkers.rst:2802
msgid ""
"*Ref-countable type* is any type that implements ``ref()`` and ``deref()`` "
"methods as ``RefPtr<>`` is a template (i. e. relies on duck typing)."
msgstr ""

#: ../../../analyzer/checkers.rst:2803
msgid "*Uncounted type* is ref-countable but not ref-counted type."
msgstr ""

#: ../../../analyzer/checkers.rst:2808
msgid "webkit.RefCntblBaseVirtualDtor"
msgstr ""

#: ../../../analyzer/checkers.rst:2809
msgid ""
"All uncounted types used as base classes must have a virtual destructor."
msgstr ""

#: ../../../analyzer/checkers.rst:2811
msgid ""
"Ref-counted types hold their ref-countable data by a raw pointer and allow "
"implicit upcasting from ref-counted pointer to derived type to ref-counted "
"pointer to base type. This might lead to an object of (dynamic) derived type "
"being deleted via pointer to the base class type which C++ standard defines "
"as UB in case the base class doesn't have virtual destructor ``[expr."
"delete]``."
msgstr ""

#: ../../../analyzer/checkers.rst:2825
msgid "webkit.NoUncountedMemberChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:2826
msgid ""
"Raw pointers and references to uncounted types can't be used as class "
"members. Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:2844
msgid "webkit.UncountedLambdaCapturesChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:2845
msgid ""
"Raw pointers and references to uncounted types can't be captured in lambdas. "
"Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:2863
msgid "Experimental Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:2865
msgid ""
"*These are checkers with known issues or limitations that keep them from "
"being on by default. They are likely to have false positives. Bug reports "
"and especially patches are welcome.*"
msgstr ""

#: ../../../analyzer/checkers.rst:2868
msgid "alpha.clone"
msgstr ""

#: ../../../analyzer/checkers.rst:2873
msgid "alpha.clone.CloneChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2874
msgid "Reports similar pieces of code."
msgstr ""

#: ../../../analyzer/checkers.rst:2895
msgid "alpha.core"
msgstr ""

#: ../../../analyzer/checkers.rst:2900
msgid "alpha.core.BoolAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2901
msgid "Warn about assigning non-{0,1} values to boolean variables."
msgstr ""

#: ../../../analyzer/checkers.rst:2912
msgid "alpha.core.C11Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:2913
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of ``mtx_t`` mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:2929
msgid "alpha.core.CastSize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2930
msgid ""
"Check when casting a malloc'ed type ``T``, whether the size is a multiple of "
"the size of ``T``."
msgstr ""

#: ../../../analyzer/checkers.rst:2941
msgid "alpha.core.CastToStruct (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2942
msgid "Check for cast from non-struct pointer to struct pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:2963
msgid "alpha.core.Conversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2964
msgid "Loss of sign/precision in implicit conversions."
msgstr ""

#: ../../../analyzer/checkers.rst:2987
msgid "alpha.core.DynamicTypeChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2988
msgid ""
"Check for cases where the dynamic and the static type of an object are "
"unrelated."
msgstr ""

#: ../../../analyzer/checkers.rst:3003
msgid "alpha.core.FixedAddr (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3004
msgid "Check for assignment of a fixed address to a pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:3016
msgid "alpha.core.PointerArithm (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3017
msgid "Check for pointer arithmetic on locations other than array elements."
msgstr ""

#: ../../../analyzer/checkers.rst:3030
msgid "alpha.core.StackAddressAsyncEscape (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3031
msgid ""
"Check that addresses to stack memory do not escape the function that "
"involves dispatch_after or dispatch_async. This checker is a part of ``core."
"StackAddressEscape``, but is temporarily disabled until some false positives "
"are fixed."
msgstr ""

#: ../../../analyzer/checkers.rst:3054
msgid "alpha.core.StdVariant (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3055
msgid ""
"Check if a value of active type is retrieved from an ``std::variant`` "
"instance with ``std::get``. In case of bad variant type access (the accessed "
"type differs from the active type) a warning is emitted. Currently, this "
"checker does not take exception handling into account."
msgstr ""

#: ../../../analyzer/checkers.rst:3069
msgid "alpha.core.TestAfterDivZero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3070
msgid ""
"Check for division by variable that is later compared against 0. Either the "
"comparison is useless or there is division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:3081
msgid "alpha.cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:3086
msgid "alpha.cplusplus.DeleteWithNonVirtualDtor (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3087
msgid ""
"Reports destructions of polymorphic objects with a non-virtual destructor in "
"their base class."
msgstr ""

#: ../../../analyzer/checkers.rst:3109
msgid "alpha.cplusplus.InvalidatedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3110
msgid "Check for use of invalidated iterators."
msgstr ""

#: ../../../analyzer/checkers.rst:3125
msgid "alpha.cplusplus.IteratorRange (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3126
msgid "Check for iterators used outside their valid ranges."
msgstr ""

#: ../../../analyzer/checkers.rst:3138
msgid "alpha.cplusplus.MismatchedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3139
msgid ""
"Check for use of iterators of different containers where iterators of the "
"same container are expected."
msgstr ""

#: ../../../analyzer/checkers.rst:3162
msgid "alpha.cplusplus.SmartPtr (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3163
msgid "Check for dereference of null smart pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:3174
msgid "alpha.deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:3178
msgid "alpha.deadcode.UnreachableCode (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3179
msgid "Check unreachable code."
msgstr ""

#: ../../../analyzer/checkers.rst:3208
msgid "alpha.fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:3213
msgid "alpha.fuchsia.Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:3214
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of fuchsia mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:3228
msgid "alpha.llvm"
msgstr ""

#: ../../../analyzer/checkers.rst:3233
msgid "alpha.llvm.Conventions"
msgstr ""

#: ../../../analyzer/checkers.rst:3235
msgid "Check code for LLVM codebase conventions:"
msgstr ""

#: ../../../analyzer/checkers.rst:3237
msgid ""
"A StringRef should not be bound to a temporary std::string whose lifetime is "
"shorter than the StringRef's."
msgstr ""

#: ../../../analyzer/checkers.rst:3238
msgid "Clang AST nodes should not have fields that can allocate memory."
msgstr ""

#: ../../../analyzer/checkers.rst:3242
msgid "alpha.osx"
msgstr ""

#: ../../../analyzer/checkers.rst:3247
msgid "alpha.osx.cocoa.DirectIvarAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3248
msgid "Check for direct assignments to instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:3267
msgid "alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3268
msgid ""
"Check for direct assignments to instance variables in the methods annotated "
"with ``objc_no_direct_instance_variable_assignment``."
msgstr ""

#: ../../../analyzer/checkers.rst:3293
msgid "alpha.osx.cocoa.InstanceVariableInvalidation (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3294
msgid ""
"Check that the invalidatable instance variables are invalidated in the "
"methods annotated with objc_instance_variable_invalidator."
msgstr ""

#: ../../../analyzer/checkers.rst:3321
msgid "alpha.osx.cocoa.MissingInvalidationMethod (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3322
msgid ""
"Check that the invalidation methods are present in classes that contain "
"invalidatable instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:3345
msgid "alpha.osx.cocoa.localizability.PluralMisuseChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:3346
msgid ""
"Warns against using one vs. many plural pattern in code when generating "
"localized strings."
msgstr ""

#: ../../../analyzer/checkers.rst:3367
msgid "alpha.security"
msgstr ""

#: ../../../analyzer/checkers.rst:3372
msgid "alpha.security.ReturnPtrRange (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3373
msgid "Check for an out-of-bound pointer being returned to callers."
msgstr ""

#: ../../../analyzer/checkers.rst:3391
msgid "alpha.security.cert"
msgstr ""

#: ../../../analyzer/checkers.rst:3393
msgid ""
"SEI CERT checkers which tries to find errors based on their `C coding rules "
"<https://wiki.sei.cmu.edu/confluence/display/c/2+Rules>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:3396
msgid "alpha.unix"
msgstr ""

#: ../../../analyzer/checkers.rst:3401
msgid "alpha.unix.PthreadLock (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3402
msgid ""
"Simple lock -> unlock checker. Applies to: ``pthread_mutex_lock, "
"pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, "
"lck_rw_lock_exclusive`` ``lck_rw_lock_shared, pthread_mutex_trylock, "
"pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock, "
"lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, "
"pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``."
msgstr ""

#: ../../../analyzer/checkers.rst:3441
msgid "alpha.unix.SimpleStream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3442
msgid ""
"Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, "
"fclose`` (demo checker, the subject of the demo (`Slides <https://llvm.org/"
"devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ , `Video <https://youtu.be/"
"kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the `2012 LLVM "
"Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_)."
msgstr ""

#: ../../../analyzer/checkers.rst:3465
msgid "alpha.unix.cstring.BufferOverlap (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3466
msgid ""
"Checks for overlap in two buffer arguments. Applies to:  ``memcpy, mempcpy, "
"wmemcpy, wmempcpy``."
msgstr ""

#: ../../../analyzer/checkers.rst:3478
msgid "alpha.unix.cstring.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3479
msgid ""
"Check for out-of-bounds access in string functions, such as: ``memcpy, "
"bcopy, strcpy, strncpy, strcat, strncat, memmove, memcmp, memset`` and more."
msgstr ""

#: ../../../analyzer/checkers.rst:3482
msgid ""
"This check also works with string literals, except there is a known bug in "
"that the analyzer cannot detect embedded NULL characters when determining "
"the string length."
msgstr ""

#: ../../../analyzer/checkers.rst:3502
msgid "alpha.unix.cstring.UninitializedRead (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3504
msgid ""
"Check for uninitialized reads from common memory copy/manipulation functions "
"such as:"
msgstr ""

#: ../../../analyzer/checkers.rst:3504
msgid ""
"``memcpy, mempcpy, memmove, memcmp, strcmp, strncmp, strcpy, strlen, "
"strsep`` and many more."
msgstr ""

#: ../../../analyzer/checkers.rst:3514
msgid "Limitations:"
msgstr ""

#: ../../../analyzer/checkers.rst:3516
msgid ""
"Due to limitations of the memory modeling in the analyzer, one can likely "
"observe a lot of false-positive reports like this:"
msgstr ""

#: ../../../analyzer/checkers.rst:3530
msgid ""
"More details at the corresponding `GitHub issue <https://github.com/llvm/"
"llvm-project/issues/43459>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:3533
msgid "alpha.WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:3536
msgid "alpha.webkit.ForwardDeclChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3537
msgid ""
"Check for local variables, member variables, and function arguments that are "
"forward declared."
msgstr ""

#: ../../../analyzer/checkers.rst:3556
msgid "alpha.webkit.MemoryUnsafeCastChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3557
msgid ""
"Check for all casts from a base type to its derived type as these might be "
"memory-unsafe."
msgstr ""

#: ../../../analyzer/checkers.rst:3559
msgid "Example:"
msgstr ""

#: ../../../analyzer/checkers.rst:3570
msgid ""
"For all cast operations (C-style casts, static_cast, reinterpret_cast, "
"dynamic_cast), if the source type a `Base*` and the destination type is "
"`Derived*`, where `Derived` inherits from `Base`, the static analyzer should "
"signal an error."
msgstr ""

#: ../../../analyzer/checkers.rst:3572
msgid "This applies to:"
msgstr ""

#: ../../../analyzer/checkers.rst:3574
msgid ""
"C structs, C++ structs and classes, and Objective-C classes and protocols."
msgstr ""

#: ../../../analyzer/checkers.rst:3575
msgid "Pointers and references."
msgstr ""

#: ../../../analyzer/checkers.rst:3576
msgid ""
"Inside template instantiations and macro expansions that are visible to the "
"compiler."
msgstr ""

#: ../../../analyzer/checkers.rst:3578
msgid ""
"For types like this, instead of using built in casts, the programmer will "
"use helper functions that internally perform the appropriate type check and "
"disable static analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:3581
msgid "alpha.webkit.NoUncheckedPtrMemberChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3582
msgid ""
"Raw pointers and references to an object which supports CheckedPtr or "
"CheckedRef can't be used as class members. Only CheckedPtr, CheckedRef, "
"RefPtr, or Ref are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:3597 ../../../analyzer/checkers.rst:3610
msgid ""
"See `WebKit Guidelines for Safer C++ Programming <https://github.com/WebKit/"
"WebKit/wiki/Safer-CPP-Guidelines>`_ for details."
msgstr ""

#: ../../../analyzer/checkers.rst:3600
msgid "alpha.webkit.NoUnretainedMemberChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3601
msgid ""
"Raw pointers and references to a NS or CF object can't be used as class "
"members or ivars. Only RetainPtr is allowed for CF types regardless of "
"whether ARC is enabled or disabled. Only RetainPtr is allowed for NS types "
"when ARC is disabled."
msgstr ""

#: ../../../analyzer/checkers.rst:3613
msgid "alpha.webkit.UnretainedLambdaCapturesChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3614
msgid ""
"Raw pointers and references to NS or CF types can't be captured in lambdas. "
"Only RetainPtr is allowed for CF types regardless of whether ARC is enabled "
"or disabled, and only RetainPtr is allowed for NS types when ARC is disabled."
msgstr ""

#: ../../../analyzer/checkers.rst:3627
msgid "alpha.webkit.UncountedCallArgsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3628
msgid ""
"The goal of this rule is to make sure that lifetime of any dynamically "
"allocated ref-countable object passed as a call argument spans past the end "
"of the call. This applies to call to any function, method, lambda, function "
"pointer or functor. Ref-countable types aren't supposed to be allocated on "
"stack so we check arguments for parameters of raw pointers and references to "
"uncounted types."
msgstr ""

#: ../../../analyzer/checkers.rst:3630
msgid ""
"Here are some examples of situations that we warn about as they *might* be "
"potentially unsafe. The logic is that either we're able to guarantee that an "
"argument is safe or it's considered if not a bug then bug-prone."
msgstr ""

#: ../../../analyzer/checkers.rst:3648
msgid ""
"Although we are enforcing member variables to be ref-counted by `webkit."
"NoUncountedMemberChecker` any method of the same class still has "
"unrestricted access to these. Since from a caller's perspective we can't "
"guarantee a particular member won't get modified by callee (directly or "
"indirectly) we don't consider values obtained from members safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3650
msgid ""
"Note: It's likely this heuristic could be made more precise with fewer false "
"positives - for example calls to free functions that don't have any "
"parameter other than the pointer should be safe as the callee won't be able "
"to tamper with the member unless it's a global variable."
msgstr ""

#: ../../../analyzer/checkers.rst:3662
msgid ""
"The implementation of this rule is a heuristic - we define a whitelist of "
"kinds of values that are considered safe to be passed as arguments. If we "
"can't prove an argument is safe it's considered an error."
msgstr ""

#: ../../../analyzer/checkers.rst:3664
msgid "Allowed kinds of arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:3666
msgid ""
"values obtained from ref-counted objects (including temporaries as those "
"survive the call too)"
msgstr ""

#: ../../../analyzer/checkers.rst:3679
msgid "forwarding uncounted arguments from caller to callee"
msgstr ""

#: ../../../analyzer/checkers.rst:3687
msgid "Caller of ``foo()`` is responsible for  ``a``'s lifetime."
msgstr ""

#: ../../../analyzer/checkers.rst:3689
msgid "``this`` pointer"
msgstr ""

#: ../../../analyzer/checkers.rst:3697
msgid ""
"Caller of ``foo()`` is responsible for keeping the memory pointed to by "
"``this`` pointer safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3699
msgid "constants"
msgstr ""

#: ../../../analyzer/checkers.rst:3705
msgid ""
"We also define a set of safe transformations which if passed a safe value as "
"an input provide (usually it's the return value) a safe value (or an object "
"that provides safe values). This is also a heuristic."
msgstr ""

#: ../../../analyzer/checkers.rst:3707
msgid "constructors of ref-counted types (including factory methods)"
msgstr ""

#: ../../../analyzer/checkers.rst:3708
msgid "getters of ref-counted types"
msgstr ""

#: ../../../analyzer/checkers.rst:3709
msgid "member overloaded operators"
msgstr ""

#: ../../../analyzer/checkers.rst:3710
msgid "casts"
msgstr ""

#: ../../../analyzer/checkers.rst:3711
msgid "unary operators like ``&`` or ``*``"
msgstr ""

#: ../../../analyzer/checkers.rst:3714
msgid "alpha.webkit.UncheckedCallArgsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3715
msgid ""
"The goal of this rule is to make sure that lifetime of any dynamically "
"allocated CheckedPtr capable object passed as a call argument keeps its "
"memory region past the end of the call. This applies to call to any "
"function, method, lambda, function pointer or functor. CheckedPtr capable "
"objects aren't supposed to be allocated on stack so we check arguments for "
"parameters of raw pointers and references to unchecked types."
msgstr ""

#: ../../../analyzer/checkers.rst:3717
msgid ""
"The rules of when to use and not to use CheckedPtr / CheckedRef are same as "
"alpha.webkit.UncountedCallArgsChecker for ref-counted objects."
msgstr ""

#: ../../../analyzer/checkers.rst:3720
msgid "alpha.webkit.UnretainedCallArgsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3721
msgid ""
"The goal of this rule is to make sure that lifetime of any dynamically "
"allocated NS or CF objects passed as a call argument keeps its memory region "
"past the end of the call. This applies to call to any function, method, "
"lambda, function pointer or functor. NS or CF objects aren't supposed to be "
"allocated on stack so we check arguments for parameters of raw pointers and "
"references to unretained types."
msgstr ""

#: ../../../analyzer/checkers.rst:3723 ../../../analyzer/checkers.rst:3815
msgid ""
"The rules of when to use and not to use RetainPtr are same as alpha.webkit."
"UncountedCallArgsChecker for ref-counted objects."
msgstr ""

#: ../../../analyzer/checkers.rst:3726
msgid "alpha.webkit.UncountedLocalVarsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3727
msgid ""
"The goal of this rule is to make sure that any uncounted local variable is "
"backed by a ref-counted object with lifetime that is strictly larger than "
"the scope of the uncounted local variable. To be on the safe side we require "
"the scope of an uncounted variable to be embedded in the scope of ref-"
"counted object that backs it."
msgstr ""

#: ../../../analyzer/checkers.rst:3729 ../../../analyzer/checkers.rst:3772
#: ../../../analyzer/checkers.rst:3817
msgid "These are examples of cases that we consider safe:"
msgstr ""

#: ../../../analyzer/checkers.rst:3749 ../../../analyzer/checkers.rst:3792
#: ../../../analyzer/checkers.rst:3837
msgid ""
"Here are some examples of situations that we warn about as they *might* be "
"potentially unsafe. The logic is that either we're able to guarantee that a "
"local variable is safe or it's considered unsafe."
msgstr ""

#: ../../../analyzer/checkers.rst:3769
msgid "alpha.webkit.UncheckedLocalVarsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3770
msgid ""
"The goal of this rule is to make sure that any unchecked local variable is "
"backed by a CheckedPtr or CheckedRef with lifetime that is strictly larger "
"than the scope of the unchecked local variable. To be on the safe side we "
"require the scope of an unchecked variable to be embedded in the scope of "
"CheckedPtr/CheckRef object that backs it."
msgstr ""

#: ../../../analyzer/checkers.rst:3812
msgid "alpha.webkit.UnretainedLocalVarsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3813
msgid ""
"The goal of this rule is to make sure that any NS or CF local variable is "
"backed by a RetainPtr with lifetime that is strictly larger than the scope "
"of the unretained local variable. To be on the safe side we require the "
"scope of an unretained variable to be embedded in the scope of Retainptr "
"object that backs it."
msgstr ""

#: ../../../analyzer/checkers.rst:3857
msgid "webkit.RetainPtrCtorAdoptChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3858
msgid ""
"The goal of this rule is to make sure the constructor of RetainPtr as well "
"as adoptNS and adoptCF are used correctly. When creating a RetainPtr with +1 "
"semantics, adoptNS or adoptCF should be used, and in +0 semantics, RetainPtr "
"constructor should be used. Warn otherwise."
msgstr ""

#: ../../../analyzer/checkers.rst:3862
msgid "These are examples of cases that we consider correct:"
msgstr ""

#: ../../../analyzer/checkers.rst:3869
msgid ""
"Here are some examples of cases that we consider incorrect use of RetainPtr "
"constructor and adoptCF"
msgstr ""

#: ../../../analyzer/checkers.rst:3877
msgid "Debug Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:3883
msgid "debug"
msgstr ""

#: ../../../analyzer/checkers.rst:3885
msgid ""
"Checkers used for debugging the analyzer. :doc:`developer-docs/DebugChecks` "
"page contains a detailed description."
msgstr ""

#: ../../../analyzer/checkers.rst:3891
msgid "debug.AnalysisOrder"
msgstr ""

#: ../../../analyzer/checkers.rst:3892
msgid "Print callbacks that are called during analysis in order."
msgstr ""

#: ../../../analyzer/checkers.rst:3897
msgid "debug.ConfigDumper"
msgstr ""

#: ../../../analyzer/checkers.rst:3898
msgid "Dump config table."
msgstr ""

#: ../../../analyzer/checkers.rst:3903
msgid "debug.DumpCFG Display"
msgstr ""

#: ../../../analyzer/checkers.rst:3904
msgid "Control-Flow Graphs."
msgstr ""

#: ../../../analyzer/checkers.rst:3909
msgid "debug.DumpCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3910
msgid "Display Call Graph."
msgstr ""

#: ../../../analyzer/checkers.rst:3915
msgid "debug.DumpCalls"
msgstr ""

#: ../../../analyzer/checkers.rst:3916
msgid "Print calls as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3921
msgid "debug.DumpDominators"
msgstr ""

#: ../../../analyzer/checkers.rst:3922
msgid "Print the dominance tree for a given CFG."
msgstr ""

#: ../../../analyzer/checkers.rst:3927
msgid "debug.DumpLiveVars"
msgstr ""

#: ../../../analyzer/checkers.rst:3928
msgid "Print results of live variable analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:3933
msgid "debug.DumpTraversal"
msgstr ""

#: ../../../analyzer/checkers.rst:3934
msgid "Print branch conditions as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3939
msgid "debug.ExprInspection"
msgstr ""

#: ../../../analyzer/checkers.rst:3940
msgid "Check the analyzer's understanding of expressions."
msgstr ""

#: ../../../analyzer/checkers.rst:3945
msgid "debug.Stats"
msgstr ""

#: ../../../analyzer/checkers.rst:3946
msgid "Emit warnings with analyzer statistics."
msgstr ""

#: ../../../analyzer/checkers.rst:3951
msgid "debug.TaintTest"
msgstr ""

#: ../../../analyzer/checkers.rst:3952
msgid "Mark tainted symbols as such."
msgstr ""

#: ../../../analyzer/checkers.rst:3957
msgid "debug.ViewCFG"
msgstr ""

#: ../../../analyzer/checkers.rst:3958
msgid "View Control-Flow Graphs using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3963
msgid "debug.ViewCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3964
msgid "View Call Graph using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3969
msgid "debug.ViewExplodedGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3970
msgid "View Exploded Graphs using GraphViz."
msgstr ""
