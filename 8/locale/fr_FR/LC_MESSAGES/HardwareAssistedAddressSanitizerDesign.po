# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:3
msgid "Hardware-assisted AddressSanitizer Design Documentation"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:5
msgid ""
"This page is a design document for **hardware-assisted AddressSanitizer** "
"(or **HWASAN**) a tool similar to :doc:`AddressSanitizer`, but based on "
"partial hardware assistance."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:12
msgid "Introduction"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:14
msgid ""
":doc:`AddressSanitizer` tags every 8 bytes of the application memory with a "
"1 byte tag (using *shadow memory*), uses *redzones* to find buffer-overflows "
"and *quarantine* to find use-after-free. The redzones, the quarantine, and, "
"to a less extent, the shadow, are the sources of AddressSanitizer's memory "
"overhead. See the `AddressSanitizer paper`_ for details."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:22
msgid ""
"AArch64 has the `Address Tagging`_ (or top-byte-ignore, TBI), a hardware "
"feature that allows software to use 8 most significant bits of a 64-bit "
"pointer as a tag. HWASAN uses `Address Tagging`_ to implement a memory "
"safety tool, similar to :doc:`AddressSanitizer`, but with smaller memory "
"overhead and slightly different (mostly better) accuracy guarantees."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:30
msgid "Algorithm"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:31
msgid ""
"Every heap/stack/global memory object is forcibly aligned by `TG` bytes "
"(`TG` is e.g. 16 or 64). We call `TG` the **tagging granularity**."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:33
msgid ""
"For every such object a random `TS`-bit tag `T` is chosen (`TS`, or tag "
"size, is e.g. 4 or 8)"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:34
msgid "The pointer to the object is tagged with `T`."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:35
msgid ""
"The memory for the object is also tagged with `T` (using a `TG=>1` shadow "
"memory)"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:36
msgid ""
"Every load and store is instrumented to read the memory tag and compare it "
"with the pointer tag, exception is raised on tag mismatch."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:39
msgid ""
"For a more detailed discussion of this approach see https://arxiv.org/"
"pdf/1802.09517.pdf"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:42
msgid "Instrumentation"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:45
msgid "Memory Accesses"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:46
msgid ""
"All memory accesses are prefixed with an inline instruction sequence that "
"verifies the tags. Currently, the following sequence is used:"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:66
msgid "Alternatively, memory accesses are prefixed with a function call."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:69
msgid "Heap"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:71
msgid ""
"Tagging the heap memory/pointers is done by `malloc`. This can be based on "
"any malloc that forces all objects to be TG-aligned. `free` tags the memory "
"with a different tag."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:76
msgid "Stack"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:78
msgid ""
"Stack frames are instrumented by aligning all non-promotable allocas by `TG` "
"and tagging stack memory in function prologue and epilogue."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:81
msgid ""
"Tags for different allocas in one function are **not** generated "
"independently; doing that in a function with `M` allocas would require "
"maintaining `M` live stack pointers, significantly increasing register "
"pressure. Instead we generate a single base tag value in the prologue, and "
"build the tag for alloca number `M` as `ReTag(BaseTag, M)`, where ReTag can "
"be as simple as exclusive-or with constant `M`."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:88
msgid ""
"Stack instrumentation is expected to be a major source of overhead, but "
"could be optional."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:92
msgid "Globals"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:94
msgid "TODO: details."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:97
msgid "Error reporting"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:99
msgid ""
"Errors are generated by the `HLT` instruction and are handled by a signal "
"handler."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:102
msgid "Attribute"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:104
msgid ""
"HWASAN uses its own LLVM IR Attribute `sanitize_hwaddress` and a matching C "
"function attribute. An alternative would be to re-use ASAN's attribute "
"`sanitize_address`. The reasons to use a separate attribute are:"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:108
msgid ""
"Users may need to disable ASAN but not HWASAN, or vise versa, because the "
"tools have different trade-offs and compatibility issues."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:110
msgid ""
"LLVM (ideally) does not use flags to decide which pass is being used, ASAN "
"or HWASAN are being applied, based on the function attributes."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:113
msgid ""
"This does mean that users of HWASAN may need to add the new attribute to the "
"code that already uses the old attribute."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:118
msgid "Comparison with AddressSanitizer"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:137
msgid "HWASAN:"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:121
msgid ""
"Is less portable than :doc:`AddressSanitizer` as it relies on hardware "
"`Address Tagging`_ (AArch64). Address Tagging can be emulated with compiler "
"instrumentation, but it will require the instrumentation to remove the tags "
"before any load or store, which is infeasible in any realistic environment "
"that contains non-instrumented code."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:127
msgid ""
"May have compatibility problems if the target code uses higher pointer bits "
"for other purposes."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:129
msgid ""
"May require changes in the OS kernels (e.g. Linux seems to dislike tagged "
"pointers passed from address space: https://www.kernel.org/doc/Documentation/"
"arm64/tagged-pointers.txt)."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:132
msgid ""
"**Does not require redzones to detect buffer overflows**, but the buffer "
"overflow detection is probabilistic, with roughly `(2**TS-1)/(2**TS)` "
"probability of catching a bug."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:135
msgid ""
"**Does not require quarantine to detect heap-use-after-free, or stack-use-"
"after-return**. The detection is similarly probabilistic."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:139
msgid ""
"The memory overhead of HWASAN is expected to be much smaller than that of "
"AddressSanitizer: `1/TG` extra memory for the shadow and some overhead due "
"to `TG`-aligning all objects."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:145
msgid "Supported architectures"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:146
msgid ""
"HWASAN relies on `Address Tagging`_ which is only available on AArch64. For "
"other 64-bit architectures it is possible to remove the address tags before "
"every load and store by compiler instrumentation, but this variant will have "
"limited deployability since not all of the code is typically instrumented."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:152
msgid "The HWASAN's approach is not applicable to 32-bit architectures."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:156
msgid "Related Work"
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:157
msgid "`SPARC ADI`_ implements a similar tool mostly in hardware."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:158
msgid ""
"`Effective and Efficient Memory Protection Using Dynamic Tainting`_ "
"discusses similar approaches (\"lock & key\")."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:160
msgid ""
"`Watchdog`_ discussed a heavier, but still somewhat similar \"lock & key\" "
"approach."
msgstr ""

#: ../../../HardwareAssistedAddressSanitizerDesign.rst:162
msgid "*TODO: add more \"related work\" links. Suggestions are welcome.*"
msgstr ""
