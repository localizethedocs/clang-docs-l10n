# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang 8.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:12
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:14
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C/"
"OpenCL frontend, part of the LLVM Compiler Infrastructure, release 8.0.0. "
"Here we describe the status of Clang in some detail, including major "
"improvements from the previous release and new feature work. For the general "
"LLVM release notes, see `the LLVM documentation <https://llvm.org/docs/"
"ReleaseNotes.html>`_. All LLVM releases may be downloaded from the `LLVM "
"releases web site <https://releases.llvm.org/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:23
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:28
msgid "What's New in Clang 8.0.0?"
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"Some of the major new features and improvements to Clang are listed here. "
"Generic improvements to Clang as a whole or to its underlying infrastructure "
"are described first, followed by language-specific sections with "
"improvements to Clang's support for those languages."
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid "Major New Features"
msgstr ""

#: ../../../ReleaseNotes.rst:38
msgid ""
"Clang supports use of a profile remapping file, which permits profile data "
"captured for one version of a program to be applied when building another "
"version where symbols have changed (for example, due to renaming a class or "
"namespace). See the :ref:`UsersManual <profile_remapping>` for details."
msgstr ""

#: ../../../ReleaseNotes.rst:44
msgid ""
"Clang has new options to initialize automatic variables with a pattern. The "
"default is still that automatic variables are uninitialized. This isn't "
"meant to change the semantics of C and C++. Rather, it's meant to be a last "
"resort when programmers inadvertently have some undefined behavior in their "
"code. These options aim to make undefined behavior hurt less, which security-"
"minded people will be very happy about. Notably, this means that there's no "
"inadvertent information leak when:"
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid "The compiler re-uses stack slots, and a value is used uninitialized."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid "The compiler re-uses a register, and a value is used uninitialized."
msgstr ""

#: ../../../ReleaseNotes.rst:50
msgid "Stack structs / arrays / unions with padding are copied."
msgstr ""

#: ../../../ReleaseNotes.rst:52
msgid "These options only address stack and register information leaks."
msgstr ""

#: ../../../ReleaseNotes.rst:54
msgid "Caveats:"
msgstr ""

#: ../../../ReleaseNotes.rst:56
msgid ""
"Variables declared in unreachable code and used later aren't initialized. "
"This affects goto statements, Duff's device, and other objectionable uses of "
"switch statements. This should instead be a hard-error in any serious "
"codebase."
msgstr ""

#: ../../../ReleaseNotes.rst:58
msgid "These options don't affect volatile stack variables."
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid "Padding isn't fully handled yet."
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid "How to use it on the command line:"
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid "``-ftrivial-auto-var-init=uninitialized`` (the default)"
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid "``-ftrivial-auto-var-init=pattern``"
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"There is also a new attribute to request a variable to not be initialized, "
"mainly to disable initialization of large stack arrays when deemed too "
"expensive:"
msgstr ""

#: ../../../ReleaseNotes.rst:70
msgid "``int dont_initialize_me __attribute((uninitialized));``"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid ""
"``-Wextra-semi-stmt`` is a new diagnostic that diagnoses extra semicolons, "
"much like ``-Wextra-semi``. This new diagnostic diagnoses all *unnecessary* "
"null statements (expression statements without an expression), unless: the "
"semicolon directly follows a macro that was expanded to nothing or if the "
"semicolon is within the macro itself. This applies to macros defined in "
"system headers as well as user-defined macros."
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"``-Wempty-init-stmt`` is a new diagnostic that diagnoses empty init-"
"statements of ``if``, ``switch``, ``range-based for``, unless: the semicolon "
"directly follows a macro that was expanded to nothing or if the semicolon is "
"within the macro itself (both macros from system headers, and normal "
"macros). This diagnostic is in the ``-Wextra-semi-stmt`` group and is "
"enabled in ``-Wextra``."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid ""
"The experimental feature Pretokenized Headers (PTH) was removed in its "
"entirely from Clang. The feature did not properly work with about 1/3 of the "
"possible tokens available and was unmaintained."
msgstr ""

#: ../../../ReleaseNotes.rst:141
msgid ""
"The internals of libc++ include directory detection on MacOS have changed. "
"Instead of running a search based on the ``-resource-dir`` flag, the search "
"is now based on the path of the compiler in the filesystem. The default "
"behaviour should not change. However, if you override ``-resource-dir`` "
"manually and rely on the old behaviour you will need to add appropriate "
"compiler flags for finding the corresponding libc++ include directory."
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid "The integrated assembler is used now by default for all MIPS targets."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid "Improved support for MIPS N32 ABI and MIPS R6 target triples."
msgstr ""

#: ../../../ReleaseNotes.rst:152
msgid ""
"Clang now includes builtin functions for bitwise rotation of common value "
"sizes, such as: `__builtin_rotateleft32 <LanguageExtensions.html#builtin-"
"rotateleft>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:156
msgid ""
"Improved optimization for the corresponding MSVC compatibility builtins such "
"as ``_rotl()``."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:162
msgid ""
"``-mspeculative-load-hardening`` Clang now has an option to enable "
"Speculative Load Hardening."
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid ""
"``-fprofile-filter-files=[regexes]`` and ``-fprofile-exclude-"
"files=[regexes]``."
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid ""
"Clang has now options to filter or exclude some files when instrumenting for "
"gcov-based profiling. See the `UsersManual <UsersManual.html#cmdoption-"
"fprofile-filter-files>`_ for details."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"When using a custom stack alignment, the ``stackrealign`` attribute is now "
"implicitly set on the main function."
msgstr ""

#: ../../../ReleaseNotes.rst:174
msgid ""
"Emission of ``R_MIPS_JALR`` and ``R_MICROMIPS_JALR`` relocations can now be "
"controlled by the ``-mrelax-pic-calls`` and ``-mno-relax-pic-calls`` options."
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid ""
"As of clang 8, ``alignof`` and ``_Alignof`` return the ABI alignment of a "
"type, as opposed to the preferred alignment. ``__alignof`` still returns the "
"preferred alignment. ``-fclang-abi-compat=7`` (and previous) will make "
"``alignof`` and ``_Alignof`` return preferred alignment again."
msgstr ""

#: ../../../ReleaseNotes.rst:188
msgid "New Pragmas in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Clang now supports adding multiple `#pragma clang attribute` attributes into "
"a scope of pushed attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Clang now supports enabling/disabling speculative load hardening on a per-"
"function basis using the function attribute ``speculative_load_hardening``/"
"``no_speculative_load_hardening``."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"clang-cl now supports the use of the precompiled header options ``/Yc`` and "
"``/Yu`` without the filename argument. When these options are used without "
"the filename, a `#pragma hdrstop` inside the source marks the end of the "
"precompiled code."
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid ""
"clang-cl has a new command-line option, ``/Zc:dllexportInlines-``, similar "
"to ``-fvisibility-inlines-hidden`` on non-Windows, that makes class-level "
"`dllexport` and `dllimport` attributes not apply to inline member functions. "
"This can significantly reduce compile and link times. See the `User's Manual "
"<UsersManual.html#the-zc-dllexportinlines-option>`_ for more info."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid ""
"For MinGW, ``-municode`` now correctly defines ``UNICODE`` during "
"preprocessing."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid ""
"For MinGW, clang now produces vtables and RTTI for dllexported classes "
"without key functions. This fixes building Qt in debug mode."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid ""
"Allow using Address Sanitizer and Undefined Behaviour Sanitizer on MinGW."
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid ""
"Structured Exception Handling support for ARM64 Windows. The ARM64 Windows "
"target is in pretty good shape now."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid "OpenCL Kernel Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid "Misc:"
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "Improved address space support with Clang builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid ""
"Improved various diagnostics for vectors with element types from extensions; "
"values used in attributes; duplicate address spaces."
msgstr ""

#: ../../../ReleaseNotes.rst:236
msgid "Allow blocks to capture arrays."
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid ""
"Allow zero assignment and comparisons between variables of ``queue_t`` type."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid ""
"Improved diagnostics of formatting specifiers and argument promotions for "
"vector types in ``printf``."
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid "Fixed return type of enqueued kernel and pipe builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid "Fixed address space of ``clk_event_t`` generated in the IR."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid "Fixed address space when passing/returning structs."
msgstr ""

#: ../../../ReleaseNotes.rst:249
msgid "Header file fixes:"
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"Added missing extension guards around several builtin function overloads."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid ""
"Fixed serialization support when registering vendor extensions using pragmas."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid ""
"Fixed OpenCL version in declarations of builtin functions with sampler-less "
"image accesses."
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid "New vendor extensions added:"
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid "``cl_intel_planar_yuv``"
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "``cl_intel_device_side_avc_motion_estimation``"
msgstr ""

#: ../../../ReleaseNotes.rst:265
msgid "C++ for OpenCL:"
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "Added support of address space conversions in C style casts."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid "Enabled address spaces for references."
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid ""
"Fixed use of address spaces in templates: address space deduction and "
"diagnostics."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"Changed default address space to work with C++ specific concepts: class "
"members, template parameters, etc."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid ""
"Added generic address space by default to the generated hidden 'this' "
"parameter."
msgstr ""

#: ../../../ReleaseNotes.rst:278
msgid "Extend overload ranking rules for address spaces."
msgstr ""

#: ../../../ReleaseNotes.rst:282
msgid "ABI Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid ""
"``_Alignof`` and ``alignof`` now return the ABI alignment of a type, as "
"opposed to the preferred alignment."
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid ""
"This is more in keeping with the language of the standards, as well as being "
"compatible with gcc"
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid ""
"``__alignof`` and ``__alignof__`` still return the preferred alignment of a "
"type"
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid ""
"This shouldn't break any ABI except for things that explicitly ask for "
"``alignas(alignof(T))``."
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid ""
"If you have interfaces that break with this change, you may wish to switch "
"to ``alignas(__alignof(T))``, instead of using the ``-fclang-abi-compat`` "
"switch."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid "OpenMP Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid "OpenMP 5.0 features"
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"Support relational-op != (not-equal) as one of the canonical forms of random "
"access iterator."
msgstr ""

#: ../../../ReleaseNotes.rst:304
msgid "Added support for mapping of the lambdas in target regions."
msgstr ""

#: ../../../ReleaseNotes.rst:305
msgid "Added parsing/sema analysis for the requires directive."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid "Support nested declare target directives."
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid "Make the `this` pointer implicitly mapped as `map(this[:1])`."
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid "Added the `close` *map-type-modifier*."
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "Various bugfixes and improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "New features supported for Cuda devices:"
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "Added support for the reductions across the teams."
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid "Extended number of constructs that can be executed in SPMD mode."
msgstr ""

#: ../../../ReleaseNotes.rst:318
msgid "Fixed support for lastprivate/reduction variables in SPMD constructs."
msgstr ""

#: ../../../ReleaseNotes.rst:320
msgid "New collapse clause scheme to avoid expensive remainder operations."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid "New default schedule for distribute and parallel constructs."
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid "Simplified code generation for distribute and parallel in SPMD mode."
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid ""
"Flag (``-fopenmp_optimistic_collapse``) for user to limit collapsed loop "
"counter width when safe to do so."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "General performance improvement."
msgstr ""

#: ../../../ReleaseNotes.rst:335
msgid "Undefined Behavior Sanitizer (UBSan)"
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid ""
"The Implicit Conversion Sanitizer (``-fsanitize=implicit-conversion``) group "
"was extended. One more type of issues is caught - implicit integer sign "
"change. (``-fsanitize=implicit-integer-sign-change``). This makes the "
"Implicit Conversion Sanitizer feature-complete, with only missing piece "
"being bitfield handling. While there is a ``-Wsign-conversion`` diagnostic "
"group that catches this kind of issues, it is both noisy, and does not catch "
"**all** the cases."
msgstr ""

#: ../../../ReleaseNotes.rst:354
msgid ""
"Like some other ``-fsanitize=integer`` checks, these issues are **not** "
"undefined behaviour. But they are not *always* intentional, and are somewhat "
"hard to track down. This group is **not** enabled by ``-"
"fsanitize=undefined``, but the ``-fsanitize=implicit-integer-sign-change`` "
"check is enabled by ``-fsanitize=integer``. (as is ``-fsanitize=implicit-"
"integer-truncation`` check)"
msgstr ""

#: ../../../ReleaseNotes.rst:361
msgid ""
"The Implicit Conversion Sanitizer (``-fsanitize=implicit-conversion``) has "
"learned to sanitize compound assignment operators."
msgstr ""

#: ../../../ReleaseNotes.rst:364
msgid ""
"``alignment`` check has learned to sanitize the assume_aligned-like "
"attributes:"
msgstr ""

#: ../../../ReleaseNotes.rst:409
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:411
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Subversion version of the source "
"code. You can access versions of these documents specific to this release by "
"going into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:418
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us via the `mailing list <https://lists.llvm.org/mailman/listinfo/"
"cfe-dev>`_."
msgstr ""
