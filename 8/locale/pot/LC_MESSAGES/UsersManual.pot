# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../UsersManual.rst:3
msgid "Clang Compiler User's Manual"
msgstr ""

#: ../../../UsersManual.rst:11
msgid "Introduction"
msgstr ""

#: ../../../UsersManual.rst:13
msgid ""
"The Clang Compiler is an open-source compiler for the C family of "
"programming languages, aiming to be the best in class implementation of "
"these languages. Clang builds on the LLVM optimizer and code generator, "
"allowing it to provide high-quality optimization and code generation support "
"for many targets. For more general information, please see the `Clang Web "
"Site <http://clang.llvm.org>`_ or the `LLVM Web Site <http://llvm.org>`_."
msgstr ""

#: ../../../UsersManual.rst:21
msgid ""
"This document describes important notes about using Clang as a compiler for "
"an end-user, documenting the supported features, command line options, etc. "
"If you are interested in using Clang to build a tool that processes code, "
"please see :doc:`InternalsManual`. If you are interested in the `Clang "
"Static Analyzer <https://clang-analyzer.llvm.org>`_, please see its web page."
msgstr ""

#: ../../../UsersManual.rst:28
msgid ""
"Clang is one component in a complete toolchain for C family languages. A "
"separate document describes the other pieces necessary to :doc:`assemble a "
"complete toolchain <Toolchain>`."
msgstr ""

#: ../../../UsersManual.rst:32
msgid ""
"Clang is designed to support the C family of programming languages, which "
"includes :ref:`C <c>`, :ref:`Objective-C <objc>`, :ref:`C++ <cxx>`, and :ref:"
"`Objective-C++ <objcxx>` as well as many dialects of those. For language-"
"specific information, please see the corresponding language specific section:"
msgstr ""

#: ../../../UsersManual.rst:38
msgid ""
":ref:`C Language <c>`: K&R C, ANSI C89, ISO C90, ISO C94 (C89+AMD1), ISO C99 "
"(+TC1, TC2, TC3)."
msgstr ""

#: ../../../UsersManual.rst:40
msgid ""
":ref:`Objective-C Language <objc>`: ObjC 1, ObjC 2, ObjC 2.1, plus variants "
"depending on base language."
msgstr ""

#: ../../../UsersManual.rst:42
msgid ":ref:`C++ Language <cxx>`"
msgstr ""

#: ../../../UsersManual.rst:43
msgid ":ref:`Objective C++ Language <objcxx>`"
msgstr ""

#: ../../../UsersManual.rst:44
msgid ":ref:`OpenCL C Language <opencl>`: v1.0, v1.1, v1.2, v2.0."
msgstr ""

#: ../../../UsersManual.rst:46
msgid ""
"In addition to these base languages and their dialects, Clang supports a "
"broad variety of language extensions, which are documented in the "
"corresponding language section. These extensions are provided to be "
"compatible with the GCC, Microsoft, and other popular compilers as well as "
"to improve functionality through Clang-specific features. The Clang driver "
"and language features are intentionally designed to be as compatible with "
"the GNU GCC compiler as reasonably possible, easing migration from GCC to "
"Clang. In most cases, code \"just works\". Clang also provides an "
"alternative driver, :ref:`clang-cl`, that is designed to be compatible with "
"the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:57
msgid ""
"In addition to language specific features, Clang has a variety of features "
"that depend on what CPU architecture or operating system is being compiled "
"for. Please see the :ref:`Target-Specific Features and Limitations "
"<target_features>` section for more details."
msgstr ""

#: ../../../UsersManual.rst:62
msgid ""
"The rest of the introduction introduces some basic :ref:`compiler "
"terminology <terminology>` that is used throughout this manual and contains "
"a basic :ref:`introduction to using Clang <basicusage>` as a command line "
"compiler."
msgstr ""

#: ../../../UsersManual.rst:70
msgid "Terminology"
msgstr ""

#: ../../../UsersManual.rst:72
msgid ""
"Front end, parser, backend, preprocessor, undefined behavior, diagnostic, "
"optimizer"
msgstr ""

#: ../../../UsersManual.rst:78
msgid "Basic Usage"
msgstr ""

#: ../../../UsersManual.rst:80
msgid "Intro to how to use a C compiler for newbies."
msgstr ""

#: ../../../UsersManual.rst:82
msgid ""
"compile + link compile then link debug info enabling optimizations picking a "
"language to use, defaults to C11 by default. Autosenses based on extension. "
"using a makefile"
msgstr ""

#: ../../../UsersManual.rst:87
msgid "Command Line Options"
msgstr ""

#: ../../../UsersManual.rst:89
msgid ""
"This section is generally an index into other sections. It does not go into "
"depth on the ones that are covered by other sections. However, the first "
"part introduces the language selection and other high level options like :"
"option:`-c`, :option:`-g`, etc."
msgstr ""

#: ../../../UsersManual.rst:95
msgid "Options to Control Error and Warning Messages"
msgstr ""

#: ../../../UsersManual.rst:99
msgid "Turn warnings into errors."
msgstr ""

#: ../../../UsersManual.rst:104
msgid "``-Werror=foo``"
msgstr ""

#: ../../../UsersManual.rst:106
msgid "Turn warning \"foo\" into an error."
msgstr ""

#: ../../../UsersManual.rst:110
msgid ""
"Turn warning \"foo\" into a warning even if :option:`-Werror` is specified."
msgstr ""

#: ../../../UsersManual.rst:114
msgid ""
"Enable warning \"foo\". See the :doc:`diagnostics reference "
"<DiagnosticsReference>` for a complete list of the warning flags that can be "
"specified in this way."
msgstr ""

#: ../../../UsersManual.rst:120
msgid "Disable warning \"foo\"."
msgstr ""

#: ../../../UsersManual.rst:124
msgid "Disable all diagnostics."
msgstr ""

#: ../../../UsersManual.rst:128
msgid ":ref:`Enable all diagnostics. <diagnostics_enable_everything>`"
msgstr ""

#: ../../../UsersManual.rst:132
msgid "Warn on language extensions."
msgstr ""

#: ../../../UsersManual.rst:136
msgid "Error on language extensions."
msgstr ""

#: ../../../UsersManual.rst:140
msgid "Enable warnings from system headers."
msgstr ""

#: ../../../UsersManual.rst:144
msgid ""
"Stop emitting diagnostics after 123 errors have been produced. The default "
"is 20, and the error limit can be disabled with `-ferror-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:149
msgid ""
"Only emit up to 123 template instantiation notes within the template "
"instantiation backtrace for a single warning or error. The default is 10, "
"and the limit can be disabled with `-ftemplate-backtrace-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:156
msgid "Formatting of Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:158
msgid ""
"Clang aims to produce beautiful diagnostics by default, particularly for new "
"users that first come to Clang. However, different people have different "
"preferences, and sometimes Clang is driven not by a human, but by a program "
"that wants consistent and easily parsable output. For these cases, Clang "
"provides a wide range of options to control the exact output format of the "
"diagnostics that it generates."
msgstr ""

#: ../../../UsersManual.rst:185
msgid "**-f[no-]show-column**"
msgstr ""

#: ../../../UsersManual.rst:168
msgid "Print column number in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:170
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"column number of a diagnostic. For example, when this is enabled, Clang will "
"print something like:"
msgstr ""

#: ../../../UsersManual.rst:181
msgid ""
"When this is disabled, Clang will print \"test.c:28: warning...\" with no "
"column number."
msgstr ""

#: ../../../UsersManual.rst:184 ../../../UsersManual.rst:424
#: ../../../UsersManual.rst:448
msgid ""
"The printed column numbers count bytes from the beginning of the line; take "
"care if your source contains multibyte characters."
msgstr ""

#: ../../../UsersManual.rst:204
msgid "**-f[no-]show-source-location**"
msgstr ""

#: ../../../UsersManual.rst:190
msgid "Print source file/line/column information in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:192
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"filename, line number and column number of a diagnostic. For example, when "
"this is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:203
msgid "When this is disabled, Clang will not print the \"test.c:28:8: \" part."
msgstr ""

#: ../../../UsersManual.rst:220
msgid "**-f[no-]caret-diagnostics**"
msgstr ""

#: ../../../UsersManual.rst:209
msgid ""
"Print source line and ranges from source code in diagnostic. This option, "
"which defaults to on, controls whether or not Clang prints the source line, "
"source ranges, and caret when emitting a diagnostic. For example, when this "
"is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:247
msgid "**-f[no-]color-diagnostics**"
msgstr ""

#: ../../../UsersManual.rst:223
msgid ""
"This option, which defaults to on when a color-capable terminal is detected, "
"controls whether or not Clang prints diagnostics in color."
msgstr ""

#: ../../../UsersManual.rst:226
msgid ""
"When this option is enabled, Clang will use colors to highlight specific "
"parts of the diagnostic, e.g.,"
msgstr ""

#: ../../../UsersManual.rst:231
msgid ""
"<pre>\n"
"  <b><span style=\"color:black\">test.c:28:8: <span style=\"color:"
"magenta\">warning</span>: extra tokens at end of #endif directive [-Wextra-"
"tokens]</span></b>\n"
"  #endif bad\n"
"         <span style=\"color:green\">^</span>\n"
"         <span style=\"color:green\">//</span>\n"
"</pre>"
msgstr ""

#: ../../../UsersManual.rst:240
msgid "When this is disabled, Clang will just print:"
msgstr ""

#: ../../../UsersManual.rst:252
msgid "**-fansi-escape-codes**"
msgstr ""

#: ../../../UsersManual.rst:250
msgid ""
"Controls whether ANSI escape codes are used instead of the Windows Console "
"API to output colored diagnostics. This option is only used on Windows and "
"defaults to off."
msgstr ""

#: ../../../UsersManual.rst:256
msgid ""
"Changes diagnostic output format to better match IDEs and command line tools."
msgstr ""

#: ../../../UsersManual.rst:258
msgid ""
"This option controls the output format of the filename, line number, and "
"column printed in diagnostic messages. The options, and their affect on "
"formatting a simple conversion diagnostic, follow:"
msgstr ""

#: ../../../UsersManual.rst:265
msgid "**clang** (default)"
msgstr ""

#: ../../../UsersManual.rst:270
msgid "**msvc**"
msgstr ""

#: ../../../UsersManual.rst:274
msgid "**vi**"
msgstr ""

#: ../../../UsersManual.rst:298
msgid "**-f[no-]diagnostics-show-option**"
msgstr ""

#: ../../../UsersManual.rst:280
msgid "Enable ``[-Woption]`` information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:282
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"associated :ref:`warning group <cl_diag_warning_groups>` option name when "
"outputting a warning diagnostic. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:294
msgid ""
"Passing **-fno-diagnostics-show-option** will prevent Clang from printing "
"the [:ref:`-Wextra-tokens <opt_Wextra-tokens>`] information in the "
"diagnostic. This information tells you the flag needed to enable or disable "
"the diagnostic, either from the command line or through :ref:`#pragma GCC "
"diagnostic <pragma_GCC_diagnostic>`."
msgstr ""

#: ../../../UsersManual.rst:304
msgid "Enable printing category information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:306
msgid ""
"This option, which defaults to \"none\", controls whether or not Clang "
"prints the category associated with a diagnostic when emitting it. Each "
"diagnostic may or many not have an associated category, if it has one, it is "
"listed in the diagnostic categorization field of the diagnostic line (in the "
"[]'s)."
msgstr ""

#: ../../../UsersManual.rst:312
msgid ""
"For example, a format string warning will produce these three renditions "
"based on the setting of this option:"
msgstr ""

#: ../../../UsersManual.rst:321
msgid ""
"This category can be used by clients that want to group diagnostics by "
"category, so it should be a high level category. We want dozens of these, "
"not hundreds or thousands of them."
msgstr ""

#: ../../../UsersManual.rst:333
msgid "**-fsave-optimization-record**"
msgstr ""

#: ../../../UsersManual.rst:328
msgid "Write optimization remarks to a YAML file."
msgstr ""

#: ../../../UsersManual.rst:330
msgid ""
"This option, which defaults to off, controls whether Clang writes "
"optimization reports to a YAML file. By recording diagnostics in a file, "
"using a structured YAML format, users can parse or sort the remarks in a "
"convenient way."
msgstr ""

#: ../../../UsersManual.rst:346
msgid "**-foptimization-record-file**"
msgstr ""

#: ../../../UsersManual.rst:338
msgid "Control the file to which optimization reports are written."
msgstr ""

#: ../../../UsersManual.rst:340
msgid ""
"When optimization reports are being output (see :ref:`-fsave-optimization-"
"record <opt_fsave-optimization-record>`), this option controls the file to "
"which those reports are written."
msgstr ""

#: ../../../UsersManual.rst:344
msgid ""
"If this option is not used, optimization records are output to a file named "
"after the primary file being compiled. If that's \"foo.c\", for example, "
"optimization records are output to \"foo.opt.yaml\"."
msgstr ""

#: ../../../UsersManual.rst:371
msgid "**-f[no-]diagnostics-show-hotness**"
msgstr ""

#: ../../../UsersManual.rst:351
msgid "Enable profile hotness information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:353
msgid ""
"This option controls whether Clang prints the profile hotness associated "
"with diagnostics in the presence of profile-guided optimization information. "
"This is currently supported with optimization remarks (see :ref:`Options to "
"Emit Optimization Reports <rpass>`). The hotness information allows users to "
"focus on the hot optimization remarks that are likely to be more relevant "
"for run-time performance."
msgstr ""

#: ../../../UsersManual.rst:360
msgid ""
"For example, in this output, the block containing the callsite of `foo` was "
"executed 3000 times according to the profile data:"
msgstr ""

#: ../../../UsersManual.rst:369
msgid ""
"This option is implied when :ref:`-fsave-optimization-record <opt_fsave-"
"optimization-record>` is used. Otherwise, it defaults to off."
msgstr ""

#: ../../../UsersManual.rst:384
msgid "**-fdiagnostics-hotness-threshold**"
msgstr ""

#: ../../../UsersManual.rst:376
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this hotness value."
msgstr ""

#: ../../../UsersManual.rst:379
msgid ""
"This option, which defaults to zero, controls the minimum hotness an "
"optimization remark would need in order to be output by Clang. This is "
"currently supported with optimization remarks (see :ref:`Options to Emit "
"Optimization Reports <rpass>`) when profile hotness information in "
"diagnostics is enabled (see :ref:`-fdiagnostics-show-hotness "
"<opt_fdiagnostics-show-hotness>`)."
msgstr ""

#: ../../../UsersManual.rst:405
msgid "**-f[no-]diagnostics-fixit-info**"
msgstr ""

#: ../../../UsersManual.rst:389
msgid "Enable \"FixIt\" information in the diagnostics output."
msgstr ""

#: ../../../UsersManual.rst:391
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"information on how to fix a specific diagnostic underneath it when it knows. "
"For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:402
msgid ""
"Passing **-fno-diagnostics-fixit-info** will prevent Clang from printing the "
"\"//\" line at the end of the message. This information is useful for users "
"who may not understand what is wrong, but can be confusing for machine "
"parsing."
msgstr ""

#: ../../../UsersManual.rst:425
msgid "**-fdiagnostics-print-source-range-info**"
msgstr ""

#: ../../../UsersManual.rst:410
msgid ""
"Print machine parsable information about source ranges. This option makes "
"Clang print information about source ranges in a machine parsable format "
"after the file/line/column number information. The information is a simple "
"sequence of brace enclosed ranges, where each range lists the start and end "
"line/column locations. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:422
msgid "The {}'s are generated by -fdiagnostics-print-source-range-info."
msgstr ""

#: ../../../UsersManual.rst:429
msgid "Print Fix-Its in a machine parseable form."
msgstr ""

#: ../../../UsersManual.rst:431
msgid ""
"This option makes Clang print available Fix-Its in a machine parseable "
"format at the end of diagnostics. The following example illustrates the "
"format:"
msgstr ""

#: ../../../UsersManual.rst:439
msgid ""
"The range printed is a half-open range, so in this example the characters at "
"column 25 up to but not including column 29 on line 7 in t.cpp should be "
"replaced with the string \"Gamma\". Either the range or the replacement "
"string may be empty (representing strict insertions and strict erasures, "
"respectively). Both the file name and the insertion string escape backslash "
"(as \"\\\\\\\\\"), tabs (as \"\\\\t\"), newlines (as \"\\\\n\"), double "
"quotes(as \"\\\\\"\") and non-printable characters (as octal \"\\\\xxx\")."
msgstr ""

#: ../../../UsersManual.rst:453
msgid "Turns off elision in template type printing."
msgstr ""

#: ../../../UsersManual.rst:455
msgid ""
"The default for template type printing is to elide as many template "
"arguments as possible, removing those which are the same in both template "
"types, leaving only the differences. Adding this flag will print all the "
"template arguments. If supported by the terminal, highlighting will still "
"appear on differing arguments."
msgstr ""

#: ../../../UsersManual.rst:461 ../../../UsersManual.rst:482
msgid "Default:"
msgstr ""

#: ../../../UsersManual.rst:467
msgid "-fno-elide-type:"
msgstr ""

#: ../../../UsersManual.rst:475
msgid "Template type diffing prints a text tree."
msgstr ""

#: ../../../UsersManual.rst:477
msgid ""
"For diffing large templated types, this option will cause Clang to display "
"the templates as an indented text tree, one argument per line, with "
"differences marked inline. This is compatible with -fno-elide-type."
msgstr ""

#: ../../../UsersManual.rst:488
msgid "With :option:`-fdiagnostics-show-template-tree`:"
msgstr ""

#: ../../../UsersManual.rst:503
msgid "Individual Warning Groups"
msgstr ""

#: ../../../UsersManual.rst:505
msgid "TODO: Generate this from tblgen. Define one anchor per warning group."
msgstr ""

#: ../../../UsersManual.rst:511
msgid "Warn about excess tokens at the end of a preprocessor directive."
msgstr ""

#: ../../../UsersManual.rst:513
msgid ""
"This option, which defaults to on, enables warnings about extra tokens at "
"the end of preprocessor directives. For example:"
msgstr ""

#: ../../../UsersManual.rst:522
msgid ""
"These extra tokens are not strictly conforming, and are usually best handled "
"by commenting them out."
msgstr ""

#: ../../../UsersManual.rst:527
msgid ""
"Warn about unqualified uses of a member template whose name resolves to "
"another template at the location of the use."
msgstr ""

#: ../../../UsersManual.rst:530
msgid ""
"This option, which defaults to on, enables a warning in the following code:"
msgstr ""

#: ../../../UsersManual.rst:545
msgid ""
"C++ [basic.lookup.classref] requires this to be an error, but, because it's "
"hard to work around, Clang downgrades it to a warning as an extension."
msgstr ""

#: ../../../UsersManual.rst:551
msgid ""
"Warn about an unusable copy constructor when binding a reference to a "
"temporary."
msgstr ""

#: ../../../UsersManual.rst:554
msgid ""
"This option enables warnings about binding a reference to a temporary when "
"the temporary doesn't have a usable copy constructor. For example:"
msgstr ""

#: ../../../UsersManual.rst:581
msgid ""
"Note that if ``NonCopyable2::NonCopyable2()`` has a default argument whose "
"instantiation produces a compile error, that error will still be a hard "
"error in C++98 mode even if this warning is turned off."
msgstr ""

#: ../../../UsersManual.rst:586
msgid "Options to Control Clang Crash Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:588
msgid ""
"As unbelievable as it may sound, Clang does crash from time to time. "
"Generally, this only occurs to those living on the `bleeding edge <https://"
"llvm.org/releases/download.html#svn>`_. Clang goes to great lengths to "
"assist you in filing a bug report. Specifically, Clang generates "
"preprocessed source file(s) and associated run script(s) upon a crash. These "
"files should be attached to a bug report to ease reproducibility of the "
"failure. Below are the command line options to control the crash diagnostics."
msgstr ""

#: ../../../UsersManual.rst:599
msgid ""
"Disable auto-generation of preprocessed source files during a clang crash."
msgstr ""

#: ../../../UsersManual.rst:601
msgid ""
"The -fno-crash-diagnostics flag can be helpful for speeding the process of "
"generating a delta reduced test case."
msgstr ""

#: ../../../UsersManual.rst:604
msgid ""
"Clang is also capable of generating preprocessed source file(s) and "
"associated run script(s) even without a crash. This is specially useful when "
"trying to generate a reproducer for warnings or errors while using modules."
msgstr ""

#: ../../../UsersManual.rst:610
msgid ""
"Generates preprocessed source files, a reproducer script and if relevant, a "
"cache containing: built module pcm's and all headers needed to rebuilt the "
"same modules."
msgstr ""

#: ../../../UsersManual.rst:617
msgid "Options to Emit Optimization Reports"
msgstr ""

#: ../../../UsersManual.rst:619
msgid ""
"Optimization reports trace, at a high-level, all the major decisions done by "
"compiler transformations. For instance, when the inliner decides to inline "
"function ``foo()`` into ``bar()``, or the loop unroller decides to unroll a "
"loop N times, or the vectorizer decides to vectorize a loop body."
msgstr ""

#: ../../../UsersManual.rst:625
msgid ""
"Clang offers a family of flags which the optimizers can use to emit a "
"diagnostic in three cases:"
msgstr ""

#: ../../../UsersManual.rst:628
msgid "When the pass makes a transformation (`-Rpass`)."
msgstr ""

#: ../../../UsersManual.rst:630
msgid "When the pass fails to make a transformation (`-Rpass-missed`)."
msgstr ""

#: ../../../UsersManual.rst:632
msgid ""
"When the pass determines whether or not to make a transformation (`-Rpass-"
"analysis`)."
msgstr ""

#: ../../../UsersManual.rst:635
msgid ""
"NOTE: Although the discussion below focuses on `-Rpass`, the exact same "
"options apply to `-Rpass-missed` and `-Rpass-analysis`."
msgstr ""

#: ../../../UsersManual.rst:638
msgid ""
"Since there are dozens of passes inside the compiler, each of these flags "
"take a regular expression that identifies the name of the pass which should "
"emit the associated diagnostic. For example, to get a report from the "
"inliner, compile the code with:"
msgstr ""

#: ../../../UsersManual.rst:650
msgid ""
"Note that remarks from the inliner are identified with `[-Rpass=inline]`. To "
"request a report from every optimization pass, you should use `-Rpass=.*` "
"(in fact, you can use any valid POSIX regular expression). However, do not "
"expect a report from every transformation made by the compiler. Optimization "
"remarks do not really make sense outside of the major transformations (e.g., "
"inlining, vectorization, loop optimizations) and not every optimization pass "
"supports this feature."
msgstr ""

#: ../../../UsersManual.rst:659
msgid ""
"Note that when using profile-guided optimization information, profile "
"hotness information can be included in the remarks (see :ref:`-fdiagnostics-"
"show-hotness <opt_fdiagnostics-show-hotness>`)."
msgstr ""

#: ../../../UsersManual.rst:664
msgid "Current limitations"
msgstr ""

#: ../../../UsersManual.rst:666
msgid ""
"Optimization remarks that refer to function names will display the mangled "
"name of the function. Since these remarks are emitted by the back end of the "
"compiler, it does not know anything about the input language, nor its "
"mangling rules."
msgstr ""

#: ../../../UsersManual.rst:671
msgid ""
"Some source locations are not displayed correctly. The front end has a more "
"detailed source location tracking than the locations included in the debug "
"info (e.g., the front end can locate code inside macro expansions). However, "
"the locations used by `-Rpass` are translated from debug annotations. That "
"translation can be lossy, which results in some remarks having no location "
"information."
msgstr ""

#: ../../../UsersManual.rst:679
msgid "Other Options"
msgstr ""

#: ../../../UsersManual.rst:680
msgid "Clang options that don't fit neatly into other categories."
msgstr ""

#: ../../../UsersManual.rst:684
msgid ""
"When emitting a dependency file, use formatting conventions appropriate for "
"NMake or Jom. Ignored unless another option causes Clang to emit a "
"dependency file."
msgstr ""

#: ../../../UsersManual.rst:688
msgid ""
"When Clang emits a dependency file (e.g., you supplied the -M option) most "
"filenames can be written to the file without any special formatting. "
"Different Make tools will treat different sets of characters as \"special\" "
"and use different conventions for telling the Make tool that the character "
"is actually part of the filename. Normally Clang uses backslash to "
"\"escape\" a special character, which is the convention used by GNU Make. "
"The -MV option tells Clang to put double-quotes around the entire filename, "
"which is the convention used by NMake and Jom."
msgstr ""

#: ../../../UsersManual.rst:698
msgid "Configuration files"
msgstr ""

#: ../../../UsersManual.rst:700
msgid ""
"Configuration files group command-line options and allow all of them to be "
"specified just by referencing the configuration file. They may be used, for "
"example, to collect options required to tune compilation for particular "
"target, such as -L, -I, -l, --sysroot, codegen options, etc."
msgstr ""

#: ../../../UsersManual.rst:705
msgid ""
"The command line option `--config` can be used to specify configuration file "
"in a Clang invocation. For example:"
msgstr ""

#: ../../../UsersManual.rst:713
msgid ""
"If the provided argument contains a directory separator, it is considered as "
"a file path, and options are read from that file. Otherwise the argument is "
"treated as a file name and is searched for sequentially in the directories:"
msgstr ""

#: ../../../UsersManual.rst:717
msgid "user directory,"
msgstr ""

#: ../../../UsersManual.rst:718
msgid "system directory,"
msgstr ""

#: ../../../UsersManual.rst:719
msgid "the directory where Clang executable resides."
msgstr ""

#: ../../../UsersManual.rst:721
msgid ""
"Both user and system directories for configuration files are specified "
"during clang build using CMake parameters, CLANG_CONFIG_FILE_USER_DIR and "
"CLANG_CONFIG_FILE_SYSTEM_DIR respectively. The first file found is used. It "
"is an error if the required file cannot be found."
msgstr ""

#: ../../../UsersManual.rst:726
msgid ""
"Another way to specify a configuration file is to encode it in executable "
"name. For example, if the Clang executable is named `armv7l-clang` (it may "
"be a symbolic link to `clang`), then Clang will search for file `armv7l.cfg` "
"in the directory where Clang resides."
msgstr ""

#: ../../../UsersManual.rst:731
msgid ""
"If a driver mode is specified in invocation, Clang tries to find a file "
"specific for the specified mode. For example, if the executable file is "
"named `x86_64-clang-cl`, Clang first looks for `x86_64-cl.cfg` and if it is "
"not found, looks for `x86_64.cfg`."
msgstr ""

#: ../../../UsersManual.rst:736
msgid ""
"If the command line contains options that effectively change target "
"architecture (these are -m32, -EL, and some others) and the configuration "
"file starts with an architecture name, Clang tries to load the configuration "
"file for the effective architecture. For example, invocation:"
msgstr ""

#: ../../../UsersManual.rst:745
msgid ""
"causes Clang search for a file `i368.cfg` first, and if no such file is "
"found, Clang looks for the file `x86_64.cfg`."
msgstr ""

#: ../../../UsersManual.rst:748
msgid ""
"The configuration file consists of command-line options specified on one or "
"more lines. Lines composed of whitespace characters only are ignored as well "
"as lines in which the first non-blank character is `#`. Long options may be "
"split between several lines by a trailing backslash. Here is example of a "
"configuration file:"
msgstr ""

#: ../../../UsersManual.rst:766
msgid ""
"Files included by `@file` directives in configuration files are resolved "
"relative to the including file. For example, if a configuration file `~/."
"llvm/target.cfg` contains the directive `@os/linux.opts`, the file `linux."
"opts` is searched for in the directory `~/.llvm/os`."
msgstr ""

#: ../../../UsersManual.rst:772
msgid "Language and Target-Independent Features"
msgstr ""

#: ../../../UsersManual.rst:775
msgid "Controlling Errors and Warnings"
msgstr ""

#: ../../../UsersManual.rst:777
msgid ""
"Clang provides a number of ways to control which code constructs cause it to "
"emit errors and warning messages, and how they are displayed to the console."
msgstr ""

#: ../../../UsersManual.rst:782
msgid "Controlling How Clang Displays Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:784
msgid ""
"When Clang emits a diagnostic, it includes rich information in the output, "
"and gives you fine-grain control over which information is printed. Clang "
"has the ability to print this information, and these are the options that "
"control it:"
msgstr ""

#: ../../../UsersManual.rst:789
msgid ""
"A file/line/column indicator that shows exactly where the diagnostic occurs "
"in your code [:ref:`-fshow-column <opt_fshow-column>`, :ref:`-fshow-source-"
"location <opt_fshow-source-location>`]."
msgstr ""

#: ../../../UsersManual.rst:792
msgid ""
"A categorization of the diagnostic as a note, warning, error, or fatal error."
msgstr ""

#: ../../../UsersManual.rst:794
msgid "A text string that describes what the problem is."
msgstr ""

#: ../../../UsersManual.rst:795
msgid ""
"An option that indicates how to control the diagnostic (for diagnostics that "
"support it) [:ref:`-fdiagnostics-show-option <opt_fdiagnostics-show-"
"option>`]."
msgstr ""

#: ../../../UsersManual.rst:798
msgid ""
"A :ref:`high-level category <diagnostics_categories>` for the diagnostic for "
"clients that want to group diagnostics by class (for diagnostics that "
"support it) [:ref:`-fdiagnostics-show-category <opt_fdiagnostics-show-"
"category>`]."
msgstr ""

#: ../../../UsersManual.rst:802
msgid ""
"The line of source code that the issue occurs on, along with a caret and "
"ranges that indicate the important locations [:ref:`-fcaret-diagnostics "
"<opt_fcaret-diagnostics>`]."
msgstr ""

#: ../../../UsersManual.rst:805
msgid ""
"\"FixIt\" information, which is a concise explanation of how to fix the "
"problem (when Clang is certain it knows) [:ref:`-fdiagnostics-fixit-info "
"<opt_fdiagnostics-fixit-info>`]."
msgstr ""

#: ../../../UsersManual.rst:808
msgid ""
"A machine-parsable representation of the ranges involved (off by default) [:"
"ref:`-fdiagnostics-print-source-range-info <opt_fdiagnostics-print-source-"
"range-info>`]."
msgstr ""

#: ../../../UsersManual.rst:812
msgid ""
"For more information please see :ref:`Formatting of Diagnostics "
"<cl_diag_formatting>`."
msgstr ""

#: ../../../UsersManual.rst:816
msgid "Diagnostic Mappings"
msgstr ""

#: ../../../UsersManual.rst:818
msgid "All diagnostics are mapped into one of these 6 classes:"
msgstr ""

#: ../../../UsersManual.rst:820
msgid "Ignored"
msgstr ""

#: ../../../UsersManual.rst:821
msgid "Note"
msgstr ""

#: ../../../UsersManual.rst:822
msgid "Remark"
msgstr ""

#: ../../../UsersManual.rst:823
msgid "Warning"
msgstr ""

#: ../../../UsersManual.rst:824
msgid "Error"
msgstr ""

#: ../../../UsersManual.rst:825
msgid "Fatal"
msgstr ""

#: ../../../UsersManual.rst:830
msgid "Diagnostic Categories"
msgstr ""

#: ../../../UsersManual.rst:832
msgid ""
"Though not shown by default, diagnostics may each be associated with a high-"
"level category. This category is intended to make it possible to triage "
"builds that produce a large number of errors or warnings in a grouped way."
msgstr ""

#: ../../../UsersManual.rst:837
msgid ""
"Categories are not shown by default, but they can be turned on with the :ref:"
"`-fdiagnostics-show-category <opt_fdiagnostics-show-category>` option. When "
"set to \"``name``\", the category is printed textually in the diagnostic "
"output. When it is set to \"``id``\", a category number is printed. The "
"mapping of category names to category id's can be obtained by running "
"'``clang   --print-diagnostic-categories``'."
msgstr ""

#: ../../../UsersManual.rst:845
msgid "Controlling Diagnostics via Command Line Flags"
msgstr ""

#: ../../../UsersManual.rst:847
msgid "TODO: -W flags, -pedantic, etc"
msgstr ""

#: ../../../UsersManual.rst:852
msgid "Controlling Diagnostics via Pragmas"
msgstr ""

#: ../../../UsersManual.rst:854
msgid ""
"Clang can also control what diagnostics are enabled through the use of "
"pragmas in the source code. This is useful for turning off specific warnings "
"in a section of source code. Clang supports GCC's pragma for compatibility "
"with existing source code, as well as several extensions."
msgstr ""

#: ../../../UsersManual.rst:859
msgid ""
"The pragma may control any warning that can be used from the command line. "
"Warnings may be set to ignored, warning, error, or fatal. The following "
"example code will tell Clang or GCC to ignore the -Wall warnings:"
msgstr ""

#: ../../../UsersManual.rst:868
msgid ""
"In addition to all of the functionality provided by GCC's pragma, Clang also "
"allows you to push and pop the current warning state. This is particularly "
"useful when writing a header file that will be compiled by other people, "
"because you don't know what warning flags they build with."
msgstr ""

#: ../../../UsersManual.rst:873
msgid ""
"In the below example :option:`-Wextra-tokens` is ignored for only a single "
"line of code, after which the diagnostics return to whatever state had "
"previously existed."
msgstr ""

#: ../../../UsersManual.rst:890
msgid ""
"The push and pop pragmas will save and restore the full diagnostic state of "
"the compiler, regardless of how it was set. That means that it is possible "
"to use push and pop around GCC compatible diagnostics and Clang will push "
"and pop them appropriately, while GCC will ignore the pushes and pops as "
"unknown pragmas. It should be noted that while Clang supports the GCC "
"pragma, Clang and GCC do not support the exact same set of warnings, so even "
"when using GCC compatible #pragmas there is no guarantee that they will have "
"identical behaviour on both compilers."
msgstr ""

#: ../../../UsersManual.rst:899
msgid ""
"In addition to controlling warnings and errors generated by the compiler, it "
"is possible to generate custom warning and error messages through the "
"following pragmas:"
msgstr ""

#: ../../../UsersManual.rst:912
msgid ""
"These pragmas operate similarly to the ``#warning`` and ``#error`` "
"preprocessor directives, except that they may also be embedded into "
"preprocessor macros via the C99 ``_Pragma`` operator, for example:"
msgstr ""

#: ../../../UsersManual.rst:925
msgid "Controlling Diagnostics in System Headers"
msgstr ""

#: ../../../UsersManual.rst:927
msgid ""
"Warnings are suppressed when they occur in system headers. By default, an "
"included file is treated as a system header if it is found in an include "
"path specified by ``-isystem``, but this can be overridden in several ways."
msgstr ""

#: ../../../UsersManual.rst:932
msgid ""
"The ``system_header`` pragma can be used to mark the current file as being a "
"system header. No warnings will be produced from the location of the pragma "
"onwards within the same file."
msgstr ""

#: ../../../UsersManual.rst:946
msgid ""
"The `--system-header-prefix=` and `--no-system-header-prefix=` command-line "
"arguments can be used to override whether subsets of an include path are "
"treated as system headers. When the name in a ``#include`` directive is "
"found within a header search path and starts with a system prefix, the "
"header is treated as a system header. The last prefix on the command-line "
"which matches the specified header name takes precedence. For instance:"
msgstr ""

#: ../../../UsersManual.rst:959
msgid ""
"Here, ``#include \"x/a.h\"`` is treated as including a system header, even "
"if the header is found in ``foo``, and ``#include \"x/y/b.h\"`` is treated "
"as not including a system header, even if the header is found in ``bar``."
msgstr ""

#: ../../../UsersManual.rst:964
msgid ""
"A ``#include`` directive which finds a file relative to the current "
"directory is treated as including a system header if the including file is "
"treated as a system header."
msgstr ""

#: ../../../UsersManual.rst:971
msgid "Enabling All Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:973
msgid ""
"In addition to the traditional ``-W`` flags, one can enable **all** "
"diagnostics by passing :option:`-Weverything`. This works as expected with :"
"option:`-Werror`, and also includes the warnings from :option:`-pedantic`."
msgstr ""

#: ../../../UsersManual.rst:978
msgid ""
"Note that when combined with :option:`-w` (which disables all warnings), "
"that flag wins."
msgstr ""

#: ../../../UsersManual.rst:982
msgid "Controlling Static Analyzer Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:984
msgid ""
"While not strictly part of the compiler, the diagnostics from Clang's "
"`static analyzer <https://clang-analyzer.llvm.org>`_ can also be influenced "
"by the user via changes to the source code. See the available `annotations "
"<https://clang-analyzer.llvm.org/annotations.html>`_ and the analyzer's `FAQ "
"page <https://clang-analyzer.llvm.org/faq.html#exclude_code>`_ for more "
"information."
msgstr ""

#: ../../../UsersManual.rst:995
msgid "Precompiled Headers"
msgstr ""

#: ../../../UsersManual.rst:997
msgid ""
"`Precompiled headers <http://en.wikipedia.org/wiki/Precompiled_header>`__ "
"are a general approach employed by many compilers to reduce compilation "
"time. The underlying motivation of the approach is that it is common for the "
"same (and often large) header files to be included by multiple source files. "
"Consequently, compile times can often be greatly improved by caching some of "
"the (redundant) work done by a compiler to process headers. Precompiled "
"header files, which represent one of many ways to implement this "
"optimization, are literally files that represent an on-disk cache that "
"contains the vital information necessary to reduce some of the work needed "
"to process a corresponding header file. While details of precompiled headers "
"vary between compilers, precompiled headers have been shown to be highly "
"effective at speeding up program compilation on systems with very large "
"system headers (e.g., Mac OS X)."
msgstr ""

#: ../../../UsersManual.rst:1012
msgid "Generating a PCH File"
msgstr ""

#: ../../../UsersManual.rst:1014
msgid ""
"To generate a PCH file using Clang, one invokes Clang with the `-x "
"<language>-header` option. This mirrors the interface in GCC for generating "
"PCH files:"
msgstr ""

#: ../../../UsersManual.rst:1024
msgid "Using a PCH File"
msgstr ""

#: ../../../UsersManual.rst:1026
msgid ""
"A PCH file can then be used as a prefix header when a :option:`-include` "
"option is passed to ``clang``:"
msgstr ""

#: ../../../UsersManual.rst:1033
msgid ""
"The ``clang`` driver will first check if a PCH file for ``test.h`` is "
"available; if so, the contents of ``test.h`` (and the files it includes) "
"will be processed from the PCH file. Otherwise, Clang falls back to directly "
"processing the content of ``test.h``. This mirrors the behavior of GCC."
msgstr ""

#: ../../../UsersManual.rst:1041
msgid ""
"Clang does *not* automatically use PCH files for headers that are directly "
"included within a source file. For example:"
msgstr ""

#: ../../../UsersManual.rst:1051
msgid ""
"In this example, ``clang`` will not automatically use the PCH file for "
"``test.h`` since ``test.h`` was included directly in the source file and not "
"specified on the command line using :option:`-include`."
msgstr ""

#: ../../../UsersManual.rst:1056
msgid "Relocatable PCH Files"
msgstr ""

#: ../../../UsersManual.rst:1058
msgid ""
"It is sometimes necessary to build a precompiled header from headers that "
"are not yet in their final, installed locations. For example, one might "
"build a precompiled header within the build tree that is then meant to be "
"installed alongside the headers. Clang permits the creation of "
"\"relocatable\" precompiled headers, which are built with a given path (into "
"the build directory) and can later be used from an installed location."
msgstr ""

#: ../../../UsersManual.rst:1066
msgid ""
"To build a relocatable precompiled header, place your headers into a "
"subdirectory whose structure mimics the installed location. For example, if "
"you want to build a precompiled header for the header ``mylib.h`` that will "
"be installed into ``/usr/include``, create a subdirectory ``build/usr/"
"include`` and place the header ``mylib.h`` into that subdirectory. If "
"``mylib.h`` depends on other headers, then they can be stored within ``build/"
"usr/include`` in a way that mimics the installed location."
msgstr ""

#: ../../../UsersManual.rst:1075
msgid ""
"Building a relocatable precompiled header requires two additional arguments. "
"First, pass the ``--relocatable-pch`` flag to indicate that the resulting "
"PCH file should be relocatable. Second, pass ``-isysroot /path/to/build``, "
"which makes all includes for your library relative to the build directory. "
"For example:"
msgstr ""

#: ../../../UsersManual.rst:1085
msgid ""
"When loading the relocatable PCH file, the various headers used in the PCH "
"file are found from the system header root. For example, ``mylib.h`` can be "
"found in ``/usr/include/mylib.h``. If the headers are installed in some "
"other system root, the ``-isysroot`` option can be used provide a different "
"system root from which the headers will be based. For example, ``-isysroot /"
"Developer/SDKs/MacOSX10.4u.sdk`` will look for ``mylib.h`` in ``/Developer/"
"SDKs/MacOSX10.4u.sdk/usr/include/mylib.h``."
msgstr ""

#: ../../../UsersManual.rst:1093
msgid ""
"Relocatable precompiled headers are intended to be used in a limited number "
"of cases where the compilation environment is tightly controlled and the "
"precompiled header cannot be generated after headers have been installed."
msgstr ""

#: ../../../UsersManual.rst:1101
msgid "Controlling Code Generation"
msgstr ""

#: ../../../UsersManual.rst:1103
msgid ""
"Clang provides a number of ways to control code generation. The options are "
"listed below."
msgstr ""

#: ../../../UsersManual.rst:1150
msgid "**-f[no-]sanitize=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:1107
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious behavior."
msgstr ""

#: ../../../UsersManual.rst:1110
msgid ""
"This option controls whether Clang adds runtime checks for various forms of "
"undefined or suspicious behavior, and is disabled by default. If a check "
"fails, a diagnostic message is produced at runtime explaining the problem. "
"The main checks are:"
msgstr ""

#: ../../../UsersManual.rst:1117
msgid ""
"``-fsanitize=address``: :doc:`AddressSanitizer`, a memory error detector."
msgstr ""

#: ../../../UsersManual.rst:1122
msgid "``-fsanitize=thread``: :doc:`ThreadSanitizer`, a data race detector."
msgstr ""

#: ../../../UsersManual.rst:1125
msgid ""
"``-fsanitize=memory``: :doc:`MemorySanitizer`, a detector of uninitialized "
"reads. Requires instrumentation of all program code."
msgstr ""

#: ../../../UsersManual.rst:1130
msgid ""
"``-fsanitize=undefined``: :doc:`UndefinedBehaviorSanitizer`, a fast and "
"compatible undefined behavior checker."
msgstr ""

#: ../../../UsersManual.rst:1133
msgid ""
"``-fsanitize=dataflow``: :doc:`DataFlowSanitizer`, a general data flow "
"analysis."
msgstr ""

#: ../../../UsersManual.rst:1135
msgid ""
"``-fsanitize=cfi``: :doc:`control flow integrity <ControlFlowIntegrity>` "
"checks. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:1137
msgid ""
"``-fsanitize=safe-stack``: :doc:`safe stack <SafeStack>` protection against "
"stack-based memory corruption errors."
msgstr ""

#: ../../../UsersManual.rst:1140
msgid ""
"There are more fine-grained checks available: see the :ref:`list <ubsan-"
"checks>` of specific kinds of undefined behavior that can be detected and "
"the :ref:`list <cfi-schemes>` of control flow integrity schemes."
msgstr ""

#: ../../../UsersManual.rst:1145
msgid ""
"The ``-fsanitize=`` argument must also be provided when linking, in order to "
"link to the appropriate runtime library."
msgstr ""

#: ../../../UsersManual.rst:1148
msgid ""
"It is not possible to combine more than one of the ``-fsanitize=address``, "
"``-fsanitize=thread``, and ``-fsanitize=memory`` checkers in the same "
"program."
msgstr ""

#: ../../../UsersManual.rst:1152
msgid "**-f[no-]sanitize-recover=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:1154
msgid "**-f[no-]sanitize-recover=all**"
msgstr ""

#: ../../../UsersManual.rst:1156
msgid ""
"Controls which checks enabled by ``-fsanitize=`` flag are non-fatal. If the "
"check is fatal, program will halt after the first error of this kind is "
"detected and error report is printed."
msgstr ""

#: ../../../UsersManual.rst:1160
msgid ""
"By default, non-fatal checks are those enabled by :doc:"
"`UndefinedBehaviorSanitizer`, except for ``-fsanitize=return`` and ``-"
"fsanitize=unreachable``. Some sanitizers may not support recovery (or not "
"support it by default e.g. :doc:`AddressSanitizer`), and always crash the "
"program after the issue is detected."
msgstr ""

#: ../../../UsersManual.rst:1167
msgid ""
"Note that the ``-fsanitize-trap`` flag has precedence over this flag. This "
"means that if a check has been configured to trap elsewhere on the command "
"line, or if the check traps by default, this flag will not have any effect "
"unless that sanitizer's trapping behavior is disabled with ``-fno-sanitize-"
"trap``."
msgstr ""

#: ../../../UsersManual.rst:1173
msgid ""
"For example, if a command line contains the flags ``-fsanitize=undefined -"
"fsanitize-trap=undefined``, the flag ``-fsanitize-recover=alignment`` will "
"have no effect on its own; it will need to be accompanied by ``-fno-sanitize-"
"trap=alignment``."
msgstr ""

#: ../../../UsersManual.rst:1178
msgid "**-f[no-]sanitize-trap=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:1180
msgid ""
"Controls which checks enabled by the ``-fsanitize=`` flag trap. This option "
"is intended for use in cases where the sanitizer runtime cannot be used (for "
"instance, when building libc or a kernel module), or where the binary size "
"increase caused by the sanitizer runtime is a concern."
msgstr ""

#: ../../../UsersManual.rst:1185
msgid ""
"This flag is only compatible with :doc:`control flow integrity "
"<ControlFlowIntegrity>` schemes and :doc:`UndefinedBehaviorSanitizer` checks "
"other than ``vptr``. If this flag is supplied together with ``-"
"fsanitize=undefined``, the ``vptr`` sanitizer will be implicitly disabled."
msgstr ""

#: ../../../UsersManual.rst:1191
msgid "This flag is enabled by default for sanitizers in the ``cfi`` group."
msgstr ""

#: ../../../UsersManual.rst:1195
msgid ""
"Disable or modify sanitizer checks for objects (source files, functions, "
"variables, types) listed in the file. See :doc:`SanitizerSpecialCaseList` "
"for file format description."
msgstr ""

#: ../../../UsersManual.rst:1201
msgid ""
"Don't use blacklist file, if it was specified earlier in the command line."
msgstr ""

#: ../../../UsersManual.rst:1203
msgid "**-f[no-]sanitize-coverage=[type,features,...]**"
msgstr ""

#: ../../../UsersManual.rst:1205
msgid ""
"Enable simple code coverage in addition to certain sanitizers. See :doc:"
"`SanitizerCoverage` for more details."
msgstr ""

#: ../../../UsersManual.rst:1208
msgid "**-f[no-]sanitize-stats**"
msgstr ""

#: ../../../UsersManual.rst:1210
msgid ""
"Enable simple statistics gathering for the enabled sanitizers. See :doc:"
"`SanitizerStats` for more details."
msgstr ""

#: ../../../UsersManual.rst:1215
msgid "Deprecated alias for ``-fsanitize-trap=undefined``."
msgstr ""

#: ../../../UsersManual.rst:1219
msgid ""
"Enable cross-DSO control flow integrity checks. This flag modifies the "
"behavior of sanitizers in the ``cfi`` group to allow checking of cross-DSO "
"virtual and indirect calls."
msgstr ""

#: ../../../UsersManual.rst:1225
msgid ""
"Generalize pointers in return and argument types in function type signatures "
"checked by Control Flow Integrity indirect call checking. See :doc:"
"`ControlFlowIntegrity` for more details."
msgstr ""

#: ../../../UsersManual.rst:1231
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects, i.e. the vptr is invariant during an object's lifetime. This "
"enables better devirtualization. Turned off by default, because it is still "
"experimental."
msgstr ""

#: ../../../UsersManual.rst:1238
msgid ""
"Enable fast-math mode. This defines the ``__FAST_MATH__`` preprocessor "
"macro, and lets the compiler make aggressive, potentially-lossy assumptions "
"about floating-point math.  These include:"
msgstr ""

#: ../../../UsersManual.rst:1242
msgid ""
"Floating-point math obeys regular algebraic rules for real numbers (e.g. "
"``+`` and ``*`` are associative, ``x/y == x * (1/y)``, and ``(a + b) * c == "
"a * c + b * c``),"
msgstr ""

#: ../../../UsersManual.rst:1245
msgid ""
"operands to floating-point operations are not equal to ``NaN`` and ``Inf``, "
"and"
msgstr ""

#: ../../../UsersManual.rst:1247
msgid "``+0`` and ``-0`` are interchangeable."
msgstr ""

#: ../../../UsersManual.rst:1251
msgid "Select which denormal numbers the code is permitted to require."
msgstr ""

#: ../../../UsersManual.rst:1253
msgid ""
"Valid values are: ``ieee``, ``preserve-sign``, and ``positive-zero``, which "
"correspond to IEEE 754 denormal numbers, the sign of a flushed-to-zero "
"number is preserved in the sign of 0, denormals are flushed to positive "
"zero, respectively."
msgstr ""

#: ../../../UsersManual.rst:1260
msgid ""
"When a floating-point value is not representable in a destination integer "
"type, the code has undefined behavior according to the language standard. By "
"default, Clang will not guarantee any particular result in that case. With "
"the 'no-strict' option, Clang attempts to match the overflowing behavior of "
"the target's native float-to-int conversion instructions."
msgstr ""

#: ../../../UsersManual.rst:1268
msgid ""
"Enable whole-program vtable optimizations, such as single-implementation "
"devirtualization and virtual constant propagation, for classes with :doc:"
"`hidden LTO visibility <LTOVisibility>`. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:1274
msgid ""
"In order to improve devirtualization, forces emitting of vtables even in "
"modules where it isn't necessary. It causes more inline virtual functions to "
"be emitted."
msgstr ""

#: ../../../UsersManual.rst:1280
msgid "Don't assume that the C++'s new operator is sane."
msgstr ""

#: ../../../UsersManual.rst:1282
msgid ""
"This option tells the compiler to do not assume that C++'s global new "
"operator will always return a pointer that does not alias any other pointer "
"when the function returns."
msgstr ""

#: ../../../UsersManual.rst:1288
msgid ""
"Instruct code generator to emit a function call to the specified function "
"name for ``__builtin_trap()``."
msgstr ""

#: ../../../UsersManual.rst:1291
msgid ""
"LLVM code generator translates ``__builtin_trap()`` to a trap instruction if "
"it is supported by the target ISA. Otherwise, the builtin is translated into "
"a call to ``abort``. If this option is set, then the code generator will "
"always lower the builtin to a call to the specified function regardless of "
"whether the target ISA has a trap instruction. This option is useful for "
"environments (e.g. deeply embedded) where a trap cannot be properly handled, "
"or when some custom behavior is desired."
msgstr ""

#: ../../../UsersManual.rst:1302
msgid "Select which TLS model to use."
msgstr ""

#: ../../../UsersManual.rst:1304
msgid ""
"Valid values are: ``global-dynamic``, ``local-dynamic``, ``initial-exec`` "
"and ``local-exec``. The default value is ``global-dynamic``. The compiler "
"may use a different model if the selected model is not supported by the "
"target, or if a more efficient model can be used. The TLS model can be "
"overridden per variable using the ``tls_model`` attribute."
msgstr ""

#: ../../../UsersManual.rst:1313
msgid "Select emulated TLS model, which overrides all -ftls-model choices."
msgstr ""

#: ../../../UsersManual.rst:1315
msgid ""
"In emulated TLS mode, all access to TLS variables are converted to calls to "
"__emutls_get_address in the runtime library."
msgstr ""

#: ../../../UsersManual.rst:1320
msgid ""
"Select the ARM modes (arm or thumb) that support hardware division "
"instructions."
msgstr ""

#: ../../../UsersManual.rst:1323
msgid ""
"Valid values are: ``arm``, ``thumb`` and ``arm,thumb``. This option is used "
"to indicate which mode (arm or thumb) supports hardware division "
"instructions. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:1330
msgid "Enable or disable CRC instructions."
msgstr ""

#: ../../../UsersManual.rst:1332
msgid ""
"This option is used to indicate whether CRC instructions are to be "
"generated. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:1335
msgid "CRC instructions are enabled by default on ARMv8."
msgstr ""

#: ../../../UsersManual.rst:1339
msgid "Generate code which only uses the general purpose registers."
msgstr ""

#: ../../../UsersManual.rst:1341
msgid ""
"This option restricts the generated code to use general registers only. This "
"only applies to the AArch64 architecture."
msgstr ""

#: ../../../UsersManual.rst:1346
msgid "Control the usage of compact branches for MIPSR6."
msgstr ""

#: ../../../UsersManual.rst:1348
msgid ""
"Valid values are: ``never``, ``optimal`` and ``always``. The default value "
"is ``optimal`` which generates compact branches when a delay slot cannot be "
"filled. ``never`` disables the usage of compact branches and ``always`` "
"generates compact branches whenever possible."
msgstr ""

#: ../../../UsersManual.rst:1383
msgid "**-f[no-]max-type-align=[number]**"
msgstr ""

#: ../../../UsersManual.rst:1355
msgid ""
"Instruct the code generator to not enforce a higher alignment than the given "
"number (of bytes) when accessing memory via an opaque pointer or reference. "
"This cap is ignored when directly accessing a variable or when the pointee "
"type has an explicit “aligned” attribute."
msgstr ""

#: ../../../UsersManual.rst:1360
msgid ""
"The value should usually be determined by the properties of the system "
"allocator. Some builtin types, especially vector types, have very high "
"natural alignments; when working with values of those types, Clang usually "
"wants to use instructions that take advantage of that alignment.  However, "
"many system allocators do not promise to return memory that is more than 8-"
"byte or 16-byte-aligned.  Use this option to limit the alignment that the "
"compiler can assume for an arbitrary pointer, which may point onto the heap."
msgstr ""

#: ../../../UsersManual.rst:1368
msgid ""
"This option does not affect the ABI alignment of types; the layout of "
"structs and unions and the value returned by the alignof operator remain the "
"same."
msgstr ""

#: ../../../UsersManual.rst:1371
msgid ""
"This option can be overridden on a case-by-case basis by putting an explicit "
"“aligned” alignment on a struct, union, or typedef.  For example:"
msgstr ""

#: ../../../UsersManual.rst:1387
msgid ""
"Controls whether Clang emits an address-significance table into the object "
"file. Address-significance tables allow linkers to implement `safe ICF "
"<https://research.google.com/pubs/archive/36912.pdf>`_ without the false "
"positives that can result from other implementation techniques such as "
"relocation scanning. Address-significance tables are enabled by default on "
"ELF targets when using the integrated assembler. This flag currently only "
"has an effect on ELF targets."
msgstr ""

#: ../../../UsersManual.rst:1396
msgid "Profile Guided Optimization"
msgstr ""

#: ../../../UsersManual.rst:1398
msgid ""
"Profile information enables better optimization. For example, knowing that a "
"branch is taken very frequently helps the compiler make better decisions "
"when ordering basic blocks. Knowing that a function ``foo`` is called more "
"frequently than another function ``bar`` helps the inliner. Optimization "
"levels ``-O2`` and above are recommended for use of profile guided "
"optimization."
msgstr ""

#: ../../../UsersManual.rst:1404
msgid ""
"Clang supports profile guided optimization with two different kinds of "
"profiling. A sampling profiler can generate a profile with very low runtime "
"overhead, or you can build an instrumented version of the code that collects "
"more detailed profile information. Both kinds of profiles can provide "
"execution counts for instructions in the code and information on branches "
"taken and function invocation."
msgstr ""

#: ../../../UsersManual.rst:1411
msgid ""
"Regardless of which kind of profiling you use, be careful to collect "
"profiles by running your code with inputs that are representative of the "
"typical behavior. Code that is not exercised in the profile will be "
"optimized as if it is unimportant, and the compiler may make poor "
"optimization choices for code that is disproportionately used while "
"profiling."
msgstr ""

#: ../../../UsersManual.rst:1418
msgid "Differences Between Sampling and Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1420
msgid ""
"Although both techniques are used for similar purposes, there are important "
"differences between the two:"
msgstr ""

#: ../../../UsersManual.rst:1423
msgid ""
"Profile data generated with one cannot be used by the other, and there is no "
"conversion tool that can convert one to the other. So, a profile generated "
"via ``-fprofile-instr-generate`` must be used with ``-fprofile-instr-use``. "
"Similarly, sampling profiles generated by external profilers must be "
"converted and used with ``-fprofile-sample-use``."
msgstr ""

#: ../../../UsersManual.rst:1429
msgid ""
"Instrumentation profile data can be used for code coverage analysis and "
"optimization."
msgstr ""

#: ../../../UsersManual.rst:1432
msgid ""
"Sampling profiles can only be used for optimization. They cannot be used for "
"code coverage analysis. Although it would be technically possible to use "
"sampling profiles for code coverage, sample-based profiles are too coarse-"
"grained for code coverage purposes; it would yield poor results."
msgstr ""

#: ../../../UsersManual.rst:1437
msgid ""
"Sampling profiles must be generated by an external tool. The profile "
"generated by that tool must then be converted into a format that can be read "
"by LLVM. The section on sampling profilers describes one of the supported "
"sampling profile formats."
msgstr ""

#: ../../../UsersManual.rst:1444
msgid "Using Sampling Profilers"
msgstr ""

#: ../../../UsersManual.rst:1446
msgid ""
"Sampling profilers are used to collect runtime information, such as hardware "
"counters, while your application executes. They are typically very efficient "
"and do not incur a large runtime overhead. The sample data collected by the "
"profiler can be used during compilation to determine what the most executed "
"areas of the code are."
msgstr ""

#: ../../../UsersManual.rst:1452
msgid ""
"Using the data from a sample profiler requires some changes in the way a "
"program is built. Before the compiler can use profiling information, the "
"code needs to execute under the profiler. The following is the usual build "
"cycle when using sample profilers for optimization:"
msgstr ""

#: ../../../UsersManual.rst:1457
msgid ""
"Build the code with source line table information. You can use all the usual "
"build flags that you always build your application with. The only "
"requirement is that you add ``-gline-tables-only`` or ``-g`` to the command "
"line. This is important for the profiler to be able to map instructions back "
"to source line locations."
msgstr ""

#: ../../../UsersManual.rst:1467
msgid ""
"Run the executable under a sampling profiler. The specific profiler you use "
"does not really matter, as long as its output can be converted into the "
"format that the LLVM optimizer understands. Currently, there exists a "
"conversion tool for the Linux Perf profiler (https://perf.wiki.kernel.org/), "
"so these examples assume that you are using Linux Perf to profile your code."
msgstr ""

#: ../../../UsersManual.rst:1478
msgid ""
"Note the use of the ``-b`` flag. This tells Perf to use the Last Branch "
"Record (LBR) to record call chains. While this is not strictly required, it "
"provides better call information, which improves the accuracy of the profile "
"data."
msgstr ""

#: ../../../UsersManual.rst:1483
msgid ""
"Convert the collected profile data to LLVM's sample profile format. This is "
"currently supported via the AutoFDO converter ``create_llvm_prof``. It is "
"available at http://github.com/google/autofdo. Once built and installed, you "
"can convert the ``perf.data`` file to LLVM using the command:"
msgstr ""

#: ../../../UsersManual.rst:1493
msgid ""
"This will read ``perf.data`` and the binary file ``./code`` and emit the "
"profile data in ``code.prof``. Note that if you ran ``perf`` without the ``-"
"b`` flag, you need to use ``--use_lbr=false`` when calling "
"``create_llvm_prof``."
msgstr ""

#: ../../../UsersManual.rst:1498
msgid ""
"Build the code again using the collected profile. This step feeds the "
"profile back to the optimizers. This should result in a binary that executes "
"faster than the original one. Note that you are not required to build the "
"code with the exact same arguments that you used in the first step. The only "
"requirement is that you build the code with ``-gline-tables-only`` and ``-"
"fprofile-sample-use``."
msgstr ""

#: ../../../UsersManual.rst:1511
msgid "Sample Profile Formats"
msgstr ""

#: ../../../UsersManual.rst:1513
msgid ""
"Since external profilers generate profile data in a variety of custom "
"formats, the data generated by the profiler must be converted into a format "
"that can be read by the backend. LLVM supports three different sample "
"profile formats:"
msgstr ""

#: ../../../UsersManual.rst:1517
msgid ""
"ASCII text. This is the easiest one to generate. The file is divided into "
"sections, which correspond to each of the functions with profile "
"information. The format is described below. It can also be generated from "
"the binary or gcov formats using the ``llvm-profdata`` tool."
msgstr ""

#: ../../../UsersManual.rst:1522
msgid ""
"Binary encoding. This uses a more efficient encoding that yields smaller "
"profile files. This is the format generated by the ``create_llvm_prof`` tool "
"in http://github.com/google/autofdo."
msgstr ""

#: ../../../UsersManual.rst:1526
msgid ""
"GCC encoding. This is based on the gcov format, which is accepted by GCC. It "
"is only interesting in environments where GCC and Clang co-exist. This "
"encoding is only generated by the ``create_gcov`` tool in http://github.com/"
"google/autofdo. It can be read by LLVM and ``llvm-profdata``, but it cannot "
"be generated by either."
msgstr ""

#: ../../../UsersManual.rst:1532
msgid ""
"If you are using Linux Perf to generate sampling profiles, you can use the "
"conversion tool ``create_llvm_prof`` described in the previous section. "
"Otherwise, you will need to write a conversion tool that converts your "
"profiler's native format into one of these three."
msgstr ""

#: ../../../UsersManual.rst:1539
msgid "Sample Profile Text Format"
msgstr ""

#: ../../../UsersManual.rst:1541
msgid ""
"This section describes the ASCII text format for sampling profiles. It is, "
"arguably, the easiest one to generate. If you are interested in generating "
"any of the other two, consult the ``ProfileData`` library in LLVM's source "
"tree (specifically, ``include/llvm/ProfileData/SampleProfReader.h``)."
msgstr ""

#: ../../../UsersManual.rst:1559
msgid ""
"This is a nested tree in which the indentation represents the nesting level "
"of the inline stack. There are no blank lines in the file. And the spacing "
"within a single line is fixed. Additional spaces will result in an error "
"while reading the file."
msgstr ""

#: ../../../UsersManual.rst:1564
msgid "Any line starting with the '#' character is completely ignored."
msgstr ""

#: ../../../UsersManual.rst:1566
msgid ""
"Inlined calls are represented with indentation. The Inline stack is a stack "
"of source locations in which the top of the stack represents the leaf "
"function, and the bottom of the stack represents the actual symbol to which "
"the instruction belongs."
msgstr ""

#: ../../../UsersManual.rst:1571
msgid ""
"Function names must be mangled in order for the profile loader to match them "
"in the current translation unit. The two numbers in the function header "
"specify how many total samples were accumulated in the function (first "
"number), and the total number of samples accumulated in the prologue of the "
"function (second number). This head sample count provides an indicator of "
"how frequently the function is invoked."
msgstr ""

#: ../../../UsersManual.rst:1578
msgid "There are two types of lines in the function body."
msgstr ""

#: ../../../UsersManual.rst:1580
msgid ""
"Sampled line represents the profile information of a source location. "
"``offsetN[.discriminator]: number_of_samples [fn5:num fn6:num ... ]``"
msgstr ""

#: ../../../UsersManual.rst:1583
msgid ""
"Callsite line represents the profile information of an inlined callsite. "
"``offsetA[.discriminator]: fnA:num_of_total_samples``"
msgstr ""

#: ../../../UsersManual.rst:1586
msgid ""
"Each sampled line may contain several items. Some are optional (marked "
"below):"
msgstr ""

#: ../../../UsersManual.rst:1589
msgid ""
"Source line offset. This number represents the line number in the function "
"where the sample was collected. The line number is always relative to the "
"line where symbol of the function is defined. So, if the function has its "
"header at line 280, the offset 13 is at line 293 in the file."
msgstr ""

#: ../../../UsersManual.rst:1595
msgid ""
"Note that this offset should never be a negative number. This could happen "
"in cases like macros. The debug machinery will register the line number at "
"the point of macro expansion. So, if the macro was expanded in a line before "
"the start of the function, the profile converter should emit a 0 as the "
"offset (this means that the optimizers will not be able to associate a "
"meaningful weight to the instructions in the macro)."
msgstr ""

#: ../../../UsersManual.rst:1603
msgid ""
"[OPTIONAL] Discriminator. This is used if the sampled program was compiled "
"with DWARF discriminator support (http://wiki.dwarfstd.org/index.php?"
"title=Path_Discriminators). DWARF discriminators are unsigned integer values "
"that allow the compiler to distinguish between multiple execution paths on "
"the same source line location."
msgstr ""

#: ../../../UsersManual.rst:1610
msgid ""
"For example, consider the line of code ``if (cond) foo(); else bar();``. If "
"the predicate ``cond`` is true 80% of the time, then the edge into function "
"``foo`` should be considered to be taken most of the time. But both calls to "
"``foo`` and ``bar`` are at the same source line, so a sample count at that "
"line is not sufficient. The compiler needs to know which part of that line "
"is taken more frequently."
msgstr ""

#: ../../../UsersManual.rst:1618
msgid ""
"This is what discriminators provide. In this case, the calls to ``foo`` and "
"``bar`` will be at the same line, but will have different discriminator "
"values. This allows the compiler to correctly set edge weights into ``foo`` "
"and ``bar``."
msgstr ""

#: ../../../UsersManual.rst:1623
msgid ""
"Number of samples. This is an integer quantity representing the number of "
"samples collected by the profiler at this source location."
msgstr ""

#: ../../../UsersManual.rst:1627
msgid ""
"[OPTIONAL] Potential call targets and samples. If present, this line "
"contains a call instruction. This models both direct and number of samples. "
"For example,"
msgstr ""

#: ../../../UsersManual.rst:1635
msgid ""
"The above means that at relative line offset 130 there is a call instruction "
"that calls one of ``foo()``, ``bar()`` and ``baz()``, with ``baz()`` being "
"the relatively more frequently called target."
msgstr ""

#: ../../../UsersManual.rst:1639
msgid ""
"As an example, consider a program with the call chain ``main -> foo -> "
"bar``. When built with optimizations enabled, the compiler may inline the "
"calls to ``bar`` and ``foo`` inside ``main``. The generated profile could "
"then be something like this:"
msgstr ""

#: ../../../UsersManual.rst:1652
msgid ""
"This profile indicates that there were a total of 35,504 samples collected "
"in main. All of those were at line 1 (the call to ``foo``). Of those, 31,977 "
"were spent inside the body of ``bar``. The last line of the profile (``2: "
"0``) corresponds to line 2 inside ``main``. No samples were collected there."
msgstr ""

#: ../../../UsersManual.rst:1659
msgid "Profiling with Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1661
msgid ""
"Clang also supports profiling via instrumentation. This requires building a "
"special instrumented version of the code and has some runtime overhead "
"during the profiling, but it provides more detailed results than a sampling "
"profiler. It also provides reproducible results, at least to the extent that "
"the code behaves consistently across runs."
msgstr ""

#: ../../../UsersManual.rst:1667
msgid ""
"Here are the steps for using profile guided optimization with "
"instrumentation:"
msgstr ""

#: ../../../UsersManual.rst:1670
msgid ""
"Build an instrumented version of the code by compiling and linking with the "
"``-fprofile-instr-generate`` option."
msgstr ""

#: ../../../UsersManual.rst:1677
msgid ""
"Run the instrumented executable with inputs that reflect the typical usage. "
"By default, the profile data will be written to a ``default.profraw`` file "
"in the current directory. You can override that default by using option ``-"
"fprofile-instr-generate=`` or by setting the ``LLVM_PROFILE_FILE`` "
"environment variable to specify an alternate file. If non-default file name "
"is specified by both the environment variable and the command line option, "
"the environment variable takes precedence. The file name pattern specified "
"can include different modifiers: ``%p``, ``%h``, and ``%m``."
msgstr ""

#: ../../../UsersManual.rst:1686
msgid ""
"Any instance of ``%p`` in that file name will be replaced by the process ID, "
"so that you can easily distinguish the profile output from multiple runs."
msgstr ""

#: ../../../UsersManual.rst:1694
msgid ""
"The modifier ``%h`` can be used in scenarios where the same instrumented "
"binary is run in multiple different host machines dumping profile data to a "
"shared network based storage. The ``%h`` specifier will be substituted with "
"the hostname so that profiles collected from different hosts do not clobber "
"each other."
msgstr ""

#: ../../../UsersManual.rst:1700
msgid ""
"While the use of ``%p`` specifier can reduce the likelihood for the profiles "
"dumped from different processes to clobber each other, such clobbering can "
"still happen because of the ``pid`` re-use by the OS. Another side-effect of "
"using ``%p`` is that the storage requirement for raw profile data files is "
"greatly increased.  To avoid issues like this, the ``%m`` specifier can used "
"in the profile name.  When this specifier is used, the profiler runtime will "
"substitute ``%m`` with a unique integer identifier associated with the "
"instrumented binary. Additionally, multiple raw profiles dumped from "
"different processes that share a file system (can be on different hosts) "
"will be automatically merged by the profiler runtime during the dumping. If "
"the program links in multiple instrumented shared libraries, each library "
"will dump the profile data into its own profile data file (with its unique "
"integer id embedded in the profile name). Note that the merging enabled by "
"``%m`` is for raw profile data generated by profiler runtime. The resulting "
"merged \"raw\" profile data file still needs to be converted to a different "
"format expected by the compiler ( see step 3 below)."
msgstr ""

#: ../../../UsersManual.rst:1721
msgid ""
"Combine profiles from multiple runs and convert the \"raw\" profile format "
"to the input expected by clang. Use the ``merge`` command of the ``llvm-"
"profdata`` tool to do this."
msgstr ""

#: ../../../UsersManual.rst:1729
msgid ""
"Note that this step is necessary even when there is only one \"raw\" "
"profile, since the merge operation also changes the file format."
msgstr ""

#: ../../../UsersManual.rst:1732
msgid ""
"Build the code again using the ``-fprofile-instr-use`` option to specify the "
"collected profile data."
msgstr ""

#: ../../../UsersManual.rst:1739
msgid ""
"You can repeat step 4 as often as you like without regenerating the profile. "
"As you make changes to your code, clang may no longer be able to use the "
"profile data. It will warn you when this happens."
msgstr ""

#: ../../../UsersManual.rst:1743
msgid ""
"Profile generation using an alternative instrumentation method can be "
"controlled by the GCC-compatible flags ``-fprofile-generate`` and ``-"
"fprofile-use``. Although these flags are semantically equivalent to their "
"GCC counterparts, they *do not* handle GCC-compatible profiles. They are "
"only meant to implement GCC's semantics with respect to profile creation and "
"use."
msgstr ""

#: ../../../UsersManual.rst:1752
msgid ""
"The ``-fprofile-generate`` and ``-fprofile-generate=`` flags will use an "
"alternative instrumentation method for profile generation. When given a "
"directory name, it generates the profile file ``default_%m.profraw`` in the "
"directory named ``dirname`` if specified. If ``dirname`` does not exist, it "
"will be created at runtime. ``%m`` specifier will be substituted with a "
"unique id documented in step 2 above. In other words, with ``-fprofile-"
"generate[=<dirname>]`` option, the \"raw\" profile data automatic merging is "
"turned on by default, so there will no longer any risk of profile clobbering "
"from different running processes.  For example,"
msgstr ""

#: ../../../UsersManual.rst:1766
msgid ""
"When ``code`` is executed, the profile will be written to the file ``yyy/zzz/"
"default_xxxx.profraw``."
msgstr ""

#: ../../../UsersManual.rst:1769
msgid ""
"To generate the profile data file with the compiler readable format, the "
"``llvm-profdata`` tool can be used with the profile directory as the input:"
msgstr ""

#: ../../../UsersManual.rst:1776
msgid ""
"If the user wants to turn off the auto-merging feature, or simply override "
"the the profile dumping path specified at command line, the environment "
"variable ``LLVM_PROFILE_FILE`` can still be used to override the directory "
"and filename for the profile file at runtime."
msgstr ""

#: ../../../UsersManual.rst:1783
msgid ""
"Without any other arguments, ``-fprofile-use`` behaves identically to ``-"
"fprofile-instr-use``. Otherwise, if ``pathname`` is the full path to a "
"profile file, it reads from that file. If ``pathname`` is a directory name, "
"it reads from ``pathname/default.profdata``."
msgstr ""

#: ../../../UsersManual.rst:1789
msgid "Disabling Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1791
msgid ""
"In certain situations, it may be useful to disable profile generation or use "
"for specific files in a build, without affecting the main compilation flags "
"used for the other files in the project."
msgstr ""

#: ../../../UsersManual.rst:1795
msgid ""
"In these cases, you can use the flag ``-fno-profile-instr-generate`` (or ``-"
"fno-profile-generate``) to disable profile generation, and ``-fno-profile-"
"instr-use`` (or ``-fno-profile-use``) to disable profile use."
msgstr ""

#: ../../../UsersManual.rst:1799
msgid ""
"Note that these flags should appear after the corresponding profile flags to "
"have an effect."
msgstr ""

#: ../../../UsersManual.rst:1805
msgid "Profile remapping"
msgstr ""

#: ../../../UsersManual.rst:1807
msgid ""
"When the program is compiled after a change that affects many symbol names, "
"pre-existing profile data may no longer match the program. For example:"
msgstr ""

#: ../../../UsersManual.rst:1810
msgid ""
"switching from libstdc++ to libc++ will result in the mangled names of all "
"functions taking standard library types to change"
msgstr ""

#: ../../../UsersManual.rst:1812
msgid ""
"renaming a widely-used type in C++ will result in the mangled names of all "
"functions that have parameters involving that type to change"
msgstr ""

#: ../../../UsersManual.rst:1814
msgid ""
"moving from a 32-bit compilation to a 64-bit compilation may change the "
"underlying type of ``size_t`` and similar types, resulting in changes to "
"manglings"
msgstr ""

#: ../../../UsersManual.rst:1818
msgid ""
"Clang allows use of a profile remapping file to specify that such "
"differences in mangled names should be ignored when matching the profile "
"data against the program."
msgstr ""

#: ../../../UsersManual.rst:1824
msgid ""
"Specifies a file containing profile remapping information, that will be used "
"to match mangled names in the profile data to mangled names in the program."
msgstr ""

#: ../../../UsersManual.rst:1828
msgid "The profile remapping file is a text file containing lines of the form"
msgstr ""

#: ../../../UsersManual.rst:1834
msgid ""
"where ``fragmentkind`` is one of ``name``, ``type``, or ``encoding``, "
"indicating whether the following mangled name fragments are <`name <http://"
"itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.name>`_>s, <`type <http://"
"itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.type>`_>s, or <`encoding "
"<http://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.encoding>`_>s, "
"respectively. Blank lines and lines starting with ``#`` are ignored."
msgstr ""

#: ../../../UsersManual.rst:1842
msgid ""
"For convenience, built-in <substitution>s such as ``St`` and ``Ss`` are "
"accepted as <name>s (even though they technically are not <name>s)."
msgstr ""

#: ../../../UsersManual.rst:1845
msgid ""
"For example, to specify that ``absl::string_view`` and ``std::string_view`` "
"should be treated as equivalent when matching profile data, the following "
"remapping file could be used:"
msgstr ""

#: ../../../UsersManual.rst:1858
msgid ""
"Matching profile data using a profile remapping file is supported on a best-"
"effort basis. For example, information regarding indirect call targets is "
"currently not remapped. For best results, you are encouraged to generate new "
"profile data matching the updated program, or to remap the profile data "
"using the ``llvm-cxxmap`` and ``llvm-profdata merge`` tools."
msgstr ""

#: ../../../UsersManual.rst:1866
msgid ""
"Profile data remapping support is currently only implemented for LLVM's new "
"pass manager, which can be enabled with ``-fexperimental-new-pass-manager``."
msgstr ""

#: ../../../UsersManual.rst:1872
msgid ""
"Profile data remapping is currently only supported for C++ mangled names "
"following the Itanium C++ ABI mangling scheme. This covers all C++ targets "
"supported by Clang other than Windows."
msgstr ""

#: ../../../UsersManual.rst:1877
msgid "GCOV-based Profiling"
msgstr ""

#: ../../../UsersManual.rst:1879
msgid ""
"GCOV is a test coverage program, it helps to know how often a line of code "
"is executed. When instrumenting the code with ``--coverage`` option, some "
"counters are added for each edge linking basic blocks."
msgstr ""

#: ../../../UsersManual.rst:1883
msgid ""
"At compile time, gcno files are generated containing information about "
"blocks and edges between them. At runtime the counters are incremented and "
"at exit the counters are dumped in gcda files."
msgstr ""

#: ../../../UsersManual.rst:1887
msgid ""
"The tool ``llvm-cov gcov`` will parse gcno, gcda and source files to "
"generate a report ``.c.gcov``."
msgstr ""

#: ../../../UsersManual.rst:1892
msgid ""
"Define a list of regexes separated by a semi-colon. If a file name matches "
"any of the regexes then the file is instrumented."
msgstr ""

#: ../../../UsersManual.rst:1899
msgid ""
"For example, this will only instrument files finishing with ``.c``, skipping "
"``.h`` files."
msgstr ""

#: ../../../UsersManual.rst:1903
msgid ""
"Define a list of regexes separated by a semi-colon. If a file name doesn't "
"match all the regexes then the file is instrumented."
msgstr ""

#: ../../../UsersManual.rst:1910
msgid ""
"For example, this will instrument all the files except the ones in ``/usr/"
"include``."
msgstr ""

#: ../../../UsersManual.rst:1912
msgid ""
"If both options are used then a file is instrumented if its name matches any "
"of the regexes from ``-fprofile-filter-list`` and doesn't match all the "
"regexes from ``-fprofile-exclude-list``."
msgstr ""

#: ../../../UsersManual.rst:1921
msgid ""
"In that case ``/usr/foo/oof.h`` is instrumented since it matches the filter "
"regex and doesn't match the exclude regex, but ``/usr/include/foo.h`` "
"doesn't since it matches the exclude regex."
msgstr ""

#: ../../../UsersManual.rst:1926
msgid "Controlling Debug Information"
msgstr ""

#: ../../../UsersManual.rst:1929
msgid "Controlling Size of Debug Information"
msgstr ""

#: ../../../UsersManual.rst:1931
msgid ""
"Debug info kind generated by Clang can be set by one of the flags listed "
"below. If multiple flags are present, the last one is used."
msgstr ""

#: ../../../UsersManual.rst:1936
msgid "Don't generate any debug info (default)."
msgstr ""

#: ../../../UsersManual.rst:1940
msgid "Generate line number tables only."
msgstr ""

#: ../../../UsersManual.rst:1942
msgid ""
"This kind of debug info allows to obtain stack traces with function names, "
"file names and line numbers (by such tools as ``gdb`` or ``addr2line``).  It "
"doesn't contain any other data (e.g. description of local variables or "
"function parameters)."
msgstr ""

#: ../../../UsersManual.rst:1949
msgid ""
"Clang supports a number of optimizations to reduce the size of debug "
"information in the binary. They work based on the assumption that the debug "
"type information can be spread out over multiple compilation units.  For "
"instance, Clang will not emit type definitions for types that are not needed "
"by a module and could be replaced with a forward declaration.  Further, "
"Clang will only emit type info for a dynamic C++ class in the module that "
"contains the vtable for the class."
msgstr ""

#: ../../../UsersManual.rst:1958
msgid ""
"The **-fstandalone-debug** option turns off these optimizations. This is "
"useful when working with 3rd-party libraries that don't come with debug "
"information.  Note that Clang will never emit type information for types "
"that are not referenced at all by the program."
msgstr ""

#: ../../../UsersManual.rst:1965
msgid ""
"On Darwin **-fstandalone-debug** is enabled by default. The **-fno-"
"standalone-debug** option can be used to get to turn on the vtable-based "
"optimization described above."
msgstr ""

#: ../../../UsersManual.rst:1971
msgid "Generate complete debug info."
msgstr ""

#: ../../../UsersManual.rst:1974
msgid "Controlling Macro Debug Info Generation"
msgstr ""

#: ../../../UsersManual.rst:1976
msgid ""
"Debug info for C preprocessor macros increases the size of debug information "
"in the binary. Macro debug info generated by Clang can be controlled by the "
"flags listed below."
msgstr ""

#: ../../../UsersManual.rst:1982
msgid ""
"Generate debug info for preprocessor macros. This flag is discarded when **-"
"g0** is enabled."
msgstr ""

#: ../../../UsersManual.rst:1987
msgid "Do not generate debug info for preprocessor macros (default)."
msgstr ""

#: ../../../UsersManual.rst:1990
msgid "Controlling Debugger \"Tuning\""
msgstr ""

#: ../../../UsersManual.rst:1992
msgid ""
"While Clang generally emits standard DWARF debug info (http://dwarfstd.org), "
"different debuggers may know how to take advantage of different specific "
"DWARF features. You can \"tune\" the debug info for one of several different "
"debuggers."
msgstr ""

#: ../../../UsersManual.rst:1998
msgid ""
"Tune the debug info for the ``gdb``, ``lldb``, or Sony PlayStation\\ |reg| "
"debugger, respectively. Each of these options implies **-g**. (Therefore, if "
"you want both **-gline-tables-only** and debugger tuning, the tuning option "
"must come first.)"
msgstr ""

#: ../../../UsersManual.rst:2005
msgid "Controlling LLVM IR Output"
msgstr ""

#: ../../../UsersManual.rst:2008
msgid "Controlling Value Names in LLVM IR"
msgstr ""

#: ../../../UsersManual.rst:2010
msgid ""
"Emitting value names in LLVM IR increases the size and verbosity of the IR. "
"By default, value names are only emitted in assertion-enabled builds of "
"Clang. However, when reading IR it can be useful to re-enable the emission "
"of value names to improve readability."
msgstr ""

#: ../../../UsersManual.rst:2017
msgid "Discard value names when generating LLVM IR."
msgstr ""

#: ../../../UsersManual.rst:2021
msgid ""
"Do not discard value names when generating LLVM IR. This option can be used "
"to re-enable names for release builds of Clang."
msgstr ""

#: ../../../UsersManual.rst:2026
msgid "Comment Parsing Options"
msgstr ""

#: ../../../UsersManual.rst:2028
msgid ""
"Clang parses Doxygen and non-Doxygen style documentation comments and "
"attaches them to the appropriate declaration nodes.  By default, it only "
"parses Doxygen-style comments and ignores ordinary comments starting with "
"``//`` and ``/*``."
msgstr ""

#: ../../../UsersManual.rst:2035
msgid ""
"Emit warnings about use of documentation comments.  This warning group is "
"off by default."
msgstr ""

#: ../../../UsersManual.rst:2038
msgid ""
"This includes checking that ``\\param`` commands name parameters that "
"actually present in the function signature, checking that ``\\returns`` is "
"used only on functions that actually return a value etc."
msgstr ""

#: ../../../UsersManual.rst:2044
msgid "Don't warn when encountering an unknown Doxygen command."
msgstr ""

#: ../../../UsersManual.rst:2048
msgid ""
"Parse all comments as documentation comments (including ordinary comments "
"starting with ``//`` and ``/*``)."
msgstr ""

#: ../../../UsersManual.rst:2053
msgid ""
"Define custom documentation commands as block commands.  This allows Clang "
"to construct the correct AST for these custom commands, and silences "
"warnings about unknown commands.  Several commands must be separated by a "
"comma *without trailing space*; e.g. ``-fcomment-block-commands=foo,bar`` "
"defines custom commands ``\\foo`` and ``\\bar``."
msgstr ""

#: ../../../UsersManual.rst:2059
msgid ""
"It is also possible to use ``-fcomment-block-commands`` several times; e.g. "
"``-fcomment-block-commands=foo -fcomment-block-commands=bar`` does the same "
"as above."
msgstr ""

#: ../../../UsersManual.rst:2066
msgid "C Language Features"
msgstr ""

#: ../../../UsersManual.rst:2068
msgid ""
"The support for standard C in clang is feature-complete except for the C99 "
"floating-point pragmas."
msgstr ""

#: ../../../UsersManual.rst:2072
msgid "Extensions supported by clang"
msgstr ""

#: ../../../UsersManual.rst:2074
msgid "See :doc:`LanguageExtensions`."
msgstr ""

#: ../../../UsersManual.rst:2077
msgid "Differences between various standard modes"
msgstr ""

#: ../../../UsersManual.rst:2079
msgid ""
"clang supports the -std option, which changes what language mode clang uses. "
"The supported modes for C are c89, gnu89, c99, gnu99, c11, gnu11, c17, "
"gnu17, and various aliases for those modes. If no -std option is specified, "
"clang defaults to gnu11 mode. Many C99 and C11 features are supported in "
"earlier modes as a conforming extension, with a warning. Use ``-pedantic-"
"errors`` to request an error if a feature from a later standard revision is "
"used in an earlier mode."
msgstr ""

#: ../../../UsersManual.rst:2087
msgid "Differences between all ``c*`` and ``gnu*`` modes:"
msgstr ""

#: ../../../UsersManual.rst:2089
msgid "``c*`` modes define \"``__STRICT_ANSI__``\"."
msgstr ""

#: ../../../UsersManual.rst:2090
msgid ""
"Target-specific defines not prefixed by underscores, like \"linux\", are "
"defined in ``gnu*`` modes."
msgstr ""

#: ../../../UsersManual.rst:2092
msgid ""
"Trigraphs default to being off in ``gnu*`` modes; they can be enabled by the "
"-trigraphs option."
msgstr ""

#: ../../../UsersManual.rst:2094
msgid ""
"The parser recognizes \"asm\" and \"typeof\" as keywords in ``gnu*`` modes; "
"the variants \"``__asm__``\" and \"``__typeof__``\" are recognized in all "
"modes."
msgstr ""

#: ../../../UsersManual.rst:2097
msgid ""
"The Apple \"blocks\" extension is recognized by default in ``gnu*`` modes on "
"some platforms; it can be enabled in any mode with the \"-fblocks\" option."
msgstr ""

#: ../../../UsersManual.rst:2100
msgid ""
"Arrays that are VLA's according to the standard, but which can be constant "
"folded by the frontend are treated as fixed size arrays. This occurs for "
"things like \"int X[(1, 2)];\", which is technically a VLA. ``c*`` modes are "
"strictly compliant and treat these as VLAs."
msgstr ""

#: ../../../UsersManual.rst:2105
msgid "Differences between ``*89`` and ``*99`` modes:"
msgstr ""

#: ../../../UsersManual.rst:2107
msgid ""
"The ``*99`` modes default to implementing \"inline\" as specified in C99, "
"while the ``*89`` modes implement the GNU version. This can be overridden "
"for individual functions with the ``__gnu_inline__`` attribute."
msgstr ""

#: ../../../UsersManual.rst:2111
msgid "Digraphs are not recognized in c89 mode."
msgstr ""

#: ../../../UsersManual.rst:2112
msgid ""
"The scope of names defined inside a \"for\", \"if\", \"switch\", \"while\", "
"or \"do\" statement is different. (example: \"``if ((struct x {int x;}*)0) {}"
"``\".)"
msgstr ""

#: ../../../UsersManual.rst:2115
msgid "``__STDC_VERSION__`` is not defined in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:2116
msgid "\"inline\" is not recognized as a keyword in c89 mode."
msgstr ""

#: ../../../UsersManual.rst:2117
msgid "\"restrict\" is not recognized as a keyword in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:2118
msgid "Commas are allowed in integer constant expressions in ``*99`` modes."
msgstr ""

#: ../../../UsersManual.rst:2119
msgid ""
"Arrays which are not lvalues are not implicitly promoted to pointers in "
"``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:2121
msgid "Some warnings are different."
msgstr ""

#: ../../../UsersManual.rst:2123
msgid "Differences between ``*99`` and ``*11`` modes:"
msgstr ""

#: ../../../UsersManual.rst:2125
msgid "Warnings for use of C11 features are disabled."
msgstr ""

#: ../../../UsersManual.rst:2126
msgid "``__STDC_VERSION__`` is defined to ``201112L`` rather than ``199901L``."
msgstr ""

#: ../../../UsersManual.rst:2128
msgid "Differences between ``*11`` and ``*17`` modes:"
msgstr ""

#: ../../../UsersManual.rst:2130
msgid "``__STDC_VERSION__`` is defined to ``201710L`` rather than ``201112L``."
msgstr ""

#: ../../../UsersManual.rst:2133
msgid "GCC extensions not implemented yet"
msgstr ""

#: ../../../UsersManual.rst:2135
msgid ""
"clang tries to be compatible with gcc as much as possible, but some gcc "
"extensions are not implemented yet:"
msgstr ""

#: ../../../UsersManual.rst:2138
msgid ""
"clang does not support decimal floating point types (``_Decimal32`` and "
"friends) or fixed-point types (``_Fract`` and friends); nobody has expressed "
"interest in these features yet, so it's hard to say when they will be "
"implemented."
msgstr ""

#: ../../../UsersManual.rst:2142
msgid ""
"clang does not support nested functions; this is a complex feature which is "
"infrequently used, so it is unlikely to be implemented anytime soon. In C+"
"+11 it can be emulated by assigning lambda functions to local variables, e.g:"
msgstr ""

#: ../../../UsersManual.rst:2155
msgid ""
"clang only supports global register variables when the register specified is "
"non-allocatable (e.g. the stack pointer). Support for general global "
"register variables is unlikely to be implemented soon because it requires "
"additional LLVM backend support."
msgstr ""

#: ../../../UsersManual.rst:2159
msgid ""
"clang does not support static initialization of flexible array members. This "
"appears to be a rarely used extension, but could be implemented pending user "
"demand."
msgstr ""

#: ../../../UsersManual.rst:2162
msgid ""
"clang does not support ``__builtin_va_arg_pack``/"
"``__builtin_va_arg_pack_len``. This is used rarely, but in some potentially "
"interesting places, like the glibc headers, so it may be implemented pending "
"user demand. Note that because clang pretends to be like GCC 4.2, and this "
"extension was introduced in 4.3, the glibc headers will not try to use this "
"extension with clang at the moment."
msgstr ""

#: ../../../UsersManual.rst:2169
msgid ""
"clang does not support the gcc extension for forward-declaring function "
"parameters; this has not shown up in any real-world code yet, though, so it "
"might never be implemented."
msgstr ""

#: ../../../UsersManual.rst:2173
msgid ""
"This is not a complete list; if you find an unsupported extension missing "
"from this list, please send an e-mail to cfe-dev. This list currently "
"excludes C++; see :ref:`C++ Language Features <cxx>`. Also, this list does "
"not include bugs in mostly-implemented features; please see the `bug tracker "
"<https://bugs.llvm.org/buglist.cgi?quicksearch=product%3Aclang+component%3A-"
"New%2BBugs%2CAST%2CBasic%2CDriver%2CHeaders%2CLLVM%2BCodeGen%2Cparser%2Cpreprocessor%2CSemantic%2BAnalyzer>`_ "
"for known existing bugs (FIXME: Is there a section for bug-reporting "
"guidelines somewhere?)."
msgstr ""

#: ../../../UsersManual.rst:2183
msgid "Intentionally unsupported GCC extensions"
msgstr ""

#: ../../../UsersManual.rst:2185
msgid ""
"clang does not support the gcc extension that allows variable-length arrays "
"in structures. This is for a few reasons: one, it is tricky to implement, "
"two, the extension is completely undocumented, and three, the extension "
"appears to be rarely used. Note that clang *does* support flexible array "
"members (arrays with a zero or unspecified size at the end of a structure)."
msgstr ""

#: ../../../UsersManual.rst:2191
msgid ""
"clang does not have an equivalent to gcc's \"fold\"; this means that clang "
"doesn't accept some constructs gcc might accept in contexts where a constant "
"expression is required, like \"x-x\" where x is a variable."
msgstr ""

#: ../../../UsersManual.rst:2195
msgid ""
"clang does not support ``__builtin_apply`` and friends; this extension is "
"extremely obscure and difficult to implement reliably."
msgstr ""

#: ../../../UsersManual.rst:2201
msgid "Microsoft extensions"
msgstr ""

#: ../../../UsersManual.rst:2203
msgid ""
"clang has support for many extensions from Microsoft Visual C++. To enable "
"these extensions, use the ``-fms-extensions`` command-line option. This is "
"the default for Windows targets. Clang does not implement every pragma or "
"declspec provided by MSVC, but the popular ones, such as "
"``__declspec(dllexport)`` and ``#pragma comment(lib)`` are well supported."
msgstr ""

#: ../../../UsersManual.rst:2209
msgid ""
"clang has a ``-fms-compatibility`` flag that makes clang accept enough "
"invalid C++ to be able to parse most Microsoft headers. For example, it "
"allows `unqualified lookup of dependent base class members <https://clang."
"llvm.org/compatibility.html#dep_lookup_bases>`_, which is a common "
"compatibility issue with clang. This flag is enabled by default for Windows "
"targets."
msgstr ""

#: ../../../UsersManual.rst:2216
msgid ""
"``-fdelayed-template-parsing`` lets clang delay parsing of function template "
"definitions until the end of a translation unit. This flag is enabled by "
"default for Windows targets."
msgstr ""

#: ../../../UsersManual.rst:2220
msgid ""
"For compatibility with existing code that compiles with MSVC, clang defines "
"the ``_MSC_VER`` and ``_MSC_FULL_VER`` macros. These default to the values "
"of 1800 and 180000000 respectively, making clang look like an early release "
"of Visual C++ 2013. The ``-fms-compatibility-version=`` flag overrides these "
"values.  It accepts a dotted version tuple, such as 19.00.23506. Changing "
"the MSVC compatibility version makes clang behave more like that version of "
"MSVC. For example, ``-fms-compatibility-version=19`` will enable C++14 "
"features and define ``char16_t`` and ``char32_t`` as builtin types."
msgstr ""

#: ../../../UsersManual.rst:2232
msgid "C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:2234
msgid ""
"clang fully implements all of standard C++98 except for exported templates "
"(which were removed in C++11), and all of standard C++11 and the current "
"draft standard for C++1y."
msgstr ""

#: ../../../UsersManual.rst:2239 ../../../UsersManual.rst:2293
msgid "Controlling implementation limits"
msgstr ""

#: ../../../UsersManual.rst:2243
msgid ""
"Sets the limit for nested parentheses, brackets, and braces to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:2248
msgid ""
"Sets the limit for recursive constexpr function invocations to N.  The "
"default is 512."
msgstr ""

#: ../../../UsersManual.rst:2253
msgid ""
"Sets the limit for the number of full-expressions evaluated in a single "
"constant expression evaluation.  The default is 1048576."
msgstr ""

#: ../../../UsersManual.rst:2258
msgid ""
"Sets the limit for recursively nested template instantiations to N.  The "
"default is 1024."
msgstr ""

#: ../../../UsersManual.rst:2263
msgid ""
"Sets the limit for iterative calls to 'operator->' functions to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:2269
msgid "Objective-C Language Features"
msgstr ""

#: ../../../UsersManual.rst:2274
msgid "Objective-C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:2279
msgid "OpenMP Features"
msgstr ""

#: ../../../UsersManual.rst:2281
msgid ""
"Clang supports all OpenMP 4.5 directives and clauses. See :doc:"
"`OpenMPSupport` for additional details."
msgstr ""

#: ../../../UsersManual.rst:2284
msgid ""
"Use `-fopenmp` to enable OpenMP. Support for OpenMP can be disabled with `-"
"fno-openmp`."
msgstr ""

#: ../../../UsersManual.rst:2287
msgid ""
"Use `-fopenmp-simd` to enable OpenMP simd features only, without linking the "
"runtime library; for combined constructs (e.g. ``#pragma omp parallel for "
"simd``) the non-simd directives and clauses will be ignored. This can be "
"disabled with `-fno-openmp-simd`."
msgstr ""

#: ../../../UsersManual.rst:2297
msgid ""
"Controls code generation for OpenMP threadprivate variables. In presence of "
"this option all threadprivate variables are generated the same way as thread "
"local variables, using TLS support. If `-fno-openmp-use-tls` is provided or "
"target does not support TLS, code generation for threadprivate variables "
"relies on OpenMP runtime library."
msgstr ""

#: ../../../UsersManual.rst:2306
msgid "OpenCL Features"
msgstr ""

#: ../../../UsersManual.rst:2308
msgid ""
"Clang can be used to compile OpenCL kernels for execution on a device (e.g. "
"GPU). It is possible to compile the kernel into a binary (e.g. for AMD or "
"Nvidia targets) that can be uploaded to run directly on a device (e.g. using "
"`clCreateProgramWithBinary <https://www.khronos.org/registry/OpenCL/specs/"
"opencl-1.1.pdf#111>`_) or into generic bitcode files loadable into other "
"toolchains."
msgstr ""

#: ../../../UsersManual.rst:2315
msgid ""
"Compiling to a binary using the default target from the installation can be "
"done as follows:"
msgstr ""

#: ../../../UsersManual.rst:2323
msgid ""
"Compiling for a specific target can be done by specifying the triple "
"corresponding to the target, for example:"
msgstr ""

#: ../../../UsersManual.rst:2331
msgid "Compiling to bitcode can be done as follows:"
msgstr ""

#: ../../../UsersManual.rst:2337
msgid ""
"This will produce a generic test.bc file that can be used in vendor "
"toolchains to perform machine code generation."
msgstr ""

#: ../../../UsersManual.rst:2340
msgid "Clang currently supports OpenCL C language standards up to v2.0."
msgstr ""

#: ../../../UsersManual.rst:2343
msgid "OpenCL Specific Options"
msgstr ""

#: ../../../UsersManual.rst:2345
msgid ""
"Most of the OpenCL build options from `the specification v2.0 section 5.8.4 "
"<https://www.khronos.org/registry/cl/specs/opencl-2.0.pdf#200>`_ are "
"available."
msgstr ""

#: ../../../UsersManual.rst:2348
msgid "Examples:"
msgstr ""

#: ../../../UsersManual.rst:2354
msgid "Some extra options are available to support special OpenCL features."
msgstr ""

#: ../../../UsersManual.rst:2358
msgid ""
"Loads standard includes during compilations. By default OpenCL headers are "
"not loaded and therefore standard library includes are not available. To "
"load them automatically a flag has been added to the frontend (see also :ref:"
"`the section on the OpenCL Header <opencl_header>`):"
msgstr ""

#: ../../../UsersManual.rst:2367
msgid ""
"Alternatively ``-include`` or ``-I`` followed by the path to the header "
"location can be given manually."
msgstr ""

#: ../../../UsersManual.rst:2374
msgid ""
"In this case the kernel code should contain ``#include <opencl-c.h>`` just "
"as a regular C include."
msgstr ""

#: ../../../UsersManual.rst:2381
msgid ""
"Disables support of OpenCL extensions. All OpenCL targets provide a list of "
"extensions that they support. Clang allows to amend this using the ``-cl-"
"ext`` flag with a comma-separated list of extensions prefixed with ``'+'`` "
"or ``'-'``. The syntax: ``-cl-ext=<(['-'|'+']<extension>[,])+>``,  where "
"extensions can be either one of `the OpenCL specification extensions "
"<https://www.khronos.org/registry/cl/sdk/2.0/docs/man/xhtml/EXTENSION."
"html>`_ or any known vendor extension. Alternatively, ``'all'`` can be used "
"to enable or disable all known extensions. Example disabling double support "
"for the 64-bit SPIR target:"
msgstr ""

#: ../../../UsersManual.rst:2395
msgid ""
"Enabling all extensions except double support in R600 AMD GPU can be done "
"using:"
msgstr ""

#: ../../../UsersManual.rst:2405
msgid ""
"Overrides the target address space map with a fake map. This allows adding "
"explicit address space IDs to the bitcode for non-segmented memory "
"architectures that don't have separate IDs for each of the OpenCL logical "
"address spaces by default. Passing ``-ffake-address-space-map`` will add/"
"override address spaces of the target compiled for with the following "
"values: ``1-global``, ``2-constant``, ``3-local``, ``4-generic``. The "
"private address space is represented by the absence of an address space "
"attribute in the IR (see also :ref:`the section on the address space "
"attribute <opencl_addrsp>`)."
msgstr ""

#: ../../../UsersManual.rst:2418
msgid ""
"Some other flags used for the compilation for C can also be passed while "
"compiling for OpenCL, examples: ``-c``, ``-O<1-4|s>``, ``-o``, ``-emit-"
"llvm``, etc."
msgstr ""

#: ../../../UsersManual.rst:2422
msgid "OpenCL Targets"
msgstr ""

#: ../../../UsersManual.rst:2424
msgid ""
"OpenCL targets are derived from the regular Clang target classes. The OpenCL "
"specific parts of the target representation provide address space mapping as "
"well as a set of supported extensions."
msgstr ""

#: ../../../UsersManual.rst:2429
msgid "Specific Targets"
msgstr ""

#: ../../../UsersManual.rst:2431
msgid ""
"There is a set of concrete HW architectures that OpenCL can be compiled for."
msgstr ""

#: ../../../UsersManual.rst:2433
msgid "For AMD target:"
msgstr ""

#: ../../../UsersManual.rst:2439
msgid "For Nvidia architectures:"
msgstr ""

#: ../../../UsersManual.rst:2447
msgid "Generic Targets"
msgstr ""

#: ../../../UsersManual.rst:2449
msgid ""
"SPIR is available as a generic target to allow portable bitcode to be "
"produced that can be used across GPU toolchains. The implementation follows "
"`the SPIR specification <https://www.khronos.org/spir>`_. There are two "
"flavors available for 32 and 64 bits."
msgstr ""

#: ../../../UsersManual.rst:2459
msgid ""
"All known OpenCL extensions are supported in the SPIR targets. Clang will "
"generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and SPIR v2.0 "
"for OpenCL v2.0."
msgstr ""

#: ../../../UsersManual.rst:2463
msgid ""
"x86 is used by some implementations that are x86 compatible and currently "
"remains for backwards compatibility (with older implementations prior to "
"SPIR target support). For \"non-SPMD\" targets which cannot spawn multiple "
"work-items on the fly using hardware, which covers practically all non-GPU "
"devices such as CPUs and DSPs, additional processing is needed for the "
"kernels to support multiple work-item execution. For this, a 3rd party "
"toolchain, such as for example `POCL <http://portablecl.org/>`_, can be used."
msgstr ""

#: ../../../UsersManual.rst:2471
msgid ""
"This target does not support multiple memory segments and, therefore, the "
"fake address space map can be added using the :ref:`-ffake-address-space-map "
"<opencl_fake_address_space_map>` flag."
msgstr ""

#: ../../../UsersManual.rst:2478
msgid "OpenCL Header"
msgstr ""

#: ../../../UsersManual.rst:2480
msgid ""
"By default Clang will not include standard headers and therefore OpenCL "
"builtin functions and some types (i.e. vectors) are unknown. The default CL "
"header is, however, provided in the Clang installation and can be enabled by "
"passing the ``-finclude-default-header`` flag to the Clang frontend."
msgstr ""

#: ../../../UsersManual.rst:2490
msgid ""
"Because the header is very large and long to parse, PCH (:doc:"
"`PCHInternals`) and modules (:doc:`Modules`) are used internally to improve "
"the compilation speed."
msgstr ""

#: ../../../UsersManual.rst:2494
msgid "To enable modules for OpenCL:"
msgstr ""

#: ../../../UsersManual.rst:2501
msgid "OpenCL Extensions"
msgstr ""

#: ../../../UsersManual.rst:2503
msgid ""
"All of the ``cl_khr_*`` extensions from `the official OpenCL specification "
"<https://www.khronos.org/registry/OpenCL/sdk/2.0/docs/man/xhtml/EXTENSION."
"html>`_ up to and including version 2.0 are available and set per target "
"depending on the support available in the specific architecture."
msgstr ""

#: ../../../UsersManual.rst:2508
msgid ""
"It is possible to alter the default extensions setting per target using ``-"
"cl-ext`` flag. (See :ref:`flags description <opencl_cl_ext>` for more "
"details)."
msgstr ""

#: ../../../UsersManual.rst:2511
msgid ""
"Vendor extensions can be added flexibly by declaring the list of types and "
"functions associated with each extensions enclosed within the following "
"compiler pragma directives:"
msgstr ""

#: ../../../UsersManual.rst:2521
msgid ""
"For example, parsing the following code adds ``my_t`` type and ``my_func`` "
"function to the custom ``my_ext`` extension."
msgstr ""

#: ../../../UsersManual.rst:2533
msgid "Declaring the same types in different vendor extensions is disallowed."
msgstr ""

#: ../../../UsersManual.rst:2536
msgid "OpenCL Metadata"
msgstr ""

#: ../../../UsersManual.rst:2538
msgid ""
"Clang uses metadata to provide additional OpenCL semantics in IR needed for "
"backends and OpenCL runtime."
msgstr ""

#: ../../../UsersManual.rst:2541
msgid ""
"Each kernel will have function metadata attached to it, specifying the "
"arguments. Kernel argument metadata is used to provide source level "
"information for querying at runtime, for example using the "
"`clGetKernelArgInfo <https://www.khronos.org/registry/OpenCL/specs/"
"opencl-1.2.pdf#167>`_ call."
msgstr ""

#: ../../../UsersManual.rst:2547
msgid ""
"Note that ``-cl-kernel-arg-info`` enables more information about the "
"original CL code to be added e.g. kernel parameter names will appear in the "
"OpenCL metadata along with other information."
msgstr ""

#: ../../../UsersManual.rst:2551
msgid ""
"The IDs used to encode the OpenCL's logical address spaces in the argument "
"info metadata follows the SPIR address space mapping as defined in the SPIR "
"specification `section 2.2 <https://www.khronos.org/registry/spir/specs/"
"spir_spec-2.0.pdf#18>`_"
msgstr ""

#: ../../../UsersManual.rst:2557
msgid "OpenCL-Specific Attributes"
msgstr ""

#: ../../../UsersManual.rst:2559
msgid ""
"OpenCL support in Clang contains a set of attribute taken directly from the "
"specification as well as additional attributes."
msgstr ""

#: ../../../UsersManual.rst:2562
msgid "See also :doc:`AttributeReference`."
msgstr ""

#: ../../../UsersManual.rst:2565
msgid "nosvm"
msgstr ""

#: ../../../UsersManual.rst:2567
msgid ""
"Clang supports this attribute to comply to OpenCL v2.0 conformance, but it "
"does not have any effect on the IR. For more details reffer to the "
"specification `section 6.7.2 <https://www.khronos.org/registry/cl/specs/"
"opencl-2.0-openclc.pdf#49>`_"
msgstr ""

#: ../../../UsersManual.rst:2574
msgid "opencl_unroll_hint"
msgstr ""

#: ../../../UsersManual.rst:2576
msgid ""
"The implementation of this feature mirrors the unroll hint for C. More "
"details on the syntax can be found in the specification `section 6.11.5 "
"<https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#61>`_"
msgstr ""

#: ../../../UsersManual.rst:2582
msgid "convergent"
msgstr ""

#: ../../../UsersManual.rst:2584
msgid ""
"To make sure no invalid optimizations occur for single program multiple data "
"(SPMD) / single instruction multiple thread (SIMT) Clang provides attributes "
"that can be used for special functions that have cross work item semantics. "
"An example is the subgroup operations such as `intel_sub_group_shuffle "
"<https://www.khronos.org/registry/cl/extensions/intel/cl_intel_subgroups."
"txt>`_"
msgstr ""

#: ../../../UsersManual.rst:2601
msgid ""
"with non-SPMD semantics this is optimized to the following equivalent code:"
msgstr ""

#: ../../../UsersManual.rst:2616
msgid ""
"Declaring the function ``my_sub_group_shuffle`` with the convergent "
"attribute would prevent this:"
msgstr ""

#: ../../../UsersManual.rst:2623
msgid ""
"Using ``convergent`` guarantees correct execution by keeping CFG equivalence "
"wrt operations marked as ``convergent``. CFG ``G´`` is equivalent to ``G`` "
"wrt node ``Ni`` : ``iff ∀ Nj (i≠j)`` domination and post-domination "
"relations with respect to ``Ni`` remain the same in both ``G`` and ``G´``."
msgstr ""

#: ../../../UsersManual.rst:2629
msgid "noduplicate"
msgstr ""

#: ../../../UsersManual.rst:2631
msgid ""
"``noduplicate`` is more restrictive with respect to optimizations than "
"``convergent`` because a convergent function only preserves CFG equivalence. "
"This allows some optimizations to happen as long as the control flow remains "
"unmodified."
msgstr ""

#: ../../../UsersManual.rst:2641
msgid "can be modified to:"
msgstr ""

#: ../../../UsersManual.rst:2650
msgid ""
"while using ``noduplicate`` would disallow this. Also ``noduplicate`` "
"doesn't have the same safe semantics of CFG as ``convergent`` and can cause "
"changes in CFG that modify semantics of the original program."
msgstr ""

#: ../../../UsersManual.rst:2654
msgid ""
"``noduplicate`` is kept for backwards compatibility only and it considered "
"to be deprecated for future uses."
msgstr ""

#: ../../../UsersManual.rst:2660
msgid "address_space"
msgstr ""

#: ../../../UsersManual.rst:2662
msgid ""
"Clang has arbitrary address space support using the ``address_space(N)`` "
"attribute, where ``N`` is an integer number in the range ``0`` to "
"``16777215`` (``0xffffffu``)."
msgstr ""

#: ../../../UsersManual.rst:2666
msgid ""
"An OpenCL implementation provides a list of standard address spaces using "
"keywords: ``private``, ``local``, ``global``, and ``generic``. In the AST "
"and in the IR local, global, or generic will be represented by the address "
"space attribute with the corresponding unique number. Note that private does "
"not have any corresponding attribute added and, therefore, is represented by "
"the absence of an address space number. The specific IDs for an address "
"space do not have to match between the AST and the IR. Typically in the AST "
"address space numbers represent logical segments while in the IR they "
"represent physical segments. Therefore, machines with flat memory segments "
"can map all AST address space numbers to the same physical segment ID or "
"skip address space attribute completely while generating the IR. However, if "
"the address space information is needed by the IR passes e.g. to improve "
"alias analysis, it is recommended to keep it and only lower to reflect "
"physical memory segments in the late machine passes."
msgstr ""

#: ../../../UsersManual.rst:2682
msgid "OpenCL builtins"
msgstr ""

#: ../../../UsersManual.rst:2684
msgid ""
"There are some standard OpenCL functions that are implemented as Clang "
"builtins:"
msgstr ""

#: ../../../UsersManual.rst:2686
msgid ""
"All pipe functions from `section 6.13.16.2/6.13.16.3 <https://www.khronos."
"org/registry/cl/specs/opencl-2.0-openclc.pdf#160>`_ of the OpenCL v2.0 "
"kernel language specification. `"
msgstr ""

#: ../../../UsersManual.rst:2690
msgid ""
"Address space qualifier conversion functions ``to_global``/``to_local``/"
"``to_private`` from `section 6.13.9 <https://www.khronos.org/registry/cl/"
"specs/opencl-2.0-openclc.pdf#101>`_."
msgstr ""

#: ../../../UsersManual.rst:2694
msgid ""
"All the ``enqueue_kernel`` functions from `section 6.13.17.1 <https://www."
"khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#164>`_ and enqueue "
"query functions from `section 6.13.17.5 <https://www.khronos.org/registry/cl/"
"specs/opencl-2.0-openclc.pdf#171>`_."
msgstr ""

#: ../../../UsersManual.rst:2702
msgid "Target-Specific Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:2705
msgid "CPU Architectures Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:2708
msgid "X86"
msgstr ""

#: ../../../UsersManual.rst:2710
msgid ""
"The support for X86 (both 32-bit and 64-bit) is considered stable on Darwin "
"(Mac OS X), Linux, FreeBSD, and Dragonfly BSD: it has been tested to "
"correctly compile many large C, C++, Objective-C, and Objective-C++ "
"codebases."
msgstr ""

#: ../../../UsersManual.rst:2715
msgid ""
"On ``x86_64-mingw32``, passing i128(by value) is incompatible with the "
"Microsoft x64 calling convention. You might need to tweak "
"``WinX86_64ABIInfo::classify()`` in lib/CodeGen/TargetInfo.cpp."
msgstr ""

#: ../../../UsersManual.rst:2719
msgid ""
"For the X86 target, clang supports the `-m16` command line argument which "
"enables 16-bit code output. This is broadly similar to using ``asm(\"."
"code16gcc\")`` with the GNU toolchain. The generated code and the ABI "
"remains 32-bit but the assembler emits instructions appropriate for a CPU "
"running in 16-bit mode, with address-size and operand-size prefixes to "
"enable 32-bit addressing and operations."
msgstr ""

#: ../../../UsersManual.rst:2727
msgid "ARM"
msgstr ""

#: ../../../UsersManual.rst:2729
msgid ""
"The support for ARM (specifically ARMv6 and ARMv7) is considered stable on "
"Darwin (iOS): it has been tested to correctly compile many large C, C++, "
"Objective-C, and Objective-C++ codebases. Clang only supports a limited "
"number of ARM architectures. It does not yet fully support ARMv5, for "
"example."
msgstr ""

#: ../../../UsersManual.rst:2736
msgid "PowerPC"
msgstr ""

#: ../../../UsersManual.rst:2738
msgid ""
"The support for PowerPC (especially PowerPC64) is considered stable on Linux "
"and FreeBSD: it has been tested to correctly compile many large C and C++ "
"codebases. PowerPC (32bit) is still missing certain features (e.g. PIC code "
"on ELF platforms)."
msgstr ""

#: ../../../UsersManual.rst:2744
msgid "Other platforms"
msgstr ""

#: ../../../UsersManual.rst:2746
msgid ""
"clang currently contains some support for other architectures (e.g. Sparc); "
"however, significant pieces of code generation are still missing, and they "
"haven't undergone significant testing."
msgstr ""

#: ../../../UsersManual.rst:2750
msgid ""
"clang contains limited support for the MSP430 embedded processor, but both "
"the clang support and the LLVM backend support are highly experimental."
msgstr ""

#: ../../../UsersManual.rst:2754
msgid ""
"Other platforms are completely unsupported at the moment. Adding the minimal "
"support needed for parsing and semantic analysis on a new platform is quite "
"easy; see ``lib/Basic/Targets.cpp`` in the clang source tree. This level of "
"support is also sufficient for conversion to LLVM IR for simple programs. "
"Proper support for conversion to LLVM IR requires adding code to ``lib/"
"CodeGen/CGCall.cpp`` at the moment; this is likely to change soon, though. "
"Generating assembly requires a suitable LLVM backend."
msgstr ""

#: ../../../UsersManual.rst:2764
msgid "Operating System Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:2767
msgid "Darwin (Mac OS X)"
msgstr ""

#: ../../../UsersManual.rst:2769
msgid "Thread Sanitizer is not supported."
msgstr ""

#: ../../../UsersManual.rst:2772
msgid "Windows"
msgstr ""

#: ../../../UsersManual.rst:2774
msgid ""
"Clang has experimental support for targeting \"Cygming\" (Cygwin / MinGW) "
"platforms."
msgstr ""

#: ../../../UsersManual.rst:2777
msgid "See also :ref:`Microsoft Extensions <c_ms>`."
msgstr ""

#: ../../../UsersManual.rst:2780
msgid "Cygwin"
msgstr ""

#: ../../../UsersManual.rst:2782
msgid "Clang works on Cygwin-1.7."
msgstr ""

#: ../../../UsersManual.rst:2785
msgid "MinGW32"
msgstr ""

#: ../../../UsersManual.rst:2787
msgid ""
"Clang works on some mingw32 distributions. Clang assumes directories as "
"below;"
msgstr ""

#: ../../../UsersManual.rst:2790
msgid "``C:/mingw/include``"
msgstr ""

#: ../../../UsersManual.rst:2791
msgid "``C:/mingw/lib``"
msgstr ""

#: ../../../UsersManual.rst:2792
msgid "``C:/mingw/lib/gcc/mingw32/4.[3-5].0/include/c++``"
msgstr ""

#: ../../../UsersManual.rst:2794
msgid "On MSYS, a few tests might fail."
msgstr ""

#: ../../../UsersManual.rst:2797
msgid "MinGW-w64"
msgstr ""

#: ../../../UsersManual.rst:2799
msgid ""
"For 32-bit (i686-w64-mingw32), and 64-bit (x86\\_64-w64-mingw32), Clang "
"assumes as below;"
msgstr ""

#: ../../../UsersManual.rst:2802
msgid ""
"``GCC versions 4.5.0 to 4.5.3, 4.6.0 to 4.6.2, or 4.7.0 (for the C++ header "
"search path)``"
msgstr ""

#: ../../../UsersManual.rst:2803
msgid "``some_directory/bin/gcc.exe``"
msgstr ""

#: ../../../UsersManual.rst:2804
msgid "``some_directory/bin/clang.exe``"
msgstr ""

#: ../../../UsersManual.rst:2805
msgid "``some_directory/bin/clang++.exe``"
msgstr ""

#: ../../../UsersManual.rst:2806
msgid "``some_directory/bin/../include/c++/GCC_version``"
msgstr ""

#: ../../../UsersManual.rst:2807
msgid "``some_directory/bin/../include/c++/GCC_version/x86_64-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:2808
msgid "``some_directory/bin/../include/c++/GCC_version/i686-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:2809
msgid "``some_directory/bin/../include/c++/GCC_version/backward``"
msgstr ""

#: ../../../UsersManual.rst:2810
msgid "``some_directory/bin/../x86_64-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:2811
msgid "``some_directory/bin/../i686-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:2812
msgid "``some_directory/bin/../include``"
msgstr ""

#: ../../../UsersManual.rst:2814
msgid ""
"This directory layout is standard for any toolchain you will find on the "
"official `MinGW-w64 website <http://mingw-w64.sourceforge.net>`_."
msgstr ""

#: ../../../UsersManual.rst:2817
msgid ""
"Clang expects the GCC executable \"gcc.exe\" compiled for ``i686-w64-"
"mingw32`` (or ``x86_64-w64-mingw32``) to be present on PATH."
msgstr ""

#: ../../../UsersManual.rst:2820
msgid ""
"`Some tests might fail <https://bugs.llvm.org/show_bug.cgi?id=9072>`_ on "
"``x86_64-w64-mingw32``."
msgstr ""

#: ../../../UsersManual.rst:2826
msgid "clang-cl"
msgstr ""

#: ../../../UsersManual.rst:2828
msgid ""
"clang-cl is an alternative command-line interface to Clang, designed for "
"compatibility with the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:2831
msgid ""
"To enable clang-cl to find system headers, libraries, and the linker when "
"run from the command-line, it should be executed inside a Visual Studio "
"Native Tools Command Prompt or a regular Command Prompt where the "
"environment has been set up using e.g. `vcvarsall.bat <http://msdn.microsoft."
"com/en-us/library/f2ccy3wt.aspx>`_."
msgstr ""

#: ../../../UsersManual.rst:2836
msgid ""
"clang-cl can also be used from inside Visual Studio by selecting the LLVM "
"Platform Toolset. The toolset is not part of the installer, but may be "
"installed separately from the `Visual Studio Marketplace <https://"
"marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-"
"toolchain>`_. To use the toolset, select a project in Solution Explorer, "
"open its Property Page (Alt+F7), and in the \"General\" section of "
"\"Configuration Properties\" change \"Platform Toolset\" to LLVM.  Doing so "
"enables an additional Property Page for selecting the clang-cl executable to "
"use for builds."
msgstr ""

#: ../../../UsersManual.rst:2845
msgid ""
"To use the toolset with MSBuild directly, invoke it with e.g. ``/p:"
"PlatformToolset=LLVM``. This allows trying out the clang-cl toolchain "
"without modifying your project files."
msgstr ""

#: ../../../UsersManual.rst:2849
msgid ""
"It's also possible to point MSBuild at clang-cl without changing toolset by "
"passing ``/p:CLToolPath=c:\\llvm\\bin /p:CLToolExe=clang-cl.exe``."
msgstr ""

#: ../../../UsersManual.rst:2852
msgid ""
"When using CMake and the Visual Studio generators, the toolset can be set "
"with the ``-T`` flag:"
msgstr ""

#: ../../../UsersManual.rst:2858
msgid ""
"When using CMake with the Ninja generator, set the ``CMAKE_C_COMPILER`` and "
"``CMAKE_CXX_COMPILER`` variables to clang-cl:"
msgstr ""

#: ../../../UsersManual.rst:2868
msgid "Command-Line Options"
msgstr ""

#: ../../../UsersManual.rst:2870
msgid ""
"To be compatible with cl.exe, clang-cl supports most of the same command-"
"line options. Those options can start with either ``/`` or ``-``. It also "
"supports some of Clang's core options, such as the ``-W`` options."
msgstr ""

#: ../../../UsersManual.rst:2874
msgid ""
"Options that are known to clang-cl, but not currently supported, are ignored "
"with a warning. For example:"
msgstr ""

#: ../../../UsersManual.rst:2881
msgid ""
"To suppress warnings about unused arguments, use the ``-Qunused-arguments`` "
"option."
msgstr ""

#: ../../../UsersManual.rst:2883
msgid ""
"Options that are not known to clang-cl will be ignored by default. Use the "
"``-Werror=unknown-argument`` option in order to treat them as errors. If "
"these options are spelled with a leading ``/``, they will be mistaken for a "
"filename:"
msgstr ""

#: ../../../UsersManual.rst:2891
msgid ""
"Please `file a bug <https://bugs.llvm.org/enter_bug.cgi?"
"product=clang&component=Driver>`_ for any valid cl.exe flags that clang-cl "
"does not understand."
msgstr ""

#: ../../../UsersManual.rst:2894
msgid "Execute ``clang-cl /?`` to see a list of supported options:"
msgstr ""

#: ../../../UsersManual.rst:3174
msgid "The /clang: Option"
msgstr ""

#: ../../../UsersManual.rst:3176
msgid ""
"When clang-cl is run with a set of ``/clang:<arg>`` options, it will gather "
"all of the ``<arg>`` arguments and process them as if they were passed to "
"the clang driver. This mechanism allows you to pass flags that are not "
"exposed in the clang-cl options or flags that have a different meaning when "
"passed to the clang driver. Regardless of where they appear in the command "
"line, the ``/clang:`` arguments are treated as if they were passed at the "
"end of the clang-cl command line."
msgstr ""

#: ../../../UsersManual.rst:3185
msgid "The /Zc:dllexportInlines- Option"
msgstr ""

#: ../../../UsersManual.rst:3187
msgid ""
"This causes the class-level `dllexport` and `dllimport` attributes to not "
"apply to inline member functions, as they otherwise would. For example, in "
"the code below `S::foo()` would normally be defined and exported by the DLL, "
"but when using the ``/Zc:dllexportInlines-`` flag it is not:"
msgstr ""

#: ../../../UsersManual.rst:3198
msgid ""
"This has the benefit that the compiler doesn't need to emit a definition of "
"`S::foo()` in every translation unit where the declaration is included, as "
"it would otherwise do to ensure there's a definition in the DLL even if it's "
"not used there. If the declaration occurs in a header file that's widely "
"used, this can save significant compilation time and output size. It also "
"reduces the number of functions exported by the DLL similarly to what ``-"
"fvisibility-inlines-hidden`` does for shared objects on ELF and Mach-O. "
"Since the function declaration comes with an inline definition, users of the "
"library can use that definition directly instead of importing it from the "
"DLL."
msgstr ""

#: ../../../UsersManual.rst:3208
msgid ""
"Note that the Microsoft Visual C++ compiler does not support this option, "
"and if code in a DLL is compiled with ``/Zc:dllexportInlines-``, the code "
"using the DLL must be compiled in the same way so that it doesn't attempt to "
"dllimport the inline member functions. The reverse scenario should generally "
"work though: a DLL compiled without this flag (such as a system library "
"compiled with Visual C++) can be referenced from code compiled using the "
"flag, meaning that the referencing code will use the inline definitions "
"instead of importing them from the DLL."
msgstr ""

#: ../../../UsersManual.rst:3217
msgid ""
"Also note that like when using ``-fvisibility-inlines-hidden``, the address "
"of `S::foo()` will be different inside and outside the DLL, breaking the C/C+"
"+ standard requirement that functions have a unique address."
msgstr ""

#: ../../../UsersManual.rst:3221
msgid ""
"The flag does not apply to explicit class template instantiation definitions "
"or declarations, as those are typically used to explicitly provide a single "
"definition in a DLL, (dllexported instantiation definition) or to signal "
"that the definition is available elsewhere (dllimport instantiation "
"declaration). It also doesn't apply to inline members with static local "
"variables, to ensure that the same instance of the variable is used inside "
"and outside the DLL."
msgstr ""

#: ../../../UsersManual.rst:3228
msgid ""
"Using this flag can cause problems when inline functions that would "
"otherwise be dllexported refer to internal symbols of a DLL. For example:"
msgstr ""

#: ../../../UsersManual.rst:3239
msgid ""
"Normally, references to `S::foo()` would use the definition in the DLL from "
"which it was exported, and which presumably also has the definition of "
"`internal()`. However, when using ``/Zc:dllexportInlines-``, the inline "
"definition of `S::foo()` is used directly, resulting in a link error since "
"`internal()` is not available. Even worse, if there is an inline definition "
"of `internal()` containing a static local variable, we will now refer to a "
"different instance of that variable than in the DLL:"
msgstr ""

#: ../../../UsersManual.rst:3255
msgid ""
"This could lead to very subtle bugs. Using ``-fvisibility-inlines-hidden`` "
"can lead to the same issue. To avoid it in this case, make `S::foo()` or "
"`internal()` non-inline, or mark them `dllimport/dllexport` explicitly."
msgstr ""

#: ../../../UsersManual.rst:3260
msgid "The /fallback Option"
msgstr ""

#: ../../../UsersManual.rst:3262
msgid ""
"When clang-cl is run with the ``/fallback`` option, it will first try to "
"compile files itself. For any file that it fails to compile, it will fall "
"back and try to compile the file by invoking cl.exe."
msgstr ""

#: ../../../UsersManual.rst:3266
msgid ""
"This option is intended to be used as a temporary means to build projects "
"where clang-cl cannot successfully compile all the files. clang-cl may fail "
"to compile a file either because it cannot generate code for some C++ "
"feature, or because it cannot parse some Microsoft language extension."
msgstr ""
