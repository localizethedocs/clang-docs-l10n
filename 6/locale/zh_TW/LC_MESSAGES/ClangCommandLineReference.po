# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangCommandLineReference.rst:9
msgid "Clang command line argument reference"
msgstr ""

#: ../../../ClangCommandLineReference.rst:14
msgid "Introduction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:16
msgid ""
"This page lists the command line arguments currently supported by the GCC-"
"compatible ``clang`` and ``clang++`` drivers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:23
msgid "Add <dir> to search path for binaries and object files used implicitly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:27
msgid "Add directory to framework include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:31
msgid "Treat source input files as Objective-C inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:37
msgid "Treat source input files as Objective-C++ inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:41
msgid "Don't emit warning for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:45
msgid "Pass the comma separated arguments in <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:53
msgid "Pass <arg> to fatbinary invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:57
msgid "Pass <arg> to the ptxas assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:61
msgid "Pass <arg> to the target offloading toolchain."
msgstr ""

#: ../../../ClangCommandLineReference.rst:67
msgid ""
"Pass <arg> to the specified target offloading toolchain. The triple that "
"identifies the toolchain must be provided after the equals sign."
msgstr ""

#: ../../../ClangCommandLineReference.rst:79
msgid "Run the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:87
msgid ""
"Static analyzer report output format (html\\|plist\\|plist-multi-file\\|"
"plist-html\\|text)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:103
msgid "Emit ARC errors even if the migrator can fix them"
msgstr ""

#: ../../../ClangCommandLineReference.rst:107
msgid "Output path for the plist report"
msgstr ""

#: ../../../ClangCommandLineReference.rst:125
msgid "Specifies configuration file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:133
msgid ""
"Compile CUDA code for both host and device (default).  Has no effect on non-"
"CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:137
msgid "Compile CUDA code for device only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:141
msgid "CUDA GPU architecture (e.g. sm\\_35).  May be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:145
msgid ""
"Compile CUDA code for host only.  Has no effect on non-CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:149
msgid "Enable device-side debug info generation. Disables ptxas optimizations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:157
msgid "Filename to write DOT-formatted header dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:161
msgid "Filename (or -) to write dependency output to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:183
msgid "Emit Clang AST files for source inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:191
msgid "Use approximate transcendental functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:195
msgid "Flush denormal floating point values to zero in CUDA device mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:203
msgid ""
"Specify comma-separated list of triples OpenMP offloading targets to be "
"supported"
msgstr ""

#: ../../../ClangCommandLineReference.rst:219
msgid ""
"Add -rpath with architecture-specific resource directory to the linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:223
msgid "Use the gcc toolchain at the given directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:227
msgid "Generate CodeView debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:233
msgid "Display available options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:241
msgid "Make the next included directory (-I or -F) an indexer header map"
msgstr ""

#: ../../../ClangCommandLineReference.rst:259
msgid "Run the migrator"
msgstr ""

#: ../../../ClangCommandLineReference.rst:269
msgid "Additional arguments to forward to LLVM's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:273
msgid "Directory to dump module dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:289
msgid ""
"Don't error out if the detected version of the CUDA install is too low for "
"the requested CUDA gpu architecture."
msgstr ""

#: ../../../ClangCommandLineReference.rst:297
msgid "Disable builtin #include directories"
msgstr ""

#: ../../../ClangCommandLineReference.rst:325
msgid "Disable standard #include directories for the C++ standard library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:337
msgid "Write output to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:341
msgid "Make migration to 'atomic' properties"
msgstr ""

#: ../../../ClangCommandLineReference.rst:345
msgid "Enable migration to modern ObjC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:349
msgid "Enable migration to property and method annotations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:353
msgid ""
"Enable migration to infer NS\\_DESIGNATED\\_INITIALIZER for initializer "
"methods"
msgstr ""

#: ../../../ClangCommandLineReference.rst:357
msgid "Enable migration to infer instancetype for method result type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:361
msgid "Enable migration to modern ObjC literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:365
msgid "Enable migration to NS\\_ENUM/NS\\_OPTIONS macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:369
msgid "Enable migration to modern ObjC property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:373
msgid "Enable migration of setter/getter messages to property-dot syntax"
msgstr ""

#: ../../../ClangCommandLineReference.rst:377
msgid "Enable migration to add protocol conformance on classes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:381
msgid "Enable migration to modern ObjC readonly property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:385
msgid "Enable migration to modern ObjC readwrite property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:389
msgid "Enable migration to modern ObjC subscripting"
msgstr ""

#: ../../../ClangCommandLineReference.rst:393
msgid ""
"Enable migration to use NS\\_NONATOMIC\\_IOSONLY macro for setting "
"property's 'atomic' attribute"
msgstr ""

#: ../../../ClangCommandLineReference.rst:397
msgid ""
"Enable migration to annotate property with NS\\_RETURNS\\_INNER\\_POINTER"
msgstr ""

#: ../../../ClangCommandLineReference.rst:401
msgid ""
"Only modify files with a filename contained in the provided directory path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:411
msgid "Enable mcount instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:417
msgid "Use pipes between commands, when possible"
msgstr ""

#: ../../../ClangCommandLineReference.rst:431
msgid "Print the full library path of <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:435
msgid "Enable Objective-C Ivar layout bitmap print trace"
msgstr ""

#: ../../../ClangCommandLineReference.rst:439
msgid ""
"Print the library path for the currently used compiler runtime library "
"(\"libgcc.a\" or \"libclang\\_rt.builtins.\\*.a\")"
msgstr ""

#: ../../../ClangCommandLineReference.rst:447
msgid "Print the full program path of <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:451
msgid "Print the resource directory pathname"
msgstr ""

#: ../../../ClangCommandLineReference.rst:455
msgid "Print the paths used for finding libraries and programs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:461
msgid "Support POSIX threads in generated code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:471
msgid "Whether to build a relocatable precompiled header"
msgstr ""

#: ../../../ClangCommandLineReference.rst:477
msgid "Rewrite Legacy Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:481
msgid "Compiler runtime library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:485
msgid "Save llvm statistics."
msgstr ""

#: ../../../ClangCommandLineReference.rst:489
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../ClangCommandLineReference.rst:527
msgid "Serialize compiler diagnostics to a file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:551
msgid "C++ standard library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:565
msgid "Generate code for the given target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:569
msgid "Time individual commands"
msgstr ""

#: ../../../ClangCommandLineReference.rst:575
msgid "Enable some traditional CPP emulation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:589
msgid "Show commands to run and use verbose output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:593
msgid "Verify the binary representation of debug output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:597
msgid "Print version information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:601
msgid "Suppress all warnings"
msgstr ""

#: ../../../ClangCommandLineReference.rst:621
msgid "Resolve file paths relative to the specified directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:625
msgid "Treat subsequent input files as having type <language>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:630
msgid "Actions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:631
msgid "The action to perform on the input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:635
msgid "Only run the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:639
msgid "Only run preprocess and compilation steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:643
msgid "Only run preprocess, compile, and assemble steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:647
msgid "Use the LLVM representation for assembler and object files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:653
msgid "Provide information about a particular module file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:657
msgid "Only precompile the input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:661
msgid "Rewrite Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:665
msgid "Load and verify that a pre-compiled header file is not stale"
msgstr ""

#: ../../../ClangCommandLineReference.rst:668
msgid "Compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:670
msgid ""
"Flags controlling the behavior of Clang during compilation. These flags have "
"no effect during actions that do not perform compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:675
msgid "Pass <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:679
msgid "Pass <arg> to the clang compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:683
msgid "Attempt to match the ABI of Clang <version>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:687
msgid ""
"Treat each comma separated argument in <arg> as a documentation comment "
"block command"
msgstr ""

#: ../../../ClangCommandLineReference.rst:691
msgid "Allow \\_\\_declspec as a keyword"
msgstr ""

#: ../../../ClangCommandLineReference.rst:701
msgid "Print fix-its in machine parseable form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:705
msgid "Print source range spans in numeric form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:711
msgid "Enables the experimental global instruction selector"
msgstr ""

#: ../../../ClangCommandLineReference.rst:715
msgid "Enables an experimental new pass manager in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:719
msgid "Use separate accesses for bitfields with legal widths and alignments."
msgstr ""

#: ../../../ClangCommandLineReference.rst:723
msgid "Inline suitable functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:727
msgid "Inline functions which are (explicitly or implicitly) marked inline"
msgstr ""

#: ../../../ClangCommandLineReference.rst:731
msgid ""
"Disable auto-generation of preprocessed source files and a script for "
"reproduction during a clang crash"
msgstr ""

#: ../../../ClangCommandLineReference.rst:735
msgid "Don't use blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:741
msgid "Level of field padding for AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:745
msgid "Enable linker dead stripping of globals in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:749
msgid "Enable use-after-scope detection in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:753
msgid "Path to blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:757
msgid "Enable control flow integrity (CFI) checks for cross-DSO calls."
msgstr ""

#: ../../../ClangCommandLineReference.rst:761
msgid "Generalize pointers in CFI indirect call type signature checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:765
msgid "Specify the type of coverage instrumentation for Sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:771
#: ../../../ClangCommandLineReference.rst:777
msgid "Enable origins tracking in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:781
msgid "Enable use-after-destroy detection in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:791
msgid "Enable recovery for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:795
msgid "Enable sanitizer statistics gathering."
msgstr ""

#: ../../../ClangCommandLineReference.rst:799
msgid "Enable atomic operations instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:803
msgid "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:807
msgid "Enable memory access instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:811
msgid "Enable trapping for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:815
msgid ""
"Strip (or keep only, if negative) a given number of path components when "
"emitting check metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:821
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious "
"behavior. See user manual for available checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:827
msgid "Language standard to compile for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:830
msgid "Preprocessor flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:832
msgid "Flags controlling the behavior of the Clang preprocessor."
msgstr ""

#: ../../../ClangCommandLineReference.rst:836
msgid "Include comments in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:840
msgid "Include comments from within macros in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:844
msgid "Define <macro> to <value> (or 1 if <value> omitted)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:848
msgid "Show header includes and nesting depth"
msgstr ""

#: ../../../ClangCommandLineReference.rst:852
msgid "Disable linemarker output in -E mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:856
msgid "Undefine macro <macro>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:860
msgid "Pass the comma separated arguments in <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:864
msgid "Pass <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:867
msgid "Include path management"
msgstr ""

#: ../../../ClangCommandLineReference.rst:869
msgid "Flags controlling how ``#include``\\s are resolved to files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:873
msgid "Add directory to include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:877
msgid ""
"Restrict all prior -I flags to double-quoted inclusion and remove current "
"directory from include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:881
msgid "CUDA installation path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:885
msgid "Add directory to the C++ SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:889
msgid "Use the last modification time of <file> as the build session timestamp"
msgstr ""

#: ../../../ClangCommandLineReference.rst:893
msgid "Time when the current build session started"
msgstr ""

#: ../../../ClangCommandLineReference.rst:897
msgid ""
"Specify the mapping of module name to precompiled module file, or load a "
"module file if name is omitted."
msgstr ""

#: ../../../ClangCommandLineReference.rst:901
msgid "Specify the module cache path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:905
msgid "Disable validation of the diagnostic options when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:909
msgid ""
"Specify the interval (in seconds) after which a module file will be "
"considered unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:913
msgid ""
"Specify the interval (in seconds) between attempts to prune the module cache"
msgstr ""

#: ../../../ClangCommandLineReference.rst:917
msgid "Specify the module user build path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:921
msgid ""
"Don't verify input files for the modules if the module has been successfully "
"validated or loaded during this build session"
msgstr ""

#: ../../../ClangCommandLineReference.rst:925
msgid ""
"Validate the system headers that a module depends on when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:929
msgid "Specify the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:935
msgid "Add directory to AFTER include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:939
msgid "Add directory to SYSTEM framework search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:943
msgid ""
"Add directory to SYSTEM framework search path, absolute paths are relative "
"to -isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:947
msgid "Include macros from file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:951
msgid "Include file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:955
msgid "Include precompiled header file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:959
msgid "Set the -iwithprefix/-iwithprefixbefore prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:963
msgid "Add directory to QUOTE include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:967
msgid "Set the system root directory (usually /)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:971
msgid "Add directory to SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:975
msgid "Add directory to end of the SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:979
msgid ""
"Overlay the virtual filesystem described by file over the real file system"
msgstr ""

#: ../../../ClangCommandLineReference.rst:983
msgid "Set directory to SYSTEM include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:987
msgid "Set directory to include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:991
msgid ""
"Add directory to SYSTEM include search path, absolute paths are relative to -"
"isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:995
msgid "Path to ptxas (used for compiling CUDA code)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:999
msgid ""
"Treat all #include paths starting with <prefix> as including a system header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1002
msgid "Dependency file generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1004
msgid ""
"Flags controlling generation of a dependency file for ``make``-like build "
"systems."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1009
msgid "Like -MD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1013
msgid "Write a depfile containing user and system headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1017
msgid "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1021
msgid "Add missing headers to depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1025
msgid "Write a compilation database entry per input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1029
msgid "Like -MMD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1033
msgid "Write a depfile containing user headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1037
msgid "Create phony target for each dependency (other than main file)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1041
msgid "Specify name of main file output to quote in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1045
msgid "Specify name of main file output in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1049
msgid "Use NMake/Jom format for the depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1052
msgid "Dumping preprocessor state"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1054
msgid ""
"Flags allowing the state of the preprocessor to be dumped in various ways."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1066
msgid "Print macro definitions in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1070
msgid "Print include directives in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1074
msgid "Print macro definitions in -E mode instead of normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1077
msgid "Diagnostic flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1079
msgid ""
"Flags controlling which warnings, errors, and remarks Clang will generate. "
"See the :doc:`full list of warning and remark flags <DiagnosticsReference>`."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1084
msgid "Enable the specified remark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1088
msgid ""
"Report transformation analysis from optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1092
msgid ""
"Report missed transformations by optimization passes whose name matches the "
"given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1096
msgid ""
"Report transformations performed by optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1100
msgid "Enable the specified warning"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1104
msgid "Enable warnings for deprecated constructs and define \\_\\_DEPRECATED"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1109
msgid "Target-independent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1122
msgid "Enable C++17 aligned allocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1126
msgid "Treat editor placeholders as valid source code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1134
msgid "Use ANSI escape codes for diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1138
msgid "Use Apple's kernel extensions ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1142
msgid "Enable Apple gcc-compatible #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1146
msgid "Restrict code to those available for App Extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1168
msgid "Enable the 'blocks' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1174
msgid "Accept non-standard constructs supported by the Borland compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1182
msgid "Load the clang builtins module map file."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1190
msgid "Use colors in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1208
msgid "Enable support for the C++ Coroutines TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1212
msgid "Generate coverage mapping to enable code coverage analysis"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1218
msgid "Enable C++ exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1224
msgid "Place each data in its own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1228
msgid "Emit extra debug info to make sample profile more accurate."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1232
msgid "Emit macro debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1240
msgid "remap file source paths in debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1244
#: ../../../ClangCommandLineReference.rst:1747
msgid "Place debug types in their own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1248
msgid "Parse templated function definitions at the end of the translation unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1254
msgid "Print absolute paths in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1264
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this profile count"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1268
msgid "Enable profile hotness information in diagnostic line"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1272
msgid "Display include stacks for diagnostic notes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1276
msgid "Print option name with mappable diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1280
msgid "Print a template comparison tree for differing templates"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1284
msgid "Allow '$' in identifiers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1288
msgid "Enable '\\[\\[\\]\\]' attributes in all C and C++ language modes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1294
msgid "Use DWARF style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1302
msgid "Embed LLVM bitcode (option: off, all, bitcode, marker)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1306
msgid "Emit all declarations, even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1310
msgid "Use emutls functions to access thread\\_local variables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1318
msgid "Enable support for exception handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1326
msgid "Allow aggressive, lossy floating-point optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1334
msgid ""
"Form fused FP ops (e.g. FMAs): fast (everywhere) \\| on (according to "
"FP\\_CONTRACT pragma, default) \\| off (never fuse)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1338
msgid "Assert that the compilation takes place in a freestanding environment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1342
msgid "Place each function in its own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1348
msgid "Allow GNU-extension keywords regardless of language standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1352
msgid "Generate output compatible with the standard GNU Objective-C runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1356
msgid "Use the gnu89 inline semantics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1366
msgid "Implicitly search the file system for module map files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1374
msgid ""
"Instrument function entry only, after inlining, without arguments to the "
"instrumentation call"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1378
msgid "Generate calls to instrument function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1382
msgid "Like -finstrument-functions, but insert the calls after inlining"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1386
msgid "Enable the integrated assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1396
msgid "Enable LTO in 'full' mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1400
msgid ""
"Controls the backend parallelism of -flto=thin (default of 0 means the "
"number of threads will be derived from the number of CPUs detected)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1406
msgid "Set LTO mode to either 'full' or 'thin'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1412
msgid "Require math functions to indicate errors by setting errno"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1416
msgid ""
"Specify the maximum alignment to enforce on pointers lacking an explicit "
"alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1426
msgid "Load this module map file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1430
msgid "Specify the name of the module to build"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1434
msgid "Enable the 'modules' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1438
msgid "Require declaration of modules used within a module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1442
msgid ""
"Ignore the definition of the given macro when building and loading modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1446
msgid "Search even non-imported modules to resolve references"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1450
msgid "Like -fmodules-decluse but requires all headers to be in modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1454
msgid "Enable support for the C++ Modules TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1458
msgid "Enable full Microsoft Visual C++ compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1462
msgid ""
"Dot-separated value representing the Microsoft compiler version number to "
"report in \\_MSC\\_VER (0 = don't define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1466
msgid "Accept some non-standard constructs supported by the Microsoft compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1474
msgid ""
"Microsoft compiler version number to report in \\_MSC\\_VER (0 = don't "
"define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1484
msgid ""
"Specifies the largest alignment guaranteed by '::operator new(size\\_t)'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1490
msgid "Disable implicit builtin knowledge of a specific function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1494
msgid "Do not elide types when printing diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1500
msgid "Do not treat C++ operator name keywords as synonyms for operators"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1508
msgid "Do not compile OpenMP target code as relocatable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1516
msgid "Synthesize retain and release calls for Objective-C pointers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1520
msgid "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1524
msgid "Enable Objective-C exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1538
msgid "Specify the target Objective-C runtime kind and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1544
msgid "Enable ARC-style weak references in Objective-C"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1554
msgid ""
"OpenMP target code is compiled as relocatable using the -c flag. For OpenMP "
"targets the code is relocatable by default."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1558
msgid "Emit OpenMP code only for SIMD-based constructs."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1572
msgid "Specify the file name of any generated YAML optimization record"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1584
msgid "Specify the default maximum struct packing alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1588
msgid "Recognize and construct Pascal-style string literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1592
msgid "Override the default ABI to return all structs on the stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1602
msgid "Use the PLT to make function calls"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1606
msgid "Load the named plugin (dynamic shared object)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1616
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1622
msgid ""
"Generate instrumented code to collect execution counts into <directory>/"
"default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1626
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"file (overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1632
msgid ""
"Generate instrumented code to collect execution counts into <file> "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1640
msgid "Use instrumentation data for profile-guided optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1647
msgid "Specifies that the sample profile is accurate. If the sample"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1645
msgid ""
"profile is accurate, callsites without profile samples are marked as cold. "
"Otherwise, treat callsites without profile samples as if we have no profile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1655
msgid "Enable sample-based profile guided optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1661
msgid ""
"Use instrumentation data for profile-guided optimization. If pathname is a "
"directory, it reads from <pathname>/default.profdata. Otherwise, it reads "
"from file <pathname>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1665
msgid "Allow division operations to be reassociated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1669
msgid "Override the default ABI to return small structs in registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1673
msgid "Enable C++17 relaxed template template argument matching"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1677
msgid "Turn on loop reroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1699
msgid "Generate a YAML optimization record file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1703
msgid "Use SEH style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1707
msgid ""
"Allocate to an enum type only as many bytes as it needs for the declared "
"range of possible values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1711
msgid "Force wchar\\_t to be a short unsigned int"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1717
msgid ""
"Which overload candidates to show when overload resolution fails: best\\|"
"all; defaults to all"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1731
msgid "Enable C++14 sized global deallocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1735
msgid "Use SjLj style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1739
msgid "Enable the superword-level parallelism vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1753
msgid ""
"Enable stack protectors for functions potentially vulnerable to stack "
"smashing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1757
msgid "Force the usage of stack protectors for all functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1761
msgid "Use a strong heuristic to apply stack protectors to functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1765
msgid "Emit full debug info for all types used by the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1771
msgid ""
"Enable optimizations based on the strict definition of an enum's value range"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1777
msgid ""
"Always treat control flow paths that fall off the end of a non-void function "
"as unreachable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1781
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1797
msgid "Perform ThinLTO importing using provided function summary index"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1807
msgid "Issue call to specified function rather than a trap instruction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1813
msgid "Trap on integer overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1821
msgid "Specify the function to be called on overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1825
msgid "Process trigraph sequences"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1829
msgid "Use unique names for text and data sections (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1835
msgid "Turn on loop unroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1849
msgid "Use .init\\_array instead of .ctors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1857
msgid "Use the given vector functions library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1861
msgid "Enable the loop vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1867
msgid "Give inline C++ member functions default visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1871
msgid ""
"Give global types 'default' visibility and global functions and variables "
"'hidden' visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1875
msgid "Set the default symbol visibility for all global declarations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1879
msgid "Enables whole-program vtable optimization. Requires -flto"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1883
msgid "Treat signed integer overflow as two's complement"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1887
msgid "Store string literals as writable data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1891
msgid ""
"Determine whether to always emit \\_\\_xray\\_customevent(...) calls even if "
"the function it appears in is not always instrumented."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1895
msgid ""
"Filename defining the whitelist for imbuing the 'always instrument' XRay "
"attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1903
msgid "Sets the minimum function size to instrument with XRay"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1907
msgid "Generate XRay instrumentation sleds on function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1911
msgid ""
"Filename defining the whitelist for imbuing the 'never instrument' XRay "
"attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1917
msgid "Enable System z vector language extension"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1924
msgid "OpenCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1927
msgid "OpenCL only. Allow denormals to be flushed to zero."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1931
msgid ""
"OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, "
"and defines \\_\\_FAST\\_RELAXED\\_MATH\\_\\_."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1935
msgid ""
"OpenCL only. Allow floating-point optimizations that assume arguments and "
"results are not NaNs or +-Inf."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1939
msgid ""
"OpenCL only. Specify that single precision floating-point divide and sqrt "
"used in the program source are correctly rounded."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1943
msgid "OpenCL only. Generate kernel argument metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1947
msgid ""
"OpenCL only. Allow use of less precise MAD computations in the generated "
"binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1951
msgid ""
"OpenCL only. Allow use of less precise no signed zeros computations in the "
"generated binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1955
msgid ""
"OpenCL only. This option disables all optimizations. By default "
"optimizations are enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1959
msgid ""
"OpenCL only. Treat double precision floating-point constant as single "
"precision constant."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1963
msgid "OpenCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1967
msgid "OpenCL only. This option is added for compatibility with OpenCL 1.0."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1971
msgid ""
"OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-"
"signed-zeros and -cl-mad-enable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1974
msgid "Target-dependent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1977
msgid ""
"Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1989
msgid "Enable SVR4-style position-independent code (Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1995
msgid "Align doubles to two words in structs (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2003
msgid "Link stack frames through backchain on System Z"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2029
msgid "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2033
msgid ""
"Place constants in the .rodata section instead of the .sdata section even if "
"they meet the -G <size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2037
msgid ""
"Assume that externally defined data is in the small data if it meets the -G "
"<size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2041
msgid "Insert calls to fentry at function entry (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2047
msgid "Use 32-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2051
msgid "Use 64-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2059
msgid "Enable merging of globals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2063
msgid ""
"Use GP relative accesses for symbols known to be in a small data section "
"(MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2071
msgid "Use Intel MCU ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2079
msgid ""
"(integrated-as) Emit an object file which can be used with an incremental "
"linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2091
msgid "Extend the -G behaviour to object local data (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2095
msgid ""
"Generate branches with extended addressability, usually via indirect jumps."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2099
msgid "Set Mac OS X deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2103
msgid ""
"Enable the generation of 4-operand madd.s, madd.d and related instructions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2111
msgid ""
"Set the default structure layout to be compatible with the Microsoft "
"compiler standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2115
msgid "Enable MSA ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2119
msgid "Enable MT ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2127
msgid "Omit frame pointer setup for leaf functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2133
msgid "Use copy relocations support for PIE builds"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2137
msgid ""
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' "
"which allows target specific decisions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2141
msgid "Enable hexagon-qdsp6 backward compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2155
msgid "(integrated-as) Relax all machine instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2159
msgid "Make StdCall calling convention the default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2165
msgid "Use software floating point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2169
msgid "Set the stack alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2173
msgid "Set the stack probe size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2177
msgid "Force realign the stack at entry to every function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2181
msgid "The thread model to use, e.g. posix, single (posix by default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2206
msgid "AARCH64"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2209
msgid "Reserve the x18 register (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2213
msgid "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2217
msgid ""
"Generate code which only uses the general purpose registers (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2220
msgid "AMDGPU"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2223
msgid "Enable XNACK (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2226
msgid "ARM"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2229
msgid "Reserve the r9 register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2233
msgid "Allow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2237
msgid "Disallow generation of data access to code sections (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2241
msgid "Disallow use of movt/movw pairs (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2245
msgid ""
"Disallow converting instructions with negative immediates to their negation "
"or inversion."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2249
msgid "Disallow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2253
msgid ""
"Disallow generation of deprecated IT blocks for ARMv8. It is on by default "
"for ARMv8 Thumb mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2257
msgid "Read thread pointer from coprocessor register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2261
msgid "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2264
#: ../../../ClangCommandLineReference.rst:2268
msgid "Hexagon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2271
#: ../../../ClangCommandLineReference.rst:2285
msgid "Enable Hexagon Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2275
msgid "Enable Hexagon Double Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2279
msgid "Set Hexagon Vector Length"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2288
msgid "PowerPC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2324
msgid "WebAssembly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2330
msgid "X86"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2468
msgid "Optimization level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2470
msgid "Flags controlling how much optimization should be performed."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2477
msgid "Debug information generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2479
msgid ""
"Flags controlling how much and what kind of debug information should be "
"generated."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2483
msgid "Kind and level of debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2486
msgid "Generate source-level debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2490
msgid "Generate source-level debug information with dwarf version 2"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2494
msgid "Generate source-level debug information with dwarf version 3"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2498
msgid "Generate source-level debug information with dwarf version 4"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2502
msgid "Generate source-level debug information with dwarf version 5"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2509
msgid "Debug level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2526
msgid "Emit debug line number tables only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2530
msgid ""
"Generate debug info with external references to clang modules or precompiled "
"headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2533
msgid "Debugger to tune debug information for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2541
msgid "Debug information flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2556
#: ../../../ClangCommandLineReference.rst:2562
msgid "DWARF debug sections compression type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2565
msgid "Static analyzer flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2567
msgid "Flags controlling the behavior of the Clang Static Analyzer."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2571
msgid "Pass <arg> to the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2574
msgid "Fortran compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2576
msgid ""
"Flags that will be passed onto the ``gfortran`` compiler when Clang is given "
"a Fortran input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2716
msgid "Linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2717
msgid "Flags that are passed on to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2721
msgid "Add directory to library search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2727
msgid "Specify <script> as linker script"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2731
#: ../../../ClangCommandLineReference.rst:2735
#: ../../../ClangCommandLineReference.rst:2739
msgid "Set starting address of BSS to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2743
msgid "Pass the comma separated arguments in <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2749
msgid "Pass <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2773
msgid "undef all system defines"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2779
msgid "Pass -z <arg> to the linker"
msgstr ""
