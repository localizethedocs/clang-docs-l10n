# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangCommandLineReference.rst:9
msgid "Clang command line argument reference"
msgstr ""

#: ../../../ClangCommandLineReference.rst:14
msgid "Introduction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:16
msgid ""
"This page lists the command line arguments currently supported by the GCC-"
"compatible ``clang`` and ``clang++`` drivers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:23
msgid "Add <dir> to search path for binaries and object files used implicitly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:27
msgid "Add directory to framework include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:31
msgid "Treat source input files as Objective-C inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:37
msgid "Treat source input files as Objective-C++ inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:41
msgid "Do not emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:45
msgid "Don't emit warning for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:49
msgid "Emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:53
msgid "Pass the comma separated arguments in <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:63
msgid "Pass <arg> to the CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:69
msgid "Pass <arg> to the CUDA/HIP host compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:73
msgid "Pass <arg> to fatbinary invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:77
msgid "Pass <arg> to the ptxas assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:81
msgid "Pass <arg> to the target offloading toolchain."
msgstr ""

#: ../../../ClangCommandLineReference.rst:87
msgid "Pass <arg> to the target offloading toolchain identified by <triple>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:99
msgid "Run the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:105
msgid ""
"Static analyzer report output format (html\\|plist\\|plist-multi-file\\|"
"plist-html\\|sarif\\|text)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:121
msgid "Emit ARC errors even if the migrator can fix them"
msgstr ""

#: ../../../ClangCommandLineReference.rst:125
msgid "Output path for the plist report"
msgstr ""

#: ../../../ClangCommandLineReference.rst:143
msgid "Specifies configuration file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:149
msgid ""
"Compile CUDA code for both host and device (default).  Has no effect on non-"
"CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:153
msgid "Compile CUDA code for device only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:157
msgid ""
"Compile CUDA code for host only.  Has no effect on non-CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:161
msgid ""
"Include PTX for the following GPU architecture (e.g. sm\\_35) or 'all'. May "
"be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:165
msgid "Enable device-side debug info generation. Disables ptxas optimizations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:173
msgid "Filename to write DOT-formatted header dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:177
msgid "Filename (or -) to write dependency output to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:181
msgid "Directory to output dSYM's (if any) to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:203
msgid "Emit Clang AST files for source inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:207
msgid "Enable linker job to emit a static library."
msgstr ""

#: ../../../ClangCommandLineReference.rst:211
msgid ""
"Trivial automatic variable initialization to zero is only here for "
"benchmarks, it'll eventually be removed, and I'm OK with that because I'm "
"only using it to benchmark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:219
msgid "Flush denormal floating point values to zero in CUDA device mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:223
msgid "Reserve register r19 (Hexagon only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:231
msgid ""
"Specify comma-separated list of triples OpenMP offloading targets to be "
"supported"
msgstr ""

#: ../../../ClangCommandLineReference.rst:247
msgid ""
"Add -rpath with architecture-specific resource directory to the linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:251
msgid "Path to system blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:255
msgid "Build this module as a system module. Only used with -emit-module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:259
msgid "Use the gcc toolchain at the given directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:263
msgid "Generate CodeView debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:267
msgid "Emit type record hashes in a .debug$H section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:273
msgid ""
"Instrument device library for HIP, which is a LLVM bitcode containing "
"\\_\\_cyg\\_profile\\_func\\_enter and \\_\\_cyg\\_profile\\_func\\_exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:277
msgid "Default max threads per block for kernel launch bounds for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:283
msgid "Display available options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:287
msgid "Display help for hidden options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:291
msgid "Link clang-offload-bundler bundles for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:295
msgid "HIP version in the format of major.minor.patch"
msgstr ""

#: ../../../ClangCommandLineReference.rst:299
msgid ""
"Enable builtin #include directories even when -nostdinc is used before or "
"after -ibuiltininc. Using -nobuiltininc after the option disables it"
msgstr ""

#: ../../../ClangCommandLineReference.rst:305
msgid "Make the next included directory (-I or -F) an indexer header map"
msgstr ""

#: ../../../ClangCommandLineReference.rst:325
msgid "Enforce targets of indirect branches and function returns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:329
msgid "Select straight-line speculation hardening scope"
msgstr ""

#: ../../../ClangCommandLineReference.rst:333
msgid "Run the migrator"
msgstr ""

#: ../../../ClangCommandLineReference.rst:343
msgid "Additional arguments to forward to LLVM's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:347
msgid "Directory to dump module dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:363
msgid ""
"Don't error out if the detected version of the CUDA install is too low for "
"the requested CUDA gpu architecture."
msgstr ""

#: ../../../ClangCommandLineReference.rst:371
msgid "Disable builtin #include directories"
msgstr ""

#: ../../../ClangCommandLineReference.rst:381
msgid "Do not link device library for CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:401
msgid "Disable standard #include directories for the C++ standard library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:409
msgid "Write output to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:413
msgid "Make migration to 'atomic' properties"
msgstr ""

#: ../../../ClangCommandLineReference.rst:417
msgid "Enable migration to modern ObjC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:421
msgid "Enable migration to property and method annotations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:425
msgid ""
"Enable migration to infer NS\\_DESIGNATED\\_INITIALIZER for initializer "
"methods"
msgstr ""

#: ../../../ClangCommandLineReference.rst:429
msgid "Enable migration to infer instancetype for method result type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:433
msgid "Enable migration to modern ObjC literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:437
msgid "Enable migration to NS\\_ENUM/NS\\_OPTIONS macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:441
msgid "Enable migration to modern ObjC property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:445
msgid "Enable migration of setter/getter messages to property-dot syntax"
msgstr ""

#: ../../../ClangCommandLineReference.rst:449
msgid "Enable migration to add protocol conformance on classes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:453
msgid "Enable migration to modern ObjC readonly property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:457
msgid "Enable migration to modern ObjC readwrite property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:461
msgid "Enable migration to modern ObjC subscripting"
msgstr ""

#: ../../../ClangCommandLineReference.rst:465
msgid ""
"Enable migration to use NS\\_NONATOMIC\\_IOSONLY macro for setting "
"property's 'atomic' attribute"
msgstr ""

#: ../../../ClangCommandLineReference.rst:469
msgid ""
"Enable migration to annotate property with NS\\_RETURNS\\_INNER\\_POINTER"
msgstr ""

#: ../../../ClangCommandLineReference.rst:473
msgid ""
"Only modify files with a filename contained in the provided directory path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:479
msgid ""
"CUDA offloading device architecture (e.g. sm\\_35), or HIP offloading target "
"ID in the form of a device architecture followed by target ID features "
"delimited by a colon. Each target ID feature is a pre-defined string "
"followed by a plus or minus sign (e.g. gfx908:xnack+:sram-ecc-).  May be "
"specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:487
msgid "Enable mcount instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:491
msgid "Use pipes between commands, when possible"
msgstr ""

#: ../../../ClangCommandLineReference.rst:505
msgid "Print the effective target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:509
msgid "Print the full library path of <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:513
msgid "Enable Objective-C Ivar layout bitmap print trace"
msgstr ""

#: ../../../ClangCommandLineReference.rst:517
msgid ""
"Print the library path for the currently used compiler runtime library "
"(\"libgcc.a\" or \"libclang\\_rt.builtins.\\*.a\")"
msgstr ""

#: ../../../ClangCommandLineReference.rst:525
msgid "Print the full program path of <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:529
msgid "Print the resource directory pathname"
msgstr ""

#: ../../../ClangCommandLineReference.rst:533
msgid "Print the paths used for finding libraries and programs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:537
msgid "Print the normalized target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:541
msgid "Print the registered targets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:547
msgid "Support POSIX threads in generated code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:555
msgid "Whether to build a relocatable precompiled header"
msgstr ""

#: ../../../ClangCommandLineReference.rst:561
msgid "Rewrite Legacy Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:565
msgid "Compiler runtime library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:569
msgid "Save llvm statistics."
msgstr ""

#: ../../../ClangCommandLineReference.rst:573
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../ClangCommandLineReference.rst:611
msgid "Serialize compiler diagnostics to a file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:617
msgid "Dynamically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:625
msgid "Statically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:631
msgid "Use the static host OpenMP runtime while linking."
msgstr ""

#: ../../../ClangCommandLineReference.rst:637
msgid "C++ standard library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:651
msgid "Generate code for the given target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:655
msgid "Time individual commands"
msgstr ""

#: ../../../ClangCommandLineReference.rst:661
msgid "Enable some traditional CPP emulation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:675
msgid "Unwind library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:679
msgid "Show commands to run and use verbose output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:683
msgid "Verify the binary representation of debug output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:687
msgid "Print version information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:691
msgid "Suppress all warnings"
msgstr ""

#: ../../../ClangCommandLineReference.rst:711
msgid "Resolve file paths relative to the specified directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:715
msgid "Treat subsequent input files as having type <language>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:720
msgid "Actions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:721
msgid "The action to perform on the input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:725
msgid "Only run the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:729
msgid "Only run preprocess and compilation steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:733
msgid "Only run preprocess, compile, and assemble steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:737
msgid "Generate Interface Stub Files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:741
msgid "Use the LLVM representation for assembler and object files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:745
msgid "Generate Interface Stub Files, emit merged text not binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:751
msgid "Provide information about a particular module file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:755
msgid "Only precompile the input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:759
msgid "Rewrite Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:763
msgid "Load and verify that a pre-compiled header file is not stale"
msgstr ""

#: ../../../ClangCommandLineReference.rst:766
msgid "Compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:768
msgid ""
"Flags controlling the behavior of Clang during compilation. These flags have "
"no effect during actions that do not perform compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:773
msgid "Pass <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:777
msgid "Pass <arg> to the clang compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:781
msgid "Attempt to match the ABI of Clang <version>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:785
msgid ""
"Treat each comma separated argument in <arg> as a documentation comment "
"block command"
msgstr ""

#: ../../../ClangCommandLineReference.rst:789
msgid ""
"Require member pointer base types to be complete if they would be "
"significant under the Microsoft ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:795
msgid "Allow \\_\\_declspec as a keyword"
msgstr ""

#: ../../../ClangCommandLineReference.rst:805
msgid "Print fix-its in machine parseable form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:809
msgid "Print source range spans in numeric form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:815
msgid "Discard value names in LLVM IR"
msgstr ""

#: ../../../ClangCommandLineReference.rst:819
msgid "Enables an experimental new pass manager in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:823
msgid "Enables experimental strict floating point in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:827
msgid ""
"Use separate accesses for consecutive bitfield runs with legal widths and "
"alignments."
msgstr ""

#: ../../../ClangCommandLineReference.rst:831
msgid "Enables the global instruction selector"
msgstr ""

#: ../../../ClangCommandLineReference.rst:835
msgid "Inline suitable functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:839
msgid "Inline functions which are (explicitly or implicitly) marked inline"
msgstr ""

#: ../../../ClangCommandLineReference.rst:843
msgid ""
"Disable auto-generation of preprocessed source files and a script for "
"reproduction during a clang crash"
msgstr ""

#: ../../../ClangCommandLineReference.rst:847
msgid "Don't use blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:855
msgid "Level of field padding for AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:859
msgid "Enable linker dead stripping of globals in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:863
msgid ""
"Enable poisoning array cookies when using custom operator new\\[\\] in "
"AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:867
msgid "Enable use-after-scope detection in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:871
msgid ""
"Enable ODR indicator globals to avoid false ODR violation reports in "
"partially sanitized programs at the cost of an increase in binary size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:875
msgid "Path to blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:879
msgid "Make the jump table addresses canonical in the symbol table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:883
msgid "Enable control flow integrity (CFI) checks for cross-DSO calls."
msgstr ""

#: ../../../ClangCommandLineReference.rst:887
msgid "Generalize pointers in CFI indirect call type signature checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:891
msgid ""
"Restrict sanitizer coverage instrumentation exclusively to modules and "
"functions that match the provided special case list, except the blocked ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:895
msgid ""
"Disable sanitizer coverage instrumentation for modules and functions that "
"match the provided special case list, even the allowed ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:899
msgid "Specify the type of coverage instrumentation for Sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:903
msgid ""
"Select the HWAddressSanitizer ABI to target (interceptor or platform, "
"default interceptor). This option is currently unused."
msgstr ""

#: ../../../ClangCommandLineReference.rst:911
#: ../../../ClangCommandLineReference.rst:917
msgid "Enable origins tracking in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:921
msgid "Enable use-after-destroy detection in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:927
msgid "Enable recovery for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:931
msgid "Enable sanitizer statistics gathering."
msgstr ""

#: ../../../ClangCommandLineReference.rst:935
msgid "Enable atomic operations instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:939
msgid "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:943
msgid "Enable memory access instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:947
msgid "Enable trapping for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:951
msgid ""
"Strip (or keep only, if negative) a given number of path components when "
"emitting check metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:955
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious "
"behavior. See user manual for available checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:959
msgid "Enable function outlining (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:965
msgid ""
"Print supported cpu models for the given target (if target is not specified, "
"it will print the supported cpus for the default target)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:969
msgid "Language standard to compile for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:972
msgid "Preprocessor flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:974
msgid "Flags controlling the behavior of the Clang preprocessor."
msgstr ""

#: ../../../ClangCommandLineReference.rst:978
msgid "Include comments in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:982
msgid "Include comments from within macros in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:986
msgid "Define <macro> to <value> (or 1 if <value> omitted)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:990
msgid "Show header includes and nesting depth"
msgstr ""

#: ../../../ClangCommandLineReference.rst:994
msgid "Disable linemarker output in -E mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:998
msgid "Undefine macro <macro>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1002
msgid "Pass the comma separated arguments in <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1006
msgid "Pass <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1010
msgid "remap file source paths in predefined preprocessor macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1013
msgid "Include path management"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1015
msgid "Flags controlling how ``#include``\\s are resolved to files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1019
msgid ""
"Add directory to include search path. For C++ input, if there are multiple -"
"I options, these directories are searched in the order they are given before "
"the standard system directories are searched. If the same directory is in "
"the SYSTEM include search paths, for example if also specified with -"
"isystem, the -I option will be ignored"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1028
msgid ""
"Restrict all prior -I flags to double-quoted inclusion and remove current "
"directory from include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1032
msgid "Ignore environment variables to detect CUDA installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1036
msgid "CUDA installation path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1040
msgid "Add directory to the C++ SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1044
msgid "Use the last modification time of <file> as the build session timestamp"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1048
msgid "Time when the current build session started"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1052
msgid ""
"Specify the mapping of module name to precompiled module file, or load a "
"module file if name is omitted."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1056
msgid "Specify the module cache path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1060
msgid "Disable validation of the diagnostic options when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1064
msgid ""
"Specify the interval (in seconds) after which a module file will be "
"considered unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1068
msgid ""
"Specify the interval (in seconds) between attempts to prune the module cache"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1072
msgid "Specify the module user build path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1076
msgid ""
"Don't verify input files for the modules if the module has been successfully "
"validated or loaded during this build session"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1080
msgid ""
"Validate the system headers that a module depends on when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1084
msgid "Specify the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1088
msgid "Add directory to AFTER include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1092
msgid "Add directory to SYSTEM framework search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1096
msgid ""
"Add directory to SYSTEM framework search path, absolute paths are relative "
"to -isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1100
msgid "Include macros from file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1104
msgid "Include file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1108
msgid "Include precompiled header file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1112
msgid "Set the -iwithprefix/-iwithprefixbefore prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1116
msgid "Add directory to QUOTE include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1120
msgid "Set the system root directory (usually /)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1124
msgid "Add directory to SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1128
msgid "Add directory to end of the SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1132
msgid ""
"Overlay the virtual filesystem described by file over the real file system"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1136
msgid "Set directory to SYSTEM include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1140
msgid "Set directory to include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1144
msgid ""
"Add directory to SYSTEM include search path, absolute paths are relative to -"
"isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1148
msgid "Path to libomptarget-nvptx bitcode library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1152
msgid "Path to ptxas (used for compiling CUDA code)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1156
msgid ""
"ROCm installation path, used for finding and automatically linking required "
"bitcode libraries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1162
msgid "Use directory as the C++ standard library include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1166
msgid ""
"Treat all #include paths starting with <prefix> as including a system header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1169
msgid "Dependency file generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1171
msgid ""
"Flags controlling generation of a dependency file for ``make``-like build "
"systems."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1176
msgid "Like -MD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1180
msgid "Write a depfile containing user and system headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1184
msgid "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1188
msgid "Add missing headers to depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1192
msgid "Write a compilation database entry per input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1196
msgid "Like -MMD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1200
msgid "Write a depfile containing user headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1204
msgid "Create phony target for each dependency (other than main file)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1208
msgid "Specify name of main file output to quote in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1212
msgid "Specify name of main file output in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1216
msgid "Use NMake/Jom format for the depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1219
msgid "Dumping preprocessor state"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1221
msgid ""
"Flags allowing the state of the preprocessor to be dumped in various ways."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1231
msgid "Print macro definitions in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1235
msgid "Print include directives in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1239
msgid "Print macro definitions in -E mode instead of normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1242
msgid "Diagnostic flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1244
msgid ""
"Flags controlling which warnings, errors, and remarks Clang will generate. "
"See the :doc:`full list of warning and remark flags <DiagnosticsReference>`."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1249
msgid "Enable the specified remark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1253
msgid ""
"Report transformation analysis from optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1257
msgid ""
"Report missed transformations by optimization passes whose name matches the "
"given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1261
msgid ""
"Report transformations performed by optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1265
msgid "Enable the specified warning"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1269
msgid "Enable warnings for deprecated constructs and define \\_\\_DEPRECATED"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1274
msgid "Target-independent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1283
msgid "Emit an address-significance table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1295
msgid "Enable C++17 aligned allocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1299
msgid "Treat editor placeholders as valid source code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1307
msgid "Use ANSI escape codes for diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1311
msgid "Use Apple's kernel extensions ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1315
msgid "Force linking the clang builtins runtime library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1319
msgid "Enable Apple gcc-compatible #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1323
msgid "Restrict code to those available for App Extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1345
msgid ""
"Generate labels for each basic block or place each basic block or a subset "
"of basic blocks in its own section."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1349
msgid "Enable the 'blocks' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1355
msgid "Accept non-standard constructs supported by the Borland compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1363
msgid "Load the clang builtins module map file."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1371
msgid ""
"Instrument control-flow architecture protection. Options: return, branch, "
"full, none."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1377
msgid "Enable C++ builtin type char8\\_t"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1383
msgid "Enable colors in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1387
msgid "Place uninitialized global variables in a common block"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1403
msgid "Assume functions may be convergent"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1407
msgid "Enable support for the C++ Coroutines TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1411
msgid "Generate coverage mapping to enable code coverage analysis"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1417
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1423
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into <directory>/default.profraw (overridden by LLVM\\_PROFILE\\_FILE env "
"var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1427
msgid "Use approximate transcendental functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1431
msgid "Use 32-bit pointers for accessing const/local/shared address spaces"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1435
msgid "Enable C++ exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1441
msgid "Place each data in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1445
msgid "The compilation directory to embed in the debug info."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1449
msgid ""
"Default DWARF version to use, if a -g option caused DWARF debug info to be "
"produced"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1453
msgid "Emit extra debug info to make sample profile more accurate"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1457
msgid "Emit macro debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1465
msgid "remap file source paths in debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1469
msgid "Use DWARF base address selection entries in .debug\\_ranges"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1473
msgid "Place debug types in their own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1477
msgid "Parse templated function definitions at the end of the translation unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1481
msgid "Treat usage of null pointers as undefined behavior (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1487
msgid "Print absolute paths in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1497
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this profile count"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1501
msgid "Enable profile hotness information in diagnostic line"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1505
msgid "Display include stacks for diagnostic notes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1509
msgid "Print option name with mappable diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1513
msgid "Print a template comparison tree for differing templates"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1517
msgid ""
"Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:"
"%:' (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1521
msgid "Allow '$' in identifiers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1525
msgid "Enable '\\[\\[\\]\\]' attributes in all C and C++ language modes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1531
msgid "Use DWARF style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1539
msgid "Do not emit  debug info for defined but unused types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1543
msgid "Embed LLVM bitcode (option: off, all, bitcode, marker)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1547
msgid "Emit all declarations, even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1551
msgid "Use emutls functions to access thread\\_local variables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1555
msgid "Enable matrix data type and related builtin functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1565
msgid "Enable support for exception handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1571
msgid "Enable the experimental new constant interpreter"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1575
msgid "Use the experimental C++ class ABI for classes with virtual tables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1581
msgid "Allow aggressive, lossy floating-point optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1585
msgid ""
"remap file source paths in debug info and predefined preprocessor macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1591
msgid "Enable fixed point types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1597
msgid "Always emit a debug frame section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1601
msgid "Emits more virtual tables to improve devirtualization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1605
msgid "Enable support for int128\\_t type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1609
msgid ""
"Form fused FP ops (e.g. FMAs): fast (everywhere) \\| on (according to "
"FP\\_CONTRACT pragma) \\| off (never fuse). Default is 'fast' for CUDA/HIP "
"and 'on' otherwise."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1613
msgid "Specifies the exception behavior of floating-point operations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1617
msgid "Controls the semantics of floating-point calculations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1621
msgid "Assert that the compilation takes place in a freestanding environment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1625
msgid "Place each function in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1631
msgid "Allow GNU-extension keywords regardless of language standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1635
msgid "Generate output compatible with the standard GNU Objective-C runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1639
msgid "Use the gnu89 inline semantics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1643
msgid ""
"Sets various macros to claim compatibility with the given GCC version "
"(default is 4.2.1)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1647
msgid "Allow device side init function in HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1651
msgid "Defer host/device related diagnostic messages for CUDA/HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1655
msgid ""
"Generate relocatable device code, also known as separate compilation mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1659
msgid "Use new kernel launching API for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1669
msgid "Enable support for ignoring exception handling constructs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1673
msgid "Implicitly search the file system for module map files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1681
msgid ""
"Instrument function entry only, after inlining, without arguments to the "
"instrumentation call"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1685
msgid "Generate calls to instrument function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1689
msgid "Like -finstrument-functions, but insert the calls after inlining"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1693
msgid "Enable the integrated assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1697
msgid "Run cc1 in-process"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1701
msgid "Use jump tables for lowering switches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1705
msgid "Keep static const variables if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1709
msgid "Enable implicit vector bit-casts"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1715
msgid "Enable LTO in 'full' mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1719
msgid ""
"Controls the backend parallelism of -flto=thin (default of 0 means the "
"number of threads will be derived from the number of CPUs detected)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1725
msgid "Set LTO mode to either 'full' or 'thin'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1731
msgid "Require math functions to indicate errors by setting errno"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1735
msgid "Max total number of preprocessed tokens for -Wmax-tokens."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1739
msgid ""
"Specify the maximum alignment to enforce on pointers lacking an explicit "
"alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1743
msgid "Enable heap memory profiling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1747
msgid "Allow merging of constants"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1751
msgid "Format message diagnostics so that they fit within N columns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1757
msgid "Load this module map file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1761
msgid "Specify the name of the module to build"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1765
msgid "Enable the 'modules' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1769
msgid "Require declaration of modules used within a module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1773
msgid ""
"Ignore the definition of the given macro when building and loading modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1777
msgid "Search even non-imported modules to resolve references"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1781
msgid "Like -fmodules-decluse but requires all headers to be in modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1785
msgid "Enable support for the C++ Modules TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1789
msgid "Validate PCM input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1793
msgid "Enable full Microsoft Visual C++ compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1797
msgid ""
"Dot-separated value representing the Microsoft compiler version number to "
"report in \\_MSC\\_VER (0 = don't define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1801
msgid "Accept some non-standard constructs supported by the Microsoft compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1809
msgid ""
"Microsoft compiler version number to report in \\_MSC\\_VER (0 = don't "
"define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1819
msgid ""
"Specifies the largest alignment guaranteed by '::operator new(size\\_t)'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1827
msgid "Disable implicit builtin knowledge of a specific function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1831
msgid "Do not elide types when printing diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1837
msgid "Do not treat C++ operator name keywords as synonyms for operators"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1843
msgid ""
"Directly create compilation output files. This may lead to incorrect "
"incremental builds if the compiler crashes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1859
msgid "Synthesize retain and release calls for Objective-C pointers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1863
msgid "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1869
msgid "Enable Objective-C exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1883
msgid "Specify the target Objective-C runtime kind and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1889
msgid "Enable ARC-style weak references in Objective-C"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1895
msgid "Parse OpenMP pragmas and generate parallel code."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1899
msgid "Emit OpenMP code only for SIMD-based constructs."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1911
msgid ""
"Specify the output name of the file containing the optimization remarks. "
"Implies -fsave-optimization-record. On Darwin platforms, this cannot be used "
"with multiple -arch <arch> options."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1915
msgid ""
"Only include passes which match a specified regular expression in the "
"generated optimization record (by default, include all passes)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1921
msgid ""
"Generate instrumented code to collect order file into default.profraw file "
"(overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1931
msgid "Specify the default maximum struct packing alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1935
msgid "Recognize and construct Pascal-style string literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1939
msgid ""
"Load pass plugin from a dynamic shared object file (only with new pass "
"manager)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1943
msgid "Generate M NOPs before function entry and N-M NOPs after function entry"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1947
msgid "Override the default ABI to return all structs on the stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1951
msgid ""
"Generate code for uses of this PCH that assumes an explicit object file will "
"be built for the PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1955
msgid ""
"Generate debug info for types in an object file built from this PCH and do "
"not generate them elsewhere"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1959
msgid "Instantiate templates already while building a PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1965
msgid "Validate PCH input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1975
msgid "Load the named plugin (dynamic shared object)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1985
msgid ""
"Instrument only functions from files where names don't match all the regexes "
"separated by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1989
msgid ""
"Instrument only functions from files where names match any regex separated "
"by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1993
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1999
msgid ""
"Generate instrumented code to collect execution counts into <directory>/"
"default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2003
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"file (overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2009
msgid ""
"Generate instrumented code to collect execution counts into <file> "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2017
msgid "Use instrumentation data for profile-guided optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2021
msgid ""
"Use the remappings described in <file> to match the profile data against "
"names in the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2028
msgid "Specifies that the sample profile is accurate. If the sample"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2026
msgid ""
"profile is accurate, callsites without profile samples are marked as cold. "
"Otherwise, treat callsites without profile samples as if we have no profile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2036
msgid "Enable sample-based profile guided optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2040
msgid "Set update method of profile counters (atomic,prefer-atomic,single)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2046
msgid ""
"Use instrumentation data for profile-guided optimization. If pathname is a "
"directory, it reads from <pathname>/default.profdata. Otherwise, it reads "
"from file <pathname>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2052
msgid ""
"Filename defining the list of functions/files to instrument. The file uses "
"the sanitizer special case list format."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2056
msgid "Allow division operations to be reassociated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2060
msgid "Override the default ABI to return small structs in registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2064
msgid "Use atexit or \\_\\_cxa\\_atexit to register global destructors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2068
msgid "Enable C++17 relaxed template template argument matching"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2072
msgid "Turn on loop reroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2088
msgid "Generate read-only position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2098
msgid "Generate read-write position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2102
msgid "Generate a YAML optimization record file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2108
msgid "Generate an optimization record file in a specific format"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2112
msgid "Use SEH style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2118
msgid ""
"Allocate to an enum type only as many bytes as it needs for the declared "
"range of possible values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2122
msgid "Force wchar\\_t to be a short unsigned int"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2128
msgid ""
"Which overload candidates to show when overload resolution fails: best\\|"
"all; defaults to all"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2138
msgid "char is signed"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2144
msgid "Enable C++14 sized global deallocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2148
msgid "Use SjLj style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2152
msgid "Enable the superword-level parallelism vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2160
msgid ""
"Provide minimal debug info in the object/executable to facilitate online "
"symbolication/stack traces in the absence of .dwo/.dwp files when using "
"Split DWARF"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2164
msgid "Enables splitting of the LTO unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2168
msgid "Enable late function splitting using profile information (x86 ELF)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2174
msgid "Enable stack clash protection"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2178
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"This uses a loose heuristic which considers functions vulnerable if they "
"contain a char (or 8bit integer) array or constant sized calls to alloca , "
"which are of greater size than ssp-buffer-size (default: 8 bytes). All "
"variable sized calls to alloca are considered vulnerable. A function with a "
"stack protector has a guard value added to the stack frame that is checked "
"on function exit. The guard value must be positioned in the stack frame such "
"that a buffer overflow from a vulnerable variable will overwrite the guard "
"value before overwriting the function's return address. The reference stack "
"guard value is stored in a global variable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2182
msgid "Enable stack protectors for all functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2186
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"Compared to -fstack-protector, this uses a stronger heuristic that includes "
"functions containing arrays of any size (and any type), as well as any calls "
"to alloca or the taking of an address from a local variable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2190
msgid "Emit section containing metadata on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2194
msgid "Emit full debug info for all types used by the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2200
msgid ""
"Enable optimizations based on the strict definition of an enum's value range"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2204
msgid "Assume that overflowing float-to-int casts are undefined (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2212
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2230
msgid "Write minimized bitcode to <file> for the ThinLTO thin link only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2234
msgid "Perform ThinLTO importing using provided function summary index"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2243
msgid ""
"Turn on time profiler. Generates JSON file based on output filename. Results "
"can be analyzed with chrome://tracing or `Speedscope App <https://www."
"speedscope.app>`_ for flamegraph visualization."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2249
msgid "Minimum time granularity (in microseconds) traced by time profiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2255
msgid "Issue call to specified function rather than a trap instruction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2261
msgid "Trap on integer overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2269
msgid "Specify the function to be called on overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2273
msgid "Process trigraph sequences"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2277
msgid ""
"Stop initializing trivial automatic stack variables after the specified "
"number of instances"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2281
msgid ""
"Initialize trivial automatic stack variables: uninitialized (default) \\| "
"pattern"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2285
msgid "Use unique names for basic block sections (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2289
msgid ""
"Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the "
"module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2297
msgid "Turn on loop unroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2315
msgid "Use #line in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2319
msgid ""
"Compute and store the hash of input files used to build an AST. Files with "
"mismatching mtime's are considered valid if both contents is identical"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2323
msgid "Use the given vector functions library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2327
msgid "Enable the loop vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2331
msgid "Generate verbose assembly output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2335
msgid ""
"Enables dead virtual function elimination optimization. Requires -flto=full"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2339
msgid "Give global C++ operator new and delete declarations hidden visibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2343
msgid "Give inline C++ member functions hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2347
msgid ""
"When -fvisibility-inlines-hidden is enabled, static variables in inline C++ "
"member functions will also be given hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2351
msgid ""
"Give global types 'default' visibility and global functions and variables "
"'hidden' visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2355
msgid "Set the default symbol visibility for all global declarations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2359
msgid "Use WebAssembly style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2363
msgid "Enables whole-program vtable optimization. Requires -flto"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2367
msgid "Treat signed integer overflow as two's complement"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2371
msgid "Store string literals as writable data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2375
msgid ""
"Always emit \\_\\_xray\\_customevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2379
msgid ""
"Always emit \\_\\_xray\\_typedevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2383
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'always "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2387
msgid ""
"Filename defining the list of functions/types for imbuing XRay attributes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2391
msgid "Only instrument 1 of N groups"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2397
msgid ""
"Don't instrument functions with loops unless they also meet the minimum "
"function size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2405
msgid "Sets the minimum function size to instrument with XRay"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2409
msgid "Generate XRay instrumentation sleds on function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2413
msgid ""
"Select which XRay instrumentation points to emit. Options: all, none, "
"function-entry, function-exit, function, custom. Default is 'all'.  "
"'function' includes both 'function-entry' and 'function-exit'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2417
msgid "Tells clang to add the link dependencies for XRay."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2421
msgid "List of modes to link in by default into XRay instrumented binaries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2425
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'never "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2429
msgid ""
"When using -fxray-function-groups, select which group of functions to "
"instrument. Valid range is 0 to fxray-function-groups - 1"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2435
msgid "Enable System z vector language extension"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2442
msgid "OpenCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2445
msgid "OpenCL only. Allow denormals to be flushed to zero."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2449
msgid ""
"OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, "
"and defines \\_\\_FAST\\_RELAXED\\_MATH\\_\\_."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2453
msgid ""
"OpenCL only. Allow floating-point optimizations that assume arguments and "
"results are not NaNs or +-Inf."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2457
msgid ""
"OpenCL only. Specify that single precision floating-point divide and sqrt "
"used in the program source are correctly rounded."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2461
msgid "OpenCL only. Generate kernel argument metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2465
msgid ""
"OpenCL only. Allow use of less precise MAD computations in the generated "
"binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2469
msgid ""
"OpenCL only. Allow use of less precise no signed zeros computations in the "
"generated binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2473
msgid ""
"OpenCL only. This option disables all optimizations. By default "
"optimizations are enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2477
msgid ""
"OpenCL only. Treat double precision floating-point constant as single "
"precision constant."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2481
msgid "OpenCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2485
msgid "OpenCL only. This option is added for compatibility with OpenCL 1.0."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2489
msgid ""
"OpenCL only. Defines that the global work-size be a multiple of the work-"
"group size specified to clEnqueueNDRangeKernel"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2493
msgid ""
"OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-"
"signed-zeros and -cl-mad-enable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2496
msgid "SYCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2499
msgid "Enable SYCL kernels compilation for device"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2503
msgid "SYCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2506
msgid "Target-dependent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2509
msgid ""
"Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2513
msgid "Reserve the x1 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2517
msgid "Reserve the x10 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2521
msgid "Reserve the x11 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2525
msgid "Reserve the x12 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2529
msgid "Reserve the x13 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2533
msgid "Reserve the x14 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2537
msgid "Reserve the x15 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2541
msgid "Reserve the x16 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2545
msgid "Reserve the x17 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2549
msgid "Reserve the x18 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2553
msgid "Reserve the x19 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2557
msgid "Reserve the x2 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2561
msgid "Reserve the x20 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2565
msgid "Reserve the x21 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2569
msgid "Reserve the x22 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2573
msgid "Reserve the x23 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2577
msgid "Reserve the x24 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2581
msgid "Reserve the x25 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2585
msgid "Reserve the x26 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2589
msgid "Reserve the x27 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2593
msgid "Reserve the x28 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2597
msgid "Reserve the x29 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2601
msgid "Reserve the x3 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2605
msgid "Reserve the x30 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2609
msgid "Reserve the x31 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2613
msgid "Reserve the x4 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2617
msgid "Reserve the x5 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2621
msgid "Reserve the x6 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2625
msgid "Reserve the x7 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2629
msgid "Reserve the x8 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2633
msgid "Reserve the x9 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2645
msgid "Return all structs in memory (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2649
msgid "Specify the boundary's size to align branches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2653
msgid "Specify types of branches to align"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2657
msgid "Align doubles to two words in structs (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2665
msgid "Link stack frames through backchain on System Z"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2669
msgid "Align selected branches (fused, jcc, jmp) within 32-byte boundary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2675
msgid ""
"Legacy option to specify code object ABI V2 (-mnocode-object-v3) or V3 (-"
"mcode-object-v3) (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2679
msgid "Specify code object ABI version. Defaults to 4. (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2689
msgid "Allow use of CRC instructions (ARM/Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2697
msgid "Force double to be 32 bits or 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2703
msgid "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2707
msgid "Enable use of experimental RISC-V extensions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2711
msgid "Insert calls to fentry at function entry (x86/SystemZ only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2721
msgid "Enable merging of globals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2731
msgid "Use Intel MCU ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2735
msgid ""
"Not emit the visibility attribute for asm in AIX OS or give all symbols "
"'unspecified' visibility in XCOFF object file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2743
msgid ""
"(integrated-as) Emit an object file which can be used with an incremental "
"linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2751
msgid ""
"Generate branches with extended addressability, usually via indirect jumps."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2755
msgid "Enable only control-flow mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2759
msgid "Enable all mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2763
msgid "Set Mac OS X deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2769
msgid ""
"Set the default structure layout to be compatible with the Microsoft "
"compiler standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2773
msgid ""
"Generate mcount/\\_\\_fentry\\_\\_ calls as nops. To activate they need to "
"be patched in."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2777
msgid "Omit frame pointer setup for leaf functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2783
msgid "Use packed stack layout (SystemZ only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2787
msgid "Specify maximum number of prefixes to use for padding"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2791
msgid "Use copy relocations support for PIE builds"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2795
msgid ""
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' "
"which allows target specific decisions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2799
msgid "Enable hexagon-qdsp6 backward compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2809
msgid ""
"Generate a \\_\\_mcount\\_loc section entry for each \\_\\_fentry\\_\\_ call."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2817
msgid "Enable linker relaxation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2821
msgid "(integrated-as) Relax all machine instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2827
msgid "Make StdCall calling convention the default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2831
msgid ""
"Enable speculative execution side effect suppression (SESES). Includes LVI "
"control flow integrity mitigations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2835
msgid "Select return address signing scope"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2841
msgid "Use software floating point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2847
msgid "Set the stack alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2851
msgid "Enable stack probes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2855
msgid "Set the stack probe size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2859
msgid "Use the given offset for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2863
msgid "Use the given reg for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2867
msgid ""
"Use the given guard (global, tls) for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2871
msgid "Force realign the stack at entry to every function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2875
msgid "Return small structs in registers (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2879
msgid "The thread model to use, e.g. posix, single (posix by default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2887
msgid "Enable direct TLS access through segment registers (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2891
msgid ""
"Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) "
"\\| 24 (for 16MB, default) \\| 32 (for 4GB) \\| 48 (for 256TB, needs -"
"mcmodel=large)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2897
msgid ""
"Only supported on X86 and RISC-V. Otherwise accepted for compatibility with "
"GCC."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2905
msgid ""
"Only supported on AIX. Specify usage of the extended vector ABI on AIX and "
"of non-volatile vector registers. Defaults to '-mabi=default' when Altivec "
"is enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2915
msgid "Specify wavefront size 64 mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2922
msgid "AARCH64"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2925
msgid "Make the x10 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2929
msgid "Make the x11 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2933
msgid "Make the x12 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2937
msgid "Make the x13 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2941
msgid "Make the x14 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2945
msgid "Make the x15 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2949
msgid "Make the x18 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2953
msgid "Make the x8 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2957
msgid "Make the x9 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2961
msgid "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2965
msgid ""
"Generate code which only uses the general purpose registers (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2969
msgid "Add .note.gnu.property with BTI to assembly files (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2973
msgid ""
"Specify the size in bits of an SVE vector register. Defaults to the vector "
"length agnostic value of \"scalable\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2976
msgid "AMDGPU"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2979
msgid ""
"Specify CU (-mcumode) or WGP (-mno-cumode) wavefront execution mode (AMDGPU "
"only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2983
msgid "Specify SRAM ECC mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2987
msgid "Specify XNACK mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2990
msgid "ARM"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2993
msgid ""
"Follows the AAPCS standard that all volatile bit-field write generates at "
"least one load. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2997
msgid ""
"Follow the AAPCS standard requirement stating that volatile bit-field width "
"is dictated by the field container type. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3001
msgid "Reserve the r9 register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3005
msgid "Allow use of CMSE (Armv8-M Security Extensions)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3009
msgid "Disallow generation of data access to code sections (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3013
msgid "Disallow use of movt/movw pairs (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3017
msgid ""
"Disallow converting instructions with negative immediates to their negation "
"or inversion."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3021
msgid "Disallow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3025
msgid ""
"Disallow generation of deprecated IT blocks for ARMv8. It is on by default "
"for ARMv8 Thumb mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3029
msgid "Thread pointer access method (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3033
msgid "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3036
#: ../../../ClangCommandLineReference.rst:3056
msgid "Hexagon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3041
msgid "Enable generation of memop instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3045
msgid "Enable generation of new-value jumps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3049
msgid "Enable generation of new-value stores"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3053
msgid "Enable generation of instruction packets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3059
#: ../../../ClangCommandLineReference.rst:3069
msgid "Enable Hexagon Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3063
msgid "Set Hexagon Vector Length"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3072
msgid "MIPS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3075
msgid "Enable SVR4-style position-independent code (Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3091
msgid ""
"Place constants in the .rodata section instead of the .sdata section even if "
"they meet the -G <size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3095
msgid ""
"Assume that externally defined data is in the small data if it meets the -G "
"<size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3099
msgid "Use 32-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3103
msgid "Use 64-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3109
msgid ""
"Use GP relative accesses for symbols known to be in a small data section "
"(MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3113
msgid "Change indirect jump instructions to inhibit speculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3121
msgid "Extend the -G behaviour to object local data (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3125
msgid ""
"Enable the generation of 4-operand madd.s, madd.d and related instructions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3131
msgid "Enable MSA ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3135
msgid "Enable MT ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3148
msgid "PowerPC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3196
msgid "WebAssembly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3220
msgid "WebAssembly Driver"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3223
msgid "Execution model (WebAssembly only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3226
msgid "X86"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3406
msgid "RISCV"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3409
msgid "Enable using library calls for save and restore"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3412
msgid "Long double flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3413
msgid "Selects the long double implementation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3417
msgid "Force long double to be 128 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3421
msgid "Force long double to be 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3425
msgid "Force long double to be 80 bits, padded to 128 bits for storage"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3428
msgid "Optimization level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3430
msgid "Flags controlling how much optimization should be performed."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3437
msgid "Debug information generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3439
msgid ""
"Flags controlling how much and what kind of debug information should be "
"generated."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3443
msgid "Kind and level of debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3446
msgid "Generate source-level debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3450
msgid "Generate source-level debug information with the default dwarf version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3454
msgid "Generate source-level debug information with dwarf version 2"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3458
msgid "Generate source-level debug information with dwarf version 3"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3462
msgid "Generate source-level debug information with dwarf version 4"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3466
msgid "Generate source-level debug information with dwarf version 5"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3473
msgid "Debug level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3490
msgid "Emit debug line info directives only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3494
msgid "Emit debug line number tables only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3498
msgid ""
"Generate debug info with external references to clang modules or precompiled "
"headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3501
msgid "Debugger to tune debug information for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3509
msgid "Debug information flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3516
msgid "Embed source text in DWARF debug sections"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3530
msgid "Set DWARF fission mode to either 'split' or 'single'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3536
msgid "DWARF debug sections compression type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3539
msgid "Static analyzer flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3541
msgid "Flags controlling the behavior of the Clang Static Analyzer."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3545
msgid "Pass <arg> to the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3548
msgid "Fortran compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3550
msgid ""
"Flags that will be passed onto the ``gfortran`` compiler when Clang is given "
"a Fortran input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3692
msgid "Linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3693
msgid "Flags that are passed on to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3697
msgid "Add directory to library search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3703
msgid "Specify <script> as linker script"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3707
msgid "Set starting address of BSS to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3711
msgid "Set starting address of DATA to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3715
msgid "Set starting address of TEXT to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3719
msgid "Pass the comma separated arguments in <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3725
msgid "Pass <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3739
msgid "HIP device library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3759
msgid "ROCm device library path. Alternative to rocm-path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3779
msgid "undef all system defines"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3785
msgid "Pass -z <arg> to the linker"
msgstr ""
