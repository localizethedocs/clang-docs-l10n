# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../OpenCLSupport.rst:1
msgid ""
"<style type=\"text/css\">\n"
"  .none { background-color: #FFCCCC }\n"
"  .partial { background-color: #FFFF99 }\n"
"  .good { background-color: #CCFF99 }\n"
"</style>"
msgstr ""

#: ../../../OpenCLSupport.rst:18
msgid "OpenCL Support"
msgstr ""

#: ../../../OpenCLSupport.rst:20
msgid "Clang has complete support of OpenCL C versions from 1.0 to 2.0."
msgstr ""

#: ../../../OpenCLSupport.rst:22
msgid ""
"Clang also supports :ref:`the C++ for OpenCL kernel language "
"<cxx_for_opencl_impl>`."
msgstr ""

#: ../../../OpenCLSupport.rst:24
msgid "There is an ongoing work to support :ref:`OpenCL 3.0 <opencl_300>`."
msgstr ""

#: ../../../OpenCLSupport.rst:26
msgid ""
"There are also other :ref:`new and experimental features "
"<opencl_experimenal>` available."
msgstr ""

#: ../../../OpenCLSupport.rst:28
msgid ""
"For general issues and bugs with OpenCL in clang refer to `Bugzilla <https://"
"bugs.llvm.org/buglist.cgi?"
"component=OpenCL&list_id=172679&product=clang&resolution=--->`__."
msgstr ""

#: ../../../OpenCLSupport.rst:34
msgid "C++ for OpenCL Implementation Status"
msgstr ""

#: ../../../OpenCLSupport.rst:36
msgid ""
"Clang implements language version 1.0 published in `the official release of "
"C++ for OpenCL Documentation <https://github.com/KhronosGroup/OpenCL-Docs/"
"releases/tag/cxxforopencl-v1.0-r1>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:40
msgid ""
"Limited support of experimental C++ libraries is described in the :ref:"
"`experimental features <opencl_experimenal>`."
msgstr ""

#: ../../../OpenCLSupport.rst:42
msgid ""
"Bugzilla bugs for this functionality are typically prefixed with '[C+"
"+4OpenCL]' - click `here <https://bugs.llvm.org/buglist.cgi?"
"component=OpenCL&list_id=204139&product=clang&query_format=advanced&resolution=---"
"&sh    ort_desc=%5BC%2B%2B4OpenCL%5D&short_desc_type=allwordssubstr>`_ to "
"view the full bug list."
msgstr ""

#: ../../../OpenCLSupport.rst:49
msgid "Missing features or with limited support"
msgstr ""

#: ../../../OpenCLSupport.rst:51
msgid ""
"Use of ObjC blocks is disabled and therefore the ``enqueue_kernel`` builtin "
"function is not supported currently. It is expected that if support for this "
"feature is added in the future, it will utilize C++ lambdas instead of ObjC "
"blocks."
msgstr ""

#: ../../../OpenCLSupport.rst:56
msgid ""
"IR generation for global destructors is incomplete (See: `PR48047 <https://"
"llvm.org/PR48047>`_)."
msgstr ""

#: ../../../OpenCLSupport.rst:59
msgid ""
"There is no distinct file extension for sources that are to be compiled in C+"
"+ for OpenCL mode (See: `PR48097 <https://llvm.org/PR48097>`_)"
msgstr ""

#: ../../../OpenCLSupport.rst:65
msgid "OpenCL 3.0 Implementation Status"
msgstr ""

#: ../../../OpenCLSupport.rst:67
msgid ""
"The following table provides an overview of features in OpenCL C 3.0 and "
"their implementation status."
msgstr ""

#: ../../../OpenCLSupport.rst:71
msgid "Category"
msgstr ""

#: ../../../OpenCLSupport.rst:71
msgid "Feature"
msgstr ""

#: ../../../OpenCLSupport.rst:71
msgid "Status"
msgstr ""

#: ../../../OpenCLSupport.rst:71
msgid "Reviews"
msgstr ""

#: ../../../OpenCLSupport.rst:73
msgid "Command line interface"
msgstr ""

#: ../../../OpenCLSupport.rst:73
msgid "New value for ``-cl-std`` flag"
msgstr ""

#: ../../../OpenCLSupport.rst:73 ../../../OpenCLSupport.rst:75
msgid ":good:`done`"
msgstr ""

#: ../../../OpenCLSupport.rst:73 ../../../OpenCLSupport.rst:75
msgid "https://reviews.llvm.org/D88300"
msgstr ""

#: ../../../OpenCLSupport.rst:75 ../../../OpenCLSupport.rst:77
msgid "Predefined macros"
msgstr ""

#: ../../../OpenCLSupport.rst:75
msgid "New version macro"
msgstr ""

#: ../../../OpenCLSupport.rst:77
msgid "Feature macros"
msgstr ""

#: ../../../OpenCLSupport.rst:77 ../../../OpenCLSupport.rst:81
#: ../../../OpenCLSupport.rst:89 ../../../OpenCLSupport.rst:93
#: ../../../OpenCLSupport.rst:95 ../../../OpenCLSupport.rst:99
#: ../../../OpenCLSupport.rst:101
msgid ":part:`worked on`"
msgstr ""

#: ../../../OpenCLSupport.rst:77
msgid "https://reviews.llvm.org/D89869"
msgstr ""

#: ../../../OpenCLSupport.rst:79 ../../../OpenCLSupport.rst:81
#: ../../../OpenCLSupport.rst:83 ../../../OpenCLSupport.rst:85
#: ../../../OpenCLSupport.rst:87 ../../../OpenCLSupport.rst:89
#: ../../../OpenCLSupport.rst:91 ../../../OpenCLSupport.rst:93
#: ../../../OpenCLSupport.rst:95
msgid "Feature optionality"
msgstr ""

#: ../../../OpenCLSupport.rst:79
msgid "Generic address space"
msgstr ""

#: ../../../OpenCLSupport.rst:79 ../../../OpenCLSupport.rst:83
#: ../../../OpenCLSupport.rst:85 ../../../OpenCLSupport.rst:87
#: ../../../OpenCLSupport.rst:91 ../../../OpenCLSupport.rst:97
msgid ":none:`unclaimed`"
msgstr ""

#: ../../../OpenCLSupport.rst:81
msgid "Builtin function overloads with generic address space"
msgstr ""

#: ../../../OpenCLSupport.rst:81 ../../../OpenCLSupport.rst:95
#: ../../../OpenCLSupport.rst:99
msgid "https://reviews.llvm.org/D92004"
msgstr ""

#: ../../../OpenCLSupport.rst:83
msgid "Program scope variables in global memory"
msgstr ""

#: ../../../OpenCLSupport.rst:85
msgid "3D image writes including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:87
msgid "read_write images including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:89
msgid "C11 atomics memory scopes, ordering and builtin function"
msgstr ""

#: ../../../OpenCLSupport.rst:89 ../../../OpenCLSupport.rst:93
#: ../../../OpenCLSupport.rst:101
msgid "https://reviews.llvm.org/D92004 (functions only)"
msgstr ""

#: ../../../OpenCLSupport.rst:91
msgid "Device-side kernel enqueue including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:93
msgid "Pipes including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:95
msgid "Work group collective functions"
msgstr ""

#: ../../../OpenCLSupport.rst:97 ../../../OpenCLSupport.rst:99
#: ../../../OpenCLSupport.rst:101
msgid "New functionality"
msgstr ""

#: ../../../OpenCLSupport.rst:97
msgid "RGBA vector components"
msgstr ""

#: ../../../OpenCLSupport.rst:99
msgid "Subgroup functions"
msgstr ""

#: ../../../OpenCLSupport.rst:101
msgid "Atomic mem scopes: subgroup, all devices including functions"
msgstr ""

#: ../../../OpenCLSupport.rst:107
msgid "Experimental features"
msgstr ""

#: ../../../OpenCLSupport.rst:109
msgid ""
"Clang provides the following new WIP features for the developers to "
"experiment and provide early feedback or contribute with further "
"improvements. Feel free to contact us on `cfe-dev <https://lists.llvm.org/"
"mailman/listinfo/cfe-dev>`_ or via `Bugzilla <https://bugs.llvm.org/>`__."
msgstr ""

#: ../../../OpenCLSupport.rst:116
msgid "Fast builtin function declarations"
msgstr ""

#: ../../../OpenCLSupport.rst:118
msgid ""
"In addition to regular header includes with builtin types and functions "
"using ``-finclude-default-header`` explained in :doc:`UsersManual`, clang "
"supports a fast mechanism to declare builtin functions with ``-fdeclare-"
"opencl-builtins``. This does not declare the builtin types and therefore it "
"has to be used in combination with ``-finclude-default-header`` if full "
"functionality is required."
msgstr ""

#: ../../../OpenCLSupport.rst:125 ../../../OpenCLSupport.rst:155
msgid "**Example of Use**:"
msgstr ""

#: ../../../OpenCLSupport.rst:131
msgid ""
"Note that this is a frontend-only flag and therefore it requires the use of "
"flags that forward options to the frontend, e.g. ``-cc1`` or ``-Xclang``."
msgstr ""

#: ../../../OpenCLSupport.rst:134
msgid ""
"As this feature is still in experimental phase some changes might still "
"occur on the command line interface side."
msgstr ""

#: ../../../OpenCLSupport.rst:138
msgid "C++ libraries for OpenCL"
msgstr ""

#: ../../../OpenCLSupport.rst:140
msgid ""
"There is ongoing work to support C++ standard libraries from `LLVM's libcxx "
"<https://libcxx.llvm.org/>`_ in OpenCL kernel code using C++ for OpenCL mode."
msgstr ""

#: ../../../OpenCLSupport.rst:143
msgid ""
"It is currently possible to include `type_traits` from C++17 in the kernel "
"sources when the following clang extensions are enabled "
"``__cl_clang_function_pointers`` and ``__cl_clang_variadic_functions``, see :"
"doc:`LanguageExtensions` for more details. The use of non-conformant "
"features enabled by the extensions does not expose non-conformant behavior "
"beyond the compilation i.e. does not get generated in IR or binary. The "
"extension only appear in metaprogramming mechanism to identify or verify the "
"properties of types. This allows to provide the full C++ functionality "
"without a loss of portability. To avoid unsafe use of the extensions it is "
"recommended that the extensions are disabled directly after the header "
"include."
msgstr ""

#: ../../../OpenCLSupport.rst:157
msgid "The example of kernel code with `type_traits` is illustrated here."
msgstr ""

#: ../../../OpenCLSupport.rst:173
msgid "The possible clang invocation to compile the example is as follows:"
msgstr ""

#: ../../../OpenCLSupport.rst:179
msgid ""
"Note that `type_traits` is a header only library and therefore no extra "
"linking step against the standard libraries is required."
msgstr ""
