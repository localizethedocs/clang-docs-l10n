# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MatrixTypes.rst:3
msgid "Matrix Types"
msgstr ""

#: ../../../MatrixTypes.rst:10
msgid ""
"Clang provides a C/C++ language extension that allows users to directly "
"express fixed-size 2-dimensional matrices as language values and perform "
"arithmetic on them."
msgstr ""

#: ../../../MatrixTypes.rst:14
msgid ""
"This feature is currently experimental, and both its design and its "
"implementation are in flux."
msgstr ""

#: ../../../MatrixTypes.rst:18
msgid "Draft Specification"
msgstr ""

#: ../../../MatrixTypes.rst:21
msgid "Matrix Type"
msgstr ""

#: ../../../MatrixTypes.rst:23
msgid ""
"A matrix type is a scalar type with an underlying *element type*, a constant "
"number of *rows*, and a constant number of *columns*. Matrix types with the "
"same element type, rows, and columns are the same type. A value of a matrix "
"type includes storage for ``rows * columns`` values of the *element type*. "
"The internal layout, overall size and alignment are implementation-defined."
msgstr ""

#: ../../../MatrixTypes.rst:29
msgid ""
"The maximum of the product of the number of rows and columns is "
"implementation-defined. If that implementation-defined limit is exceeded, "
"the program is ill-formed."
msgstr ""

#: ../../../MatrixTypes.rst:33
msgid ""
"Currently, the element type of a matrix is only permitted to be one of the "
"following types:"
msgstr ""

#: ../../../MatrixTypes.rst:36
msgid ""
"an integer type (as in C2x 6.2.5p19), but excluding enumerated types and "
"``_Bool``"
msgstr ""

#: ../../../MatrixTypes.rst:37
msgid "the standard floating types ``float`` or ``double``"
msgstr ""

#: ../../../MatrixTypes.rst:38
msgid "a half-precision floating point type, if one is supported on the target"
msgstr ""

#: ../../../MatrixTypes.rst:40
msgid "Other types may be supported in the future."
msgstr ""

#: ../../../MatrixTypes.rst:43
msgid "Matrix Type Attribute"
msgstr ""

#: ../../../MatrixTypes.rst:45
msgid ""
"Matrix types can be declared by adding the ``matrix_type`` attribute to the "
"declaration of a *typedef* (or a C++ alias declaration). The underlying type "
"of the *typedef* must be a valid matrix element type. The attribute takes "
"two arguments, both of which must be integer constant expressions that "
"evaluate to a value greater than zero. The first specifies the number of "
"rows, and the second specifies the number of columns. The underlying type of "
"the *typedef* becomes a matrix type with the given dimensions and an element "
"type of the former underlying type."
msgstr ""

#: ../../../MatrixTypes.rst:54
msgid ""
"If a declaration of a *typedef-name* has a ``matrix_type`` attribute, then "
"all declaration of that *typedef-name* shall have a matrix_type attribute "
"with the same element type, number of rows, and number of columns."
msgstr ""

#: ../../../MatrixTypes.rst:59
msgid "Standard Conversions"
msgstr ""

#: ../../../MatrixTypes.rst:61
msgid ""
"The standard conversions are extended as follows. Note that these "
"conversions are intentionally not listed as satisfying the constraints for "
"assignment, which is to say, they are only permitted as explicit casts, not "
"as implicit conversions."
msgstr ""

#: ../../../MatrixTypes.rst:66
msgid ""
"A value of matrix type can be converted to another matrix type if the number "
"of rows and columns are the same and the value's elements can be converted "
"to the element type of the result type. The result is a matrix where each "
"element is the converted corresponding element."
msgstr ""

#: ../../../MatrixTypes.rst:71
msgid ""
"A value of any real type (as in C2x 6.2.5p17) can be converted to a matrix "
"type if it can be converted to the element type of the matrix. The result is "
"a matrix where all elements are the converted original value."
msgstr ""

#: ../../../MatrixTypes.rst:75
msgid ""
"If the number of rows or columns differ between the original and resulting "
"type, the program is ill-formed."
msgstr ""

#: ../../../MatrixTypes.rst:80
msgid "Arithmetic Conversions"
msgstr ""

#: ../../../MatrixTypes.rst:82
msgid "The usual arithmetic conversions are extended as follows."
msgstr ""

#: ../../../MatrixTypes.rst:84
msgid "Insert at the start:"
msgstr ""

#: ../../../MatrixTypes.rst:86
msgid ""
"If both operands are of matrix type, no arithmetic conversion is performed."
msgstr ""

#: ../../../MatrixTypes.rst:87
msgid ""
"If one operand is of matrix type and the other operand is of a real type, "
"convert the real type operand to the matrix type according to the standard "
"conversion rules."
msgstr ""

#: ../../../MatrixTypes.rst:92
msgid "Matrix Type Element Access Operator"
msgstr ""

#: ../../../MatrixTypes.rst:94
msgid ""
"An expression of the form ``E1 [E2] [E3]``, where ``E1`` has matrix type "
"``cv M``, is a matrix element access expression.  Let ``T`` be the element "
"type of ``M``, and let ``R`` and ``C`` be the number of rows and columns in "
"``M`` respectively.  The index expressions shall have integral or unscoped "
"enumeration type and shall not be uses of the comma operator unless "
"parenthesized.  The first index expression shall evaluate to a non-negative "
"value less than ``R``, and the second index expression shall evaluate to a "
"non-negative value less than ``C``, or else the expression has undefined "
"behavior.  If ``E1`` is a prvalue, the result is a prvalue with type ``T`` "
"and is the value of the element at the given row and column in the matrix. "
"Otherwise, the result is a glvalue with type ``cv T`` and with the same "
"value category as ``E1`` which refers to the element at the given row and "
"column in the matrix."
msgstr ""

#: ../../../MatrixTypes.rst:108
msgid ""
"Programs containing a single subscript expression into a matrix are ill-"
"formed."
msgstr ""

#: ../../../MatrixTypes.rst:110
msgid ""
"**Note**: We considered providing an expression of the form ``postfix-"
"expression [expression]`` to access columns of a matrix. We think that such "
"an expression would be problematic once both column and row major matrixes "
"are supported: depending on the memory layout, either accessing columns or "
"rows can be done efficiently, but not both. Instead, we propose to provide "
"builtins to extract rows and columns from a matrix. This makes the "
"operations more explicit."
msgstr ""

#: ../../../MatrixTypes.rst:119
msgid "Matrix Type Binary Operators"
msgstr ""

#: ../../../MatrixTypes.rst:121
msgid ""
"Each matrix type supports the following binary operators: ``+``, ``-`` and "
"``*``. The ``*`` operator provides matrix multiplication, while ``+`` and ``-"
"`` are performed element-wise. There are also scalar versions of the "
"operators, which take a matrix type and the matrix element type. The "
"operation is applied to all elements of the matrix using the scalar value."
msgstr ""

#: ../../../MatrixTypes.rst:127
msgid ""
"For ``BIN_OP`` in ``+``, ``-``, ``*`` given the expression ``M1 BIN_OP M2`` "
"where at least one of ``M1`` or ``M2`` is of matrix type and, for `*`, the "
"other is of a real type:"
msgstr ""

#: ../../../MatrixTypes.rst:131
msgid ""
"The usual arithmetic conversions are applied to ``M1`` and ``M2``. [ Note: "
"if ``M1`` or ``M2`` are of a real type, they are broadcast to matrices here. "
"â€” end note ]"
msgstr ""

#: ../../../MatrixTypes.rst:133
msgid "``M1`` and ``M2`` shall be of the same matrix type."
msgstr ""

#: ../../../MatrixTypes.rst:134
msgid ""
"The result is equivalent to Res in the following where col is the number of "
"columns and row is the number of rows in the matrix type:"
msgstr ""

#: ../../../MatrixTypes.rst:144
msgid ""
"Given the expression ``M1 * M2`` where ``M1`` and ``M2`` are of matrix type:"
msgstr ""

#: ../../../MatrixTypes.rst:146
msgid "The usual arithmetic conversions are applied to ``M1`` and ``M2``."
msgstr ""

#: ../../../MatrixTypes.rst:147
msgid ""
"The type of ``M1`` shall have the same number of columns as the type of "
"``M2`` has rows. The element types of ``M1`` and ``M2`` shall be the same "
"type."
msgstr ""

#: ../../../MatrixTypes.rst:149
msgid ""
"The resulting type, ``MTy``, is a matrix type with the common element type, "
"the number of rows of ``M1`` and the number of columns of ``M2``."
msgstr ""

#: ../../../MatrixTypes.rst:151
msgid ""
"The result is equivalent to ``Res`` in the following where ``EltTy`` is the "
"element type of ``MTy``, ``col`` is the number of columns, ``row`` is the "
"number of rows in ``MTy`` and ``inner`` is the number of columns of ``M1``:"
msgstr ""

#: ../../../MatrixTypes.rst:167
msgid ""
"All operations on matrix types match the behavior of the element type with "
"respect to signed overflows."
msgstr ""

#: ../../../MatrixTypes.rst:170
msgid ""
"With respect to floating-point contraction, rounding and environment rules, "
"operations on matrix types match the behavior of the elementwise operations "
"in the corresponding expansions provided above."
msgstr ""

#: ../../../MatrixTypes.rst:174
msgid ""
"Operations on floating-point matrices have the same rounding and floating-"
"point environment behavior as ordinary floating-point operations in the "
"expression's context. For the purposes of floating-point contraction, all "
"calculations done as part of a matrix operation are considered intermediate "
"operations, and their results need not be rounded to the format of the "
"element type until the final result in the containing expression. This is "
"subject to the normal restrictions on contraction, such as ``#pragma STDC "
"FP_CONTRACT``."
msgstr ""

#: ../../../MatrixTypes.rst:182
msgid ""
"For the ``+=``, ``-=`` and ``*=`` operators the semantics match their "
"expanded variants."
msgstr ""

#: ../../../MatrixTypes.rst:186
msgid "Matrix Type Builtin Operations"
msgstr ""

#: ../../../MatrixTypes.rst:188
msgid ""
"Each matrix type supports a collection of builtin expressions that look like "
"function calls but do not form an overload set. Here they are described as "
"function declarations with rules for how to construct the argument list "
"types and return type and the library description elements from [library."
"description.structure.specifications]/3 in the C++ standard."
msgstr ""

#: ../../../MatrixTypes.rst:194
msgid "Definitions:"
msgstr ""

#: ../../../MatrixTypes.rst:196
msgid "*M*, *M1*, *M2*, *M3* - Matrix types"
msgstr ""

#: ../../../MatrixTypes.rst:197
msgid "*T* - Element type"
msgstr ""

#: ../../../MatrixTypes.rst:198
msgid "*row*, *col* - Row and column arguments respectively."
msgstr ""

#: ../../../MatrixTypes.rst:201
msgid "``M2 __builtin_matrix_transpose(M1 matrix)``"
msgstr ""

#: ../../../MatrixTypes.rst:203
msgid ""
"**Remarks**: The return type is a cv-unqualified matrix type that has the "
"same element type as ``M1`` and has the the same number of rows as ``M1`` "
"has columns and the same number of columns as ``M1`` has rows."
msgstr ""

#: ../../../MatrixTypes.rst:207
msgid ""
"**Returns**: A matrix ``Res`` equivalent to the code below, where ``col`` "
"refers to the number of columns of ``M``, and ``row`` to the number of rows "
"of ``M``."
msgstr ""

#: ../../../MatrixTypes.rst:210 ../../../MatrixTypes.rst:251
msgid "**Effects**: Equivalent to:"
msgstr ""

#: ../../../MatrixTypes.rst:220
msgid ""
"``M __builtin_matrix_column_major_load(T *ptr, size_t row, size_t col, "
"size_t columnStride)``"
msgstr ""

#: ../../../MatrixTypes.rst:222
msgid ""
"**Mandates**: ``row`` and ``col`` shall be integral constants greater than 0."
msgstr ""

#: ../../../MatrixTypes.rst:224
msgid ""
"**Preconditions**: ``columnStride`` is greater than or equal to ``row``."
msgstr ""

#: ../../../MatrixTypes.rst:226
msgid ""
"**Remarks**: The return type is a cv-unqualified matrix type with an element "
"type of the cv-unqualified version of ``T`` and a number of rows and columns "
"equal to ``row`` and ``col`` respectively. The parameter ``columnStride`` is "
"optional and if omitted ``row`` is used as ``columnStride``."
msgstr ""

#: ../../../MatrixTypes.rst:231
msgid "**Returns**: A matrix ``Res`` equivalent to:"
msgstr ""

#: ../../../MatrixTypes.rst:243
msgid ""
"``void __builtin_matrix_column_major_store(M matrix, T *ptr, size_t "
"columnStride)``"
msgstr ""

#: ../../../MatrixTypes.rst:245
msgid ""
"**Preconditions**: ``columnStride`` is greater than or equal to the number "
"of rows in ``M``."
msgstr ""

#: ../../../MatrixTypes.rst:247
msgid ""
"**Remarks**: The type ``T`` is the const-unqualified version of the matrix "
"argumentâ€™s element type. The parameter ``columnStride`` is optional and if "
"omitted, the number of rows of ``M`` is used as ``columnStride``."
msgstr ""

#: ../../../MatrixTypes.rst:263
msgid "TODOs"
msgstr ""

#: ../../../MatrixTypes.rst:265
msgid ""
"TODO: Does it make sense to allow M::element_type, M::rows, and M::columns "
"where M is a matrix type? We donâ€™t support this anywhere else, but itâ€™s "
"convenient. The alternative is using template deduction to extract this "
"information. Also add spelling for C."
msgstr ""

#: ../../../MatrixTypes.rst:270
msgid "Future Work: Initialization syntax."
msgstr ""

#: ../../../MatrixTypes.rst:274
msgid "Decisions for the Implementation in Clang"
msgstr ""

#: ../../../MatrixTypes.rst:276
msgid ""
"This section details decisions taken for the implementation in Clang and is "
"not part of the draft specification."
msgstr ""

#: ../../../MatrixTypes.rst:279
msgid ""
"The elements of a  value of a matrix type are laid out in column-major order "
"without padding."
msgstr ""

#: ../../../MatrixTypes.rst:282
msgid ""
"We propose to provide a Clang option to override this behavior and allow "
"contraction of those operations (e.g. *-ffp-contract=matrix*)."
msgstr ""

#: ../../../MatrixTypes.rst:285
msgid "TODO: Specify how matrix values are passed to functions."
msgstr ""
