# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang 12.0.0 (In-Progress) Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:13
msgid ""
"These are in-progress notes for the upcoming Clang 12 release. Release notes "
"for previous releases can be found on `the Download Page <https://releases."
"llvm.org/download.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:18
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:20
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release 12.0.0. Here we "
"describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <https://llvm.org/docs/ReleaseNotes."
"html>`_. All LLVM releases may be downloaded from the `LLVM releases web "
"site <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:29
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid ""
"Note that if you are reading this file from a Git checkout or the main Clang "
"web page, this document applies to the *next* release, not the current one. "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:39
msgid "What's New in Clang 12.0.0?"
msgstr ""

#: ../../../ReleaseNotes.rst:41
msgid ""
"Some of the major new features and improvements to Clang are listed here. "
"Generic improvements to Clang as a whole or to its underlying infrastructure "
"are described first, followed by language-specific sections with "
"improvements to Clang's support for those languages."
msgstr ""

#: ../../../ReleaseNotes.rst:47
msgid "Major New Features"
msgstr ""

#: ../../../ReleaseNotes.rst:49 ../../../ReleaseNotes.rst:54
#: ../../../ReleaseNotes.rst:74 ../../../ReleaseNotes.rst:100
#: ../../../ReleaseNotes.rst:139 ../../../ReleaseNotes.rst:181
#: ../../../ReleaseNotes.rst:186 ../../../ReleaseNotes.rst:190
#: ../../../ReleaseNotes.rst:234 ../../../ReleaseNotes.rst:239
#: ../../../ReleaseNotes.rst:290 ../../../ReleaseNotes.rst:298
#: ../../../ReleaseNotes.rst:398 ../../../ReleaseNotes.rst:444
#: ../../../ReleaseNotes.rst:449 ../../../ReleaseNotes.rst:456
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:52
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:57
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid ""
"The builtin intrinsics ``__builtin_bitreverse8``, "
"``__builtin_bitreverse16``, ``__builtin_bitreverse32`` and "
"``__builtin_bitreverse64`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:63
msgid ""
"The builtin intrinsics ``__builtin_rotateleft8``, "
"``__builtin_rotateleft16``, ``__builtin_rotateleft32`` and "
"``__builtin_rotateleft64`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid ""
"The builtin intrinsics ``__builtin_rotateright8``, "
"``__builtin_rotateright16``, ``__builtin_rotateright32`` and "
"``__builtin_rotateright64`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid ""
"AArch64 options ``-moutline-atomics``, ``-mno-outline-atomics`` to enable "
"and disable calls to helper functions implementing atomic operations. These "
"out-of-line helpers like '__aarch64_cas8_relax' will detect at runtime "
"AArch64 Large System Extensions (LSE) availability and either use their "
"atomic instructions, or falls back to LL/SC loop. These options do not apply "
"if the compilation target supports LSE. Atomic instructions are used "
"directly in that case. The option's behaviour mirrors GCC, the helpers are "
"implemented both in compiler-rt and libgcc."
msgstr ""

#: ../../../ReleaseNotes.rst:85
msgid ""
"New option ``-fbinutils-version=`` specifies the targeted binutils version. "
"For example, ``-fbinutils-version=2.35`` means compatibility with GNU as/ld "
"before 2.35 is not needed: new features can be used and there is no need to "
"work around old GNU as/ld bugs."
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:93
msgid ""
"The following options are deprecated and ignored. They will be removed in "
"future versions of Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:96
msgid ""
"The clang-cl ``/fallback`` flag, which made clang-cl invoke Microsoft Visual "
"C++ on files it couldn't compile itself, has been deprecated. It will be "
"removed in Clang 13."
msgstr ""

#: ../../../ReleaseNotes.rst:103
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:105
msgid ""
"On ELF, ``-gz`` now defaults to ``-gz=zlib`` with the integrated assembler. "
"It produces ``SHF_COMPRESSED`` style compression of debug information. GNU "
"binutils 2.26 or newer, or lld is required to link produced object files. "
"Use ``-gz=zlib-gnu`` to get the old behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"Now that `this` pointers are tagged with `nonnull` and `dereferenceable(N)`, "
"`-fno-delete-null-pointer-checks` has gained the power to remove the "
"`nonnull` attribute on `this` for configurations that need it to be nullable."
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid "``-gsplit-dwarf`` no longer implies ``-g2``."
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid ""
"``-fasynchronous-unwind-tables`` is now the default on Linux AArch64/"
"PowerPC. This behavior matches newer GCC. (`D91760 <https://reviews.llvm.org/"
"D91760>`_) (`D92054 <https://reviews.llvm.org/D92054>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:117
msgid ""
"Support has been added for the following processors (command-line "
"identifiers in parentheses):"
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid "Arm Cortex-A78C (cortex-a78c)."
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid "Arm Cortex-R82 (cortex-r82)."
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid "Arm Neoverse V1 (neoverse-v1)."
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid "Arm Neoverse N2 (neoverse-n2)."
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "Fujitsu A64FX (a64fx)."
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid ""
"For example, to select architecture support and tuning for Neoverse-V1 based "
"systems, use ``-mcpu=neoverse-v1``."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid "Removed Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:131
msgid "The following options no longer exist."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"clang-cl's ``/Zd`` flag no longer exist. But ``-gline-tables-only`` still "
"exists and does the same thing."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid "New Pragmas in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid "Modified Pragmas in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid ""
"The \"#pragma clang loop vectorize_width\" has been extended to support an "
"optional 'fixed|scalable' argument, which can be used to indicate that the "
"compiler should use fixed-width or scalable vectorization.  Fixed-width is "
"assumed by default."
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid ""
"Scalable or vector length agnostic vectorization is an experimental feature "
"for targets that support scalable vectors. For more information please refer "
"to the Clang Language Extensions documentation."
msgstr ""

#: ../../../ReleaseNotes.rst:154
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:156
msgid ""
"Added support for the C++20 likelihood attributes ``[[likely]]`` and "
"``[[unlikely]]``. As an extension they can be used in C++11 and newer. This "
"extension is enabled by default."
msgstr ""

#: ../../../ReleaseNotes.rst:161
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid ""
"Implicitly add ``.exe`` suffix for MinGW targets, even when cross compiling. "
"(This matches a change from GCC 8.)"
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid ""
"Windows on Arm64: programs using the C standard library's setjmp and longjmp "
"functions may crash with a \"Security check failure or stack buffer "
"overrun\" exception. To workaround (with reduced security), compile with /"
"guard:cf,nolongjmp."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"Windows on Arm64: LLVM 12 adds official binary release hosted on Windows on "
"Arm64.  The binary is built and tested by Linaro alongside AArch64 and ARM "
"32-bit Linux binary releases.  This first WoA release includes Clang "
"compiler, LLD Linker, and compiler-rt runtime libraries. Work on LLDB, "
"sanitizer support, OpenMP, and other features is in progress and will be "
"included in future Windows on Arm64 LLVM releases."
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid "C Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid "C++ Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid "C++1z Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:193
msgid "Objective-C Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid "OpenCL Kernel Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid ""
"Improved online documentation: :doc:`UsersManual` and :doc:`OpenCLSupport` "
"pages."
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid "Added ``-cl-std=CL3.0`` and predefined version macro for OpenCL 3.0."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid ""
"Added ``-cl-std=CL1.0`` and mapped to the existing OpenCL 1.0 functionality."
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid "Improved OpenCL extension handling per target."
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"Added clang extension for function pointers ``__cl_clang_function_pointers`` "
"and variadic functions ``__cl_clang_variadic_functions``, more details can "
"be found in :doc:`LanguageExtensions`."
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid ""
"Removed extensions without kernel language changes: "
"``cl_khr_select_fprounding_mode``, ``cl_khr_gl_sharing``, ``cl_khr_icd``, "
"``cl_khr_gl_event``, ``cl_khr_d3d10_sharing``, ``cl_khr_context_abort``, "
"``cl_khr_d3d11_sharing``, ``cl_khr_dx9_media_sharing``, "
"``cl_khr_image2d_from_buffer``, ``cl_khr_initialize_memory``, "
"``cl_khr_gl_depth_images``, ``cl_khr_spir``, ``cl_khr_egl_event``, "
"``cl_khr_egl_image``, ``cl_khr_terminate_context``."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid "Improved diagnostics for  unevaluated ``vec_step`` expression."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid ""
"Allow nested pointers (e.g. pointer-to-pointer) kernel arguments beyond "
"OpenCL 1.2."
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid ""
"Added ``global_device`` and ``global_host`` address spaces for USM "
"allocations."
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid "Miscellaneous improvements in C++ for OpenCL support:"
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid ""
"Added diagnostics for pointers to member functions and references to "
"functions."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "Added support of ``vec_step`` builtin."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"Fixed ICE on address spaces with forwarding references and templated copy "
"constructors."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid "Removed warning for variadic macro use."
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid "ABI Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:232
msgid "OpenMP Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "CUDA Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid "X86 Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid ""
"The x86 intrinsics ``_mm_popcnt_u32``, ``_mm_popcnt_u64``, ``_popcnt32``, "
"``_popcnt64``, ``__popcntd`` and ``__popcntq``  may now be used within "
"constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:248
msgid ""
"The x86 intrinsics ``_bit_scan_forward``, ``__bsfd`` and ``__bsfq`` may now "
"be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"The x86 intrinsics ``_bit_scan_reverse``, ``__bsrd`` and ``__bsrq`` may now "
"be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"The x86 intrinsics ``__bswap``, ``__bswapd``, ``__bswap64`` and ``__bswapq`` "
"may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"The x86 intrinsics ``_castf32_u32``, ``_castf64_u64``, ``_castu32_f32`` and "
"``_castu64_f64`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid ""
"The x86 intrinsics ``__rolb``, ``__rolw``, ``__rold``, ``__rolq`, ``_rotl``, "
"``_rotwl`` and ``_lrotl`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:263
msgid ""
"The x86 intrinsics ``__rorb``, ``__rorw``, ``__rord``, ``__rorq`, ``_rotr``, "
"``_rotwr`` and ``_lrotr`` may now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"Support for ``-march=alderlake``, ``-march=sapphirerapids`` and ``-"
"march=znver3`` was added."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid ""
"Support for ``-march=x86-64-v[234]`` has been added. See :doc:`UsersManual` "
"for details about these micro-architecture levels."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid ""
"The -mtune command line option is no longer ignored for X86. This can be "
"used to request microarchitectural optimizations independent on -march. -"
"march=<cpu> implies -mtune=<cpu>. -mtune=generic is the default with no -"
"march or -mtune specified."
msgstr ""

#: ../../../ReleaseNotes.rst:277
msgid "Support for ``HRESET`` instructions has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid "Support for ``UINTR`` instructions has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:281
msgid "Support for ``AVXVNNI`` instructions has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid "Internal API Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid ""
"These are major API changes that have happened since the 11.0.0 release of "
"Clang. If upgrading an external codebase that uses Clang as a library, this "
"section should help get you past the largest hurdles of upgrading."
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid "Build System Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid ""
"These are major changes to the build system that have happened since the "
"11.0.0 release of Clang. Users of the build system should adjust accordingly."
msgstr ""

#: ../../../ReleaseNotes.rst:301
msgid "AST Matchers"
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid ""
"The ``mapAnyOf()`` matcher was added. This allows convenient matching of "
"different AST nodes which have a compatible matcher API. For example, "
"``mapAnyOf(ifStmt, forStmt).with(hasCondition(integerLiteral()))`` matches "
"any ``IfStmt`` or ``ForStmt`` with a integer literal as the condition."
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid ""
"The ``binaryOperation()`` matcher allows matching expressions which appear "
"like binary operators in the code, even if they are really "
"``CXXOperatorCallExpr`` for example. It is based on the ``mapAnyOf()`` "
"matcher functionality. The matcher API for the latter node has been extended "
"with ``hasLHS()`` etc to facilitate the abstraction."
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"Matcher API for ``CXXRewrittenBinaryOperator`` has been added. In addition "
"to explicit matching with the ``cxxRewrittenBinaryOperator()`` matcher, the "
"``binaryOperation()`` matches on nodes of this type."
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid ""
"The behavior of ``TK_IgnoreUnlessSpelledInSource`` with the ``traverse()`` "
"matcher has been changed to no longer match on template instantiations or on "
"implicit nodes which are not spelled in the source."
msgstr ""

#: ../../../ReleaseNotes.rst:323
msgid ""
"The ``TK_IgnoreImplicitCastsAndParentheses`` traversal kind was removed. It "
"is recommended to use ``TK_IgnoreUnlessSpelledInSource`` instead."
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid ""
"The behavior of the ``forEach()`` matcher was changed to not internally "
"ignore implicit and parenthesis nodes.  This makes it consistent with the "
"``has()`` matcher.  Uses of ``forEach()`` relying on the old behavior can "
"now use the  ``traverse()`` matcher or ``ignoringParenCasts()``."
msgstr ""

#: ../../../ReleaseNotes.rst:331
msgid ""
"Several AST Matchers have been changed to match based on the active "
"traversal mode.  For example, ``argumentCountIs()`` matches the number of "
"arguments written in the source, ignoring default arguments represented by "
"``CXXDefaultArgExpr`` nodes."
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid ""
"Improvements in AST Matchers allow more matching of template declarations, "
"independent of their template instantations."
msgstr ""

#: ../../../ReleaseNotes.rst:340
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid ""
"Option ``BitFieldColonSpacing`` has been added that decides how space should "
"be added around identifier, colon and bit-width in bitfield definitions."
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"Experimental Support in clang-format for concepts has been improved, to aid "
"this the follow options have been added"
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"Option ``IndentRequires`` has been added to indent the ``requires`` keyword "
"in templates."
msgstr ""

#: ../../../ReleaseNotes.rst:376
msgid ""
"Option ``BreakBeforeConceptDeclarations`` has been added to aid the "
"formatting of concepts."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid ""
"Option ``IndentPragmas`` has been added to allow #pragma to indented with "
"the current scope level. This is especially useful when using #pragma to "
"mark OpenMP sections of code."
msgstr ""

#: ../../../ReleaseNotes.rst:381
msgid ""
"Option ``SpaceBeforeCaseColon`` has been added to add a space before the "
"colon in a case or default statement."
msgstr ""

#: ../../../ReleaseNotes.rst:384
msgid ""
"Option ``StatementAttributeLikeMacros`` has been added to declare macros "
"which are not parsed as a type in front of a statement. See the "
"documentation for an example."
msgstr ""

#: ../../../ReleaseNotes.rst:388
msgid ""
"Options ``AlignConsecutiveAssignments``, ``AlignConsecutiveBitFields``, "
"``AlignConsecutiveDeclarations`` and ``AlignConsecutiveMacros`` have been "
"modified to allow alignment across empty lines and/or comments."
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid ""
"Support for Whitesmiths has been improved, with fixes for ``namespace`` "
"blocks and ``case`` blocks and labels."
msgstr ""

#: ../../../ReleaseNotes.rst:396
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:401
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid "Improve the analyzer's understanding of several POSIX functions."
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"Greatly improved the analyzer’s constraint solver by better understanding "
"when constraints are imposed on multiple symbolic values that are known to "
"be equal or known to be non-equal. It will now also efficiently reject "
"impossible if-branches between known comparison expressions. (Incorrectly "
"stated as a 11.0.0 feature in the previous release notes)"
msgstr ""

#: ../../../ReleaseNotes.rst:415
msgid ""
"New checker: :ref:`webkit.UncountedLambdaCapturesChecker<webkit-"
"UncountedLambdaCapturesChecker>` is a WebKit coding convention checker that "
"flags raw pointers to reference-counted objects captured by lambdas and "
"suggests using intrusive reference-counting smart pointers instead."
msgstr ""

#: ../../../ReleaseNotes.rst:421
msgid ""
"New checker: :ref:`alpha.webkit.UncountedLocalVarsChecker<alpha-webkit-"
"UncountedLocalVarsChecker>` is a WebKit coding convention checker that "
"intends to make sure that any uncounted local variable is backed by a ref-"
"counted object with lifetime that is strictly larger than the scope of the "
"uncounted local variable."
msgstr ""

#: ../../../ReleaseNotes.rst:427
msgid ""
"``fuchia.HandleChecker`` now recognizes handles in structs; All the handles "
"referenced by the structure (direct value or ptr) would be treated as "
"containing the release/use/acquire annotations directly."
msgstr ""

#: ../../../ReleaseNotes.rst:432
msgid "Fuchsia checkers can detect the release of an unowned handle."
msgstr ""

#: ../../../ReleaseNotes.rst:434
msgid "Numerous fixes and improvements to bug report generation."
msgstr ""

#: ../../../ReleaseNotes.rst:439
msgid "Undefined Behavior Sanitizer (UBSan)"
msgstr ""

#: ../../../ReleaseNotes.rst:442
msgid "Core Analysis Improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:447
msgid "New Issues Found"
msgstr ""

#: ../../../ReleaseNotes.rst:452
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:454
msgid "The following methods have been added:"
msgstr ""

#: ../../../ReleaseNotes.rst:459
msgid "Significant Known Problems"
msgstr ""

#: ../../../ReleaseNotes.rst:462
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:464
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Git version of the source code. "
"You can access versions of these documents specific to this release by going "
"into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:471
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us via the `mailing list <https://lists.llvm.org/mailman/listinfo/"
"cfe-dev>`_."
msgstr ""
