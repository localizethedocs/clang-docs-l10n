# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/developer-docs/Statistics.rst:3
msgid "Analysis Statistics"
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:5
msgid ""
"Clang Static Analyzer enjoys two facilities to collect statistics: per "
"translation unit and per entry point. We use `llvm/ADT/Statistic.h`_ for "
"numbers describing the entire translation unit. We use `clang/StaticAnalyzer/"
"Core/PathSensitive/EntryPointStats.h`_ to collect data for each symbolic-"
"execution entry point."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:12
msgid ""
"In many cases, it makes sense to collect statistics on both translation-unit "
"level and entry-point level. You can use the two macros defined in "
"EntryPointStats.h for that:"
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:14
msgid ""
"``STAT_COUNTER`` for additive statistics, for example, \"the number of steps "
"executed\", \"the number of functions inlined\"."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:15
msgid ""
"``STAT_MAX`` for maximizing statistics, for example, \"the maximum "
"environment size\", or \"the longest execution path\"."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:17
msgid ""
"If you want to define a statistic that makes sense only for the entire "
"translation unit, for example, \"the number of entry points\", Statistic.h "
"defines two macros: ``STATISTIC`` and ``ALWAYS_ENABLED_STATISTIC``. You "
"should prefer ``ALWAYS_ENABLED_STATISTIC`` unless you have a good reason not "
"to. ``STATISTIC`` is controlled by ``LLVM_ENABLE_STATS`` / "
"``LLVM_FORCE_ENABLE_STATS``. However, note that with ``LLVM_ENABLE_STATS`` "
"disabled, only storage of the values is disabled, the computations producing "
"those values still carry on unless you took an explicit precaution to make "
"them conditional too."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:22
msgid ""
"If you want to define a statistic only for entry point, EntryPointStats.h "
"has four classes at your disposal:"
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:25
msgid ""
"``UnsignedEPStat`` - an unsigned value assigned at most once per entry "
"point. For example: \"the number of source characters in an entry-point "
"body\"."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:26
msgid ""
"``CounterEPStat`` - an additive statistic. It starts with 0 and you can add "
"to it as many times as needed. For example: \"the number of bugs "
"discovered\"."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:27
msgid ""
"``UnsignedMaxEPStat`` - a maximizing statistic. It starts with 0 and when "
"you join it with a value, it picks the maximum of the previous value and the "
"new one. For example, \"the longest execution path of a bug\"."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:29
msgid ""
"To produce a CSV file with all the statistics collected per entry point, use "
"the ``dump-entry-point-stats-to-csv=<file>.csv`` parameter."
msgstr ""

#: ../../../analyzer/developer-docs/Statistics.rst:31
msgid ""
"Note, EntryPointStats.h is not meant to be complete, and if you feel it is "
"lacking certain kind of statistic, odds are that it does. Feel free to "
"extend it!"
msgstr ""
