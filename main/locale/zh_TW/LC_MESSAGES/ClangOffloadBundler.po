# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangOffloadBundler.rst:3
msgid "Clang Offload Bundler"
msgstr ""

#: ../../../ClangOffloadBundler.rst:11
msgid "Introduction"
msgstr ""

#: ../../../ClangOffloadBundler.rst:13
msgid ""
"For heterogeneous single source programming languages, use one or more ``--"
"offload-arch=<target-id>`` Clang options to specify the target IDs of the "
"code to generate for the offload code regions."
msgstr ""

#: ../../../ClangOffloadBundler.rst:17
msgid ""
"The tool chain may perform multiple compilations of a translation unit to "
"produce separate code objects for the host and potentially multiple "
"offloaded devices. The ``clang-offload-bundler`` tool may be used as part of "
"the tool chain to combine these multiple code objects into a single bundled "
"code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:22
msgid ""
"The tool chain may use a bundled code object as an intermediate step so that "
"each tool chain step consumes and produces a single file as in traditional "
"non-heterogeneous tool chains. The bundled code object contains the code "
"objects for the host and all the offload devices."
msgstr ""

#: ../../../ClangOffloadBundler.rst:27
msgid ""
"A bundled code object may also be used to bundle just the offloaded code "
"objects, and embedded as data into the host code object. The host "
"compilation includes an ``init`` function that will use the runtime "
"corresponding to the offload kind (see :ref:`clang-offload-kind-table`) to "
"load the offload code objects appropriate to the devices present when the "
"host program is executed."
msgstr ""

#: ../../../ClangOffloadBundler.rst:33
msgid ""
":program:`clang-offload-bundler` is located in `clang/tools/clang-offload-"
"bundler`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:80 ../../../ClangOffloadBundler.rst:488
msgid "Usage"
msgstr ""

#: ../../../ClangOffloadBundler.rst:82
msgid "This tool can be used as follows for bundling:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:88
msgid "or, it can be used as follows for unbundling:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:96 ../../../ClangOffloadBundler.rst:103
msgid "Supported File Formats"
msgstr ""

#: ../../../ClangOffloadBundler.rst:98
msgid ""
"Multiple text and binary file formats are supported for bundling/unbundling. "
"See :ref:`supported-file-formats-table` for a list of currently supported "
"input formats. Use the ``File Type`` column to determine the value to pass "
"to the ``--type`` option based on the type of input files while bundling/"
"unbundling."
msgstr ""

#: ../../../ClangOffloadBundler.rst:107
msgid "File Format"
msgstr ""

#: ../../../ClangOffloadBundler.rst:107
msgid "File Type"
msgstr ""

#: ../../../ClangOffloadBundler.rst:107
msgid "Text/Binary"
msgstr ""

#: ../../../ClangOffloadBundler.rst:109
msgid "CPP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:109
msgid "i"
msgstr ""

#: ../../../ClangOffloadBundler.rst:109 ../../../ClangOffloadBundler.rst:111
#: ../../../ClangOffloadBundler.rst:113 ../../../ClangOffloadBundler.rst:115
#: ../../../ClangOffloadBundler.rst:117 ../../../ClangOffloadBundler.rst:121
msgid "Text"
msgstr ""

#: ../../../ClangOffloadBundler.rst:111
msgid "C++ CPP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:111
msgid "ii"
msgstr ""

#: ../../../ClangOffloadBundler.rst:113
msgid "CUDA/HIP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:113
msgid "cui"
msgstr ""

#: ../../../ClangOffloadBundler.rst:115
msgid "Dependency"
msgstr ""

#: ../../../ClangOffloadBundler.rst:115
msgid "d"
msgstr ""

#: ../../../ClangOffloadBundler.rst:117
msgid "LLVM"
msgstr ""

#: ../../../ClangOffloadBundler.rst:117
msgid "ll"
msgstr ""

#: ../../../ClangOffloadBundler.rst:119
msgid "LLVM Bitcode"
msgstr ""

#: ../../../ClangOffloadBundler.rst:119
msgid "bc"
msgstr ""

#: ../../../ClangOffloadBundler.rst:119 ../../../ClangOffloadBundler.rst:123
#: ../../../ClangOffloadBundler.rst:125 ../../../ClangOffloadBundler.rst:127
#: ../../../ClangOffloadBundler.rst:129
msgid "Binary"
msgstr ""

#: ../../../ClangOffloadBundler.rst:121
msgid "Assembler"
msgstr ""

#: ../../../ClangOffloadBundler.rst:121
msgid "s"
msgstr ""

#: ../../../ClangOffloadBundler.rst:123
msgid "Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:123
msgid "o"
msgstr ""

#: ../../../ClangOffloadBundler.rst:125
msgid "Archive of bundled files"
msgstr ""

#: ../../../ClangOffloadBundler.rst:125
msgid "a"
msgstr ""

#: ../../../ClangOffloadBundler.rst:127
msgid "Precompiled header"
msgstr ""

#: ../../../ClangOffloadBundler.rst:127
msgid "gch"
msgstr ""

#: ../../../ClangOffloadBundler.rst:129
msgid "Clang AST file"
msgstr ""

#: ../../../ClangOffloadBundler.rst:129
msgid "ast"
msgstr ""

#: ../../../ClangOffloadBundler.rst:135
msgid "Bundled Text File Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:137
msgid ""
"The text file formats are concatenated with comments that have a magic "
"string and bundle entry ID in between. The BNF syntax to represent a code "
"object bundle file is:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:152
msgid "**comment**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:150
msgid ""
"The symbol used for starting single-line comment in the file type of "
"constituting bundles. E.g. it is \";\" for ll ``File Type`` and \"#\" for "
"\"s\" ``File Type``."
msgstr ""

#: ../../../ClangOffloadBundler.rst:155
msgid "**bundle_id**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:155
msgid "The :ref:`clang-bundle-entry-id` for the enclosing bundle."
msgstr ""

#: ../../../ClangOffloadBundler.rst:158
msgid "**eol**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:158
msgid "The end of line character."
msgstr ""

#: ../../../ClangOffloadBundler.rst:161
msgid "**bundle**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:161
msgid "The code object stored in one of the supported text file formats."
msgstr ""

#: ../../../ClangOffloadBundler.rst:165
msgid "**OFFLOAD_BUNDLER_MAGIC_STR__**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:164
msgid ""
"Magic string that marks the existence of offloading data i.e. "
"\"__CLANG_OFFLOAD_BUNDLE__\"."
msgstr ""

#: ../../../ClangOffloadBundler.rst:170
msgid "Bundled Binary File Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:172
msgid "The layout of a bundled code object is defined by the following table:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:174
msgid "Bundled Code Object Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:178
msgid "Field"
msgstr ""

#: ../../../ClangOffloadBundler.rst:178
msgid "Type"
msgstr ""

#: ../../../ClangOffloadBundler.rst:178
msgid "Size in Bytes"
msgstr ""

#: ../../../ClangOffloadBundler.rst:178 ../../../ClangOffloadBundler.rst:230
msgid "Description"
msgstr ""

#: ../../../ClangOffloadBundler.rst:180
msgid "Magic String"
msgstr ""

#: ../../../ClangOffloadBundler.rst:180 ../../../ClangOffloadBundler.rst:188
#: ../../../ClangOffloadBundler.rst:196
msgid "string"
msgstr ""

#: ../../../ClangOffloadBundler.rst:180
msgid "24"
msgstr ""

#: ../../../ClangOffloadBundler.rst:180
msgid "``__CLANG_OFFLOAD_BUNDLE__``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:181
msgid "Number Of Bundle Entries"
msgstr ""

#: ../../../ClangOffloadBundler.rst:181 ../../../ClangOffloadBundler.rst:182
#: ../../../ClangOffloadBundler.rst:185 ../../../ClangOffloadBundler.rst:186
#: ../../../ClangOffloadBundler.rst:193 ../../../ClangOffloadBundler.rst:194
#: ../../../ClangOffloadBundler.rst:195
msgid "integer"
msgstr ""

#: ../../../ClangOffloadBundler.rst:181 ../../../ClangOffloadBundler.rst:182
#: ../../../ClangOffloadBundler.rst:185 ../../../ClangOffloadBundler.rst:186
#: ../../../ClangOffloadBundler.rst:193 ../../../ClangOffloadBundler.rst:194
#: ../../../ClangOffloadBundler.rst:195
msgid "8"
msgstr ""

#: ../../../ClangOffloadBundler.rst:181
msgid "Number of bundle entries."
msgstr ""

#: ../../../ClangOffloadBundler.rst:182
msgid "1st Bundle Entry Code Object Offset"
msgstr ""

#: ../../../ClangOffloadBundler.rst:182
msgid "Byte offset from beginning of bundled code object to 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:185 ../../../ClangOffloadBundler.rst:198
msgid "1st Bundle Entry Code Object Size"
msgstr ""

#: ../../../ClangOffloadBundler.rst:185
msgid "Byte size of 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:186 ../../../ClangOffloadBundler.rst:188
#: ../../../ClangOffloadBundler.rst:196
msgid "1st Bundle Entry ID Length"
msgstr ""

#: ../../../ClangOffloadBundler.rst:186
msgid "Character length of bundle entry ID of 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:188
msgid "1st Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:188
msgid ""
"Bundle entry ID of 1st code object. This is not NUL terminated. See :ref:"
"`clang-bundle-entry-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:192 ../../../ClangOffloadBundler.rst:200
msgid "\\..."
msgstr ""

#: ../../../ClangOffloadBundler.rst:193
msgid "Nth Bundle Entry Code Object Offset"
msgstr ""

#: ../../../ClangOffloadBundler.rst:194 ../../../ClangOffloadBundler.rst:201
msgid "Nth Bundle Entry Code Object Size"
msgstr ""

#: ../../../ClangOffloadBundler.rst:195
msgid "Nth Bundle Entry ID Length"
msgstr ""

#: ../../../ClangOffloadBundler.rst:196
msgid "Nth Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:198
msgid "1st Bundle Entry Code Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:198 ../../../ClangOffloadBundler.rst:201
msgid "bytes"
msgstr ""

#: ../../../ClangOffloadBundler.rst:201
msgid "Nth Bundle Entry Code Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:208
msgid "Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:210
msgid ""
"Each entry in a bundled code object (see :ref:`clang-bundled-code-object-"
"layout-text` and :ref:`clang-bundled-code-object-layout`) has a bundle entry "
"ID that indicates the kind of the entry's code object and the runtime that "
"manages it."
msgstr ""

#: ../../../ClangOffloadBundler.rst:214
msgid "Bundle entry ID syntax is defined by the following BNF syntax:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:220 ../../../ClangOffloadBundler.rst:331
msgid "Where:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:255
msgid "**offload-kind**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:223
msgid ""
"The runtime responsible for managing the bundled entry code object. See :ref:"
"`clang-offload-kind-table`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:226
msgid "Bundled Code Object Offload Kind"
msgstr ""

#: ../../../ClangOffloadBundler.rst:230
msgid "Offload Kind"
msgstr ""

#: ../../../ClangOffloadBundler.rst:232
msgid "host"
msgstr ""

#: ../../../ClangOffloadBundler.rst:232
msgid ""
"Host code object. ``clang-offload-bundler`` always includes this entry as "
"the first bundled code object entry. For an embedded bundled code object "
"this entry is not used by the runtime and so is generally an empty code "
"object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:237
msgid "hip"
msgstr ""

#: ../../../ClangOffloadBundler.rst:237
msgid ""
"Offload code object for the HIP language. Used for all HIP language offload "
"code objects when the ``clang-offload-bundler`` is used to bundle code "
"objects as intermediate steps of the tool chain. Also used for AMD GPU code "
"objects before ABI version V4 when the ``clang-offload-bundler`` is used to "
"create a *fat binary* to be loaded by the HIP runtime. The fat binary can be "
"loaded directly from a file, or be embedded in the host code object as a "
"data section with the name ``.hip_fatbin``."
msgstr ""

#: ../../../ClangOffloadBundler.rst:247
msgid "hipv4"
msgstr ""

#: ../../../ClangOffloadBundler.rst:247
msgid ""
"Offload code object for the HIP language. Used for AMD GPU code objects with "
"at least ABI version V4 and above when the ``clang-offload-bundler`` is used "
"to create a *fat binary* to be loaded by the HIP runtime. The fat binary can "
"be loaded directly from a file, or be embedded in the host code object as a "
"data section with the name ``.hip_fatbin``."
msgstr ""

#: ../../../ClangOffloadBundler.rst:254
msgid "openmp"
msgstr ""

#: ../../../ClangOffloadBundler.rst:254
msgid "Offload code object for the OpenMP language extension."
msgstr ""

#: ../../../ClangOffloadBundler.rst:257
msgid ""
"Note: The distinction between the `hip` and `hipv4` offload kinds is "
"historically based. Originally, these designations might have indicated "
"different versions of the code object ABI. However, as the system has "
"evolved, the ABI version is now embedded directly within the code object "
"itself, making these historical distinctions irrelevant during the "
"unbundling process. Consequently, `hip` and `hipv4` are treated as "
"compatible in current implementations, facilitating interchangeable handling "
"of code objects without differentiation based on offload kind."
msgstr ""

#: ../../../ClangOffloadBundler.rst:278
msgid "**target-triple**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:266
msgid ""
"The target triple of the code object. See `Target Triple <https://clang.llvm."
"org/docs/CrossCompilation.html#target-triple>`_."
msgstr ""

#: ../../../ClangOffloadBundler.rst:269
msgid ""
"LLVM target triples can be with or without the optional environment field:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:271
msgid "``<arch><sub>-<vendor>-<sys>``, or ``<arch><sub>-<vendor>-<sys>-<env>``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:274
msgid ""
"However, in order to standardize outputs for tools that consume bitcode "
"bundles and to parse target ID containing dashes, the bundler only accepts "
"target triples in the 4-field format:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:278
msgid "``<arch><sub>-<vendor>-<sys>-<env>``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:282
msgid "**target-id**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:281
msgid ""
"The canonical target ID of the code object. Present only if the target "
"supports a target ID. See :ref:`clang-target-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:287
msgid "Bundled Code Object Composition"
msgstr ""

#: ../../../ClangOffloadBundler.rst:289
msgid ""
"Each entry of a bundled code object must have a different bundle entry ID."
msgstr ""

#: ../../../ClangOffloadBundler.rst:290
msgid ""
"There can be multiple entries for the same processor provided they differ in "
"target feature settings."
msgstr ""

#: ../../../ClangOffloadBundler.rst:292
msgid ""
"If there is an entry with a target feature specified as *Any*, then all "
"entries must specify that target feature as *Any* for the same processor."
msgstr ""

#: ../../../ClangOffloadBundler.rst:295
msgid "There may be additional target specific restrictions."
msgstr ""

#: ../../../ClangOffloadBundler.rst:300
msgid "Compatibility Rules for Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:302
msgid ""
"A code object, specified using its Bundle Entry ID, can be loaded and "
"executed on a target processor, if:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:305
msgid "Their offload kinds are the same or comptible."
msgstr ""

#: ../../../ClangOffloadBundler.rst:306
msgid "Their target triples are compatible."
msgstr ""

#: ../../../ClangOffloadBundler.rst:307
msgid ""
"Their Target IDs are compatible as defined in :ref:`compatibility-target-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:312
msgid "Target ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:314
msgid ""
"A target ID is used to indicate the processor and optionally its "
"configuration, expressed by a set of target features, that affect ISA "
"generation. It is target specific if a target ID is supported, or if the "
"target triple alone is sufficient to specify the ISA generation."
msgstr ""

#: ../../../ClangOffloadBundler.rst:319
msgid ""
"It is used with the ``-mcpu=<target-id>`` and ``--offload-arch=<target-id>`` "
"Clang compilation options to specify the kind of code to generate."
msgstr ""

#: ../../../ClangOffloadBundler.rst:322
msgid ""
"It is also used as part of the bundle entry ID to identify the code object. "
"See :ref:`clang-bundle-entry-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:325
msgid "Target ID syntax is defined by the following BNF syntax:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:334
msgid "**processor**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:334
msgid "Is a the target specific processor or any alternative processor name."
msgstr ""

#: ../../../ClangOffloadBundler.rst:355
msgid "**target-feature**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:337
msgid ""
"Is a target feature name that is supported by the processor. Each target "
"feature must appear at most once in a target ID and can have one of three "
"values:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:345
msgid "*Any*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:342
msgid ""
"Specified by omitting the target feature from the target ID. A code object "
"compiled with a target ID specifying the default value of a target feature "
"can be loaded and executed on a processor configured with the target feature "
"on or off."
msgstr ""

#: ../../../ClangOffloadBundler.rst:350
msgid "*On*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:348
msgid ""
"Specified by ``+``, indicating the target feature is enabled. A code object "
"compiled with a target ID specifying a target feature on can only be loaded "
"on a processor configured with the target feature on."
msgstr ""

#: ../../../ClangOffloadBundler.rst:355
msgid "*Off*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:353
msgid ""
"specified by ``-``, indicating the target feature is disabled. A code object "
"compiled with a target ID specifying a target feature off can only be loaded "
"on a processor configured with the target feature off."
msgstr ""

#: ../../../ClangOffloadBundler.rst:360
msgid "Compatibility Rules for Target ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:362
msgid ""
"A code object compiled for a Target ID is considered compatible for a "
"target, if:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:365
msgid "Their processor is same."
msgstr ""

#: ../../../ClangOffloadBundler.rst:366
msgid "Their feature set is compatible as defined above."
msgstr ""

#: ../../../ClangOffloadBundler.rst:368
msgid "There are two forms of target ID:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:373
msgid "*Non-Canonical Form*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:371
msgid ""
"The non-canonical form is used as the input to user commands to allow the "
"user greater convenience. It allows both the primary and alternative "
"processor name to be used and the target features may be specified in any "
"order."
msgstr ""

#: ../../../ClangOffloadBundler.rst:381
msgid "*Canonical Form*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:376
msgid ""
"The canonical form is used for all generated output to allow greater "
"convenience for tools that consume the information. It is also used for "
"internal passing of information between tools. Only the primary and not "
"alternative processor name is used and the target features are specified in "
"alphabetic order. Command line tools convert non-canonical form to canonical "
"form."
msgstr ""

#: ../../../ClangOffloadBundler.rst:384
msgid "Target Specific information"
msgstr ""

#: ../../../ClangOffloadBundler.rst:386
msgid "Target specific information is available for the following:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:393
msgid "*AMD GPU*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:389
msgid ""
"AMD GPU supports target ID and target features. See `User Guide for AMDGPU "
"Backend <https://llvm.org/docs/AMDGPUUsage.html>`_ which defines the "
"`processors <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-processors>`_ and "
"`target features <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-target-"
"features>`_ supported."
msgstr ""

#: ../../../ClangOffloadBundler.rst:395
msgid "Most other targets do not support target IDs."
msgstr ""

#: ../../../ClangOffloadBundler.rst:398
msgid "Archive Unbundling"
msgstr ""

#: ../../../ClangOffloadBundler.rst:400
msgid ""
"Unbundling of a heterogeneous device archive (HDA) is done to create device "
"specific archives. HDA is in a format compatible with GNU ``ar`` utility and "
"contains a collection of bundled device binaries where each bundle file will "
"contain device binaries for a host and one or more targets. The output "
"device-specific archive is in a format compatible with GNU ``ar`` utility "
"and contains a collection of device binaries for a specific target."
msgstr ""

#: ../../../ClangOffloadBundler.rst:420
msgid ""
"The clang-offload-bundler extracts compatible device binaries for a given "
"target from the bundled device binaries in a heterogeneous device archive "
"and creates a target-specific device archive without bundling."
msgstr ""

#: ../../../ClangOffloadBundler.rst:424
msgid ""
"The clang-offload-bundler determines whether a device binary is compatible "
"with a target by comparing bundle IDs. Two bundle IDs are considered "
"compatible if:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:428
msgid "Their offload kinds are the same"
msgstr ""

#: ../../../ClangOffloadBundler.rst:429
msgid "Their target triples are the same"
msgstr ""

#: ../../../ClangOffloadBundler.rst:430
msgid "Their Target IDs are the same"
msgstr ""

#: ../../../ClangOffloadBundler.rst:433
msgid "Creating a Heterogeneous Device Archive"
msgstr ""

#: ../../../ClangOffloadBundler.rst:435
msgid "Compile source file(s) to generate object file(s)"
msgstr ""

#: ../../../ClangOffloadBundler.rst:455
msgid ""
"Create a heterogeneous device archive by combining all the object file(s)"
msgstr ""

#: ../../../ClangOffloadBundler.rst:462
msgid "Extracting a Device Specific Archive"
msgstr ""

#: ../../../ClangOffloadBundler.rst:464
msgid ""
"UnbundleArchive takes a heterogeneous device archive file (\".a\") as input "
"containing bundled device binary files, and a list of offload targets (not "
"host), and extracts the device binaries into a new archive file for each "
"offload target. Each resulting archive file contains all device binaries "
"compatible with that particular offload target. Compatibility between a "
"device binary in HDA and a target is based on the compatibility between "
"their bundle entry IDs as defined in :ref:`compatibility-bundle-entry-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:472
msgid "Following cases may arise during compatibility testing:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:474
msgid ""
"A binary is compatible with one or more targets: Insert the binary into the "
"device-specific archive of each compatible target."
msgstr ""

#: ../../../ClangOffloadBundler.rst:476
msgid "A binary is not compatible with any target: Skip the binary."
msgstr ""

#: ../../../ClangOffloadBundler.rst:477
msgid ""
"One or more binaries are compatible with a target: Insert all binaries into "
"the device-specific archive of the target. The insertion need not be ordered."
msgstr ""

#: ../../../ClangOffloadBundler.rst:479
msgid ""
"No binary is compatible with a target: If ``allow-missing-bundles`` option "
"is present then create an empty archive for the target. Otherwise, produce "
"an error without creating an archive."
msgstr ""

#: ../../../ClangOffloadBundler.rst:483
msgid ""
"The created archive file does not contain an index of the symbols and device "
"binary files are named as <<Parent Bundle Name>-<DeviceBinary's TargetID>>, "
"with ':' replaced with '_'."
msgstr ""

#: ../../../ClangOffloadBundler.rst:500
msgid "Additional Options while Archive Unbundling"
msgstr ""

#: ../../../ClangOffloadBundler.rst:503
msgid "**-allow-missing-bundles**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:503
msgid "Create an empty archive file if no compatible device binary is found."
msgstr ""

#: ../../../ClangOffloadBundler.rst:508
msgid "**-check-input-archive**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:506
msgid ""
"Check if input heterogeneous device archive follows rules for composition as "
"defined in :ref:`code-object-composition` before creating device-specific "
"archive(s)."
msgstr ""

#: ../../../ClangOffloadBundler.rst:513
msgid "**-debug-only=CodeObjectCompatibility**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:511
msgid ""
"Verbose printing of matched/unmatched comparisons between bundle entry id of "
"a device binary from HDA and bundle entry ID of a given target processor "
"(see :ref:`compatibility-bundle-entry-id`)."
msgstr ""

#: ../../../ClangOffloadBundler.rst:516
msgid "Compression and Decompression"
msgstr ""

#: ../../../ClangOffloadBundler.rst:518
msgid ""
"``clang-offload-bundler`` provides features to compress and decompress the "
"full bundle, leveraging inherent redundancies within the bundle entries. Use "
"the `-compress` command-line option to enable this compression capability."
msgstr ""

#: ../../../ClangOffloadBundler.rst:522
msgid ""
"The compressed offload bundle begins with a header followed by the "
"compressed binary data:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:525
msgid "**Magic Number (4 bytes)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:525
msgid ""
"This is a unique identifier to distinguish compressed offload bundles. The "
"value is the string 'CCOB' (Compressed Clang Offload Bundle)."
msgstr ""

#: ../../../ClangOffloadBundler.rst:528
msgid "**Version Number (16-bit unsigned int)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:528
msgid ""
"This denotes the version of the compressed offload bundle format. The "
"current version is `3`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:531
msgid "**Compression Method (16-bit unsigned int)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:531
msgid ""
"This field indicates the compression method used. The value corresponds to "
"either `zlib` or `zstd`, represented as a 16-bit unsigned integer cast from "
"the LLVM compression enumeration."
msgstr ""

#: ../../../ClangOffloadBundler.rst:534
msgid "**Total File Size (unsigned int, 32-bit in v2, 64-bit in v3)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:534
msgid ""
"This is the total size (in bytes) of the file, including the header. "
"Available in version 2 and above."
msgstr ""

#: ../../../ClangOffloadBundler.rst:537
msgid ""
"**Uncompressed Binary Size (unsigned int, 32-bit in v2, 64-bit in v3)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:537
msgid ""
"This is the size (in bytes) of the binary data before it was compressed."
msgstr ""

#: ../../../ClangOffloadBundler.rst:540
msgid "**Hash (64-bit unsigned int)**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:540
msgid ""
"This is a 64-bit truncated MD5 hash of the uncompressed binary data. It "
"serves for verification and caching purposes."
msgstr ""

#: ../../../ClangOffloadBundler.rst:546
msgid "**Compressed Data**:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:543
msgid ""
"The actual compressed binary data follows the header. Its size can be "
"inferred from the total size of the file minus the header size."
msgstr ""

#: ../../../ClangOffloadBundler.rst:545
msgid ""
"> **Note**: Version 3 is now the default format. For backward compatibility "
"with older HIP runtimes that support version 2 only, set the environment "
"variable `COMPRESSED_BUNDLE_FORMAT_VERSION=2`."
msgstr ""
