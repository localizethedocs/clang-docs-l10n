# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../UsersManual.rst:3
msgid "Clang Compiler User's Manual"
msgstr ""

#: ../../../UsersManual.rst:11
msgid "Introduction"
msgstr ""

#: ../../../UsersManual.rst:13
msgid ""
"The Clang Compiler is an open-source compiler for the C family of "
"programming languages, aiming to be the best in class implementation of "
"these languages. Clang builds on the LLVM optimizer and code generator, "
"allowing it to provide high-quality optimization and code generation support "
"for many targets. For more general information, please see the `Clang Web "
"Site <https://clang.llvm.org>`_ or the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../UsersManual.rst:21
msgid ""
"This document describes important notes about using Clang as a compiler for "
"an end-user, documenting the supported features, command line options, etc. "
"If you are interested in using Clang to build a tool that processes code, "
"please see :doc:`InternalsManual`. If you are interested in the `Clang "
"Static Analyzer <https://clang-analyzer.llvm.org>`_, please see its web page."
msgstr ""

#: ../../../UsersManual.rst:28
msgid ""
"Clang is one component in a complete toolchain for C family languages. A "
"separate document describes the other pieces necessary to :doc:`assemble a "
"complete toolchain <Toolchain>`."
msgstr ""

#: ../../../UsersManual.rst:32
msgid ""
"Clang is designed to support the C family of programming languages, which "
"includes :ref:`C <c>`, :ref:`Objective-C <objc>`, :ref:`C++ <cxx>`, and :ref:"
"`Objective-C++ <objcxx>` as well as many dialects of those. For language-"
"specific information, please see the corresponding language specific section:"
msgstr ""

#: ../../../UsersManual.rst:38
msgid ""
":ref:`C Language <c>`: K&R C, ANSI C89, ISO C90, C94 (C89+AMD1), C99 (+TC1, "
"TC2, TC3), C11, C17, C23, and C2y."
msgstr ""

#: ../../../UsersManual.rst:40
msgid ""
":ref:`Objective-C Language <objc>`: ObjC 1, ObjC 2, ObjC 2.1, plus variants "
"depending on base language."
msgstr ""

#: ../../../UsersManual.rst:42
msgid ""
":ref:`C++ Language <cxx>`: C++98, C++03, C++11, C++14, C++17, C++20, C++23, "
"and C++26."
msgstr ""

#: ../../../UsersManual.rst:44
msgid ":ref:`Objective C++ Language <objcxx>`"
msgstr ""

#: ../../../UsersManual.rst:45
msgid ""
":ref:`OpenCL Kernel Language <opencl>`: OpenCL C 1.0, 1.1, 1.2, 2.0, 3.0, "
"and C++ for OpenCL 1.0 and 2021."
msgstr ""

#: ../../../UsersManual.rst:48
msgid ""
"In addition to these base languages and their dialects, Clang supports a "
"broad variety of language extensions, which are documented in the "
"corresponding language section. These extensions are provided to be "
"compatible with the GCC, Microsoft, and other popular compilers as well as "
"to improve functionality through Clang-specific features. The Clang driver "
"and language features are intentionally designed to be as compatible with "
"the GNU GCC compiler as reasonably possible, easing migration from GCC to "
"Clang. In most cases, code \"just works\". Clang also provides an "
"alternative driver, :ref:`clang-cl`, that is designed to be compatible with "
"the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:59
msgid ""
"In addition to language specific features, Clang has a variety of features "
"that depend on what CPU architecture or operating system is being compiled "
"for. Please see the :ref:`Target-Specific Features and Limitations "
"<target_features>` section for more details."
msgstr ""

#: ../../../UsersManual.rst:67
msgid "Terminology"
msgstr ""

#: ../../../UsersManual.rst:68
msgid ""
"Lexer -- the part of the compiler responsible for converting source code "
"into abstract representations called tokens."
msgstr ""

#: ../../../UsersManual.rst:70
msgid ""
"Preprocessor -- the part of the compiler responsible for in-place textual "
"replacement of source constructs. When the lexer is required to produce a "
"token, it will run the preprocessor while determining which token to "
"produce. In other words, when the lexer encounters something like `#include` "
"or a macro name, the preprocessor will be used to perform the inclusion or "
"expand the macro name into its replacement list, and return the resulting "
"non-preprocessor token."
msgstr ""

#: ../../../UsersManual.rst:77
msgid ""
"Parser -- the part of the compiler responsible for determining syntactic "
"correctness of the source code. The parser will request tokens from the "
"lexer and after performing semantic analysis of the production, generates an "
"abstract representation of the source called an AST."
msgstr ""

#: ../../../UsersManual.rst:81
msgid ""
"Sema -- the part of the compiler responsible for determining semantic "
"correctness of the source code. It is closely related to the parser and is "
"where many diagnostics are produced."
msgstr ""

#: ../../../UsersManual.rst:84
msgid ""
"Diagnostic -- a message to the user about properties of the source code. For "
"example, errors or warnings and their associated notes."
msgstr ""

#: ../../../UsersManual.rst:86
msgid ""
"Undefined behavior -- behavior for which the standard imposes no "
"requirements on how the code behaves. Generally speaking, undefined behavior "
"is a bug in the user's code. However, it can also be a place for the "
"compiler to define the behavior, called an extension."
msgstr ""

#: ../../../UsersManual.rst:90
msgid ""
"Optimizer -- the part of the compiler responsible for transforming code to "
"have better performance characteristics without changing the semantics of "
"how the code behaves. Note, the optimizer assumes the code has no undefined "
"behavior, so if the code does contain undefined behavior, it will often "
"behave differently depending on which optimization level is enabled."
msgstr ""

#: ../../../UsersManual.rst:95
msgid ""
"Frontend -- the Lexer, Preprocessor, Parser, Sema, and LLVM IR code "
"generation parts of the compiler."
msgstr ""

#: ../../../UsersManual.rst:97
msgid ""
"Middle-end -- a term used for the of the subset of the backend that does "
"(typically not target specific) optimizations prior to assembly code "
"generation."
msgstr ""

#: ../../../UsersManual.rst:100
msgid ""
"Backend -- the parts of the compiler which run after LLVM IR code "
"generation, such as the optimizer and generation of assembly code."
msgstr ""

#: ../../../UsersManual.rst:103
msgid ""
"See the :doc:`InternalsManual` for more details about the internal "
"construction of the compiler."
msgstr ""

#: ../../../UsersManual.rst:107
msgid "Support"
msgstr ""

#: ../../../UsersManual.rst:108
msgid ""
"Clang releases happen roughly `every six months <https://llvm.org/docs/"
"HowToReleaseLLVM.html#annual-release-schedule>`_. Only the current public "
"release is officially supported. Bug-fix releases for the current release "
"will be produced on an as-needed basis, but bug fixes are not backported to "
"releases older than the current one."
msgstr ""

#: ../../../UsersManual.rst:115
msgid "Command Line Options"
msgstr ""

#: ../../../UsersManual.rst:117
msgid ""
"This section is generally an index into other sections. It does not go into "
"depth on the ones that are covered by other sections. However, the first "
"part introduces the language selection and other high level options like :"
"option:`-c`, :option:`-g`, etc."
msgstr ""

#: ../../../UsersManual.rst:123
msgid "Options to Control Error and Warning Messages"
msgstr ""

#: ../../../UsersManual.rst:127
msgid "Turn warnings into errors."
msgstr ""

#: ../../../UsersManual.rst:132
msgid "``-Werror=foo``"
msgstr ""

#: ../../../UsersManual.rst:134
msgid "Turn warning \"foo\" into an error."
msgstr ""

#: ../../../UsersManual.rst:138
msgid ""
"Turn warning \"foo\" into a warning even if :option:`-Werror` is specified."
msgstr ""

#: ../../../UsersManual.rst:142
msgid ""
"Enable warning \"foo\". See the :doc:`diagnostics reference "
"<DiagnosticsReference>` for a complete list of the warning flags that can be "
"specified in this way."
msgstr ""

#: ../../../UsersManual.rst:148
msgid "Disable warning \"foo\"."
msgstr ""

#: ../../../UsersManual.rst:152
msgid "Disable all diagnostics."
msgstr ""

#: ../../../UsersManual.rst:156
msgid ":ref:`Enable all diagnostics. <diagnostics_enable_everything>`"
msgstr ""

#: ../../../UsersManual.rst:160
msgid "Warn on language extensions."
msgstr ""

#: ../../../UsersManual.rst:164
msgid "Error on language extensions."
msgstr ""

#: ../../../UsersManual.rst:168
msgid "Enable warnings from system headers."
msgstr ""

#: ../../../UsersManual.rst:172
msgid ""
"Stop emitting diagnostics after 123 errors have been produced. The default "
"is 20, and the error limit can be disabled with `-ferror-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:177
msgid ""
"Only emit up to 123 template instantiation notes within the template "
"instantiation backtrace for a single warning or error. The default is 10, "
"and the limit can be disabled with `-ftemplate-backtrace-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:183
msgid ""
":ref:`Suppress certain diagnostics for certain files. "
"<warning_suppression_mappings>`"
msgstr ""

#: ../../../UsersManual.rst:188
msgid "Formatting of Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:190
msgid ""
"Clang aims to produce beautiful diagnostics by default, particularly for new "
"users that first come to Clang. However, different people have different "
"preferences, and sometimes Clang is driven not by a human, but by a program "
"that wants consistent and easily parsable output. For these cases, Clang "
"provides a wide range of options to control the exact output format of the "
"diagnostics that it generates."
msgstr ""

#: ../../../UsersManual.rst:201
msgid "Print column number in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:203
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"column number of a diagnostic. For example, when this is enabled, Clang will "
"print something like:"
msgstr ""

#: ../../../UsersManual.rst:214
msgid ""
"When this is disabled, Clang will print \"test.c:28: warning...\" with no "
"column number."
msgstr ""

#: ../../../UsersManual.rst:217 ../../../UsersManual.rst:537
#: ../../../UsersManual.rst:561
msgid ""
"The printed column numbers count bytes from the beginning of the line; take "
"care if your source contains multibyte characters."
msgstr ""

#: ../../../UsersManual.rst:224
msgid "Print source file/line/column information in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:226
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"filename, line number and column number of a diagnostic. For example, when "
"this is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:237
msgid "When this is disabled, Clang will not print the \"test.c:28:8: \" part."
msgstr ""

#: ../../../UsersManual.rst:244
msgid ""
"Print source line and ranges from source code in diagnostic. This option, "
"which defaults to on, controls whether or not Clang prints the source line, "
"source ranges, and caret when emitting a diagnostic. For example, when this "
"is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:259
msgid ""
"This option, which defaults to on when a color-capable terminal is detected, "
"controls whether or not Clang prints diagnostics in color."
msgstr ""

#: ../../../UsersManual.rst:262
msgid ""
"When this option is enabled, Clang will use colors to highlight specific "
"parts of the diagnostic, e.g.,"
msgstr ""

#: ../../../UsersManual.rst:267
msgid ""
"<pre>\n"
"  <b><span style=\"color:black\">test.c:28:8: <span style=\"color:"
"magenta\">warning</span>: extra tokens at end of #endif directive [-Wextra-"
"tokens]</span></b>\n"
"  #endif bad\n"
"         <span style=\"color:green\">^</span>\n"
"         <span style=\"color:green\">//</span>\n"
"</pre>"
msgstr ""

#: ../../../UsersManual.rst:276
msgid "When this is disabled, Clang will just print:"
msgstr ""

#: ../../../UsersManual.rst:285
msgid ""
"If the ``NO_COLOR`` environment variable is defined and not empty "
"(regardless of value), color diagnostics are disabled. If ``NO_COLOR`` is "
"defined and ``-fcolor-diagnostics`` is passed on the command line, Clang "
"will honor the command line argument."
msgstr ""

#: ../../../UsersManual.rst:292
msgid ""
"Controls whether ANSI escape codes are used instead of the Windows Console "
"API to output colored diagnostics. This option is only used on Windows and "
"defaults to off."
msgstr ""

#: ../../../UsersManual.rst:298
msgid ""
"Changes diagnostic output format to better match IDEs and command line tools."
msgstr ""

#: ../../../UsersManual.rst:300
msgid ""
"This option controls the output format of the filename, line number, and "
"column printed in diagnostic messages. The options, and their affect on "
"formatting a simple conversion diagnostic, follow:"
msgstr ""

#: ../../../UsersManual.rst:307
msgid "**clang** (default)"
msgstr ""

#: ../../../UsersManual.rst:312
msgid "**msvc**"
msgstr ""

#: ../../../UsersManual.rst:316
msgid "**vi**"
msgstr ""

#: ../../../UsersManual.rst:323
msgid "Enable ``[-Woption]`` information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:325
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"associated :ref:`warning group <cl_diag_warning_groups>` option name when "
"outputting a warning diagnostic. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:337
msgid ""
"Passing **-fno-diagnostics-show-option** will prevent Clang from printing "
"the [:option:`-Wextra-tokens`] information in the diagnostic. This "
"information tells you the flag needed to enable or disable the diagnostic, "
"either from the command line or through :ref:`#pragma GCC diagnostic "
"<pragma_GCC_diagnostic>`."
msgstr ""

#: ../../../UsersManual.rst:345
msgid "Enable printing category information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:347
msgid ""
"This option, which defaults to \"none\", controls whether or not Clang "
"prints the category associated with a diagnostic when emitting it. Each "
"diagnostic may or may not have an associated category, if it has one, it is "
"listed in the diagnostic categorization field of the diagnostic line (in the "
"[]'s)."
msgstr ""

#: ../../../UsersManual.rst:353
msgid ""
"For example, a format string warning will produce these three renditions "
"based on the setting of this option:"
msgstr ""

#: ../../../UsersManual.rst:362
msgid ""
"This category can be used by clients that want to group diagnostics by "
"category, so it should be a high level category. We want dozens of these, "
"not hundreds or thousands of them."
msgstr ""

#: ../../../UsersManual.rst:370
msgid ""
"Enable optimization remarks during compilation and write them to a separate "
"file."
msgstr ""

#: ../../../UsersManual.rst:373
msgid ""
"This option, which defaults to off, controls whether Clang writes "
"optimization reports to a separate file. By recording diagnostics in a file, "
"users can parse or sort the remarks in a convenient way."
msgstr ""

#: ../../../UsersManual.rst:377
msgid "By default, the serialization format is YAML."
msgstr ""

#: ../../../UsersManual.rst:379
msgid "The supported serialization formats are:"
msgstr ""

#: ../../../UsersManual.rst:383
msgid "``-fsave-optimization-record=yaml``: A structured YAML format."
msgstr ""

#: ../../../UsersManual.rst:387
msgid ""
"``-fsave-optimization-record=bitstream``: A binary format based on LLVM "
"Bitstream."
msgstr ""

#: ../../../UsersManual.rst:390
msgid "The output file is controlled by :option:`-foptimization-record-file`."
msgstr ""

#: ../../../UsersManual.rst:392
msgid ""
"In the absence of an explicit output file, the file is chosen using the "
"following scheme:"
msgstr ""

#: ../../../UsersManual.rst:395
msgid "``<base>.opt.<format>``"
msgstr ""

#: ../../../UsersManual.rst:397
msgid ""
"where ``<base>`` is based on the output file of the compilation (whether "
"it's explicitly specified through `-o` or not) when used with `-c` or `-S`. "
"For example:"
msgstr ""

#: ../../../UsersManual.rst:401
msgid ""
"``clang -fsave-optimization-record -c in.c -o out.o`` will generate ``out."
"opt.yaml``"
msgstr ""

#: ../../../UsersManual.rst:404
msgid ""
"``clang -fsave-optimization-record -c in.c`` will generate ``in.opt.yaml``"
msgstr ""

#: ../../../UsersManual.rst:407
msgid ""
"When targeting (Thin)LTO, the base is derived from the output filename, and "
"the extension is not dropped."
msgstr ""

#: ../../../UsersManual.rst:410
msgid "When targeting ThinLTO, the following scheme is used:"
msgstr ""

#: ../../../UsersManual.rst:412
msgid "``<base>.opt.<format>.thin.<num>.<format>``"
msgstr ""

#: ../../../UsersManual.rst:414
msgid ""
"Darwin-only: when used for generating a linked binary from a source file "
"(through an intermediate object file), the driver will invoke `cc1` to "
"generate a temporary object file. The temporary remark file will be emitted "
"next to the object file, which will then be picked up by `dsymutil` and "
"emitted in the .dSYM bundle. This is available for all formats except YAML."
msgstr ""

#: ../../../UsersManual.rst:420
msgid "For example:"
msgstr ""

#: ../../../UsersManual.rst:422
msgid ""
"``clang -fsave-optimization-record=bitstream in.c -o out`` will generate"
msgstr ""

#: ../../../UsersManual.rst:424
msgid "``/var/folders/43/9y164hh52tv_2nrdxrj31nyw0000gn/T/a-9be59b.o``"
msgstr ""

#: ../../../UsersManual.rst:426
msgid ""
"``/var/folders/43/9y164hh52tv_2nrdxrj31nyw0000gn/T/a-9be59b.opt.bitstream``"
msgstr ""

#: ../../../UsersManual.rst:428
msgid "``out``"
msgstr ""

#: ../../../UsersManual.rst:430
msgid "``out.dSYM/Contents/Resources/Remarks/out``"
msgstr ""

#: ../../../UsersManual.rst:432
msgid ""
"Darwin-only: compiling for multiple architectures will use the following "
"scheme:"
msgstr ""

#: ../../../UsersManual.rst:435
msgid "``<base>-<arch>.opt.<format>``"
msgstr ""

#: ../../../UsersManual.rst:437
msgid ""
"Note that this is incompatible with passing the :option:`-foptimization-"
"record-file` option."
msgstr ""

#: ../../../UsersManual.rst:442
msgid ""
"Control the file to which optimization reports are written. This implies :"
"ref:`-fsave-optimization-record <opt_fsave-optimization-record>`."
msgstr ""

#: ../../../UsersManual.rst:445
msgid ""
"On Darwin platforms, this is incompatible with passing multiple ``-arch "
"<arch>`` options."
msgstr ""

#: ../../../UsersManual.rst:450
msgid "Only include passes which match a specified regular expression."
msgstr ""

#: ../../../UsersManual.rst:452
msgid ""
"When optimization reports are being output (see :ref:`-fsave-optimization-"
"record <opt_fsave-optimization-record>`), this option controls the passes "
"that will be included in the final report."
msgstr ""

#: ../../../UsersManual.rst:456
msgid ""
"If this option is not used, all the passes are included in the optimization "
"record."
msgstr ""

#: ../../../UsersManual.rst:463
msgid "Enable profile hotness information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:465
msgid ""
"This option controls whether Clang prints the profile hotness associated "
"with diagnostics in the presence of profile-guided optimization information. "
"This is currently supported with optimization remarks (see :ref:`Options to "
"Emit Optimization Reports <rpass>`). The hotness information allows users to "
"focus on the hot optimization remarks that are likely to be more relevant "
"for run-time performance."
msgstr ""

#: ../../../UsersManual.rst:472
msgid ""
"For example, in this output, the block containing the callsite of `foo` was "
"executed 3000 times according to the profile data:"
msgstr ""

#: ../../../UsersManual.rst:481
msgid ""
"This option is implied when :ref:`-fsave-optimization-record <opt_fsave-"
"optimization-record>` is used. Otherwise, it defaults to off."
msgstr ""

#: ../../../UsersManual.rst:487
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this hotness value."
msgstr ""

#: ../../../UsersManual.rst:490
msgid ""
"This option, which defaults to zero, controls the minimum hotness an "
"optimization remark would need in order to be output by Clang. This is "
"currently supported with optimization remarks (see :ref:`Options to Emit "
"Optimization Reports <rpass>`) when profile hotness information in "
"diagnostics is enabled (see :ref:`-fdiagnostics-show-hotness "
"<opt_fdiagnostics-show-hotness>`)."
msgstr ""

#: ../../../UsersManual.rst:501
msgid "Enable \"FixIt\" information in the diagnostics output."
msgstr ""

#: ../../../UsersManual.rst:503
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"information on how to fix a specific diagnostic underneath it when it knows. "
"For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:514
msgid ""
"Passing **-fno-diagnostics-fixit-info** will prevent Clang from printing the "
"\"//\" line at the end of the message. This information is useful for users "
"who may not understand what is wrong, but can be confusing for machine "
"parsing."
msgstr ""

#: ../../../UsersManual.rst:523
msgid ""
"Print machine parsable information about source ranges. This option makes "
"Clang print information about source ranges in a machine parsable format "
"after the file/line/column number information. The information is a simple "
"sequence of brace enclosed ranges, where each range lists the start and end "
"line/column locations. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:535
msgid "The {}'s are generated by -fdiagnostics-print-source-range-info."
msgstr ""

#: ../../../UsersManual.rst:542
msgid "Print Fix-Its in a machine parseable form."
msgstr ""

#: ../../../UsersManual.rst:544
msgid ""
"This option makes Clang print available Fix-Its in a machine parseable "
"format at the end of diagnostics. The following example illustrates the "
"format:"
msgstr ""

#: ../../../UsersManual.rst:552
msgid ""
"The range printed is a half-open range, so in this example the characters at "
"column 25 up to but not including column 29 on line 7 in t.cpp should be "
"replaced with the string \"Gamma\". Either the range or the replacement "
"string may be empty (representing strict insertions and strict erasures, "
"respectively). Both the file name and the insertion string escape backslash "
"(as \"\\\\\\\\\"), tabs (as \"\\\\t\"), newlines (as \"\\\\n\"), double "
"quotes(as \"\\\\\"\") and non-printable characters (as octal \"\\\\xxx\")."
msgstr ""

#: ../../../UsersManual.rst:566
msgid "Turns off elision in template type printing."
msgstr ""

#: ../../../UsersManual.rst:568
msgid ""
"The default for template type printing is to elide as many template "
"arguments as possible, removing those which are the same in both template "
"types, leaving only the differences. Adding this flag will print all the "
"template arguments. If supported by the terminal, highlighting will still "
"appear on differing arguments."
msgstr ""

#: ../../../UsersManual.rst:574 ../../../UsersManual.rst:595
#: ../../../UsersManual.rst:625
msgid "Default:"
msgstr ""

#: ../../../UsersManual.rst:580
msgid "-fno-elide-type:"
msgstr ""

#: ../../../UsersManual.rst:588
msgid "Template type diffing prints a text tree."
msgstr ""

#: ../../../UsersManual.rst:590
msgid ""
"For diffing large templated types, this option will cause Clang to display "
"the templates as an indented text tree, one argument per line, with "
"differences marked inline. This is compatible with -fno-elide-type."
msgstr ""

#: ../../../UsersManual.rst:601
msgid "With :option:`-fdiagnostics-show-template-tree`:"
msgstr ""

#: ../../../UsersManual.rst:616
msgid ""
"Controls how many lines of code clang prints for diagnostics. By default, "
"clang prints a maximum of 16 lines of code."
msgstr ""

#: ../../../UsersManual.rst:622
msgid ""
"Controls whether clang will print a margin containing the line number on the "
"left of each line of code it prints for diagnostics."
msgstr ""

#: ../../../UsersManual.rst:635
msgid "With -fno-diagnostics-show-line-numbers:"
msgstr ""

#: ../../../UsersManual.rst:649
msgid "Individual Warning Groups"
msgstr ""

#: ../../../UsersManual.rst:651
msgid "TODO: Generate this from tblgen. Define one anchor per warning group."
msgstr ""

#: ../../../UsersManual.rst:655
msgid "Warn about excess tokens at the end of a preprocessor directive."
msgstr ""

#: ../../../UsersManual.rst:657
msgid ""
"This option, which defaults to on, enables warnings about extra tokens at "
"the end of preprocessor directives. For example:"
msgstr ""

#: ../../../UsersManual.rst:666
msgid ""
"These extra tokens are not strictly conforming, and are usually best handled "
"by commenting them out."
msgstr ""

#: ../../../UsersManual.rst:671
msgid ""
"Warn about unqualified uses of a member template whose name resolves to "
"another template at the location of the use."
msgstr ""

#: ../../../UsersManual.rst:674
msgid ""
"This option, which defaults to on, enables a warning in the following code:"
msgstr ""

#: ../../../UsersManual.rst:689
msgid ""
"C++ [basic.lookup.classref] requires this to be an error, but, because it's "
"hard to work around, Clang downgrades it to a warning as an extension."
msgstr ""

#: ../../../UsersManual.rst:695
msgid ""
"Warn about an unusable copy constructor when binding a reference to a "
"temporary."
msgstr ""

#: ../../../UsersManual.rst:698
msgid ""
"This option enables warnings about binding a reference to a temporary when "
"the temporary doesn't have a usable copy constructor. For example:"
msgstr ""

#: ../../../UsersManual.rst:725
msgid ""
"Note that if ``NonCopyable2::NonCopyable2()`` has a default argument whose "
"instantiation produces a compile error, that error will still be a hard "
"error in C++98 mode even if this warning is turned off."
msgstr ""

#: ../../../UsersManual.rst:730
msgid "Options to Control Clang Crash Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:732
msgid ""
"As unbelievable as it may sound, Clang does crash from time to time. "
"Generally, this only occurs to those living on the `bleeding edge <https://"
"llvm.org/releases/download.html#svn>`_. Clang goes to great lengths to "
"assist you in filing a bug report. Specifically, Clang generates "
"preprocessed source file(s) and associated run script(s) upon a crash. These "
"files should be attached to a bug report to ease reproducibility of the "
"failure. Below are the command line options to control the crash diagnostics."
msgstr ""

#: ../../../UsersManual.rst:743 ../../../UsersManual.rst:934
#: ../../../UsersManual.rst:1705 ../../../UsersManual.rst:1765
msgid "Valid values are:"
msgstr ""

#: ../../../UsersManual.rst:745
msgid ""
"``off`` (Disable auto-generation of preprocessed source files during a clang "
"crash.)"
msgstr ""

#: ../../../UsersManual.rst:746
msgid "``compiler`` (Generate diagnostics for compiler crashes (default))"
msgstr ""

#: ../../../UsersManual.rst:747
msgid "``all`` (Generate diagnostics for all tools which support it)"
msgstr ""

#: ../../../UsersManual.rst:751
msgid ""
"Disable auto-generation of preprocessed source files during a clang crash."
msgstr ""

#: ../../../UsersManual.rst:753
msgid ""
"The -fno-crash-diagnostics flag can be helpful for speeding the process of "
"generating a delta reduced test case."
msgstr ""

#: ../../../UsersManual.rst:758
msgid ""
"Specify where to write the crash diagnostics files; defaults to the usual "
"location for temporary files."
msgstr ""

#: ../../../UsersManual.rst:763
msgid ""
"Like ``-fcrash-diagnostics-dir=<dir>``, specifies where to write the crash "
"diagnostics files, but with lower precedence than the option."
msgstr ""

#: ../../../UsersManual.rst:766
msgid ""
"Clang is also capable of generating preprocessed source file(s) and "
"associated run script(s) even without a crash. This is especially useful "
"when trying to generate a reproducer for warnings or errors while using "
"modules."
msgstr ""

#: ../../../UsersManual.rst:772
msgid ""
"Generates preprocessed source files, a reproducer script and if relevant, a "
"cache containing: built module pcm's and all headers needed to rebuild the "
"same modules."
msgstr ""

#: ../../../UsersManual.rst:779
msgid "Options to Emit Optimization Reports"
msgstr ""

#: ../../../UsersManual.rst:781
msgid ""
"Optimization reports trace, at a high-level, all the major decisions done by "
"compiler transformations. For instance, when the inliner decides to inline "
"function ``foo()`` into ``bar()``, or the loop unroller decides to unroll a "
"loop N times, or the vectorizer decides to vectorize a loop body."
msgstr ""

#: ../../../UsersManual.rst:787
msgid ""
"Clang offers a family of flags which the optimizers can use to emit a "
"diagnostic in three cases:"
msgstr ""

#: ../../../UsersManual.rst:790
msgid "When the pass makes a transformation (`-Rpass`)."
msgstr ""

#: ../../../UsersManual.rst:792
msgid "When the pass fails to make a transformation (`-Rpass-missed`)."
msgstr ""

#: ../../../UsersManual.rst:794
msgid ""
"When the pass determines whether or not to make a transformation (`-Rpass-"
"analysis`)."
msgstr ""

#: ../../../UsersManual.rst:797
msgid ""
"NOTE: Although the discussion below focuses on `-Rpass`, the exact same "
"options apply to `-Rpass-missed` and `-Rpass-analysis`."
msgstr ""

#: ../../../UsersManual.rst:800
msgid ""
"Since there are dozens of passes inside the compiler, each of these flags "
"take a regular expression that identifies the name of the pass which should "
"emit the associated diagnostic. For example, to get a report from the "
"inliner, compile the code with:"
msgstr ""

#: ../../../UsersManual.rst:812
msgid ""
"Note that remarks from the inliner are identified with `[-Rpass=inline]`. To "
"request a report from every optimization pass, you should use `-Rpass=.*` "
"(in fact, you can use any valid POSIX regular expression). However, do not "
"expect a report from every transformation made by the compiler. Optimization "
"remarks do not really make sense outside of the major transformations (e.g., "
"inlining, vectorization, loop optimizations) and not every optimization pass "
"supports this feature."
msgstr ""

#: ../../../UsersManual.rst:821
msgid ""
"Note that when using profile-guided optimization information, profile "
"hotness information can be included in the remarks (see :ref:`-fdiagnostics-"
"show-hotness <opt_fdiagnostics-show-hotness>`)."
msgstr ""

#: ../../../UsersManual.rst:826
msgid "Current limitations"
msgstr ""

#: ../../../UsersManual.rst:828
msgid ""
"Optimization remarks that refer to function names will display the mangled "
"name of the function. Since these remarks are emitted by the back end of the "
"compiler, it does not know anything about the input language, nor its "
"mangling rules."
msgstr ""

#: ../../../UsersManual.rst:833
msgid ""
"Some source locations are not displayed correctly. The front end has a more "
"detailed source location tracking than the locations included in the debug "
"info (e.g., the front end can locate code inside macro expansions). However, "
"the locations used by `-Rpass` are translated from debug annotations. That "
"translation can be lossy, which results in some remarks having no location "
"information."
msgstr ""

#: ../../../UsersManual.rst:841
msgid "Options to Emit Resource Consumption Reports"
msgstr ""

#: ../../../UsersManual.rst:843
msgid ""
"These are options that report execution time and consumed memory of "
"different compilations steps."
msgstr ""

#: ../../../UsersManual.rst:848
msgid ""
"This option requests driver to print used memory and execution time of each "
"compilation step. The ``clang`` driver during execution calls different "
"tools, like compiler, assembler, linker etc. With this option the driver "
"reports total execution time, the execution time spent in user mode and peak "
"memory usage of each the called tool. Value of the option specifies where "
"the report is sent to. If it specifies a regular file, the data are saved to "
"this file in CSV format:"
msgstr ""

#: ../../../UsersManual.rst:863
msgid "The data on each row represent:"
msgstr ""

#: ../../../UsersManual.rst:865
msgid "file name of the tool executable,"
msgstr ""

#: ../../../UsersManual.rst:866
msgid "output file name in quotes,"
msgstr ""

#: ../../../UsersManual.rst:867
msgid "total execution time in microseconds,"
msgstr ""

#: ../../../UsersManual.rst:868
msgid "execution time in user mode in microseconds,"
msgstr ""

#: ../../../UsersManual.rst:869
msgid "peak memory usage in Kb."
msgstr ""

#: ../../../UsersManual.rst:871
msgid ""
"It is possible to specify this option without any value. In this case "
"statistics are printed on standard output in human readable format:"
msgstr ""

#: ../../../UsersManual.rst:880
msgid ""
"The report file specified in the option is locked for write, so this option "
"can be used to collect statistics in parallel builds. The report file is not "
"cleared, new data is appended to it, thus making possible to accumulate "
"build statistics."
msgstr ""

#: ../../../UsersManual.rst:885
msgid ""
"You can also use environment variables to control the process statistics "
"reporting. Setting ``CC_PRINT_PROC_STAT`` to ``1`` enables the feature, the "
"report goes to stdout in human readable format. Setting "
"``CC_PRINT_PROC_STAT_FILE`` to a fully qualified file path makes it report "
"process statistics to the given file in the CSV format. Specifying a "
"relative path will likely lead to multiple files with the same name created "
"in different directories, since the path is relative to a changing working "
"directory."
msgstr ""

#: ../../../UsersManual.rst:893
msgid ""
"These environment variables are handy when you need to request the "
"statistics report without changing your build scripts or alter the existing "
"set of compiler options. Note that ``-fproc-stat-report`` take precedence "
"over ``CC_PRINT_PROC_STAT`` and ``CC_PRINT_PROC_STAT_FILE``."
msgstr ""

#: ../../../UsersManual.rst:905
msgid "Other Options"
msgstr ""

#: ../../../UsersManual.rst:906
msgid "Clang options that don't fit neatly into other categories."
msgstr ""

#: ../../../UsersManual.rst:910
msgid ""
"This flag controls the value of ``__GNUC__`` and related macros. This flag "
"does not enable or disable any GCC extensions implemented in Clang. Setting "
"the version to zero causes Clang to leave ``__GNUC__`` and other GNU-"
"namespaced macros, such as ``__GXX_WEAK__``, undefined."
msgstr ""

#: ../../../UsersManual.rst:917
msgid ""
"When emitting a dependency file, use formatting conventions appropriate for "
"NMake or Jom. Ignored unless another option causes Clang to emit a "
"dependency file."
msgstr ""

#: ../../../UsersManual.rst:921
msgid ""
"When Clang emits a dependency file (e.g., you supplied the -M option) most "
"filenames can be written to the file without any special formatting. "
"Different Make tools will treat different sets of characters as \"special\" "
"and use different conventions for telling the Make tool that the character "
"is actually part of the filename. Normally Clang uses backslash to "
"\"escape\" a special character, which is the convention used by GNU Make. "
"The -MV option tells Clang to put double-quotes around the entire filename, "
"which is the convention used by NMake and Jom."
msgstr ""

#: ../../../UsersManual.rst:932
msgid ""
"When to emit DWARF unwind (EH frame) info. This is a Mach-O-specific option."
msgstr ""

#: ../../../UsersManual.rst:936
msgid ""
"``no-compact-unwind`` - Only emit DWARF unwind when compact unwind encodings "
"aren't available. This is the default for arm64."
msgstr ""

#: ../../../UsersManual.rst:938
msgid "``always`` - Always emit DWARF unwind regardless."
msgstr ""

#: ../../../UsersManual.rst:939
msgid ""
"``default`` - Use the platform-specific default (``always`` for all non-"
"arm64-platforms)."
msgstr ""

#: ../../../UsersManual.rst:942
msgid ""
"``no-compact-unwind`` is a performance optimization -- Clang will emit "
"smaller object files that are more quickly processed by the linker. This may "
"cause binary compatibility issues on older x86_64 targets, however, so use "
"it with caution."
msgstr ""

#: ../../../UsersManual.rst:949
msgid ""
"Instruct clang not to emit the signature string for blocks. Disabling the "
"string can potentially break existing code that relies on it. Users should "
"carefully consider this possibility when using the flag."
msgstr ""

#: ../../../UsersManual.rst:956
msgid "Configuration files"
msgstr ""

#: ../../../UsersManual.rst:958
msgid ""
"Configuration files group command-line options and allow all of them to be "
"specified just by referencing the configuration file. They may be used, for "
"example, to collect options required to tune compilation for particular "
"target, such as ``-L``, ``-I``, ``-l``, ``--sysroot``, codegen options, etc."
msgstr ""

#: ../../../UsersManual.rst:963
msgid ""
"Configuration files can be either specified on the command line or loaded "
"from default locations. If both variants are present, the default "
"configuration files are loaded first."
msgstr ""

#: ../../../UsersManual.rst:967
msgid ""
"The command line option ``--config=`` can be used to specify explicit "
"configuration files in a Clang invocation. If the option is used multiple "
"times, all specified files are loaded, in order. For example:"
msgstr ""

#: ../../../UsersManual.rst:976
msgid ""
"If the provided argument contains a directory separator, it is considered as "
"a file path, and options are read from that file. Otherwise the argument is "
"treated as a file name and is searched for sequentially in the directories:"
msgstr ""

#: ../../../UsersManual.rst:980
msgid "user directory,"
msgstr ""

#: ../../../UsersManual.rst:981
msgid "system directory,"
msgstr ""

#: ../../../UsersManual.rst:982
msgid "the directory where Clang executable resides."
msgstr ""

#: ../../../UsersManual.rst:984
msgid ""
"Both user and system directories for configuration files can be specified "
"either during build or during runtime. At build time, use "
"``CLANG_CONFIG_FILE_USER_DIR`` and ``CLANG_CONFIG_FILE_SYSTEM_DIR``. At run "
"time use the ``--config-user-dir=`` and ``--config-system-dir=`` command "
"line options. Specifying config directories at runtime overrides the config "
"directories set at build time The first file found is used. It is an error "
"if the required file cannot be found."
msgstr ""

#: ../../../UsersManual.rst:992
msgid ""
"The default configuration files are searched for in the same directories "
"following the rules described in the next paragraphs. Loading default "
"configuration files can be disabled entirely via passing the ``--no-default-"
"config`` flag."
msgstr ""

#: ../../../UsersManual.rst:997
msgid ""
"First, the algorithm searches for a configuration file named ``<triple>-"
"<driver>.cfg`` where `triple` is the triple for the target being built for, "
"and `driver` is the name of the currently used driver. The algorithm first "
"attempts to use the canonical name for the driver used, then falls back to "
"the one found in the executable name."
msgstr ""

#: ../../../UsersManual.rst:1003
msgid "The following canonical driver names are used:"
msgstr ""

#: ../../../UsersManual.rst:1005
msgid "``clang`` for the ``gcc`` driver (used to compile C programs)"
msgstr ""

#: ../../../UsersManual.rst:1006
msgid "``clang++`` for the ``gxx`` driver (used to compile C++ programs)"
msgstr ""

#: ../../../UsersManual.rst:1007
msgid "``clang-cpp`` for the ``cpp`` driver (pure preprocessor)"
msgstr ""

#: ../../../UsersManual.rst:1008
msgid "``clang-cl`` for the ``cl`` driver"
msgstr ""

#: ../../../UsersManual.rst:1009
msgid "``flang`` for the ``flang`` driver"
msgstr ""

#: ../../../UsersManual.rst:1010
msgid "``clang-dxc`` for the ``dxc`` driver"
msgstr ""

#: ../../../UsersManual.rst:1012
msgid ""
"For example, when calling ``x86_64-pc-linux-gnu-clang-g++``, the driver will "
"first attempt to use the configuration file named::"
msgstr ""

#: ../../../UsersManual.rst:1017
msgid ""
"If this file is not found, it will attempt to use the name found in the "
"executable instead::"
msgstr ""

#: ../../../UsersManual.rst:1022
msgid ""
"Note that options such as ``--driver-mode=``, ``--target=``, ``-m32`` affect "
"the search algorithm. For example, the aforementioned executable called with "
"``-m32`` argument will instead search for::"
msgstr ""

#: ../../../UsersManual.rst:1028
msgid ""
"If none of the aforementioned files are found, the driver will instead "
"search for separate driver and target configuration files and attempt to "
"load both. The former is named ``<driver>.cfg`` while the latter is named "
"``<triple>.cfg``. Similarly to the previous variants, the canonical driver "
"name will be preferred, and the compiler will fall back to the actual name."
msgstr ""

#: ../../../UsersManual.rst:1034
msgid ""
"For example, ``x86_64-pc-linux-gnu-clang-g++`` will attempt to load two "
"configuration files named respectively::"
msgstr ""

#: ../../../UsersManual.rst:1040
msgid "with fallback to trying::"
msgstr ""

#: ../../../UsersManual.rst:1045
msgid "It is not an error if either of these files is not found."
msgstr ""

#: ../../../UsersManual.rst:1047
msgid ""
"The configuration file consists of command-line options specified on one or "
"more lines. Lines composed of whitespace characters only are ignored as well "
"as lines in which the first non-blank character is ``#``. Long options may "
"be split between several lines by a trailing backslash. Here is example of a "
"configuration file:"
msgstr ""

#: ../../../UsersManual.rst:1065
msgid ""
"Files included by ``@file`` directives in configuration files are resolved "
"relative to the including file. For example, if a configuration file ``~/."
"llvm/target.cfg`` contains the directive ``@os/linux.opts``, the file "
"``linux.opts`` is searched for in the directory ``~/.llvm/os``. Another way "
"to include a file content is using the command line option ``--config=``. It "
"works similarly but the included file is searched for using the rules for "
"configuration files."
msgstr ""

#: ../../../UsersManual.rst:1073
msgid ""
"To generate paths relative to the configuration file, the ``<CFGDIR>`` token "
"may be used. This will expand to the absolute path of the directory "
"containing the configuration file."
msgstr ""

#: ../../../UsersManual.rst:1077
msgid ""
"In cases where a configuration file is deployed alongside SDK contents, the "
"SDK directory can remain fully portable by using ``<CFGDIR>`` prefixed "
"paths. In this way, the user may only need to specify a root configuration "
"file with ``--config=`` to establish every aspect of the SDK with the "
"compiler:"
msgstr ""

#: ../../../UsersManual.rst:1089
msgid ""
"Usually, config file options are placed before command-line options, "
"regardless of the actual operation to be performed. The exception is being "
"made for the options prefixed with the ``$`` character. These will be used "
"only when the linker is being invoked, and added after all of the command-"
"line specified linker inputs. Here is some example of ``$``-prefixed options:"
msgstr ""

#: ../../../UsersManual.rst:1101
msgid "Language and Target-Independent Features"
msgstr ""

#: ../../../UsersManual.rst:1104
msgid "Freestanding Builds"
msgstr ""

#: ../../../UsersManual.rst:1105
msgid ""
"Passing the ``-ffreestanding`` flag causes Clang to build for a freestanding "
"(rather than a hosted) environment. The flag has the following effects:"
msgstr ""

#: ../../../UsersManual.rst:1108
msgid "the ``__STDC_HOSTED__`` predefined macro will expand to ``0``,"
msgstr ""

#: ../../../UsersManual.rst:1109
msgid "builtin functions are disabled by default (``-fno-builtins``),"
msgstr ""

#: ../../../UsersManual.rst:1110
msgid ""
"unwind tables are disabled by default (``fno-asynchronous-unwind-tables -fno-"
"unwind-tables``), and"
msgstr ""

#: ../../../UsersManual.rst:1112
msgid "does not treat the global ``main`` function as a special function."
msgstr ""

#: ../../../UsersManual.rst:1114
msgid ""
"An implementation of the following runtime library functions must always be "
"provided with the usual semantics, as Clang will generate calls to them:"
msgstr ""

#: ../../../UsersManual.rst:1117
msgid "``memcpy``,"
msgstr ""

#: ../../../UsersManual.rst:1118
msgid "``memmove``, and"
msgstr ""

#: ../../../UsersManual.rst:1119
msgid "``memset``."
msgstr ""

#: ../../../UsersManual.rst:1121
msgid ""
"Clang does not, by itself, provide a full \"conforming freestanding "
"implementation\". If you wish to have a conforming freestanding "
"implementation, you must provide a freestanding C library. While Clang "
"provides some of the required header files, it does not provide all of them, "
"nor any library implementations."
msgstr ""

#: ../../../UsersManual.rst:1127
msgid ""
"Conversely, when ``-ffreestanding`` is specified, Clang does not require you "
"to provide a conforming freestanding implementation library. Clang will not "
"make any assumptions as to the availability or semantics of standard-library "
"functions other than those mentioned above."
msgstr ""

#: ../../../UsersManual.rst:1133
msgid "Controlling Errors and Warnings"
msgstr ""

#: ../../../UsersManual.rst:1135
msgid ""
"Clang provides a number of ways to control which code constructs cause it to "
"emit errors and warning messages, and how they are displayed to the console."
msgstr ""

#: ../../../UsersManual.rst:1140
msgid "Controlling How Clang Displays Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:1142
msgid ""
"When Clang emits a diagnostic, it includes rich information in the output, "
"and gives you fine-grain control over which information is printed. Clang "
"has the ability to print this information, and these are the options that "
"control it:"
msgstr ""

#: ../../../UsersManual.rst:1147
msgid ""
"A file/line/column indicator that shows exactly where the diagnostic occurs "
"in your code [:ref:`-fshow-column <opt_fshow-column>`, :ref:`-fshow-source-"
"location <opt_fshow-source-location>`]."
msgstr ""

#: ../../../UsersManual.rst:1150
msgid ""
"A categorization of the diagnostic as a note, warning, error, or fatal error."
msgstr ""

#: ../../../UsersManual.rst:1152
msgid "A text string that describes what the problem is."
msgstr ""

#: ../../../UsersManual.rst:1153
msgid ""
"An option that indicates how to control the diagnostic (for diagnostics that "
"support it) [:ref:`-fdiagnostics-show-option <opt_fdiagnostics-show-"
"option>`]."
msgstr ""

#: ../../../UsersManual.rst:1156
msgid ""
"A :ref:`high-level category <diagnostics_categories>` for the diagnostic for "
"clients that want to group diagnostics by class (for diagnostics that "
"support it) [:option:`-fdiagnostics-show-category`]."
msgstr ""

#: ../../../UsersManual.rst:1160
msgid ""
"The line of source code that the issue occurs on, along with a caret and "
"ranges that indicate the important locations [:ref:`-fcaret-diagnostics "
"<opt_fcaret-diagnostics>`]."
msgstr ""

#: ../../../UsersManual.rst:1163
msgid ""
"\"FixIt\" information, which is a concise explanation of how to fix the "
"problem (when Clang is certain it knows) [:ref:`-fdiagnostics-fixit-info "
"<opt_fdiagnostics-fixit-info>`]."
msgstr ""

#: ../../../UsersManual.rst:1166
msgid ""
"A machine-parsable representation of the ranges involved (off by default) [:"
"ref:`-fdiagnostics-print-source-range-info <opt_fdiagnostics-print-source-"
"range-info>`]."
msgstr ""

#: ../../../UsersManual.rst:1170
msgid ""
"For more information please see :ref:`Formatting of Diagnostics "
"<cl_diag_formatting>`."
msgstr ""

#: ../../../UsersManual.rst:1174
msgid "Diagnostic Mappings"
msgstr ""

#: ../../../UsersManual.rst:1176
msgid "All diagnostics are mapped into one of these 6 classes:"
msgstr ""

#: ../../../UsersManual.rst:1178
msgid "Ignored"
msgstr ""

#: ../../../UsersManual.rst:1179
msgid "Note"
msgstr ""

#: ../../../UsersManual.rst:1180
msgid "Remark"
msgstr ""

#: ../../../UsersManual.rst:1181
msgid "Warning"
msgstr ""

#: ../../../UsersManual.rst:1182
msgid "Error"
msgstr ""

#: ../../../UsersManual.rst:1183
msgid "Fatal"
msgstr ""

#: ../../../UsersManual.rst:1188
msgid "Diagnostic Categories"
msgstr ""

#: ../../../UsersManual.rst:1190
msgid ""
"Though not shown by default, diagnostics may each be associated with a high-"
"level category. This category is intended to make it possible to triage "
"builds that produce a large number of errors or warnings in a grouped way."
msgstr ""

#: ../../../UsersManual.rst:1195
msgid ""
"Categories are not shown by default, but they can be turned on with the :"
"option:`-fdiagnostics-show-category` option. When set to \"``name``\", the "
"category is printed textually in the diagnostic output. When it is set to "
"\"``id``\", a category number is printed. The mapping of category names to "
"category id's can be obtained by running '``clang   --print-diagnostic-"
"categories``'."
msgstr ""

#: ../../../UsersManual.rst:1203
msgid "Controlling Diagnostics via Command Line Flags"
msgstr ""

#: ../../../UsersManual.rst:1205
msgid "TODO: -W flags, -pedantic, etc"
msgstr ""

#: ../../../UsersManual.rst:1210
msgid "Controlling Diagnostics via Pragmas"
msgstr ""

#: ../../../UsersManual.rst:1212
msgid ""
"Clang can also control what diagnostics are enabled through the use of "
"pragmas in the source code. This is useful for turning off specific warnings "
"in a section of source code. Clang supports GCC's pragma for compatibility "
"with existing source code, so ``#pragma GCC diagnostic`` and ``#pragma clang "
"diagnostic`` are synonyms for Clang. GCC will ignore ``#pragma clang "
"diagnostic``, though."
msgstr ""

#: ../../../UsersManual.rst:1219
msgid ""
"The pragma may control any warning that can be used from the command line. "
"Warnings may be set to ignored, warning, error, or fatal. The following "
"example code will tell Clang or GCC to ignore the ``-Wall`` warnings:"
msgstr ""

#: ../../../UsersManual.rst:1228
msgid ""
"Clang also allows you to push and pop the current warning state. This is "
"particularly useful when writing a header file that will be compiled by "
"other people, because you don't know what warning flags they build with."
msgstr ""

#: ../../../UsersManual.rst:1232
msgid ""
"In the below example :option:`-Wextra-tokens` is ignored for only a single "
"line of code, after which the diagnostics return to whatever state had "
"previously existed."
msgstr ""

#: ../../../UsersManual.rst:1249
msgid ""
"The push and pop pragmas will save and restore the full diagnostic state of "
"the compiler, regardless of how it was set. It should be noted that while "
"Clang supports the GCC pragma, Clang and GCC do not support the exact same "
"set of warnings, so even when using GCC-compatible #pragmas there is no "
"guarantee that they will have identical behaviour on both compilers."
msgstr ""

#: ../../../UsersManual.rst:1255
msgid ""
"Clang also doesn't yet support GCC behavior for ``#pragma diagnostic pop`` "
"that doesn't have a corresponding ``#pragma diagnostic push``. In this case "
"GCC pretends that there is a ``#pragma diagnostic push`` at the very "
"beginning of the source file, so \"unpaired\" ``#pragma diagnostic pop`` "
"matches that implicit push. This makes a difference for ``#pragma GCC "
"diagnostic ignored`` which are not guarded by push and pop. Refer to `GCC "
"documentation <https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html>`_ "
"for details."
msgstr ""

#: ../../../UsersManual.rst:1264
msgid ""
"Like GCC, Clang accepts ``ignored``, ``warning``, ``error``, and ``fatal`` "
"severity levels. They can be used to change severity of a particular "
"diagnostic for a region of source file. A notable difference from GCC is "
"that diagnostic not enabled via command line arguments can't be enabled this "
"way yet."
msgstr ""

#: ../../../UsersManual.rst:1269
msgid ""
"Some diagnostics associated with a ``-W`` flag have the error severity by "
"default. They can be ignored or downgraded to warnings:"
msgstr ""

#: ../../../UsersManual.rst:1278
msgid ""
"In addition to controlling warnings and errors generated by the compiler, it "
"is possible to generate custom warning and error messages through the "
"following pragmas:"
msgstr ""

#: ../../../UsersManual.rst:1291
msgid ""
"These pragmas operate similarly to the ``#warning`` and ``#error`` "
"preprocessor directives, except that they may also be embedded into "
"preprocessor macros via the C99 ``_Pragma`` operator, for example:"
msgstr ""

#: ../../../UsersManual.rst:1304
msgid "Controlling Diagnostics in System Headers"
msgstr ""

#: ../../../UsersManual.rst:1306
msgid ""
"Warnings are suppressed when they occur in system headers. By default, an "
"included file is treated as a system header if it is found in an include "
"path specified by ``-isystem``, but this can be overridden in several ways."
msgstr ""

#: ../../../UsersManual.rst:1311
msgid ""
"The ``system_header`` pragma can be used to mark the current file as being a "
"system header. No warnings will be produced from the location of the pragma "
"onwards within the same file."
msgstr ""

#: ../../../UsersManual.rst:1325
msgid ""
"The `--system-header-prefix=` and `--no-system-header-prefix=` command-line "
"arguments can be used to override whether subsets of an include path are "
"treated as system headers. When the name in a ``#include`` directive is "
"found within a header search path and starts with a system prefix, the "
"header is treated as a system header. The last prefix on the command-line "
"which matches the specified header name takes precedence. For instance:"
msgstr ""

#: ../../../UsersManual.rst:1338
msgid ""
"Here, ``#include \"x/a.h\"`` is treated as including a system header, even "
"if the header is found in ``foo``, and ``#include \"x/y/b.h\"`` is treated "
"as not including a system header, even if the header is found in ``bar``."
msgstr ""

#: ../../../UsersManual.rst:1343
msgid ""
"A ``#include`` directive which finds a file relative to the current "
"directory is treated as including a system header if the including file is "
"treated as a system header."
msgstr ""

#: ../../../UsersManual.rst:1348
msgid "Controlling Deprecation Diagnostics in Clang-Provided C Runtime Headers"
msgstr ""

#: ../../../UsersManual.rst:1350
msgid ""
"Clang is responsible for providing some of the C runtime headers that cannot "
"be provided by a platform CRT, such as implementation limits or when "
"compiling in freestanding mode. Define the "
"``_CLANG_DISABLE_CRT_DEPRECATION_WARNINGS`` macro prior to including such a "
"C runtime header to disable the deprecation warnings. Note that the C "
"Standard Library headers are allowed to transitively include other standard "
"library headers (see 7.1.2p5), and so the most appropriate use of this macro "
"is to set it within the build system using ``-D`` or before any include "
"directives in the translation unit."
msgstr ""

#: ../../../UsersManual.rst:1368
msgid "Enabling All Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:1370
msgid ""
"In addition to the traditional ``-W`` flags, one can enable **all** "
"diagnostics by passing :option:`-Weverything`. This works as expected with :"
"option:`-Werror`, and also includes the warnings from :option:`-pedantic`. "
"Some diagnostics contradict each other, therefore, users of :option:`-"
"Weverything` often disable many diagnostics such as `-Wno-c++98-compat` and "
"`-Wno-c++-compat` because they contradict recent C++ standards."
msgstr ""

#: ../../../UsersManual.rst:1377
msgid ""
"Since :option:`-Weverything` enables every diagnostic, we generally don't "
"recommend using it. `-Wall` `-Wextra` are a better choice for most projects. "
"Using :option:`-Weverything` means that updating your compiler is more "
"difficult because you're exposed to experimental diagnostics which might be "
"of lower quality than the default ones. If you do use :option:`-Weverything` "
"then we advise that you address all new compiler diagnostics as they get "
"added to Clang, either by fixing everything they find or explicitly "
"disabling that diagnostic with its corresponding `Wno-` option."
msgstr ""

#: ../../../UsersManual.rst:1386
msgid ""
"Note that when combined with :option:`-w` (which disables all warnings), "
"disabling all warnings wins."
msgstr ""

#: ../../../UsersManual.rst:1392
msgid "Controlling Diagnostics via Suppression Mappings"
msgstr ""

#: ../../../UsersManual.rst:1394
msgid ""
"Warning suppression mappings enable users to suppress Clang's diagnostics at "
"a per-file granularity. This allows enforcing diagnostics in specific parts "
"of the project even if there are violations in some headers."
msgstr ""

#: ../../../UsersManual.rst:1414
msgid ""
"See :doc:`WarningSuppressionMappings` for details about the file format and "
"functionality."
msgstr ""

#: ../../../UsersManual.rst:1418
msgid "Controlling Static Analyzer Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:1420
msgid ""
"While not strictly part of the compiler, the diagnostics from Clang's "
"`static analyzer <https://clang-analyzer.llvm.org>`_ can also be influenced "
"by the user via changes to the source code. See the available `annotations "
"<analyzer/user-docs/Annotations.html>`_ and the analyzer's `FAQ page "
"<analyzer/user-docs/FAQ.html#exclude-code>`_ for more information."
msgstr ""

#: ../../../UsersManual.rst:1429
msgid "Precompiled Headers"
msgstr ""

#: ../../../UsersManual.rst:1431
msgid ""
"`Precompiled headers <https://en.wikipedia.org/wiki/Precompiled_header>`_ "
"are a general approach employed by many compilers to reduce compilation "
"time. The underlying motivation of the approach is that it is common for the "
"same (and often large) header files to be included by multiple source files. "
"Consequently, compile times can often be greatly improved by caching some of "
"the (redundant) work done by a compiler to process headers. Precompiled "
"header files, which represent one of many ways to implement this "
"optimization, are literally files that represent an on-disk cache that "
"contains the vital information necessary to reduce some of the work needed "
"to process a corresponding header file. While details of precompiled headers "
"vary between compilers, precompiled headers have been shown to be highly "
"effective at speeding up program compilation on systems with very large "
"system headers (e.g., macOS)."
msgstr ""

#: ../../../UsersManual.rst:1446
msgid "Generating a PCH File"
msgstr ""

#: ../../../UsersManual.rst:1448
msgid ""
"To generate a PCH file using Clang, one invokes Clang with the `-x "
"<language>-header` option. This mirrors the interface in GCC for generating "
"PCH files:"
msgstr ""

#: ../../../UsersManual.rst:1458
msgid "Using a PCH File"
msgstr ""

#: ../../../UsersManual.rst:1460
msgid ""
"A PCH file can then be used as a prefix header when a ``-include-pch`` "
"option is passed to ``clang``:"
msgstr ""

#: ../../../UsersManual.rst:1467
msgid ""
"The ``clang`` driver will check if the PCH file ``test.h.pch`` is available; "
"if so, the contents of ``test.h`` (and the files it includes) will be "
"processed from the PCH file. Otherwise, Clang will report an error."
msgstr ""

#: ../../../UsersManual.rst:1473
msgid ""
"Clang does *not* automatically use PCH files for headers that are directly "
"included within a source file or indirectly via :option:`-include`. For "
"example:"
msgstr ""

#: ../../../UsersManual.rst:1484
msgid ""
"In this example, ``clang`` will not automatically use the PCH file for "
"``test.h`` since ``test.h`` was included directly in the source file and not "
"specified on the command line using ``-include-pch``."
msgstr ""

#: ../../../UsersManual.rst:1489
msgid "Ignoring a PCH File"
msgstr ""

#: ../../../UsersManual.rst:1491
msgid "To ignore PCH options, a `-ignore-pch` option is passed to ``clang``:"
msgstr ""

#: ../../../UsersManual.rst:1498
msgid ""
"This option disables precompiled headers, overrides -emit-pch and -include-"
"pch. test.h.pch is not generated and not used as a prefix header."
msgstr ""

#: ../../../UsersManual.rst:1502
msgid "Relocatable PCH Files"
msgstr ""

#: ../../../UsersManual.rst:1504
msgid ""
"It is sometimes necessary to build a precompiled header from headers that "
"are not yet in their final, installed locations. For example, one might "
"build a precompiled header within the build tree that is then meant to be "
"installed alongside the headers. Clang permits the creation of "
"\"relocatable\" precompiled headers, which are built with a given path (into "
"the build directory) and can later be used from an installed location."
msgstr ""

#: ../../../UsersManual.rst:1512
msgid ""
"To build a relocatable precompiled header, place your headers into a "
"subdirectory whose structure mimics the installed location. For example, if "
"you want to build a precompiled header for the header ``mylib.h`` that will "
"be installed into ``/usr/include``, create a subdirectory ``build/usr/"
"include`` and place the header ``mylib.h`` into that subdirectory. If "
"``mylib.h`` depends on other headers, then they can be stored within ``build/"
"usr/include`` in a way that mimics the installed location."
msgstr ""

#: ../../../UsersManual.rst:1521
msgid ""
"Building a relocatable precompiled header requires two additional arguments. "
"First, pass the ``--relocatable-pch`` flag to indicate that the resulting "
"PCH file should be relocatable. Second, pass ``-isysroot /path/to/build``, "
"which makes all includes for your library relative to the build directory. "
"For example:"
msgstr ""

#: ../../../UsersManual.rst:1531
msgid ""
"When loading the relocatable PCH file, the various headers used in the PCH "
"file are found from the system header root. For example, ``mylib.h`` can be "
"found in ``/usr/include/mylib.h``. If the headers are installed in some "
"other system root, the ``-isysroot`` option can be used provide a different "
"system root from which the headers will be based. For example, ``-isysroot /"
"Developer/SDKs/MacOSX10.4u.sdk`` will look for ``mylib.h`` in ``/Developer/"
"SDKs/MacOSX10.4u.sdk/usr/include/mylib.h``."
msgstr ""

#: ../../../UsersManual.rst:1539
msgid ""
"Relocatable precompiled headers are intended to be used in a limited number "
"of cases where the compilation environment is tightly controlled and the "
"precompiled header cannot be generated after headers have been installed."
msgstr ""

#: ../../../UsersManual.rst:1547
msgid "Controlling Floating Point Behavior"
msgstr ""

#: ../../../UsersManual.rst:1549
msgid ""
"Clang provides a number of ways to control floating point behavior, "
"including with command line options and source pragmas. This section "
"describes the various floating point semantic modes and the corresponding "
"options."
msgstr ""

#: ../../../UsersManual.rst:1553
msgid "Floating Point Semantic Modes"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Mode"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Values"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "ffp-exception-behavior"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{ignore, strict, maytrap}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fenv_access"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{off, on}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "(none)"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "frounding-math"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{dynamic, tonearest, downward, upward, towardzero}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "ffp-contract"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{on, off, fast, fast-honor-pragmas}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fdenormal-fp-math"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{IEEE, PreserveSign, PositiveZero}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fdenormal-fp-math-fp32"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fmath-errno"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{on, off}"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fhonor-nans"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fhonor-infinities"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fsigned-zeros"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "freciprocal-math"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fallow-approximate-fns"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fassociative-math"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fcomplex-arithmetic"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "{basic, improved, full, promoted}"
msgstr ""

#: ../../../UsersManual.rst:1572
msgid ""
"This table describes the option settings that correspond to the three "
"floating point semantic models: precise (the default), strict, and fast."
msgstr ""

#: ../../../UsersManual.rst:1576
msgid "Floating Point Models"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Precise"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Strict"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Fast"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "Aggressive"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "except_behavior"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "ignore"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "strict"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "off"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "on"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "rounding_mode"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "tonearest"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "dynamic"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "contract"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "fast"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "support_math_errno"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "no_honor_nans"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "no_honor_infinities"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "no_signed_zeros"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "allow_reciprocal"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "allow_approximate_fns"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "allow_reassociation"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "complex_arithmetic"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "full"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "promoted"
msgstr ""

#: ../../../UsersManual.rst:1
msgid "basic"
msgstr ""

#: ../../../UsersManual.rst:1593
msgid ""
"The ``-ffp-model`` option does not modify the ``fdenormal-fp-math`` setting, "
"but it does have an impact on whether ``crtfastmath.o`` is linked. Because "
"linking ``crtfastmath.o`` has a global effect on the program, and because "
"the global denormal handling can be changed in other ways, the state of "
"``fdenormal-fp-math`` handling cannot be assumed in any function based on fp-"
"model. See :ref:`crtfastmath.o` for more details."
msgstr ""

#: ../../../UsersManual.rst:1603
msgid ""
"Enable fast-math mode.  This option lets the compiler make aggressive, "
"potentially-lossy assumptions about floating-point math.  These include:"
msgstr ""

#: ../../../UsersManual.rst:1607
msgid ""
"Floating-point math obeys regular algebraic rules for real numbers (e.g. "
"``+`` and ``*`` are associative, ``x/y == x * (1/y)``, and ``(a + b) * c == "
"a * c + b * c``),"
msgstr ""

#: ../../../UsersManual.rst:1610
msgid ""
"No ``NaN`` or infinite values will be operands or results of floating-point "
"operations,"
msgstr ""

#: ../../../UsersManual.rst:1612
msgid "``+0`` and ``-0`` may be treated as interchangeable."
msgstr ""

#: ../../../UsersManual.rst:1614
msgid ""
"``-ffast-math`` also defines the ``__FAST_MATH__`` preprocessor macro. Some "
"math libraries recognize this macro and change their behavior. With the "
"exception of ``-ffp-contract=fast``, using any of the options below to "
"disable any of the individual optimizations in ``-ffast-math`` will cause "
"``__FAST_MATH__`` to no longer be set. ``-ffast-math`` enables ``-fcx-"
"limited-range``."
msgstr ""

#: ../../../UsersManual.rst:1621 ../../../UsersManual.rst:1655
msgid "This option implies:"
msgstr ""

#: ../../../UsersManual.rst:1623 ../../../UsersManual.rst:1853
msgid "``-fno-honor-infinities``"
msgstr ""

#: ../../../UsersManual.rst:1625 ../../../UsersManual.rst:1854
msgid "``-fno-honor-nans``"
msgstr ""

#: ../../../UsersManual.rst:1627 ../../../UsersManual.rst:1824
msgid "``-fapprox-func``"
msgstr ""

#: ../../../UsersManual.rst:1629
msgid "``-fno-math-errno``"
msgstr ""

#: ../../../UsersManual.rst:1631
msgid "``-ffinite-math-only``"
msgstr ""

#: ../../../UsersManual.rst:1633 ../../../UsersManual.rst:1825
msgid "``-fassociative-math``"
msgstr ""

#: ../../../UsersManual.rst:1635 ../../../UsersManual.rst:1826
msgid "``-freciprocal-math``"
msgstr ""

#: ../../../UsersManual.rst:1637 ../../../UsersManual.rst:1827
msgid "``-fno-signed-zeros``"
msgstr ""

#: ../../../UsersManual.rst:1639 ../../../UsersManual.rst:1828
msgid "``-fno-trapping-math``"
msgstr ""

#: ../../../UsersManual.rst:1641
msgid "``-fno-rounding-math``"
msgstr ""

#: ../../../UsersManual.rst:1643 ../../../UsersManual.rst:1829
msgid "``-ffp-contract=fast``"
msgstr ""

#: ../../../UsersManual.rst:1645
msgid ""
"Note: ``-ffast-math`` causes ``crtfastmath.o`` to be linked with code unless "
"``-shared`` or ``-mno-daz-ftz`` is present. See :ref:`crtfastmath.o` for "
"more details."
msgstr ""

#: ../../../UsersManual.rst:1651
msgid ""
"Disable fast-math mode.  This options disables unsafe floating-point "
"optimizations by preventing the compiler from making any transformations "
"that could affect the results."
msgstr ""

#: ../../../UsersManual.rst:1657 ../../../UsersManual.rst:1858
msgid "``-fhonor-infinities``"
msgstr ""

#: ../../../UsersManual.rst:1659 ../../../UsersManual.rst:1859
msgid "``-fhonor-nans``"
msgstr ""

#: ../../../UsersManual.rst:1661 ../../../UsersManual.rst:1833
msgid "``-fno-approx-func``"
msgstr ""

#: ../../../UsersManual.rst:1663
msgid "``-fno-finite-math-only``"
msgstr ""

#: ../../../UsersManual.rst:1665 ../../../UsersManual.rst:1834
msgid "``-fno-associative-math``"
msgstr ""

#: ../../../UsersManual.rst:1667 ../../../UsersManual.rst:1835
msgid "``-fno-reciprocal-math``"
msgstr ""

#: ../../../UsersManual.rst:1669 ../../../UsersManual.rst:1836
msgid "``-fsigned-zeros``"
msgstr ""

#: ../../../UsersManual.rst:1671 ../../../UsersManual.rst:1837
msgid "``-ffp-contract=on``"
msgstr ""

#: ../../../UsersManual.rst:1673
msgid ""
"Also, this option resets following options to their target-dependent "
"defaults."
msgstr ""

#: ../../../UsersManual.rst:1675
msgid "``-f[no-]math-errno``"
msgstr ""

#: ../../../UsersManual.rst:1677
msgid ""
"There is ambiguity about how ``-ffp-contract``, ``-ffast-math``, and ``-fno-"
"fast-math`` behave when combined. To keep the value of ``-ffp-contract`` "
"consistent, we define this set of rules:"
msgstr ""

#: ../../../UsersManual.rst:1681
msgid "``-ffast-math`` sets ``ffp-contract`` to ``fast``."
msgstr ""

#: ../../../UsersManual.rst:1683
msgid ""
"``-fno-fast-math`` sets ``-ffp-contract`` to ``on`` (``fast`` for CUDA and "
"HIP)."
msgstr ""

#: ../../../UsersManual.rst:1686
msgid ""
"If ``-ffast-math`` and ``-ffp-contract`` are both seen, but ``-ffast-math`` "
"is not followed by ``-fno-fast-math``, ``ffp-contract`` will be given the "
"value of whichever option was last seen."
msgstr ""

#: ../../../UsersManual.rst:1690
msgid ""
"If ``-fno-fast-math`` is seen and ``-ffp-contract`` has been seen at least "
"once, the ``ffp-contract`` will get the value of the last seen value of ``-"
"ffp-contract``."
msgstr ""

#: ../../../UsersManual.rst:1694
msgid ""
"If ``-fno-fast-math`` is seen and ``-ffp-contract`` has not been seen, the "
"``-ffp-contract`` setting is determined by the default value of ``-ffp-"
"contract``."
msgstr ""

#: ../../../UsersManual.rst:1698
msgid ""
"Note: ``-fno-fast-math`` causes ``crtfastmath.o`` to not be linked with code "
"unless ``-mdaz-ftz`` is present."
msgstr ""

#: ../../../UsersManual.rst:1703
msgid "Select which denormal numbers the code is permitted to require."
msgstr ""

#: ../../../UsersManual.rst:1707
msgid "``ieee`` - IEEE 754 denormal numbers"
msgstr ""

#: ../../../UsersManual.rst:1708
msgid ""
"``preserve-sign`` - the sign of a flushed-to-zero number is preserved in the "
"sign of 0"
msgstr ""

#: ../../../UsersManual.rst:1709
msgid "``positive-zero`` - denormals are flushed to positive zero"
msgstr ""

#: ../../../UsersManual.rst:1711
msgid ""
"The default value depends on the target. For most targets, it defaults to "
"``ieee``."
msgstr ""

#: ../../../UsersManual.rst:1716
msgid ""
"When a floating-point value is not representable in a destination integer "
"type, the code has undefined behavior according to the language standard. By "
"default, Clang will not guarantee any particular result in that case. With "
"the 'no-strict' option, Clang will saturate towards the smallest and largest "
"representable integer values instead. NaNs will be converted to zero. "
"Defaults to ``-fstrict-float-cast-overflow``."
msgstr ""

#: ../../../UsersManual.rst:1725
msgid ""
"Require math functions to indicate errors by setting errno. The default "
"varies by ToolChain.  ``-fno-math-errno`` allows optimizations that might "
"cause standard C math functions to not set ``errno``. For example, on some "
"systems, the math function ``sqrt`` is specified as setting ``errno`` to "
"``EDOM`` when the input is negative. On these systems, the compiler cannot "
"normally optimize a call to ``sqrt`` to use inline code (e.g. the x86 "
"``sqrtsd`` instruction) without additional checking to ensure that ``errno`` "
"is set appropriately. ``-fno-math-errno`` permits these transformations."
msgstr ""

#: ../../../UsersManual.rst:1735
msgid ""
"On some targets, math library functions never set ``errno``, and so ``-fno-"
"math-errno`` is the default. This includes most BSD-derived systems, "
"including Darwin."
msgstr ""

#: ../../../UsersManual.rst:1741
msgid ""
"Control floating point exception behavior. ``-fno-trapping-math`` allows "
"optimizations that assume that floating point operations cannot generate "
"traps such as divide-by-zero, overflow and underflow."
msgstr ""

#: ../../../UsersManual.rst:1743
msgid ""
"The option ``-ftrapping-math`` behaves identically to ``-ffp-exception-"
"behavior=strict``."
msgstr ""

#: ../../../UsersManual.rst:1744
msgid ""
"The option ``-fno-trapping-math`` behaves identically to ``-ffp-exception-"
"behavior=ignore``.   This is the default."
msgstr ""

#: ../../../UsersManual.rst:1748
msgid ""
"Specify when the compiler is permitted to form fused floating-point "
"operations, such as fused multiply-add (FMA). Fused operations are permitted "
"to produce more precise results than performing the same operations "
"separately."
msgstr ""

#: ../../../UsersManual.rst:1753
msgid ""
"The C and C++ standards permit intermediate floating-point results within an "
"expression to be computed with more precision than their type would normally "
"allow. This permits operation fusing, and Clang takes advantage of this by "
"default (``on``). Fusion across statements is not compliant with the C and C+"
"+ standards but can be enabled using ``-ffp-contract=fast``."
msgstr ""

#: ../../../UsersManual.rst:1759
msgid ""
"Fusion can be controlled with the ``FP_CONTRACT`` and ``clang fp contract`` "
"pragmas. Please note that pragmas will be ignored with ``-ffp-"
"contract=fast``, and refer to the pragma documentation for a description of "
"how the pragmas interact with the different ``-ffp-contract`` option values."
msgstr ""

#: ../../../UsersManual.rst:1767
msgid ""
"``fast``: enable fusion across statements disregarding pragmas, breaking "
"compliance with the C and C++ standards (default for CUDA)."
msgstr ""

#: ../../../UsersManual.rst:1769
msgid ""
"``on``: enable C and C++ standard complaint fusion in the same statement "
"unless dictated by pragmas (default for languages other than CUDA/HIP)"
msgstr ""

#: ../../../UsersManual.rst:1771
msgid "``off``: disable fusion"
msgstr ""

#: ../../../UsersManual.rst:1772
msgid ""
"``fast-honor-pragmas``: fuse across statements unless dictated by pragmas "
"(default for HIP)"
msgstr ""

#: ../../../UsersManual.rst:1777
msgid ""
"Allow floating-point optimizations that assume arguments and results are not "
"+-Inf. Defaults to ``-fhonor-infinities``."
msgstr ""

#: ../../../UsersManual.rst:1781 ../../../UsersManual.rst:1790
msgid ""
"If both ``-fno-honor-infinities`` and ``-fno-honor-nans`` are used, has the "
"same effect as specifying ``-ffinite-math-only``."
msgstr ""

#: ../../../UsersManual.rst:1786
msgid ""
"Allow floating-point optimizations that assume arguments and results are not "
"NaNs. Defaults to ``-fhonor-nans``."
msgstr ""

#: ../../../UsersManual.rst:1795
msgid ""
"Allow certain math function calls (such as ``log``, ``sqrt``, ``pow``, etc) "
"to be replaced with an approximately equivalent set of instructions or "
"alternative math function calls. For example, a ``pow(x, 0.25)`` may be "
"replaced with ``sqrt(sqrt(x))``, despite being an inexact result in cases "
"where ``x`` is ``-0.0`` or ``-inf``. Defaults to ``-fno-approx-func``."
msgstr ""

#: ../../../UsersManual.rst:1804
msgid ""
"Allow optimizations that ignore the sign of floating point zeros. Defaults "
"to ``-fsigned-zeros``."
msgstr ""

#: ../../../UsersManual.rst:1809
msgid ""
"Allow floating point operations to be reassociated. Defaults to ``-fno-"
"associative-math``."
msgstr ""

#: ../../../UsersManual.rst:1814
msgid ""
"Allow division operations to be transformed into multiplication by a "
"reciprocal. This can be significantly faster than an ordinary division but "
"can also have significantly less precision. Defaults to ``-fno-reciprocal-"
"math``."
msgstr ""

#: ../../../UsersManual.rst:1821
msgid ""
"Allow unsafe floating-point optimizations. ``-funsafe-math-optimizations`` "
"also implies:"
msgstr ""

#: ../../../UsersManual.rst:1831
msgid "``-fno-unsafe-math-optimizations`` implies:"
msgstr ""

#: ../../../UsersManual.rst:1839
msgid ""
"There is ambiguity about how ``-ffp-contract``, ``-funsafe-math-"
"optimizations``, and ``-fno-unsafe-math-optimizations`` behave when "
"combined. Explanation in :option:`-fno-fast-math` also applies to these "
"options."
msgstr ""

#: ../../../UsersManual.rst:1844
msgid "Defaults to ``-fno-unsafe-math-optimizations``."
msgstr ""

#: ../../../UsersManual.rst:1848
msgid ""
"Allow floating-point optimizations that assume arguments and results are not "
"NaNs or +-Inf. ``-ffinite-math-only`` defines the ``__FINITE_MATH_ONLY__`` "
"preprocessor macro. ``-ffinite-math-only`` implies:"
msgstr ""

#: ../../../UsersManual.rst:1856
msgid "``-ffno-inite-math-only`` implies:"
msgstr ""

#: ../../../UsersManual.rst:1861
msgid "Defaults to ``-fno-finite-math-only``."
msgstr ""

#: ../../../UsersManual.rst:1865
msgid ""
"Force floating-point operations to honor the dynamically-set rounding mode "
"by default."
msgstr ""

#: ../../../UsersManual.rst:1867
msgid ""
"The result of a floating-point operation often cannot be exactly represented "
"in the result type and therefore must be rounded.  IEEE 754 describes "
"different rounding modes that control how to perform this rounding, not all "
"of which are supported by all implementations.  C provides interfaces "
"(``fesetround`` and ``fesetenv``) for dynamically controlling the rounding "
"mode, and while it also recommends certain conventions for changing the "
"rounding mode, these conventions are not typically enforced in the ABI.  "
"Since the rounding mode changes the numerical result of operations, the "
"compiler must understand something about it in order to optimize floating "
"point operations."
msgstr ""

#: ../../../UsersManual.rst:1869
msgid ""
"Note that floating-point operations performed as part of constant "
"initialization are formally performed prior to the start of the program and "
"are therefore not subject to the current rounding mode.  This includes the "
"initialization of global variables and local ``static`` variables.  Floating-"
"point operations in these contexts will be rounded using ``FE_TONEAREST``."
msgstr ""

#: ../../../UsersManual.rst:1871
msgid ""
"The option ``-fno-rounding-math`` allows the compiler to assume that the "
"rounding mode is set to ``FE_TONEAREST``.  This is the default."
msgstr ""

#: ../../../UsersManual.rst:1872
msgid ""
"The option ``-frounding-math`` forces the compiler to honor the dynamically-"
"set rounding mode.  This prevents optimizations which might affect results "
"if the rounding mode changes or is different from the default; for example, "
"it prevents floating-point operations from being reordered across most calls "
"and prevents constant-folding when the result is not exactly representable."
msgstr ""

#: ../../../UsersManual.rst:1876
msgid ""
"Specify floating point behavior. ``-ffp-model`` is an umbrella option that "
"encompasses functionality provided by other, single purpose, floating point "
"options.  Valid values are: ``precise``, ``strict``, ``fast``, and "
"``aggressive``. Details:"
msgstr ""

#: ../../../UsersManual.rst:1882
msgid ""
"``precise`` Disables optimizations that are not value-safe on floating-point "
"data, although FP contraction (FMA) is enabled (``-ffp-contract=on``). This "
"is the default behavior. This value resets ``-fmath-errno`` to its target-"
"dependent default."
msgstr ""

#: ../../../UsersManual.rst:1886
msgid ""
"``strict`` Enables ``-frounding-math`` and ``-ffp-exception-"
"behavior=strict``, and disables contractions (FMA).  All of the ``-ffast-"
"math`` enablements are disabled. Enables ``STDC FENV_ACCESS``: by default "
"``FENV_ACCESS`` is disabled. This option setting behaves as though ``#pragma "
"STDC FENV_ACCESS ON`` appeared at the top of the source file."
msgstr ""

#: ../../../UsersManual.rst:1892
msgid ""
"``fast`` Behaves identically to specifying ``-funsafe-math-optimizations``, "
"``-fno-math-errno`` and ``-fcomplex-arithmetic=promoted`` ``ffp-"
"contract=fast``"
msgstr ""

#: ../../../UsersManual.rst:1895
msgid ""
"``aggressive`` Behaves identically to specifying both ``-ffast-math`` and "
"``ffp-contract=fast``"
msgstr ""

#: ../../../UsersManual.rst:1898
msgid ""
"Note: If your command line specifies multiple instances of the ``-ffp-"
"model`` option, or if your command line option specifies ``-ffp-model`` and "
"later on the command line selects a floating point option that has the "
"effect of negating part of the  ``ffp-model`` that has been selected, then "
"the compiler will issue a diagnostic warning that the override has occurred."
msgstr ""

#: ../../../UsersManual.rst:1907
msgid "Specify the floating-point exception behavior."
msgstr ""

#: ../../../UsersManual.rst:1909
msgid ""
"Valid values are: ``ignore``, ``maytrap``, and ``strict``. The default value "
"is ``ignore``.  Details:"
msgstr ""

#: ../../../UsersManual.rst:1912
msgid ""
"``ignore`` The compiler assumes that the exception status flags will not be "
"read and that floating point exceptions will be masked."
msgstr ""

#: ../../../UsersManual.rst:1913
msgid ""
"``maytrap`` The compiler avoids transformations that may raise exceptions "
"that would not have been raised by the original code. Constant folding "
"performed by the compiler is exempt from this option."
msgstr ""

#: ../../../UsersManual.rst:1914
msgid ""
"``strict`` The compiler ensures that all transformations strictly preserve "
"the floating point exception semantics of the original code."
msgstr ""

#: ../../../UsersManual.rst:1918
msgid ""
"Specify the floating-point evaluation method for intermediate results within "
"a single expression of the code."
msgstr ""

#: ../../../UsersManual.rst:1921
msgid ""
"Valid values are: ``source``, ``double``, and ``extended``. For 64-bit "
"targets, the default value is ``source``. For 32-bit x86 targets however, in "
"the case of NETBSD 6.99.26 and under, the default value is ``double``; in "
"the case of NETBSD greater than 6.99.26, with NoSSE, the default value is "
"``extended``, with SSE the default value is ``source``. Details:"
msgstr ""

#: ../../../UsersManual.rst:1928
msgid ""
"``source`` The compiler uses the floating-point type declared in the source "
"program as the evaluation method."
msgstr ""

#: ../../../UsersManual.rst:1929
msgid ""
"``double`` The compiler uses ``double`` as the floating-point evaluation "
"method for all float expressions of type that is narrower than ``double``."
msgstr ""

#: ../../../UsersManual.rst:1930
msgid ""
"``extended`` The compiler uses ``long double`` as the floating-point "
"evaluation method for all float expressions of type that is narrower than "
"``long double``."
msgstr ""

#: ../../../UsersManual.rst:1934
msgid ""
"This option pertains to floating-point types, complex types with floating-"
"point components, and vectors of these types. Some arithmetic expression "
"transformations that are mathematically correct and permissible according to "
"the C and C++ language standards may be incorrect when dealing with floating-"
"point types, such as reassociation and distribution. Further, the optimizer "
"may ignore parentheses when computing arithmetic expressions in "
"circumstances where the parenthesized and unparenthesized expression express "
"the same mathematical value. For example (a+b)+c is the same mathematical "
"value as a+(b+c), but the optimizer is free to evaluate the additions in any "
"order regardless of the parentheses. When enabled, this option forces the "
"optimizer to honor the order of operations with respect to parentheses in "
"all circumstances. Defaults to ``-fno-protect-parens``."
msgstr ""

#: ../../../UsersManual.rst:1948
msgid ""
"Note that floating-point contraction (option `-ffp-contract=`) is disabled "
"when `-fprotect-parens` is enabled.  Also note that in safe floating-point "
"modes, such as `-ffp-model=precise` or `-ffp-model=strict`, this option has "
"no effect because the optimizer is prohibited from making unsafe "
"transformations."
msgstr ""

#: ../../../UsersManual.rst:1956
msgid ""
"The C and C++ standards allow floating-point expressions to be computed as "
"if intermediate results had more precision (and/or a wider range) than the "
"type of the expression strictly allows.  This is called excess precision "
"arithmetic. Excess precision arithmetic can improve the accuracy of results "
"(although not always), and it can make computation significantly faster if "
"the target lacks direct hardware support for arithmetic in a particular "
"type.  However, it can also undermine strict floating-point reproducibility."
msgstr ""

#: ../../../UsersManual.rst:1965
msgid ""
"Under the standards, assignments and explicit casts force the operand to be "
"converted to its formal type, discarding any excess precision.  Because data "
"can only flow between statements via an assignment, this means that the use "
"of excess precision arithmetic is a reliable local property of a single "
"statement, and results do not change based on optimization.  However, when "
"excess precision arithmetic is in use, Clang does not guarantee strict "
"reproducibility, and future compiler releases may recognize more "
"opportunities to use excess precision arithmetic, e.g. with floating-point "
"builtins."
msgstr ""

#: ../../../UsersManual.rst:1975
msgid ""
"Clang does not use excess precision arithmetic for most types or on most "
"targets. For example, even on pre-SSE X86 targets where ``float`` and "
"``double`` computations must be performed in the 80-bit X87 format, Clang "
"rounds all intermediate results correctly for their type.  Clang currently "
"uses excess precision arithmetic by default only for the following types and "
"targets:"
msgstr ""

#: ../../../UsersManual.rst:1982
msgid "``_Float16`` on X86 targets without ``AVX512-FP16``."
msgstr ""

#: ../../../UsersManual.rst:1984
msgid ""
"The ``-fexcess-precision=<value>`` option can be used to control the use of "
"excess precision arithmetic.  Valid values are:"
msgstr ""

#: ../../../UsersManual.rst:1987
msgid ""
"``standard`` - The default.  Allow the use of excess precision arithmetic "
"under the constraints of the C and C++ standards. Has no effect except on "
"the types and targets listed above."
msgstr ""

#: ../../../UsersManual.rst:1990
msgid ""
"``fast`` - Accepted for GCC compatibility, but currently treated as an alias "
"for ``standard``."
msgstr ""

#: ../../../UsersManual.rst:1992
msgid ""
"``16`` - Forces ``_Float16`` operations to be emitted without using excess "
"precision arithmetic."
msgstr ""

#: ../../../UsersManual.rst:1997
msgid ""
"This option specifies the implementation for complex multiplication and "
"division."
msgstr ""

#: ../../../UsersManual.rst:1999
msgid "Valid values are: ``basic``, ``improved``, ``full`` and ``promoted``."
msgstr ""

#: ../../../UsersManual.rst:2001
msgid ""
"``basic`` Implementation of complex division and multiplication using "
"algebraic formulas at source precision. No special handling to avoid "
"overflow. NaN and infinite values are not handled."
msgstr ""

#: ../../../UsersManual.rst:2004
msgid ""
"``improved`` Implementation of complex division using the Smith algorithm at "
"source precision. Smith's algorithm for complex division. See SMITH, R. L. "
"Algorithm 116: Complex division. Commun. ACM 5, 8 (1962). This value offers "
"improved handling for overflow in intermediate calculations, but overflow "
"may occur. NaN and infinite values are not handled in some cases."
msgstr ""

#: ../../../UsersManual.rst:2010
msgid ""
"``full`` Implementation of complex division and multiplication using a call "
"to runtime library functions (generally the case, but the BE might sometimes "
"replace the library call if it knows enough about the potential range of the "
"inputs). Overflow and non-finite values are handled by the library "
"implementation. For the case of multiplication, overflow will occur in "
"accordance with normal floating-point rules. This is the default value."
msgstr ""

#: ../../../UsersManual.rst:2016
msgid ""
"``promoted`` Implementation of complex division using algebraic formulas at "
"higher precision. Overflow is handled. Non-finite values are handled in some "
"cases. If the target does not have native support for a higher-precision "
"data type, the implementation for the complex operation using the Smith "
"algorithm will be used. Overflow may still occur in some cases. NaN and "
"infinite values are not handled."
msgstr ""

#: ../../../UsersManual.rst:2025
msgid ""
"This option is aliased to ``-fcomplex-arithmetic=basic``. It enables the "
"naive mathematical formulas for complex division and multiplication with no "
"NaN checking of results. The default is ``-fno-cx-limited-range`` aliased to "
"``-fcomplex-arithmetic=full``. This option is enabled by the ``-ffast-math`` "
"option."
msgstr ""

#: ../../../UsersManual.rst:2033
msgid ""
"This option is aliased to ``-fcomplex-arithmetic=improved``. It enables the "
"naive mathematical formulas for complex multiplication and enables "
"application of Smith's algorithm for complex division. See SMITH, R. L. "
"Algorithm 116: Complex division. Commun. ACM 5, 8 (1962). The default is ``-"
"fno-cx-fortran-rules`` aliased to ``-fcomplex-arithmetic=full``."
msgstr ""

#: ../../../UsersManual.rst:2043
msgid "Accessing the floating point environment"
msgstr ""

#: ../../../UsersManual.rst:2044
msgid ""
"Many targets allow floating point operations to be configured to control "
"things such as how inexact results should be rounded and how exceptional "
"conditions should be handled. This configuration is called the floating "
"point environment. C and C++ restrict access to the floating point "
"environment by default, and the compiler is allowed to assume that all "
"operations are performed in the default environment. When code is compiled "
"in this default mode, operations that depend on the environment (such as "
"floating-point arithmetic and `FLT_ROUNDS`) may have undefined behavior if "
"the dynamic environment is not the default environment; for example, "
"`FLT_ROUNDS` may or may not simply return its default value for the target "
"instead of reading the dynamic environment, and floating-point operations "
"may be optimized as if the dynamic environment were the default.  Similarly, "
"it is undefined behavior to change the floating point environment in this "
"default mode, for example by calling the `fesetround` function. C provides "
"two pragmas to allow code to dynamically modify the floating point "
"environment:"
msgstr ""

#: ../../../UsersManual.rst:2059
msgid ""
"``#pragma STDC FENV_ACCESS ON`` allows dynamic changes to the entire "
"floating point environment."
msgstr ""

#: ../../../UsersManual.rst:2062
msgid ""
"``#pragma STDC FENV_ROUND FE_DYNAMIC`` allows dynamic changes to just the "
"floating point rounding mode.  This may be more optimizable than "
"``FENV_ACCESS ON`` because the compiler can still ignore the possibility of "
"floating-point exceptions by default."
msgstr ""

#: ../../../UsersManual.rst:2066
msgid ""
"Both of these can be used either at the start of a block scope, in which "
"case they cover all code in that scope (unless they're turned off in a child "
"scope), or at the top level in a file, in which case they cover all "
"subsequent function bodies until they're turned off.  Note that it is "
"undefined behavior to enter code that is *not* covered by one of these "
"pragmas from code that *is* covered by one of these pragmas unless the "
"floating point environment has been restored to its default state.  See the "
"C standard for more information about these pragmas."
msgstr ""

#: ../../../UsersManual.rst:2074
msgid ""
"The command line option ``-frounding-math`` behaves as if the translation "
"unit began with ``#pragma STDC FENV_ROUND FE_DYNAMIC``. The command line "
"option ``-ffp-model=strict`` behaves as if the translation unit began with "
"``#pragma STDC FENV_ACCESS ON``."
msgstr ""

#: ../../../UsersManual.rst:2078
msgid ""
"Code that just wants to use a specific rounding mode for specific floating "
"point operations can avoid most of the hazards of the dynamic floating point "
"environment by using ``#pragma STDC FENV_ROUND`` with a value other than "
"``FE_DYNAMIC``."
msgstr ""

#: ../../../UsersManual.rst:2085
msgid "A note about ``crtfastmath.o``"
msgstr ""

#: ../../../UsersManual.rst:2086
msgid ""
"``-ffast-math`` and ``-funsafe-math-optimizations`` without the ``-shared`` "
"option cause ``crtfastmath.o`` to be automatically linked, which adds a "
"static constructor that sets the FTZ/DAZ bits in MXCSR, affecting not only "
"the current compilation unit but all static and shared libraries included in "
"the program. This decision can be overridden by using either the flag ``-"
"mdaz-ftz`` or ``-mno-daz-ftz`` to respectively link or not link "
"``crtfastmath.o``."
msgstr ""

#: ../../../UsersManual.rst:2097
msgid "A note about ``__FLT_EVAL_METHOD__``"
msgstr ""

#: ../../../UsersManual.rst:2098
msgid ""
"The ``__FLT_EVAL_METHOD__`` is not defined as a traditional macro, and so it "
"will not appear when dumping preprocessor macros. Instead, the value "
"``__FLT_EVAL_METHOD__`` expands to is determined at the point of expansion "
"either from the value set by the ``-ffp-eval-method`` command line option or "
"from the target. This is because the ``__FLT_EVAL_METHOD__`` macro cannot "
"expand to the correct evaluation method in the presence of a ``#pragma`` "
"which alters the evaluation method. An error is issued if "
"``__FLT_EVAL_METHOD__`` is expanded inside a scope modified by ``#pragma "
"clang fp eval_method``."
msgstr ""

#: ../../../UsersManual.rst:2111
msgid "A note about Floating Point Constant Evaluation"
msgstr ""

#: ../../../UsersManual.rst:2113
msgid ""
"In C, the only place floating point operations are guaranteed to be "
"evaluated during translation is in the initializers of variables of static "
"storage duration, which are all notionally initialized before the program "
"begins executing (and thus before a non-default floating point environment "
"can be entered).  But C++ has many more contexts where floating point "
"constant evaluation occurs.  Specifically: for static/thread-local "
"variables, first try evaluating the initializer in a constant context, "
"including in the constant floating point environment (just like in C), and "
"then, if that fails, fall back to emitting runtime code to perform the "
"initialization (which might in general be in a different floating point "
"environment)."
msgstr ""

#: ../../../UsersManual.rst:2124
msgid "Consider this example when compiled with ``-frounding-math``"
msgstr ""

#: ../../../UsersManual.rst:2133
msgid ""
"The C++ rule is that initializers for static storage duration variables are "
"first evaluated during translation (therefore, in the default rounding "
"mode), and only evaluated at runtime (and therefore in the runtime rounding "
"mode) if the compile-time evaluation fails. This is in line with the C "
"rules; C11 F.8.5 says: *All computation for automatic initialization is done "
"(as if) at execution time; thus, it is affected by any operative modes and "
"raises floating-point exceptions as required by IEC 60559 (provided the "
"state for the FENV_ACCESS pragma is ‘‘on’’). All computation for "
"initialization of objects that have static or thread storage duration is "
"done (as if) at translation time.* C++ generalizes this by adding another "
"phase of initialization (at runtime) if the translation-time initialization "
"fails, but the translation-time evaluation of the initializer of succeeds, "
"it will be treated as a constant initializer."
msgstr ""

#: ../../../UsersManual.rst:2151
msgid "Controlling Code Generation"
msgstr ""

#: ../../../UsersManual.rst:2153
msgid ""
"Clang provides a number of ways to control code generation. The options are "
"listed below."
msgstr ""

#: ../../../UsersManual.rst:2158
msgid ""
"Turn on runtime checks or mitigations for various forms of undefined or "
"suspicious behavior. These are disabled by default."
msgstr ""

#: ../../../UsersManual.rst:2161
msgid ""
"The following options enable runtime checks for various forms of undefined "
"or suspicious behavior:"
msgstr ""

#: ../../../UsersManual.rst:2166
msgid ""
"``-fsanitize=address``: :doc:`AddressSanitizer`, a memory error detector."
msgstr ""

#: ../../../UsersManual.rst:2171
msgid "``-fsanitize=thread``: :doc:`ThreadSanitizer`, a data race detector."
msgstr ""

#: ../../../UsersManual.rst:2174
msgid ""
"``-fsanitize=memory``: :doc:`MemorySanitizer`, a detector of uninitialized "
"reads. Requires instrumentation of all program code."
msgstr ""

#: ../../../UsersManual.rst:2179
msgid ""
"``-fsanitize=undefined``: :doc:`UndefinedBehaviorSanitizer`, a fast and "
"compatible undefined behavior checker."
msgstr ""

#: ../../../UsersManual.rst:2183
msgid ""
"``-fsanitize=type``: :doc:`TypeSanitizer`, a detector for strict aliasing "
"violations."
msgstr ""

#: ../../../UsersManual.rst:2185
msgid ""
"``-fsanitize=dataflow``: :doc:`DataFlowSanitizer`, a general data flow "
"analysis."
msgstr ""

#: ../../../UsersManual.rst:2187
msgid ""
"``-fsanitize=cfi``: :doc:`control flow integrity <ControlFlowIntegrity>` "
"checks. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:2189
msgid ""
"``-fsanitize=kcfi``: kernel indirect call forward-edge control flow "
"integrity."
msgstr ""

#: ../../../UsersManual.rst:2191
msgid ""
"``-fsanitize=safe-stack``: :doc:`safe stack <SafeStack>` protection against "
"stack-based memory corruption errors."
msgstr ""

#: ../../../UsersManual.rst:2193
msgid ""
"``-fsanitize=realtime``: :doc:`RealtimeSanitizer`, a real-time safety "
"checker."
msgstr ""

#: ../../../UsersManual.rst:2196
msgid ""
"The following options enable runtime mitigations for various forms of "
"undefined or suspicious behavior:"
msgstr ""

#: ../../../UsersManual.rst:2199
msgid ""
"``-fsanitize=alloc-token``: Enables :doc:`allocation tokens <AllocToken>` "
"for allocator-level heap organization strategies, such as for security "
"hardening. It passes type-derived token IDs to a compatible memory "
"allocator. Requires linking against a token-aware allocator."
msgstr ""

#: ../../../UsersManual.rst:2204
msgid ""
"There are more fine-grained checks available: see the :ref:`list <ubsan-"
"checks>` of specific kinds of undefined behavior that can be detected and "
"the :ref:`list <cfi-schemes>` of control flow integrity schemes."
msgstr ""

#: ../../../UsersManual.rst:2209
msgid ""
"The ``-fsanitize=`` argument must also be provided when linking, in order to "
"link to the appropriate runtime library."
msgstr ""

#: ../../../UsersManual.rst:2212
msgid ""
"It is not possible to combine more than one of the ``-fsanitize=address``, "
"``-fsanitize=thread``, and ``-fsanitize=memory`` checkers in the same "
"program."
msgstr ""

#: ../../../UsersManual.rst:2220
msgid ""
"Controls which checks enabled by ``-fsanitize=`` flag are non-fatal. If the "
"check is fatal, program will halt after the first error of this kind is "
"detected and error report is printed."
msgstr ""

#: ../../../UsersManual.rst:2224
msgid ""
"By default, non-fatal checks are those enabled by :doc:"
"`UndefinedBehaviorSanitizer`, except for ``-fsanitize=return`` and ``-"
"fsanitize=unreachable``. Some sanitizers may not support recovery (or not "
"support it by default e.g. :doc:`AddressSanitizer`), and always crash the "
"program after the issue is detected."
msgstr ""

#: ../../../UsersManual.rst:2231
msgid ""
"Note that the ``-fsanitize-trap`` flag has precedence over this flag. This "
"means that if a check has been configured to trap elsewhere on the command "
"line, or if the check traps by default, this flag will not have any effect "
"unless that sanitizer's trapping behavior is disabled with ``-fno-sanitize-"
"trap``."
msgstr ""

#: ../../../UsersManual.rst:2237
msgid ""
"For example, if a command line contains the flags ``-fsanitize=undefined -"
"fsanitize-trap=undefined``, the flag ``-fsanitize-recover=alignment`` will "
"have no effect on its own; it will need to be accompanied by ``-fno-sanitize-"
"trap=alignment``."
msgstr ""

#: ../../../UsersManual.rst:2246
msgid ""
"Controls which checks enabled by the ``-fsanitize=`` flag trap. This option "
"is intended for use in cases where the sanitizer runtime cannot be used (for "
"instance, when building libc or a kernel module), or where the binary size "
"increase caused by the sanitizer runtime is a concern."
msgstr ""

#: ../../../UsersManual.rst:2251
msgid ""
"This flag is only compatible with :doc:`control flow integrity "
"<ControlFlowIntegrity>` schemes and :doc:`UndefinedBehaviorSanitizer` checks "
"other than ``vptr``."
msgstr ""

#: ../../../UsersManual.rst:2255
msgid "This flag is enabled by default for sanitizers in the ``cfi`` group."
msgstr ""

#: ../../../UsersManual.rst:2259
msgid ""
"Disable or modify sanitizer checks for objects (source files, functions, "
"variables, types) listed in the file. See :doc:`SanitizerSpecialCaseList` "
"for file format description."
msgstr ""

#: ../../../UsersManual.rst:2265
msgid ""
"Don't use ignorelist file, if it was specified earlier in the command line."
msgstr ""

#: ../../../UsersManual.rst:2269
msgid ""
"Enable simple code coverage in addition to certain sanitizers. See :doc:"
"`SanitizerCoverage` for more details."
msgstr ""

#: ../../../UsersManual.rst:2274
msgid ""
"Controls how address sanitizer code is generated. If enabled will always use "
"a function call instead of inlining the code. Turning this option on could "
"reduce the binary size, but might result in a worse run-time performance."
msgstr ""

#: ../../../UsersManual.rst:2278
msgid "See :doc: `AddressSanitizer` for more details."
msgstr ""

#: ../../../UsersManual.rst:2282
msgid ""
"Enable simple statistics gathering for the enabled sanitizers. See :doc:"
"`SanitizerStats` for more details."
msgstr ""

#: ../../../UsersManual.rst:2287
msgid "Deprecated alias for ``-fsanitize-trap=undefined``."
msgstr ""

#: ../../../UsersManual.rst:2291
msgid ""
"Enable cross-DSO control flow integrity checks. This flag modifies the "
"behavior of sanitizers in the ``cfi`` group to allow checking of cross-DSO "
"virtual and indirect calls."
msgstr ""

#: ../../../UsersManual.rst:2297
msgid ""
"Generalize pointers in return and argument types in function type signatures "
"checked by Control Flow Integrity indirect call checking. See :doc:"
"`ControlFlowIntegrity` for more details."
msgstr ""

#: ../../../UsersManual.rst:2303
msgid ""
"Normalize integers in return and argument types in function type signatures "
"checked by Control Flow Integrity indirect call checking. See :doc:"
"`ControlFlowIntegrity` for more details."
msgstr ""

#: ../../../UsersManual.rst:2307
msgid "This option is currently experimental."
msgstr ""

#: ../../../UsersManual.rst:2311
msgid ""
"Extends kernel indirect call forward-edge control flow integrity with "
"additional function arity information (for supported targets). See :doc:"
"`ControlFlowIntegrity` for more details."
msgstr ""

#: ../../../UsersManual.rst:2317
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects, i.e. the vptr is invariant during an object's lifetime. This "
"enables better devirtualization. Turned off by default, because it is still "
"experimental."
msgstr ""

#: ../../../UsersManual.rst:2324
msgid ""
"Enable whole-program vtable optimizations, such as single-implementation "
"devirtualization and virtual constant propagation, for classes with :doc:"
"`hidden LTO visibility <LTOVisibility>`. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:2330
msgid ""
"Controls splitting the :doc:`LTO unit <LTOVisibility>` into regular LTO and :"
"doc:`ThinLTO` portions, when compiling with -flto=thin. Defaults to false "
"unless ``-fsanitize=cfi`` or ``-fwhole-program-vtables`` are specified, in "
"which case it defaults to true. Splitting is required with "
"``fsanitize=cfi``, and it is an error to disable via ``-fno-split-lto-"
"unit``. Splitting is optional with ``-fwhole-program-vtables``, however, it "
"enables more aggressive whole program vtable optimizations (specifically "
"virtual constant propagation)."
msgstr ""

#: ../../../UsersManual.rst:2339
msgid ""
"When enabled, vtable definitions and select virtual functions are placed in "
"the split regular LTO module, enabling more aggressive whole program vtable "
"optimizations required for CFI and virtual constant propagation. However, "
"this can increase the LTO link time and memory requirements over pure "
"ThinLTO, as all split regular LTO modules are merged and LTO linked with "
"regular LTO."
msgstr ""

#: ../../../UsersManual.rst:2348
msgid ""
"When enabled, allows the compiler to assume that each object file passed to "
"the linker has a unique identifier. The identifier for an object file is "
"either the source file path or the value of the argument `-funique-source-"
"file-identifier` if specified. This is useful for reducing link times when "
"doing ThinLTO in combination with whole-program devirtualization or CFI."
msgstr ""

#: ../../../UsersManual.rst:2355
msgid ""
"The full source path or identifier passed to the compiler must be unique. "
"This means that, for example, the following is a usage error:"
msgstr ""

#: ../../../UsersManual.rst:2367
msgid "but this is not:"
msgstr ""

#: ../../../UsersManual.rst:2375
msgid ""
"A misuse of this flag may result in a duplicate symbol error at link time."
msgstr ""

#: ../../../UsersManual.rst:2380
msgid ""
"Used with `-funique-source-file-names` to specify a source file identifier."
msgstr ""

#: ../../../UsersManual.rst:2385
msgid ""
"In order to improve devirtualization, forces emitting of vtables even in "
"modules where it isn't necessary. It causes more inline virtual functions to "
"be emitted."
msgstr ""

#: ../../../UsersManual.rst:2391
msgid "Don't assume that the C++'s new operator is sane."
msgstr ""

#: ../../../UsersManual.rst:2393
msgid ""
"This option tells the compiler to do not assume that C++'s global new "
"operator will always return a pointer that does not alias any other pointer "
"when the function returns."
msgstr ""

#: ../../../UsersManual.rst:2399
msgid ""
"Assume that an exception object' destructor will not throw, and generate "
"less code for catch handlers. A throw expression of a type with a "
"potentially-throwing destructor will lead to an error."
msgstr ""

#: ../../../UsersManual.rst:2403
msgid ""
"By default, Clang assumes that the exception object may have a throwing "
"destructor. For the Itanium C++ ABI, Clang generates a landing pad to "
"destroy local variables and call ``_Unwind_Resume`` for the code ``catch "
"(...) { ... }``. This option tells Clang that an exception object's "
"destructor will not throw and code simplification is possible."
msgstr ""

#: ../../../UsersManual.rst:2411
msgid ""
"Instruct code generator to emit a function call to the specified function "
"name for ``__builtin_trap()``."
msgstr ""

#: ../../../UsersManual.rst:2414
msgid ""
"LLVM code generator translates ``__builtin_trap()`` to a trap instruction if "
"it is supported by the target ISA. Otherwise, the builtin is translated into "
"a call to ``abort``. If this option is set, then the code generator will "
"always lower the builtin to a call to the specified function regardless of "
"whether the target ISA has a trap instruction. This option is useful for "
"environments (e.g. deeply embedded) where a trap cannot be properly handled, "
"or when some custom behavior is desired."
msgstr ""

#: ../../../UsersManual.rst:2425
msgid "Select which TLS model to use."
msgstr ""

#: ../../../UsersManual.rst:2427
msgid ""
"Valid values are: ``global-dynamic``, ``local-dynamic``, ``initial-exec`` "
"and ``local-exec``. The default value is ``global-dynamic``. The compiler "
"may use a different model if the selected model is not supported by the "
"target, or if a more efficient model can be used. The TLS model can be "
"overridden per variable using the ``tls_model`` attribute."
msgstr ""

#: ../../../UsersManual.rst:2436
msgid "Select emulated TLS model, which overrides all -ftls-model choices."
msgstr ""

#: ../../../UsersManual.rst:2438
msgid ""
"In emulated TLS mode, all access to TLS variables are converted to calls to "
"__emutls_get_address in the runtime library."
msgstr ""

#: ../../../UsersManual.rst:2443
msgid ""
"Select the ARM modes (arm or thumb) that support hardware division "
"instructions."
msgstr ""

#: ../../../UsersManual.rst:2446
msgid ""
"Valid values are: ``arm``, ``thumb`` and ``arm,thumb``. This option is used "
"to indicate which mode (arm or thumb) supports hardware division "
"instructions. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:2453
msgid "Enable or disable CRC instructions."
msgstr ""

#: ../../../UsersManual.rst:2455
msgid ""
"This option is used to indicate whether CRC instructions are to be "
"generated. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:2458
msgid "CRC instructions are enabled by default on ARMv8."
msgstr ""

#: ../../../UsersManual.rst:2462
msgid "Generate code which only uses the general purpose registers."
msgstr ""

#: ../../../UsersManual.rst:2464
msgid ""
"This option restricts the generated code to use general registers only. This "
"only applies to the AArch64 architecture."
msgstr ""

#: ../../../UsersManual.rst:2469
msgid "Control the usage of compact branches for MIPSR6."
msgstr ""

#: ../../../UsersManual.rst:2471
msgid ""
"Valid values are: ``never``, ``optimal`` and ``always``. The default value "
"is ``optimal`` which generates compact branches when a delay slot cannot be "
"filled. ``never`` disables the usage of compact branches and ``always`` "
"generates compact branches whenever possible."
msgstr ""

#: ../../../UsersManual.rst:2479
msgid ""
"Instruct the code generator to not enforce a higher alignment than the given "
"number (of bytes) when accessing memory via an opaque pointer or reference. "
"This cap is ignored when directly accessing a variable or when the pointee "
"type has an explicit “aligned” attribute."
msgstr ""

#: ../../../UsersManual.rst:2484
msgid ""
"The value should usually be determined by the properties of the system "
"allocator. Some builtin types, especially vector types, have very high "
"natural alignments; when working with values of those types, Clang usually "
"wants to use instructions that take advantage of that alignment.  However, "
"many system allocators do not promise to return memory that is more than 8-"
"byte or 16-byte-aligned.  Use this option to limit the alignment that the "
"compiler can assume for an arbitrary pointer, which may point onto the heap."
msgstr ""

#: ../../../UsersManual.rst:2492
msgid ""
"This option does not affect the ABI alignment of types; the layout of "
"structs and unions and the value returned by the alignof operator remain the "
"same."
msgstr ""

#: ../../../UsersManual.rst:2495
msgid ""
"This option can be overridden on a case-by-case basis by putting an explicit "
"“aligned” alignment on a struct, union, or typedef.  For example:"
msgstr ""

#: ../../../UsersManual.rst:2511
msgid ""
"Controls whether Clang emits an address-significance table into the object "
"file. Address-significance tables allow linkers to implement `safe ICF "
"<https://research.google.com/pubs/archive/36912.pdf>`_ without the false "
"positives that can result from other implementation techniques such as "
"relocation scanning. Address-significance tables are enabled by default on "
"ELF targets when using the integrated assembler. This flag currently only "
"has an effect on ELF targets."
msgstr ""

#: ../../../UsersManual.rst:2523
msgid ""
"Controls whether Clang emits a unique (best-effort) symbol name for internal "
"linkage symbols.  When this option is set, compiler hashes the main source "
"file path from the command line and appends it to all internal symbols. If a "
"program contains multiple objects compiled with the same command-line source "
"file path, the symbols are not guaranteed to be unique.  This option is "
"particularly useful in attributing profile information to the correct "
"function when multiple functions with the same private linkage name exist in "
"the binary."
msgstr ""

#: ../../../UsersManual.rst:2532
msgid ""
"It should be noted that this option cannot guarantee uniqueness and the "
"following is an example where it is not unique when two modules contain "
"symbols with the same private linkage name:"
msgstr ""

#: ../../../UsersManual.rst:2549
msgid ""
"Controls how Clang emits text sections for basic blocks. With values ``all`` "
"and ``list=<arg>``, each basic block or a subset of basic blocks can be "
"placed in its own unique section."
msgstr ""

#: ../../../UsersManual.rst:2553
msgid ""
"With the ``list=<arg>`` option, a file containing the subset of basic blocks "
"that need to placed in unique sections can be specified.  The format of the "
"file is as follows.  For example, ``list=spec.txt`` where ``spec.txt`` is "
"the following:"
msgstr ""

#: ../../../UsersManual.rst:2564
msgid ""
"will place the machine basic block with ``id 2`` in function ``foo`` in a "
"unique section.  It will also place all basic blocks of functions ``bar`` in "
"unique sections."
msgstr ""

#: ../../../UsersManual.rst:2568
msgid ""
"Further, section clusters can also be specified using the ``list=<arg>`` "
"option.  For example, ``list=spec.txt`` where ``spec.txt`` contains:"
msgstr ""

#: ../../../UsersManual.rst:2577
msgid ""
"will create two unique sections for function ``foo`` with the first "
"containing the odd numbered basic blocks and the second containing the even "
"numbered basic blocks."
msgstr ""

#: ../../../UsersManual.rst:2581
msgid ""
"Basic block sections allow the linker to reorder basic blocks and enables "
"link-time optimizations like whole program inter-procedural basic block "
"reordering."
msgstr ""

#: ../../../UsersManual.rst:2587
msgid ""
"Emit the raw codegen (CG) data into custom sections in the object file. "
"Currently, this option also combines the raw CG data from the object files "
"into an indexed CG data file specified by the <path>, for LLD MachO only. "
"When the <path> is not specified, `default.cgdata` is created. The CG data "
"file combines all the outlining instances that occurred locally in each "
"object file."
msgstr ""

#: ../../../UsersManual.rst:2598
msgid ""
"For linkers that do not yet support this feature, `llvm-cgdata` can be used "
"manually to merge this CG data in object files."
msgstr ""

#: ../../../UsersManual.rst:2608
msgid ""
"Read the codegen data from the specified path to more effectively outline "
"functions across compilation units. When the <path> is not specified, "
"`default.cgdata` is used. This option can create many identically outlined "
"functions that can be optimized by the conventional linker’s identical code "
"folding (ICF)."
msgstr ""

#: ../../../UsersManual.rst:2621
msgid "Strict Aliasing"
msgstr ""

#: ../../../UsersManual.rst:2623
msgid ""
"The C and C++ standards require accesses to objects in memory to use l-"
"values of an appropriate type for the object. This is called *strict "
"aliasing* or *type-based alias analysis*. Strict aliasing enhances a variety "
"of powerful memory optimizations, including reordering, combining, and "
"eliminating memory accesses. These optimizations can lead to unexpected "
"behavior in code that violates the strict aliasing rules. For example:"
msgstr ""

#: ../../../UsersManual.rst:2642
msgid ""
"Strict aliasing can be explicitly enabled with ``-fstrict-aliasing`` and "
"disabled with ``-fno-strict-aliasing``. ``clang-cl`` defaults to ``-fno-"
"strict-aliasing``. Otherwise, Clang defaults to ``-fstrict-aliasing``."
msgstr ""

#: ../../../UsersManual.rst:2646
msgid ""
"C and C++ specify slightly different rules for strict aliasing. To improve "
"language interoperability, Clang allows two types to alias if either "
"language would permit it. This includes applying the C++ similar types rule "
"to C, allowing ``int **`` to alias ``int const * const *``. Clang also "
"relaxes the standard aliasing rules in the following ways:"
msgstr ""

#: ../../../UsersManual.rst:2652
msgid ""
"All integer types of the same size are permitted to alias each other, "
"including signed and unsigned types."
msgstr ""

#: ../../../UsersManual.rst:2654
msgid ""
"``void*`` is permitted to alias any pointer type, ``void**`` is permitted to "
"alias any pointer to pointer type, and so on."
msgstr ""

#: ../../../UsersManual.rst:2657
msgid ""
"Code which violates strict aliasing has undefined behavior. A program that "
"works in one version of Clang may not work in another because of changes to "
"the optimizer. Clang provides a :doc:`TypeSanitizer` to help detect "
"violations of the strict aliasing rules, but it is currently still "
"experimental. Code that is known to violate strict aliasing should generally "
"be built with ``-fno-strict-aliasing`` if the violation cannot be fixed."
msgstr ""

#: ../../../UsersManual.rst:2664
msgid "Clang supports several ways to fix a violation of strict aliasing:"
msgstr ""

#: ../../../UsersManual.rst:2666
msgid ""
"L-values of the character types ``char`` and ``unsigned char`` (as well as "
"other types, depending on the standard) are permitted to access objects of "
"any type."
msgstr ""

#: ../../../UsersManual.rst:2670
msgid ""
"Library functions such as ``memcpy`` and ``memset`` are specified as "
"treating memory as characters and therefore are not limited by strict "
"aliasing. If a value of one type must be reinterpreted as another (e.g. to "
"read the bits of a floating-point number), use ``memcpy`` to copy the "
"representation to an object of the destination type. This has no overhead "
"over a direct l-value access because Clang should reliably optimize calls to "
"these functions to use simple loads and stores when they are used with small "
"constant sizes."
msgstr ""

#: ../../../UsersManual.rst:2678
msgid ""
"The attribute ``may_alias`` can be added to a ``typedef`` to give l-values "
"of that type the same aliasing power as the character types."
msgstr ""

#: ../../../UsersManual.rst:2681
msgid ""
"Clang makes a best effort to avoid obvious miscompilations from strict "
"aliasing by only considering type information when it cannot prove that two "
"accesses must refer to the same memory. However, it is not recommended that "
"programmers intentionally rely on this instead of using one of the solutions "
"above because it is too easy for the compiler's analysis to be blocked in "
"surprising ways."
msgstr ""

#: ../../../UsersManual.rst:2687
msgid ""
"In Clang 20, Clang strengthened its implementation of strict aliasing for "
"accesses of pointer type. Previously, all accesses of pointer type were "
"permitted to alias each other, but Clang now distinguishes different "
"pointers by their pointee type, except as limited by the relaxations around "
"qualifiers and ``void*`` described above. The previous behavior of treating "
"all pointers as aliasing can be restored using ``-fno-pointer-tbaa``."
msgstr ""

#: ../../../UsersManual.rst:2695
msgid "Profile Guided Optimization"
msgstr ""

#: ../../../UsersManual.rst:2697
msgid ""
"Profile information enables better optimization. For example, knowing that a "
"branch is taken very frequently helps the compiler make better decisions "
"when ordering basic blocks. Knowing that a function ``foo`` is called more "
"frequently than another function ``bar`` helps the inliner. Optimization "
"levels ``-O2`` and above are recommended for use of profile guided "
"optimization."
msgstr ""

#: ../../../UsersManual.rst:2703
msgid ""
"Clang supports profile guided optimization with two different kinds of "
"profiling. A sampling profiler can generate a profile with very low runtime "
"overhead, or you can build an instrumented version of the code that collects "
"more detailed profile information. Both kinds of profiles can provide "
"execution counts for instructions in the code and information on branches "
"taken and function invocation."
msgstr ""

#: ../../../UsersManual.rst:2710
msgid ""
"Regardless of which kind of profiling you use, be careful to collect "
"profiles by running your code with inputs that are representative of the "
"typical behavior. Code that is not exercised in the profile will be "
"optimized as if it is unimportant, and the compiler may make poor "
"optimization choices for code that is disproportionately used while "
"profiling."
msgstr ""

#: ../../../UsersManual.rst:2717
msgid "Differences Between Sampling and Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:2719
msgid ""
"Although both techniques are used for similar purposes, there are important "
"differences between the two:"
msgstr ""

#: ../../../UsersManual.rst:2722
msgid ""
"Profile data generated with one cannot be used by the other, and there is no "
"conversion tool that can convert one to the other. So, a profile generated "
"via ``-fprofile-generate`` or ``-fprofile-instr-generate`` must be used with "
"``-fprofile-use`` or ``-fprofile-instr-use``.  Similarly, sampling profiles "
"generated by external profilers must be converted and used with ``-fprofile-"
"sample-use`` or ``-fauto-profile``."
msgstr ""

#: ../../../UsersManual.rst:2729
msgid ""
"Instrumentation profile data can be used for code coverage analysis and "
"optimization."
msgstr ""

#: ../../../UsersManual.rst:2732
msgid ""
"Sampling profiles can only be used for optimization. They cannot be used for "
"code coverage analysis. Although it would be technically possible to use "
"sampling profiles for code coverage, sample-based profiles are too coarse-"
"grained for code coverage purposes; it would yield poor results."
msgstr ""

#: ../../../UsersManual.rst:2737
msgid ""
"Sampling profiles must be generated by an external tool. The profile "
"generated by that tool must then be converted into a format that can be read "
"by LLVM. The section on sampling profilers describes one of the supported "
"sampling profile formats."
msgstr ""

#: ../../../UsersManual.rst:2744
msgid "Using Sampling Profilers"
msgstr ""

#: ../../../UsersManual.rst:2746
msgid ""
"Sampling profilers are used to collect runtime information, such as hardware "
"counters, while your application executes. They are typically very efficient "
"and do not incur a large runtime overhead. The sample data collected by the "
"profiler can be used during compilation to determine what the most executed "
"areas of the code are."
msgstr ""

#: ../../../UsersManual.rst:2752
msgid ""
"Using the data from a sample profiler requires some changes in the way a "
"program is built. Before the compiler can use profiling information, the "
"code needs to execute under the profiler. The following is the usual build "
"cycle when using sample profilers for optimization:"
msgstr ""

#: ../../../UsersManual.rst:2757
msgid ""
"Build the code with source line table information. You can use all the usual "
"build flags that you always build your application with. The only "
"requirement is that DWARF debug info including source line information is "
"generated. This DWARF information is important for the profiler to be able "
"to map instructions back to source line locations. The usefulness of this "
"DWARF information can be improved with the ``-fdebug-info-for-profiling`` "
"and ``-funique-internal-linkage-names`` options."
msgstr ""

#: ../../../UsersManual.rst:2765 ../../../UsersManual.rst:2868
msgid "On Linux:"
msgstr ""

#: ../../../UsersManual.rst:2773
msgid ""
"While MSVC-style targets default to CodeView debug information, DWARF debug "
"information is required to generate source-level LLVM profiles. Use ``-"
"gdwarf`` to include DWARF debug information:"
msgstr ""

#: ../../../UsersManual.rst:2785
msgid ""
":ref:`-funique-internal-linkage-names <funique_internal_linkage_names>` "
"generates unique names based on given command-line source file paths. If "
"your build system uses absolute source paths and these paths may change "
"between steps 1 and 4, then the uniqued function names may change and result "
"in unused profile data. Consider omitting this option in such cases."
msgstr ""

#: ../../../UsersManual.rst:2791
msgid ""
"Run the executable under a sampling profiler. The specific profiler you use "
"does not really matter, as long as its output can be converted into the "
"format that the LLVM optimizer understands."
msgstr ""

#: ../../../UsersManual.rst:2795
msgid ""
"Two such profilers are the Linux Perf profiler (https://perf.wiki.kernel."
"org/) and Intel's Sampling Enabling Product (SEP), available as part of "
"`Intel VTune <https://software.intel.com/content/www/us/en/develop/tools/"
"oneapi/components/vtune-profiler.html>`_. While Perf is Linux-specific, SEP "
"can be used on Linux, Windows, and FreeBSD."
msgstr ""

#: ../../../UsersManual.rst:2801
msgid ""
"The LLVM tool ``llvm-profgen`` can convert output of either Perf or SEP. An "
"external project, `AutoFDO <https://github.com/google/autofdo>`_, also "
"provides a ``create_llvm_prof`` tool which supports Linux Perf output."
msgstr ""

#: ../../../UsersManual.rst:2805
msgid "When using Perf:"
msgstr ""

#: ../../../UsersManual.rst:2811
msgid ""
"If the event above is unavailable, ``branches:u`` is probably next-best."
msgstr ""

#: ../../../UsersManual.rst:2813
msgid ""
"Note the use of the ``-b`` flag. This tells Perf to use the Last Branch "
"Record (LBR) to record call chains. While this is not strictly required, it "
"provides better call information, which improves the accuracy of the profile "
"data."
msgstr ""

#: ../../../UsersManual.rst:2818
msgid "When using SEP:"
msgstr ""

#: ../../../UsersManual.rst:2824
msgid ""
"This produces a ``code.perf.data.script`` output which can be used with "
"``llvm-profgen``'s ``--perfscript`` input option."
msgstr ""

#: ../../../UsersManual.rst:2827
msgid ""
"Convert the collected profile data to LLVM's sample profile format. This is "
"currently supported via the `AutoFDO <https://github.com/google/autofdo>`_ "
"converter ``create_llvm_prof``. Once built and installed, you can convert "
"the ``perf.data`` file to LLVM using the command:"
msgstr ""

#: ../../../UsersManual.rst:2836
msgid ""
"This will read ``perf.data`` and the binary file ``./code`` and emit the "
"profile data in ``code.prof``. Note that if you ran ``perf`` without the ``-"
"b`` flag, you need to use ``--use_lbr=false`` when calling "
"``create_llvm_prof``."
msgstr ""

#: ../../../UsersManual.rst:2841
msgid ""
"Alternatively, the LLVM tool ``llvm-profgen`` can also be used to generate "
"the LLVM sample profile:"
msgstr ""

#: ../../../UsersManual.rst:2848
msgid ""
"Please note, ``perf.data`` must be collected with ``-b`` flag to Linux "
"``perf`` for the above step to work."
msgstr ""

#: ../../../UsersManual.rst:2851
msgid ""
"When using SEP the output is in the textual format corresponding to ``llvm-"
"profgen --perfscript``. For example:"
msgstr ""

#: ../../../UsersManual.rst:2859
msgid ""
"Build the code again using the collected profile. This step feeds the "
"profile back to the optimizers. This should result in a binary that executes "
"faster than the original one. Note that you are not required to build the "
"code with the exact same arguments that you used in the first step. The only "
"requirement is that you build the code with the same debug info options and "
"``-fprofile-sample-use``. ``-gdwarf`` and ``-gline-tables-only`` can be "
"omitted if you do not need debug info in the final binary."
msgstr ""

#: ../../../UsersManual.rst:2876 ../../../UsersManual.rst:2895
msgid "On Windows:"
msgstr ""

#: ../../../UsersManual.rst:2884
msgid ""
"[OPTIONAL] Sampling-based profiles can have inaccuracies or missing block/ "
"edge counters. The profile inference algorithm (profi) can be used to infer "
"missing blocks and edge counts, and improve the quality of profile data. "
"Enable it with ``-fsample-profile-use-profi``. For example, on Linux:"
msgstr ""

#: ../../../UsersManual.rst:2904
msgid "Sample Profile Formats"
msgstr ""

#: ../../../UsersManual.rst:2906
msgid ""
"Since external profilers generate profile data in a variety of custom "
"formats, the data generated by the profiler must be converted into a format "
"that can be read by the backend. LLVM supports three different sample "
"profile formats:"
msgstr ""

#: ../../../UsersManual.rst:2910
msgid ""
"ASCII text. This is the easiest one to generate. The file is divided into "
"sections, which correspond to each of the functions with profile "
"information. The format is described below. It can also be generated from "
"the binary or gcov formats using the ``llvm-profdata`` tool."
msgstr ""

#: ../../../UsersManual.rst:2915
msgid ""
"Binary encoding. This uses a more efficient encoding that yields smaller "
"profile files. This is the format generated by the ``create_llvm_prof`` tool "
"in https://github.com/google/autofdo."
msgstr ""

#: ../../../UsersManual.rst:2919
msgid ""
"GCC encoding. This is based on the gcov format, which is accepted by GCC. It "
"is only interesting in environments where GCC and Clang co-exist. This "
"encoding is only generated by the ``create_gcov`` tool in https://github.com/"
"google/autofdo. It can be read by LLVM and ``llvm-profdata``, but it cannot "
"be generated by either."
msgstr ""

#: ../../../UsersManual.rst:2925
msgid ""
"If you are using Linux Perf to generate sampling profiles, you can use the "
"conversion tool ``create_llvm_prof`` described in the previous section. "
"Otherwise, you will need to write a conversion tool that converts your "
"profiler's native format into one of these three."
msgstr ""

#: ../../../UsersManual.rst:2932
msgid "Sample Profile Text Format"
msgstr ""

#: ../../../UsersManual.rst:2934
msgid ""
"This section describes the ASCII text format for sampling profiles. It is, "
"arguably, the easiest one to generate. If you are interested in generating "
"any of the other two, consult the ``ProfileData`` library in LLVM's source "
"tree (specifically, ``include/llvm/ProfileData/SampleProfReader.h``)."
msgstr ""

#: ../../../UsersManual.rst:2952
msgid ""
"This is a nested tree in which the indentation represents the nesting level "
"of the inline stack. There are no blank lines in the file. And the spacing "
"within a single line is fixed. Additional spaces will result in an error "
"while reading the file."
msgstr ""

#: ../../../UsersManual.rst:2957
msgid "Any line starting with the '#' character is completely ignored."
msgstr ""

#: ../../../UsersManual.rst:2959
msgid ""
"Inlined calls are represented with indentation. The Inline stack is a stack "
"of source locations in which the top of the stack represents the leaf "
"function, and the bottom of the stack represents the actual symbol to which "
"the instruction belongs."
msgstr ""

#: ../../../UsersManual.rst:2964
msgid ""
"Function names must be mangled in order for the profile loader to match them "
"in the current translation unit. The two numbers in the function header "
"specify how many total samples were accumulated in the function (first "
"number), and the total number of samples accumulated in the prologue of the "
"function (second number). This head sample count provides an indicator of "
"how frequently the function is invoked."
msgstr ""

#: ../../../UsersManual.rst:2971
msgid "There are two types of lines in the function body."
msgstr ""

#: ../../../UsersManual.rst:2973
msgid ""
"Sampled line represents the profile information of a source location. "
"``offsetN[.discriminator]: number_of_samples [fn5:num fn6:num ... ]``"
msgstr ""

#: ../../../UsersManual.rst:2976
msgid ""
"Callsite line represents the profile information of an inlined callsite. "
"``offsetA[.discriminator]: fnA:num_of_total_samples``"
msgstr ""

#: ../../../UsersManual.rst:2979
msgid ""
"Each sampled line may contain several items. Some are optional (marked "
"below):"
msgstr ""

#: ../../../UsersManual.rst:2982
msgid ""
"Source line offset. This number represents the line number in the function "
"where the sample was collected. The line number is always relative to the "
"line where symbol of the function is defined. So, if the function has its "
"header at line 280, the offset 13 is at line 293 in the file."
msgstr ""

#: ../../../UsersManual.rst:2988
msgid ""
"Note that this offset should never be a negative number. This could happen "
"in cases like macros. The debug machinery will register the line number at "
"the point of macro expansion. So, if the macro was expanded in a line before "
"the start of the function, the profile converter should emit a 0 as the "
"offset (this means that the optimizers will not be able to associate a "
"meaningful weight to the instructions in the macro)."
msgstr ""

#: ../../../UsersManual.rst:2996
msgid ""
"[OPTIONAL] Discriminator. This is used if the sampled program was compiled "
"with DWARF discriminator support (http://wiki.dwarfstd.org/index.php?"
"title=Path_Discriminators). DWARF discriminators are unsigned integer values "
"that allow the compiler to distinguish between multiple execution paths on "
"the same source line location."
msgstr ""

#: ../../../UsersManual.rst:3003
msgid ""
"For example, consider the line of code ``if (cond) foo(); else bar();``. If "
"the predicate ``cond`` is true 80% of the time, then the edge into function "
"``foo`` should be considered to be taken most of the time. But both calls to "
"``foo`` and ``bar`` are at the same source line, so a sample count at that "
"line is not sufficient. The compiler needs to know which part of that line "
"is taken more frequently."
msgstr ""

#: ../../../UsersManual.rst:3011
msgid ""
"This is what discriminators provide. In this case, the calls to ``foo`` and "
"``bar`` will be at the same line, but will have different discriminator "
"values. This allows the compiler to correctly set edge weights into ``foo`` "
"and ``bar``."
msgstr ""

#: ../../../UsersManual.rst:3016
msgid ""
"Number of samples. This is an integer quantity representing the number of "
"samples collected by the profiler at this source location."
msgstr ""

#: ../../../UsersManual.rst:3020
msgid ""
"[OPTIONAL] Potential call targets and samples. If present, this line "
"contains a call instruction. This models both direct and number of samples. "
"For example,"
msgstr ""

#: ../../../UsersManual.rst:3028
msgid ""
"The above means that at relative line offset 130 there is a call instruction "
"that calls one of ``foo()``, ``bar()`` and ``baz()``, with ``baz()`` being "
"the relatively more frequently called target."
msgstr ""

#: ../../../UsersManual.rst:3032
msgid ""
"As an example, consider a program with the call chain ``main -> foo -> "
"bar``. When built with optimizations enabled, the compiler may inline the "
"calls to ``bar`` and ``foo`` inside ``main``. The generated profile could "
"then be something like this:"
msgstr ""

#: ../../../UsersManual.rst:3045
msgid ""
"This profile indicates that there were a total of 35,504 samples collected "
"in main. All of those were at line 1 (the call to ``foo``). Of those, 31,977 "
"were spent inside the body of ``bar``. The last line of the profile (``2: "
"0``) corresponds to line 2 inside ``main``. No samples were collected there."
msgstr ""

#: ../../../UsersManual.rst:3054
msgid "Profiling with Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:3056
msgid ""
"Clang also supports profiling via instrumentation. This requires building a "
"special instrumented version of the code and has some runtime overhead "
"during the profiling, but it provides more detailed results than a sampling "
"profiler. It also provides reproducible results, at least to the extent that "
"the code behaves consistently across runs."
msgstr ""

#: ../../../UsersManual.rst:3062
msgid ""
"Clang supports two types of instrumentation: frontend-based and IR-based. "
"Frontend-based instrumentation can be enabled with the option ``-fprofile-"
"instr-generate``, and IR-based instrumentation can be enabled with the "
"option ``-fprofile-generate``. For best performance with PGO, IR-based "
"instrumentation should be used. It has the benefits of lower instrumentation "
"overhead, smaller raw profile size, and better runtime performance. Frontend-"
"based instrumentation, on the other hand, has better source correlation, so "
"it should be used with source line-based coverage testing."
msgstr ""

#: ../../../UsersManual.rst:3071
msgid ""
"The flag ``-fcs-profile-generate`` also instruments programs using the same "
"instrumentation method as ``-fprofile-generate``. However, it performs a "
"post-inline late instrumentation and can produce context-sensitive profiles."
msgstr ""

#: ../../../UsersManual.rst:3076
msgid ""
"Here are the steps for using profile guided optimization with "
"instrumentation:"
msgstr ""

#: ../../../UsersManual.rst:3079
msgid ""
"Build an instrumented version of the code by compiling and linking with the "
"``-fprofile-generate`` or ``-fprofile-instr-generate`` option."
msgstr ""

#: ../../../UsersManual.rst:3086
msgid ""
"Run the instrumented executable with inputs that reflect the typical usage. "
"By default, the profile data will be written to a ``default.profraw`` file "
"in the current directory. You can override that default by using option ``-"
"fprofile-instr-generate=`` or by setting the ``LLVM_PROFILE_FILE`` "
"environment variable to specify an alternate file. If non-default file name "
"is specified by both the environment variable and the command line option, "
"the environment variable takes precedence. The file name pattern specified "
"can include different modifiers: ``%p``, ``%h``, ``%m``, ``%b``, ``%t``, and "
"``%c``."
msgstr ""

#: ../../../UsersManual.rst:3096
msgid ""
"Any instance of ``%p`` in that file name will be replaced by the process ID, "
"so that you can easily distinguish the profile output from multiple runs."
msgstr ""

#: ../../../UsersManual.rst:3104
msgid ""
"The modifier ``%h`` can be used in scenarios where the same instrumented "
"binary is run in multiple different host machines dumping profile data to a "
"shared network based storage. The ``%h`` specifier will be substituted with "
"the hostname so that profiles collected from different hosts do not clobber "
"each other."
msgstr ""

#: ../../../UsersManual.rst:3110
msgid ""
"While the use of ``%p`` specifier can reduce the likelihood for the profiles "
"dumped from different processes to clobber each other, such clobbering can "
"still happen because of the ``pid`` re-use by the OS. Another side-effect of "
"using ``%p`` is that the storage requirement for raw profile data files is "
"greatly increased.  To avoid issues like this, the ``%m`` specifier can used "
"in the profile name.  When this specifier is used, the profiler runtime will "
"substitute ``%m`` with an integer identifier associated with the "
"instrumented binary. Additionally, multiple raw profiles dumped from "
"different processes that share a file system (can be on different hosts) "
"will be automatically merged by the profiler runtime during the dumping. If "
"the program links in multiple instrumented shared libraries, each library "
"will dump the profile data into its own profile data file (with its integer "
"id embedded in the profile name). Note that the merging enabled by ``%m`` is "
"for raw profile data generated by profiler runtime. The resulting merged "
"\"raw\" profile data file still needs to be converted to a different format "
"expected by the compiler ( see step 3 below)."
msgstr ""

#: ../../../UsersManual.rst:3130
msgid ""
"Although rare, binary signatures used by the ``%m`` specifier can have "
"collisions. In this case, the ``%b`` specifier, which expands to the binary "
"ID (build ID in ELF and COFF), can be added. To use it, the program should "
"be compiled with the build ID linker option (``--build-id`` for GNU ld or "
"LLD, ``/build-id`` for lld-link on Windows). Linux, Windows and AIX are "
"supported."
msgstr ""

#: ../../../UsersManual.rst:3136
msgid ""
"See `this <SourceBasedCodeCoverage.html#running-the-instrumented-program>`_ "
"section about the ``%t``, and ``%c`` modifiers."
msgstr ""

#: ../../../UsersManual.rst:3139
msgid ""
"Combine profiles from multiple runs and convert the \"raw\" profile format "
"to the input expected by clang. Use the ``merge`` command of the ``llvm-"
"profdata`` tool to do this."
msgstr ""

#: ../../../UsersManual.rst:3147
msgid ""
"Note that this step is necessary even when there is only one \"raw\" "
"profile, since the merge operation also changes the file format."
msgstr ""

#: ../../../UsersManual.rst:3150
msgid ""
"Build the code again using the ``-fprofile-use`` or ``-fprofile-instr-use`` "
"option to specify the collected profile data."
msgstr ""

#: ../../../UsersManual.rst:3157
msgid ""
"You can repeat step 4 as often as you like without regenerating the profile. "
"As you make changes to your code, clang may no longer be able to use the "
"profile data. It will warn you when this happens."
msgstr ""

#: ../../../UsersManual.rst:3161
msgid ""
"Note that ``-fprofile-use`` option is semantically equivalent to its GCC "
"counterpart, it *does not* handle profile formats produced by GCC. Both ``-"
"fprofile-use`` and ``-fprofile-instr-use`` accept profiles in the indexed "
"format, regardeless whether it is produced by frontend or the IR pass."
msgstr ""

#: ../../../UsersManual.rst:3168
msgid ""
"The ``-fprofile-generate`` and ``-fprofile-generate=`` flags will use an "
"alternative instrumentation method for profile generation. When given a "
"directory name, it generates the profile file ``default_%m.profraw`` in the "
"directory named ``dirname`` if specified. If ``dirname`` does not exist, it "
"will be created at runtime. ``%m`` specifier will be substituted with a "
"unique id documented in step 2 above. In other words, with ``-fprofile-"
"generate[=<dirname>]`` option, the \"raw\" profile data automatic merging is "
"turned on by default, so there will no longer any risk of profile clobbering "
"from different running processes.  For example,"
msgstr ""

#: ../../../UsersManual.rst:3182
msgid ""
"When ``code`` is executed, the profile will be written to the file ``yyy/zzz/"
"default_xxxx.profraw``."
msgstr ""

#: ../../../UsersManual.rst:3185
msgid ""
"To generate the profile data file with the compiler readable format, the "
"``llvm-profdata`` tool can be used with the profile directory as the input:"
msgstr ""

#: ../../../UsersManual.rst:3192
msgid ""
"If the user wants to turn off the auto-merging feature, or simply override "
"the the profile dumping path specified at command line, the environment "
"variable ``LLVM_PROFILE_FILE`` can still be used to override the directory "
"and filename for the profile file at runtime. To override the path and "
"filename at compile time, use ``-Xclang -fprofile-instrument-path=/path/to/"
"file_pattern.profraw``."
msgstr ""

#: ../../../UsersManual.rst:3201
msgid ""
"The ``-fcs-profile-generate`` and ``-fcs-profile-generate=`` flags will use "
"the same instrumentation method, and generate the same profile as in the ``-"
"fprofile-generate`` and ``-fprofile-generate=`` flags. The difference is "
"that the instrumentation is performed after inlining so that the resulted "
"profile has a better context sensitive information. They cannot be used "
"together with ``-fprofile-generate`` and ``-fprofile-generate=`` flags. They "
"are typically used in conjunction with ``-fprofile-use`` flag. The profile "
"generated by ``-fcs-profile-generate`` and ``-fprofile-generate`` can be "
"merged by llvm-profdata. A use example:"
msgstr ""

#: ../../../UsersManual.rst:3217
msgid ""
"The first few steps are the same as that in ``-fprofile-generate`` "
"compilation. Then perform a second round of instrumentation."
msgstr ""

#: ../../../UsersManual.rst:3227
msgid ""
"The resulted ``cs_code.prodata`` combines ``code.profdata`` and the profile "
"generated from binary ``cs_code``. Profile ``cs_code.profata`` can be used "
"by ``-fprofile-use`` compilation."
msgstr ""

#: ../../../UsersManual.rst:3235
msgid ""
"The above command will read both profiles to the compiler at the identical "
"point of instrumentations."
msgstr ""

#: ../../../UsersManual.rst:3240
msgid ""
"Without any other arguments, ``-fprofile-use`` behaves identically to ``-"
"fprofile-instr-use``. Otherwise, if ``pathname`` is the full path to a "
"profile file, it reads from that file. If ``pathname`` is a directory name, "
"it reads from ``pathname/default.profdata``."
msgstr ""

#: ../../../UsersManual.rst:3247
msgid ""
"Unless ``-fsanitize=thread`` is specified, the default is ``single``, which "
"uses non-atomic increments. The counters can be inaccurate under thread "
"contention. ``atomic`` uses atomic increments which is accurate but has "
"overhead. ``prefer-atomic`` will be transformed to ``atomic`` when supported "
"by the target, or ``single`` otherwise."
msgstr ""

#: ../../../UsersManual.rst:3255
msgid ""
"Enables the continuous instrumentation profiling where profile counter "
"updates are continuously synced to a file. This option sets any necessary "
"modifiers (currently ``%c``) in the default profile filename and passes any "
"necessary flags to the middle-end to support this mode. Value profiling is "
"not supported in continuous mode."
msgstr ""

#: ../../../UsersManual.rst:3265
msgid ""
"Running ``./code`` will collect the profile and write it to the "
"``default_xxxx.profraw`` file. However, if ``./code`` abruptly terminates or "
"does not call ``exit()``, in continuous mode the profile collected up to the "
"point of termination will be available in ``default_xxxx.profraw`` while in "
"the non-continuous mode, no profile file is generated."
msgstr ""

#: ../../../UsersManual.rst:3273
msgid ""
"Enables the temporal profiling extension for IRPGO to improve startup time "
"by reducing ``.text`` section page faults. To do this, we instrument "
"function timestamps to measure when each function is called for the first "
"time and use this data to generate a function order to improve startup."
msgstr ""

#: ../../../UsersManual.rst:3278
msgid "The profile is generated as normal."
msgstr ""

#: ../../../UsersManual.rst:3286
msgid ""
"Using the resulting profile, we can generate a function order to pass to the "
"linker via ``--symbol-ordering-file`` for ELF or ``-order_file`` for Mach-O."
msgstr ""

#: ../../../UsersManual.rst:3294
msgid "Or the profile can be passed to LLD directly."
msgstr ""

#: ../../../UsersManual.rst:3300
msgid ""
"For more information, please read the RFC: https://discourse.llvm.org/t/rfc-"
"temporal-profiling-extension-for-irpgo/68068"
msgstr ""

#: ../../../UsersManual.rst:3304
msgid "Fine Tuning Profile Collection"
msgstr ""

#: ../../../UsersManual.rst:3306
msgid ""
"The PGO infrastructure provides user program knobs to fine tune profile "
"collection. Specifically, the PGO runtime provides the following functions "
"that can be used to control the regions in the program where profiles should "
"be collected."
msgstr ""

#: ../../../UsersManual.rst:3311
msgid ""
"``void __llvm_profile_set_filename(const char *Name)``: changes the name of "
"the profile file to ``Name``."
msgstr ""

#: ../../../UsersManual.rst:3313
msgid ""
"``void __llvm_profile_reset_counters(void)``: resets all counters to zero."
msgstr ""

#: ../../../UsersManual.rst:3314
msgid "``int __llvm_profile_dump(void)``: write the profile data to disk."
msgstr ""

#: ../../../UsersManual.rst:3316
msgid ""
"For example, the following pattern can be used to skip profiling program "
"initialization, profile two specific hot regions, and skip profiling program "
"cleanup:"
msgstr ""

#: ../../../UsersManual.rst:3346
msgid ""
"These APIs' names can be introduced to user programs in two ways. They can "
"be declared as weak symbols on platforms which support treating weak symbols "
"as ``null`` during linking. For example, the user can have"
msgstr ""

#: ../../../UsersManual.rst:3363
msgid ""
"Alternatively, the user program can include the header ``profile/"
"instr_prof_interface.h``, which contains the API names. For example,"
msgstr ""

#: ../../../UsersManual.rst:3373
msgid ""
"The user code does not need to check if the API names are defined, because "
"these names are automatically replaced by ``(0)`` or the equivalence of noop "
"if the ``clang`` is not compiling for profile generation."
msgstr ""

#: ../../../UsersManual.rst:3377
msgid ""
"Such replacement can happen because ``clang`` adds one of two macros "
"depending on the ``-fprofile-generate`` and the ``-fprofile-use`` flags."
msgstr ""

#: ../../../UsersManual.rst:3380
msgid ""
"``__LLVM_INSTR_PROFILE_GENERATE``: defined when one of ``-fprofile[-instr]-"
"generate``/``-fcs-profile-generate`` is in effect."
msgstr ""

#: ../../../UsersManual.rst:3382
msgid ""
"``__LLVM_INSTR_PROFILE_USE``: defined when one of ``-fprofile-use``/``-"
"fprofile-instr-use`` is in effect."
msgstr ""

#: ../../../UsersManual.rst:3385
msgid ""
"The two macros can be used to provide more flexibility so a user program can "
"execute code specifically intended for profile generate or profile use. For "
"example, a user program can have special logging during profile generate:"
msgstr ""

#: ../../../UsersManual.rst:3395
msgid ""
"The logging is automatically excluded during a normal build of the program, "
"hence it does not impact performance during a normal execution."
msgstr ""

#: ../../../UsersManual.rst:3398
msgid ""
"It is advised to use such fine tuning only in a program's cold regions. The "
"weak symbols can introduce extra control flow (the ``if`` checks), while the "
"macros (hence declarations they guard in ``profile/instr_prof_interface.h``) "
"can change the control flow of the functions that use them between profile "
"generation and profile use (which can lead to discarded counters in such "
"functions). Using these APIs in the program's cold regions introduces less "
"overhead and leads to more optimized code."
msgstr ""

#: ../../../UsersManual.rst:3407
msgid "Disabling Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:3409
msgid ""
"In certain situations, it may be useful to disable profile generation or use "
"for specific files in a build, without affecting the main compilation flags "
"used for the other files in the project."
msgstr ""

#: ../../../UsersManual.rst:3413
msgid ""
"In these cases, you can use the flag ``-fno-profile-instr-generate`` (or ``-"
"fno-profile-generate``) to disable profile generation, and ``-fno-profile-"
"instr-use`` (or ``-fno-profile-use``) to disable profile use."
msgstr ""

#: ../../../UsersManual.rst:3417
msgid ""
"Note that these flags should appear after the corresponding profile flags to "
"have an effect."
msgstr ""

#: ../../../UsersManual.rst:3422
msgid ""
"When none of the translation units inside a binary is instrumented, in the "
"case of Fuchsia the profile runtime will not be linked into the binary and "
"no profile will be produced, while on other platforms the profile runtime "
"will be linked and profile will be produced but there will not be any "
"counters."
msgstr ""

#: ../../../UsersManual.rst:3429
msgid "Instrumenting only selected files or functions"
msgstr ""

#: ../../../UsersManual.rst:3431
msgid ""
"Sometimes it's useful to only instrument certain files or functions.  For "
"example in automated testing infrastructure, it may be desirable to only "
"instrument files or functions that were modified by a patch to reduce the "
"overhead of instrumenting a full system."
msgstr ""

#: ../../../UsersManual.rst:3436
msgid "This can be done using the ``-fprofile-list`` option."
msgstr ""

#: ../../../UsersManual.rst:3440
msgid ""
"This option can be used to apply profile instrumentation only to selected "
"files or functions. ``pathname`` should point to a file in the :doc:"
"`SanitizerSpecialCaseList` format which selects which files and functions to "
"instrument."
msgstr ""

#: ../../../UsersManual.rst:3449
msgid "The option can be specified multiple times to pass multiple files."
msgstr ""

#: ../../../UsersManual.rst:3455
msgid ""
"Supported sections are ``[clang]``, ``[llvm]``, ``[csllvm]``, and ``[sample-"
"coldcov]`` representing clang PGO, IRPGO, CSIRPGO and sample PGO based cold "
"function coverage, respectively. Supported prefixes are ``function`` and "
"``source``. Supported categories are ``allow``, ``skip``, and ``forbid``. "
"``skip`` adds the ``skipprofile`` attribute while ``forbid`` adds the "
"``noprofile`` attribute to the appropriate function. Use ``default:<allow|"
"skip|forbid>`` to specify the default category."
msgstr ""

#: ../../../UsersManual.rst:3478
msgid "Older Prefixes"
msgstr ""

#: ../../../UsersManual.rst:3479
msgid ""
"An older format is also supported, but it is only able to add the "
"``noprofile`` attribute. To filter individual functions or entire source "
"files use ``fun:<name>`` or ``src:<file>`` respectively. To exclude a "
"function or a source file, use ``!fun:<name>`` or ``!src:<file>`` "
"respectively. The format also supports wildcard expansion. The compiler "
"generated functions are assumed to be located in the main source file.  It "
"is also possible to restrict the filter to a particular instrumentation type "
"by using a named section."
msgstr ""

#: ../../../UsersManual.rst:3504
msgid ""
"When the file contains only excludes, all files and functions except for the "
"excluded ones will be instrumented. Otherwise, only the files and functions "
"specified will be instrumented."
msgstr ""

#: ../../../UsersManual.rst:3509
msgid "Instrument function groups"
msgstr ""

#: ../../../UsersManual.rst:3511
msgid ""
"Sometimes it is desirable to minimize the size overhead of instrumented "
"binaries. One way to do this is to partition functions into groups and only "
"instrument functions in a specified group. This can be done using the `-"
"fprofile-function-groups` and `-fprofile-selected-function-group` options."
msgstr ""

#: ../../../UsersManual.rst:3518
msgid "The following uses 3 groups"
msgstr ""

#: ../../../UsersManual.rst:3526
msgid ""
"After collecting raw profiles from the three binaries, they can be merged "
"into a single profile like normal."
msgstr ""

#: ../../../UsersManual.rst:3535
msgid "Profile remapping"
msgstr ""

#: ../../../UsersManual.rst:3537
msgid ""
"When the program is compiled after a change that affects many symbol names, "
"pre-existing profile data may no longer match the program. For example:"
msgstr ""

#: ../../../UsersManual.rst:3540
msgid ""
"switching from libstdc++ to libc++ will result in the mangled names of all "
"functions taking standard library types to change"
msgstr ""

#: ../../../UsersManual.rst:3542
msgid ""
"renaming a widely-used type in C++ will result in the mangled names of all "
"functions that have parameters involving that type to change"
msgstr ""

#: ../../../UsersManual.rst:3544
msgid ""
"moving from a 32-bit compilation to a 64-bit compilation may change the "
"underlying type of ``size_t`` and similar types, resulting in changes to "
"manglings"
msgstr ""

#: ../../../UsersManual.rst:3548
msgid ""
"Clang allows use of a profile remapping file to specify that such "
"differences in mangled names should be ignored when matching the profile "
"data against the program."
msgstr ""

#: ../../../UsersManual.rst:3554
msgid ""
"Specifies a file containing profile remapping information, that will be used "
"to match mangled names in the profile data to mangled names in the program."
msgstr ""

#: ../../../UsersManual.rst:3558
msgid "The profile remapping file is a text file containing lines of the form"
msgstr ""

#: ../../../UsersManual.rst:3564
msgid ""
"where ``fragmentkind`` is one of ``name``, ``type``, or ``encoding``, "
"indicating whether the following mangled name fragments are <`name <https://"
"itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.name>`_>s, <`type <https://"
"itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.type>`_>s, or <`encoding "
"<https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.encoding>`_>s, "
"respectively. Blank lines and lines starting with ``#`` are ignored."
msgstr ""

#: ../../../UsersManual.rst:3572
msgid ""
"For convenience, built-in <substitution>s such as ``St`` and ``Ss`` are "
"accepted as <name>s (even though they technically are not <name>s)."
msgstr ""

#: ../../../UsersManual.rst:3575
msgid ""
"For example, to specify that ``absl::string_view`` and ``std::string_view`` "
"should be treated as equivalent when matching profile data, the following "
"remapping file could be used:"
msgstr ""

#: ../../../UsersManual.rst:3588
msgid ""
"Matching profile data using a profile remapping file is supported on a best-"
"effort basis. For example, information regarding indirect call targets is "
"currently not remapped. For best results, you are encouraged to generate new "
"profile data matching the updated program, or to remap the profile data "
"using the ``llvm-cxxmap`` and ``llvm-profdata merge`` tools."
msgstr ""

#: ../../../UsersManual.rst:3596
msgid ""
"Profile data remapping is currently only supported for C++ mangled names "
"following the Itanium C++ ABI mangling scheme. This covers all C++ targets "
"supported by Clang other than Windows."
msgstr ""

#: ../../../UsersManual.rst:3601
msgid "GCOV-based Profiling"
msgstr ""

#: ../../../UsersManual.rst:3603
msgid ""
"GCOV is a test coverage program, it helps to know how often a line of code "
"is executed. When instrumenting the code with ``--coverage`` option, some "
"counters are added for each edge linking basic blocks."
msgstr ""

#: ../../../UsersManual.rst:3607
msgid ""
"At compile time, gcno files are generated containing information about "
"blocks and edges between them. At runtime the counters are incremented and "
"at exit the counters are dumped in gcda files."
msgstr ""

#: ../../../UsersManual.rst:3611
msgid ""
"The tool ``llvm-cov gcov`` will parse gcno, gcda and source files to "
"generate a report ``.c.gcov``."
msgstr ""

#: ../../../UsersManual.rst:3616
msgid ""
"Define a list of regexes separated by a semi-colon. If a file name matches "
"any of the regexes then the file is instrumented."
msgstr ""

#: ../../../UsersManual.rst:3623
msgid ""
"For example, this will only instrument files finishing with ``.c``, skipping "
"``.h`` files."
msgstr ""

#: ../../../UsersManual.rst:3627
msgid ""
"Define a list of regexes separated by a semi-colon. If a file name doesn't "
"match all the regexes then the file is instrumented."
msgstr ""

#: ../../../UsersManual.rst:3634
msgid ""
"For example, this will instrument all the files except the ones in ``/usr/"
"include``."
msgstr ""

#: ../../../UsersManual.rst:3636
msgid ""
"If both options are used then a file is instrumented if its name matches any "
"of the regexes from ``-fprofile-filter-list`` and doesn't match all the "
"regexes from ``-fprofile-exclude-list``."
msgstr ""

#: ../../../UsersManual.rst:3645
msgid ""
"In that case ``/usr/foo/oof.h`` is instrumented since it matches the filter "
"regex and doesn't match the exclude regex, but ``/usr/include/foo.h`` "
"doesn't since it matches the exclude regex."
msgstr ""

#: ../../../UsersManual.rst:3650
msgid "Controlling Debug Information"
msgstr ""

#: ../../../UsersManual.rst:3653
msgid "Controlling Size of Debug Information"
msgstr ""

#: ../../../UsersManual.rst:3655
msgid ""
"Debug info kind generated by Clang can be set by one of the flags listed "
"below. If multiple flags are present, the last one is used."
msgstr ""

#: ../../../UsersManual.rst:3660
msgid "Don't generate any debug info (default)."
msgstr ""

#: ../../../UsersManual.rst:3664
msgid "Generate line number tables only."
msgstr ""

#: ../../../UsersManual.rst:3666
msgid ""
"This kind of debug info allows to obtain stack traces with function names, "
"file names and line numbers (by such tools as ``gdb`` or ``addr2line``).  It "
"doesn't contain any other data (e.g. description of local variables or "
"function parameters)."
msgstr ""

#: ../../../UsersManual.rst:3673
msgid ""
"Clang supports a number of optimizations to reduce the size of debug "
"information in the binary. They work based on the assumption that the debug "
"type information can be spread out over multiple compilation units.  "
"Specifically, the optimizations are:"
msgstr ""

#: ../../../UsersManual.rst:3678
msgid ""
"will not emit type definitions for types that are not needed by a module and "
"could be replaced with a forward declaration."
msgstr ""

#: ../../../UsersManual.rst:3680
msgid ""
"will only emit type info for a dynamic C++ class in the module that contains "
"the vtable for the class."
msgstr ""

#: ../../../UsersManual.rst:3682
msgid ""
"will only emit type info for a C++ class (non-trivial, non-aggregate) in the "
"modules that contain a definition for one of its constructors."
msgstr ""

#: ../../../UsersManual.rst:3684
msgid ""
"will only emit type definitions for types that are the subject of explicit "
"template instantiation declarations in the presence of an explicit "
"instantiation definition for the type."
msgstr ""

#: ../../../UsersManual.rst:3688
msgid ""
"The **-fstandalone-debug** option turns off these optimizations. This is "
"useful when working with 3rd-party libraries that don't come with debug "
"information.  Note that Clang will never emit type information for types "
"that are not referenced at all by the program."
msgstr ""

#: ../../../UsersManual.rst:3695
msgid ""
"On Darwin **-fstandalone-debug** is enabled by default. The **-fno-"
"standalone-debug** option can be used to get to turn on the vtable-based "
"optimization described above."
msgstr ""

#: ../../../UsersManual.rst:3701
msgid "Generate complete debug info."
msgstr ""

#: ../../../UsersManual.rst:3705
msgid ""
"By default, Clang does not emit type information for types that are defined "
"but not used in a program. To retain the debug info for these unused types, "
"the negation **-fno-eliminate-unused-debug-types** can be used. This can be "
"particularly useful on Windows, when using NATVIS files that can reference "
"const symbols that would otherwise be stripped, even in full debug or "
"standalone debug modes."
msgstr ""

#: ../../../UsersManual.rst:3713
msgid "Controlling Macro Debug Info Generation"
msgstr ""

#: ../../../UsersManual.rst:3715
msgid ""
"Debug info for C preprocessor macros increases the size of debug information "
"in the binary. Macro debug info generated by Clang can be controlled by the "
"flags listed below."
msgstr ""

#: ../../../UsersManual.rst:3721
msgid ""
"Generate debug info for preprocessor macros. This flag is discarded when **-"
"g0** is enabled."
msgstr ""

#: ../../../UsersManual.rst:3726
msgid "Do not generate debug info for preprocessor macros (default)."
msgstr ""

#: ../../../UsersManual.rst:3729
msgid "Controlling Debugger \"Tuning\""
msgstr ""

#: ../../../UsersManual.rst:3731
msgid ""
"While Clang generally emits standard DWARF debug info (http://dwarfstd.org), "
"different debuggers may know how to take advantage of different specific "
"DWARF features. You can \"tune\" the debug info for one of several different "
"debuggers."
msgstr ""

#: ../../../UsersManual.rst:3737
msgid ""
"Tune the debug info for the ``gdb``, ``lldb``, Sony PlayStation\\ |reg| "
"debugger, or ``dbx``, respectively. Each of these options implies **-g**. "
"(Therefore, if you want both **-gline-tables-only** and debugger tuning, the "
"tuning option must come first.)"
msgstr ""

#: ../../../UsersManual.rst:3743
msgid "Controlling LLVM IR Output"
msgstr ""

#: ../../../UsersManual.rst:3746
msgid "Controlling Value Names in LLVM IR"
msgstr ""

#: ../../../UsersManual.rst:3748
msgid ""
"Emitting value names in LLVM IR increases the size and verbosity of the IR. "
"By default, value names are only emitted in assertion-enabled builds of "
"Clang. However, when reading IR it can be useful to re-enable the emission "
"of value names to improve readability."
msgstr ""

#: ../../../UsersManual.rst:3755
msgid "Discard value names when generating LLVM IR."
msgstr ""

#: ../../../UsersManual.rst:3759
msgid ""
"Do not discard value names when generating LLVM IR. This option can be used "
"to re-enable names for release builds of Clang."
msgstr ""

#: ../../../UsersManual.rst:3764
msgid "Comment Parsing Options"
msgstr ""

#: ../../../UsersManual.rst:3766
msgid ""
"Clang parses Doxygen and non-Doxygen style documentation comments and "
"attaches them to the appropriate declaration nodes.  By default, it only "
"parses Doxygen-style comments and ignores ordinary comments starting with "
"``//`` and ``/*``."
msgstr ""

#: ../../../UsersManual.rst:3773
msgid ""
"Emit warnings about use of documentation comments.  This warning group is "
"off by default."
msgstr ""

#: ../../../UsersManual.rst:3776
msgid ""
"This includes checking that ``\\param`` commands name parameters that "
"actually present in the function signature, checking that ``\\returns`` is "
"used only on functions that actually return a value etc."
msgstr ""

#: ../../../UsersManual.rst:3782
msgid "Don't warn when encountering an unknown Doxygen command."
msgstr ""

#: ../../../UsersManual.rst:3786
msgid ""
"Parse all comments as documentation comments (including ordinary comments "
"starting with ``//`` and ``/*``)."
msgstr ""

#: ../../../UsersManual.rst:3791
msgid ""
"Define custom documentation commands as block commands.  This allows Clang "
"to construct the correct AST for these custom commands, and silences "
"warnings about unknown commands.  Several commands must be separated by a "
"comma *without trailing space*; e.g. ``-fcomment-block-commands=foo,bar`` "
"defines custom commands ``\\foo`` and ``\\bar``."
msgstr ""

#: ../../../UsersManual.rst:3797
msgid ""
"It is also possible to use ``-fcomment-block-commands`` several times; e.g. "
"``-fcomment-block-commands=foo -fcomment-block-commands=bar`` does the same "
"as above."
msgstr ""

#: ../../../UsersManual.rst:3804
msgid "CCC_OVERRIDE_OPTIONS"
msgstr ""

#: ../../../UsersManual.rst:3805
msgid ""
"The environment variable ``CCC_OVERRIDE_OPTIONS`` can be used to edit "
"clang's command line arguments. The value of this variable is a space-"
"separated list of edits to perform. The edits are applied in the order in "
"which they appear in ``CCC_OVERRIDE_OPTIONS``. Each edit should be one of "
"the following forms:"
msgstr ""

#: ../../../UsersManual.rst:3810
msgid ""
"``#``: Silence information about the changes to the command line arguments."
msgstr ""

#: ../../../UsersManual.rst:3812
msgid ""
"``^FOO``: Add ``FOO`` as a new argument at the beginning of the command line "
"right after the name of the compiler executable."
msgstr ""

#: ../../../UsersManual.rst:3815
msgid "``+FOO``: Add ``FOO`` as a new argument at the end of the command line."
msgstr ""

#: ../../../UsersManual.rst:3817
msgid ""
"``s/XXX/YYY/``: Substitute the regular expression ``XXX`` with ``YYY`` in "
"the command line."
msgstr ""

#: ../../../UsersManual.rst:3820
msgid "``xOPTION``: Removes all instances of the literal argument ``OPTION``."
msgstr ""

#: ../../../UsersManual.rst:3822
msgid ""
"``XOPTION``: Removes all instances of the literal argument ``OPTION``, and "
"the following argument."
msgstr ""

#: ../../../UsersManual.rst:3825
msgid ""
"``Ox``: Removes all flags matching ``O`` or ``O[sz0-9]`` and adds ``Ox`` at "
"the end of the command line."
msgstr ""

#: ../../../UsersManual.rst:3828
msgid ""
"This environment variable does not affect the options added by the config "
"files."
msgstr ""

#: ../../../UsersManual.rst:3833
msgid "C Language Features"
msgstr ""

#: ../../../UsersManual.rst:3835
msgid ""
"The support for standard C in Clang is mostly feature-complete, see the `C "
"status page <https://clang.llvm.org/c_status.html>`_ for more details."
msgstr ""

#: ../../../UsersManual.rst:3839
msgid "Extensions supported by clang"
msgstr ""

#: ../../../UsersManual.rst:3841
msgid "See :doc:`LanguageExtensions`."
msgstr ""

#: ../../../UsersManual.rst:3844
msgid "Differences between various standard modes"
msgstr ""

#: ../../../UsersManual.rst:3846
msgid ""
"clang supports the -std option, which changes what language mode clang uses. "
"The supported modes for C are c89, gnu89, c94, c99, gnu99, c11, gnu11, c17, "
"gnu17, c23, gnu23, c2y, gnu2y, and various aliases for those modes. If no -"
"std option is specified, clang defaults to gnu17 mode. Many C99 and C11 "
"features are supported in earlier modes as a conforming extension, with a "
"warning. Use ``-pedantic-errors`` to request an error if a feature from a "
"later standard revision is used in an earlier mode."
msgstr ""

#: ../../../UsersManual.rst:3854
msgid "Differences between all ``c*`` and ``gnu*`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3856
msgid "``c*`` modes define \"``__STRICT_ANSI__``\"."
msgstr ""

#: ../../../UsersManual.rst:3857
msgid ""
"Target-specific defines not prefixed by underscores, like ``linux``, are "
"defined in ``gnu*`` modes."
msgstr ""

#: ../../../UsersManual.rst:3859
msgid ""
"Trigraphs default to being off in ``gnu*`` modes; they can be enabled by the "
"``-trigraphs`` option."
msgstr ""

#: ../../../UsersManual.rst:3861
msgid ""
"The parser recognizes ``asm`` and ``typeof`` as keywords in ``gnu*`` modes; "
"the variants ``__asm__`` and ``__typeof__`` are recognized in all modes."
msgstr ""

#: ../../../UsersManual.rst:3863
msgid ""
"The parser recognizes ``inline`` as a keyword in ``gnu*`` mode, in addition "
"to recognizing it in the ``*99`` and later modes for which it is part of the "
"ISO C standard. The variant ``__inline__`` is recognized in all modes."
msgstr ""

#: ../../../UsersManual.rst:3867
msgid ""
"The Apple \"blocks\" extension is recognized by default in ``gnu*`` modes on "
"some platforms; it can be enabled in any mode with the ``-fblocks`` option."
msgstr ""

#: ../../../UsersManual.rst:3871
msgid "Differences between ``*89`` and ``*94`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3873
msgid "Digraphs are not recognized in c89 mode."
msgstr ""

#: ../../../UsersManual.rst:3875
msgid "Differences between ``*94`` and ``*99`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3877
msgid ""
"The ``*99`` modes default to implementing ``inline`` / ``__inline__`` as "
"specified in C99, while the ``*89`` modes implement the GNU version. This "
"can be overridden for individual functions with the ``__gnu_inline__`` "
"attribute."
msgstr ""

#: ../../../UsersManual.rst:3881
msgid ""
"The scope of names defined inside a ``for``, ``if``, ``switch``, ``while``, "
"or ``do`` statement is different. (example: ``if ((struct x {int x;}*)0) {}"
"``.)"
msgstr ""

#: ../../../UsersManual.rst:3883
msgid "``__STDC_VERSION__`` is not defined in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:3884
msgid "``inline`` is not recognized as a keyword in ``c89`` mode."
msgstr ""

#: ../../../UsersManual.rst:3885
msgid "``restrict`` is not recognized as a keyword in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:3886
msgid "Commas are allowed in integer constant expressions in ``*99`` modes."
msgstr ""

#: ../../../UsersManual.rst:3887
msgid ""
"Arrays which are not lvalues are not implicitly promoted to pointers in "
"``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:3889
msgid "Some warnings are different."
msgstr ""

#: ../../../UsersManual.rst:3891
msgid "Differences between ``*99`` and ``*11`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3893
msgid "Warnings for use of C11 features are disabled."
msgstr ""

#: ../../../UsersManual.rst:3894
msgid "``__STDC_VERSION__`` is defined to ``201112L`` rather than ``199901L``."
msgstr ""

#: ../../../UsersManual.rst:3896
msgid "Differences between ``*11`` and ``*17`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3898
msgid "``__STDC_VERSION__`` is defined to ``201710L`` rather than ``201112L``."
msgstr ""

#: ../../../UsersManual.rst:3900
msgid "Differences between ``*17`` and ``*23`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3902
msgid "``__STDC_VERSION__`` is defined to ``202311L`` rather than ``201710L``."
msgstr ""

#: ../../../UsersManual.rst:3903
msgid "``nullptr`` and ``nullptr_t`` are supported, only in ``*23`` mode."
msgstr ""

#: ../../../UsersManual.rst:3904
msgid "``ATOMIC_VAR_INIT`` is removed from ``*23`` mode."
msgstr ""

#: ../../../UsersManual.rst:3905
msgid ""
"``bool``, ``true``, ``false``, ``alignas``, ``alignof``, ``static_assert``, "
"and ``thread_local`` are now first-class keywords, only in ``*23`` mode."
msgstr ""

#: ../../../UsersManual.rst:3907
msgid "``typeof`` and ``typeof_unqual`` are supported, only ``*23`` mode."
msgstr ""

#: ../../../UsersManual.rst:3908
msgid ""
"Bit-precise integers (``_BitInt(N)``) are supported by default in ``*23`` "
"mode, and as an extension in ``*17`` and earlier modes."
msgstr ""

#: ../../../UsersManual.rst:3910
msgid ""
"``[[]]`` attributes are supported by default in ``*23`` mode, and as an "
"extension in ``*17`` and earlier modes."
msgstr ""

#: ../../../UsersManual.rst:3913
msgid "Differences between ``*23`` and ``*2y`` modes:"
msgstr ""

#: ../../../UsersManual.rst:3915
msgid "``__STDC_VERSION__`` is defined to ``202400L`` rather than ``202311L``."
msgstr ""

#: ../../../UsersManual.rst:3918
msgid "GCC extensions not implemented yet"
msgstr ""

#: ../../../UsersManual.rst:3920
msgid ""
"clang tries to be compatible with gcc as much as possible, but some gcc "
"extensions are not implemented:"
msgstr ""

#: ../../../UsersManual.rst:3923
msgid ""
"clang does not support decimal floating point types (``_Decimal32`` and "
"friends) yet."
msgstr ""

#: ../../../UsersManual.rst:3925
msgid ""
"clang only supports global register variables when the register specified is "
"non-allocatable (e.g. the stack pointer). Support for general global "
"register variables is unlikely to be implemented soon because it requires "
"additional LLVM backend support."
msgstr ""

#: ../../../UsersManual.rst:3929
msgid ""
"clang does not support static initialization of flexible array members. This "
"appears to be a rarely used extension, but could be implemented pending user "
"demand."
msgstr ""

#: ../../../UsersManual.rst:3932
msgid ""
"clang does not support ``__builtin_va_arg_pack``/"
"``__builtin_va_arg_pack_len``. This is used rarely, but in some potentially "
"interesting places, like the glibc headers, so it may be implemented pending "
"user demand. Note that because clang pretends to be like GCC 4.2, and this "
"extension was introduced in 4.3, the glibc headers will not try to use this "
"extension with clang at the moment."
msgstr ""

#: ../../../UsersManual.rst:3940
msgid ""
"This is not a complete list; if you find an unsupported extension missing "
"from this list, please file a `feature request <https://github.com/llvm/llvm-"
"project/issues/>`_. This list currently excludes C++; see :ref:`C++ Language "
"Features <cxx>`. Also, this list does not include bugs in mostly-implemented "
"features; please see the `issues list <https://github.com/llvm/llvm-project/"
"issues/>`_ for known existing bugs."
msgstr ""

#: ../../../UsersManual.rst:3948
msgid "Intentionally unsupported GCC extensions"
msgstr ""

#: ../../../UsersManual.rst:3950
msgid ""
"clang does not support the gcc extension that allows variable-length arrays "
"in structures. This is for a few reasons: one, it is tricky to implement, "
"two, the extension is completely undocumented, and three, the extension "
"appears to be rarely used. Note that clang *does* support flexible array "
"members (arrays with a zero or unspecified size at the end of a structure)."
msgstr ""

#: ../../../UsersManual.rst:3956
msgid ""
"GCC accepts many expression forms that are not valid integer constant "
"expressions in bit-field widths, enumerator constants, case labels, and in "
"array bounds at global scope. Clang also accepts additional expression forms "
"in these contexts, but constructs that GCC accepts due to simplifications "
"GCC performs while parsing, such as ``x - x`` (where ``x`` is a variable) "
"will likely never be accepted by Clang."
msgstr ""

#: ../../../UsersManual.rst:3962
msgid ""
"clang does not support ``__builtin_apply`` and friends; this extension is "
"extremely obscure and difficult to implement reliably."
msgstr ""

#: ../../../UsersManual.rst:3964
msgid ""
"clang does not support the gcc extension for forward-declaring function "
"parameters."
msgstr ""

#: ../../../UsersManual.rst:3966
msgid ""
"clang does not support nested functions; this is a complex feature which is "
"infrequently used, so it is unlikely to be implemented. In C++11 it can be "
"emulated by assigning lambda functions to local variables, e.g:"
msgstr ""

#: ../../../UsersManual.rst:3982
msgid "Microsoft extensions"
msgstr ""

#: ../../../UsersManual.rst:3984
msgid ""
"clang has support for many extensions from Microsoft Visual C++. To enable "
"these extensions, use the ``-fms-extensions`` command-line option. This is "
"the default for Windows targets. Clang does not implement every pragma or "
"declspec provided by MSVC, but the popular ones, such as "
"``__declspec(dllexport)`` and ``#pragma comment(lib)`` are well supported."
msgstr ""

#: ../../../UsersManual.rst:3990
msgid ""
"clang has a ``-fms-compatibility`` flag that makes clang accept enough "
"invalid C++ to be able to parse most Microsoft headers. For example, it "
"allows `unqualified lookup of dependent base class members <https://clang."
"llvm.org/compatibility.html#dep_lookup_bases>`_, which is a common "
"compatibility issue with clang. This flag is enabled by default for Windows "
"targets."
msgstr ""

#: ../../../UsersManual.rst:3997
msgid ""
"``-fdelayed-template-parsing`` lets clang delay parsing of function template "
"definitions until the end of a translation unit. This flag is enabled by "
"default for Windows targets."
msgstr ""

#: ../../../UsersManual.rst:4001
msgid ""
"For compatibility with existing code that compiles with MSVC, clang defines "
"the ``_MSC_VER`` and ``_MSC_FULL_VER`` macros. When on Windows, these "
"default to either the same value as the currently installed version of cl."
"exe, or ``1933`` and ``193300000`` (respectively). The ``-fms-compatibility-"
"version=`` flag overrides these values.  It accepts a dotted version tuple, "
"such as 19.00.23506. Changing the MSVC compatibility version makes clang "
"behave more like that version of MSVC. For example, ``-fms-compatibility-"
"version=19`` will enable C++14 features and define ``char16_t`` and "
"``char32_t`` as builtin types."
msgstr ""

#: ../../../UsersManual.rst:4013
msgid "C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:4015
msgid ""
"clang fully implements all of standard C++98 except for exported templates "
"(which were removed in C++11), all of standard C++11, C++14, and C++17, and "
"most of C++20 and C++23."
msgstr ""

#: ../../../UsersManual.rst:4019
msgid ""
"See the `C++ support in Clang <https://clang.llvm.org/cxx_status.html>`_ "
"page for detailed information on C++ feature support across Clang versions."
msgstr ""

#: ../../../UsersManual.rst:4023 ../../../UsersManual.rst:4078
msgid "Controlling implementation limits"
msgstr ""

#: ../../../UsersManual.rst:4027
msgid ""
"Sets the limit for nested parentheses, brackets, and braces to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:4032
msgid ""
"Sets the limit for constexpr function invocations to N. The default is 512."
msgstr ""

#: ../../../UsersManual.rst:4036
msgid ""
"Sets the limit for the number of full-expressions evaluated in a single "
"constant expression evaluation. This also controls the maximum size of array "
"and dynamic array allocation that can be constant evaluated. The default is "
"1048576."
msgstr ""

#: ../../../UsersManual.rst:4043
msgid ""
"Sets the limit for recursively nested template instantiations to N.  The "
"default is 1024."
msgstr ""

#: ../../../UsersManual.rst:4048
msgid ""
"Sets the limit for iterative calls to 'operator->' functions to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:4054
msgid "Objective-C Language Features"
msgstr ""

#: ../../../UsersManual.rst:4059
msgid "Objective-C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:4064
msgid "OpenMP Features"
msgstr ""

#: ../../../UsersManual.rst:4066
msgid ""
"Clang supports all OpenMP 4.5 directives and clauses. See :doc:"
"`OpenMPSupport` for additional details."
msgstr ""

#: ../../../UsersManual.rst:4069
msgid ""
"Use `-fopenmp` to enable OpenMP. Support for OpenMP can be disabled with `-"
"fno-openmp`."
msgstr ""

#: ../../../UsersManual.rst:4072
msgid ""
"Use `-fopenmp-simd` to enable OpenMP simd features only, without linking the "
"runtime library; for combined constructs (e.g. ``#pragma omp parallel for "
"simd``) the non-simd directives and clauses will be ignored. This can be "
"disabled with `-fno-openmp-simd`."
msgstr ""

#: ../../../UsersManual.rst:4082
msgid ""
"Controls code generation for OpenMP threadprivate variables. In presence of "
"this option all threadprivate variables are generated the same way as thread "
"local variables, using TLS support. If `-fno-openmp-use-tls` is provided or "
"target does not support TLS, code generation for threadprivate variables "
"relies on OpenMP runtime library."
msgstr ""

#: ../../../UsersManual.rst:4091
msgid "OpenCL Features"
msgstr ""

#: ../../../UsersManual.rst:4093
msgid ""
"Clang can be used to compile OpenCL kernels for execution on a device (e.g. "
"GPU). It is possible to compile the kernel into a binary (e.g. for AMDGPU) "
"that can be uploaded to run directly on a device (e.g. using "
"`clCreateProgramWithBinary <https://www.khronos.org/registry/OpenCL/specs/"
"opencl-1.1.pdf#111>`_) or into generic bitcode files loadable into other "
"toolchains."
msgstr ""

#: ../../../UsersManual.rst:4100
msgid ""
"Compiling to a binary using the default target from the installation can be "
"done as follows:"
msgstr ""

#: ../../../UsersManual.rst:4108
msgid ""
"Compiling for a specific target can be done by specifying the triple "
"corresponding to the target, for example:"
msgstr ""

#: ../../../UsersManual.rst:4116
msgid "Compiling to bitcode can be done as follows:"
msgstr ""

#: ../../../UsersManual.rst:4122
msgid ""
"This will produce a file `test.bc` that can be used in vendor toolchains to "
"perform machine code generation."
msgstr ""

#: ../../../UsersManual.rst:4125
msgid ""
"Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V, "
"portable IR is produced that can be used with various vendor tools as well "
"as open source tools such as `SPIRV-LLVM Translator <https://github.com/"
"KhronosGroup/SPIRV-LLVM-Translator>`_ to produce SPIR-V binary. More details "
"are provided in `the offline compilation from OpenCL kernel sources into "
"SPIR-V using open source tools <https://github.com/KhronosGroup/OpenCL-Guide/"
"blob/main/chapters/os_tooling.md>`_. From clang 14 onwards SPIR-V can be "
"generated directly as detailed in :ref:`the SPIR-V support section <spir-v>`."
msgstr ""

#: ../../../UsersManual.rst:4136
msgid ""
"Clang currently supports OpenCL C language standards up to v2.0. Clang "
"mainly supports full profile. There is only very limited support of the "
"embedded profile. From clang 9 a C++ mode is available for OpenCL (see :ref:"
"`C++ for OpenCL <cxx_for_opencl>`)."
msgstr ""

#: ../../../UsersManual.rst:4142
msgid ""
"OpenCL v3.0 support is complete but it remains in experimental state, see "
"more details about the experimental features and limitations in :doc:"
"`OpenCLSupport` page."
msgstr ""

#: ../../../UsersManual.rst:4147
msgid "OpenCL Specific Options"
msgstr ""

#: ../../../UsersManual.rst:4149
msgid ""
"Most of the OpenCL build options from `the specification v2.0 section 5.8.4 "
"<https://www.khronos.org/registry/cl/specs/opencl-2.0.pdf#200>`_ are "
"available."
msgstr ""

#: ../../../UsersManual.rst:4152
msgid "Examples:"
msgstr ""

#: ../../../UsersManual.rst:4159
msgid ""
"Many flags used for the compilation for C sources can also be passed while "
"compiling for OpenCL, examples: ``-c``, ``-O<1-4|s>``, ``-o``, ``-emit-"
"llvm``, etc."
msgstr ""

#: ../../../UsersManual.rst:4162
msgid "Some extra options are available to support special OpenCL features."
msgstr ""

#: ../../../UsersManual.rst:4166
msgid ""
"Allows to disable all extra types and functions that are not native to the "
"compiler. This might reduce the compilation speed marginally but many "
"declarations from the OpenCL standard will not be accessible. For example, "
"the following will fail to compile."
msgstr ""

#: ../../../UsersManual.rst:4178
msgid ""
"More information about the standard types and functions is provided in :ref:"
"`the section on the OpenCL Header <opencl_header>`."
msgstr ""

#: ../../../UsersManual.rst:4185
msgid ""
"Enables/Disables support of OpenCL extensions and optional features. All "
"OpenCL targets set a list of extensions that they support. Clang allows to "
"amend this using the ``-cl-ext`` flag with a comma-separated list of "
"extensions prefixed with ``'+'`` or ``'-'``. The syntax: ``-cl-"
"ext=<(['-'|'+']<extension>[,])+>``,  where extensions can be either one of "
"`the OpenCL published extensions <https://www.khronos.org/registry/OpenCL>`_ "
"or any vendor extension. Alternatively, ``'all'`` can be used to enable or "
"disable all known extensions."
msgstr ""

#: ../../../UsersManual.rst:4194
msgid "Example disabling double support for the 64-bit SPIR-V target:"
msgstr ""

#: ../../../UsersManual.rst:4200
msgid ""
"Enabling all extensions except double support in R600 AMD GPU can be done "
"using:"
msgstr ""

#: ../../../UsersManual.rst:4206
msgid ""
"Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/"
"features in clang by default."
msgstr ""

#: ../../../UsersManual.rst:4210
msgid "OpenCL Targets"
msgstr ""

#: ../../../UsersManual.rst:4212
msgid ""
"OpenCL targets are derived from the regular Clang target classes. The OpenCL "
"specific parts of the target representation provide address space mapping as "
"well as a set of supported extensions."
msgstr ""

#: ../../../UsersManual.rst:4217
msgid "Specific Targets"
msgstr ""

#: ../../../UsersManual.rst:4219
msgid ""
"There is a set of concrete HW architectures that OpenCL can be compiled for."
msgstr ""

#: ../../../UsersManual.rst:4221
msgid "For AMD target:"
msgstr ""

#: ../../../UsersManual.rst:4227
msgid "For Nvidia architectures:"
msgstr ""

#: ../../../UsersManual.rst:4235
msgid "Generic Targets"
msgstr ""

#: ../../../UsersManual.rst:4237
msgid "A SPIR-V binary can be produced for 32- or 64-bit targets."
msgstr ""

#: ../../../UsersManual.rst:4244
msgid ""
"More details can be found in :ref:`the SPIR-V support section <spir-v>`."
msgstr ""

#: ../../../UsersManual.rst:4246
msgid ""
"SPIR is available as a generic target to allow portable bitcode to be "
"produced that can be used across GPU toolchains. The implementation follows "
"`the SPIR specification <https://www.khronos.org/spir>`_. There are two "
"flavors available for 32 and 64 bits."
msgstr ""

#: ../../../UsersManual.rst:4256
msgid ""
"Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 "
"and SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL."
msgstr ""

#: ../../../UsersManual.rst:4259
msgid ""
"x86 is used by some implementations that are x86 compatible and currently "
"remains for backwards compatibility (with older implementations prior to "
"SPIR target support). For \"non-SPMD\" targets which cannot spawn multiple "
"work-items on the fly using hardware, which covers practically all non-GPU "
"devices such as CPUs and DSPs, additional processing is needed for the "
"kernels to support multiple work-item execution. For this, a 3rd party "
"toolchain, such as for example `POCL <http://portablecl.org/>`_, can be used."
msgstr ""

#: ../../../UsersManual.rst:4267
msgid ""
"This target does not support multiple memory segments and, therefore, the "
"fake address space map can be added using the :ref:`-ffake-address-space-map "
"<opencl_fake_address_space_map>` flag."
msgstr ""

#: ../../../UsersManual.rst:4271
msgid ""
"All known OpenCL extensions and features are set to supported in the generic "
"targets, however :option:`-cl-ext` flag can be used to toggle individual "
"extensions and features."
msgstr ""

#: ../../../UsersManual.rst:4278
msgid "OpenCL Header"
msgstr ""

#: ../../../UsersManual.rst:4280
msgid ""
"By default Clang will include standard headers and therefore most of OpenCL "
"builtin functions and types are available during compilation. The default "
"declarations of non-native compiler types and functions can be disabled by "
"using flag :option:`-cl-no-stdinc`."
msgstr ""

#: ../../../UsersManual.rst:4285
msgid ""
"The following example demonstrates that OpenCL kernel sources with various "
"standard builtin functions can be compiled without the need for an explicit "
"includes or compiler flags."
msgstr ""

#: ../../../UsersManual.rst:4294
msgid ""
"More information about the default headers is provided in :doc:"
"`OpenCLSupport`."
msgstr ""

#: ../../../UsersManual.rst:4297
msgid "OpenCL Extensions"
msgstr ""

#: ../../../UsersManual.rst:4299
msgid ""
"Most of the ``cl_khr_*`` extensions to OpenCL C from `the official OpenCL "
"registry <https://www.khronos.org/registry/OpenCL/>`_ are available and "
"configured per target depending on the support available in the specific "
"architecture."
msgstr ""

#: ../../../UsersManual.rst:4304
msgid ""
"It is possible to alter the default extensions setting per target using ``-"
"cl-ext`` flag. (See :ref:`flags description <opencl_cl_ext>` for more "
"details)."
msgstr ""

#: ../../../UsersManual.rst:4307
msgid ""
"Vendor extensions can be added flexibly by declaring the list of types and "
"functions associated with each extensions enclosed within the following "
"compiler pragma directives:"
msgstr ""

#: ../../../UsersManual.rst:4317
msgid ""
"For example, parsing the following code adds ``my_t`` type and ``my_func`` "
"function to the custom ``my_ext`` extension."
msgstr ""

#: ../../../UsersManual.rst:4329
msgid ""
"There is no conflict resolution for identifier clashes among extensions. It "
"is therefore recommended that the identifiers are prefixed with a double "
"underscore to avoid clashing with user space identifiers. Vendor extension "
"should use reserved identifier prefix e.g. amd, arm, intel."
msgstr ""

#: ../../../UsersManual.rst:4334
msgid ""
"Clang also supports language extensions documented in `The OpenCL C Language "
"Extensions Documentation <https://github.com/KhronosGroup/Khronosdotorg/blob/"
"main/api/opencl/assets/OpenCL_LangExt.pdf>`_."
msgstr ""

#: ../../../UsersManual.rst:4339
msgid "OpenCL-Specific Attributes"
msgstr ""

#: ../../../UsersManual.rst:4341
msgid ""
"OpenCL support in Clang contains a set of attribute taken directly from the "
"specification as well as additional attributes."
msgstr ""

#: ../../../UsersManual.rst:4344
msgid "See also :doc:`AttributeReference`."
msgstr ""

#: ../../../UsersManual.rst:4347
msgid "nosvm"
msgstr ""

#: ../../../UsersManual.rst:4349
msgid ""
"Clang supports this attribute to comply to OpenCL v2.0 conformance, but it "
"does not have any effect on the IR. For more details refer to the "
"specification `section 6.7.2 <https://www.khronos.org/registry/cl/specs/"
"opencl-2.0-openclc.pdf#49>`_"
msgstr ""

#: ../../../UsersManual.rst:4356
msgid "opencl_unroll_hint"
msgstr ""

#: ../../../UsersManual.rst:4358
msgid ""
"The implementation of this feature mirrors the unroll hint for C. More "
"details on the syntax can be found in the specification `section 6.11.5 "
"<https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#61>`_"
msgstr ""

#: ../../../UsersManual.rst:4364
msgid "convergent"
msgstr ""

#: ../../../UsersManual.rst:4366
msgid ""
"To make sure no invalid optimizations occur for single program multiple data "
"(SPMD) / single instruction multiple thread (SIMT) Clang provides attributes "
"that can be used for special functions that have cross work item semantics. "
"An example is the subgroup operations such as `intel_sub_group_shuffle "
"<https://www.khronos.org/registry/cl/extensions/intel/cl_intel_subgroups."
"txt>`_"
msgstr ""

#: ../../../UsersManual.rst:4383
msgid ""
"with non-SPMD semantics this is optimized to the following equivalent code:"
msgstr ""

#: ../../../UsersManual.rst:4398
msgid ""
"Declaring the function ``my_sub_group_shuffle`` with the convergent "
"attribute would prevent this:"
msgstr ""

#: ../../../UsersManual.rst:4405
msgid ""
"Using ``convergent`` guarantees correct execution by keeping CFG equivalence "
"wrt operations marked as ``convergent``. CFG ``G´`` is equivalent to ``G`` "
"wrt node ``Ni`` : ``iff ∀ Nj (i≠j)`` domination and post-domination "
"relations with respect to ``Ni`` remain the same in both ``G`` and ``G´``."
msgstr ""

#: ../../../UsersManual.rst:4411
msgid "noduplicate"
msgstr ""

#: ../../../UsersManual.rst:4413
msgid ""
"``noduplicate`` is more restrictive with respect to optimizations than "
"``convergent`` because a convergent function only preserves CFG equivalence. "
"This allows some optimizations to happen as long as the control flow remains "
"unmodified."
msgstr ""

#: ../../../UsersManual.rst:4423
msgid "can be modified to:"
msgstr ""

#: ../../../UsersManual.rst:4432
msgid ""
"while using ``noduplicate`` would disallow this. Also ``noduplicate`` "
"doesn't have the same safe semantics of CFG as ``convergent`` and can cause "
"changes in CFG that modify semantics of the original program."
msgstr ""

#: ../../../UsersManual.rst:4436
msgid ""
"``noduplicate`` is kept for backwards compatibility only and it considered "
"to be deprecated for future uses."
msgstr ""

#: ../../../UsersManual.rst:4442
msgid "C++ for OpenCL"
msgstr ""

#: ../../../UsersManual.rst:4444
msgid ""
"Starting from clang 9 kernel code can contain C++17 features: classes, "
"templates, function overloading, type deduction, etc. Please note that this "
"is not an implementation of `OpenCL C++ <https://www.khronos.org/registry/"
"OpenCL/specs/2.2/pdf/OpenCL_Cxx.pdf>`_ and there is no plan to support it in "
"clang in any new releases in the near future."
msgstr ""

#: ../../../UsersManual.rst:4450
msgid ""
"Clang currently supports C++ for OpenCL 1.0 and 2021. For detailed "
"information about this language refer to the C++ for OpenCL Programming "
"Language Documentation available in `the latest build <https://www.khronos."
"org/opencl/assets/CXX_for_OpenCL.html>`_ or in `the official release "
"<https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-"
"docrev2021.12>`_."
msgstr ""

#: ../../../UsersManual.rst:4458
msgid ""
"To enable the C++ for OpenCL mode, pass one of following command line "
"options when compiling ``.clcpp`` file:"
msgstr ""

#: ../../../UsersManual.rst:4461
msgid ""
"C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc+"
"+1.0``, ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc+"
"+1.0`` or ``-std=CLC++1.0``."
msgstr ""

#: ../../../UsersManual.rst:4465
msgid ""
"C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``, ``-"
"std=clc++2021``, ``-std=CLC++2021``."
msgstr ""

#: ../../../UsersManual.rst:4487
msgid "Example of use:"
msgstr ""

#: ../../../UsersManual.rst:4489
msgid ""
"By default, files with ``.clcpp`` extension are compiled with the C++ for "
"OpenCL 1.0 mode."
msgstr ""

#: ../../../UsersManual.rst:4496
msgid ""
"For backward compatibility files with ``.cl`` extensions can also be "
"compiled in C++ for OpenCL mode but the desirable language mode must be "
"activated with a flag."
msgstr ""

#: ../../../UsersManual.rst:4504
msgid ""
"Support of C++ for OpenCL 2021 is currently in experimental phase, refer to :"
"doc:`OpenCLSupport` for more details."
msgstr ""

#: ../../../UsersManual.rst:4507
msgid ""
"C++ for OpenCL kernel sources can also be compiled online in drivers "
"supporting `cl_ext_cxx_for_opencl <https://www.khronos.org/registry/OpenCL/"
"extensions/ext/cl_ext_cxx_for_opencl.html>`_ extension."
msgstr ""

#: ../../../UsersManual.rst:4513
msgid "Constructing and destroying global objects"
msgstr ""

#: ../../../UsersManual.rst:4515
msgid ""
"Global objects with non-trivial constructors require the constructors to be "
"run before the first kernel using the global objects is executed. Similarly "
"global objects with non-trivial destructors require destructor invocation "
"just after the last kernel using the program objects is executed. In OpenCL "
"versions earlier than v2.2 there is no support for invoking global "
"constructors. However, an easy workaround is to manually enqueue the "
"constructor initialization kernel that has the following name scheme "
"``_GLOBAL__sub_I_<compiled file name>``. This kernel is only present if "
"there are global objects with non-trivial constructors present in the "
"compiled binary. One way to check this is by passing "
"``CL_PROGRAM_KERNEL_NAMES`` to ``clGetProgramInfo`` (OpenCL v2.0 s5.8.7) and "
"then checking whether any kernel name matches the naming scheme of global "
"constructor initialization kernel above."
msgstr ""

#: ../../../UsersManual.rst:4529
msgid ""
"Note that if multiple files are compiled and linked into libraries, multiple "
"kernels that initialize global objects for multiple modules would have to be "
"invoked."
msgstr ""

#: ../../../UsersManual.rst:4533
msgid ""
"Applications are currently required to run initialization of global objects "
"manually before running any kernels in which the objects are used."
msgstr ""

#: ../../../UsersManual.rst:4540
msgid ""
"If there are any global objects to be initialized, the final binary will "
"contain the ``_GLOBAL__sub_I_test.cl`` kernel to be enqueued."
msgstr ""

#: ../../../UsersManual.rst:4543
msgid ""
"Note that the manual workaround only applies to objects declared at the "
"program scope. There is no manual workaround for the construction of static "
"objects with non-trivial constructors inside functions."
msgstr ""

#: ../../../UsersManual.rst:4547
msgid ""
"Global destructors can not be invoked manually in the OpenCL v2.0 drivers. "
"However, all memory used for program scope objects should be released on "
"``clReleaseProgram``."
msgstr ""

#: ../../../UsersManual.rst:4552
msgid "Libraries"
msgstr ""

#: ../../../UsersManual.rst:4553
msgid ""
"Limited experimental support of C++ standard libraries for OpenCL is "
"described in :doc:`OpenCLSupport` page."
msgstr ""

#: ../../../UsersManual.rst:4559
msgid "Target-Specific Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:4562
msgid "CPU Architectures Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:4565
msgid "X86"
msgstr ""

#: ../../../UsersManual.rst:4567
msgid ""
"The support for X86 (both 32-bit and 64-bit) is considered stable on Darwin "
"(macOS), Linux, FreeBSD, and Dragonfly BSD: it has been tested to correctly "
"compile many large C, C++, Objective-C, and Objective-C++ codebases."
msgstr ""

#: ../../../UsersManual.rst:4572
msgid ""
"On ``x86_64-mingw32``, passing i128(by value) is incompatible with the "
"Microsoft x64 calling convention. You might need to tweak "
"``WinX86_64ABIInfo::classify()`` in lib/CodeGen/Targets/X86.cpp."
msgstr ""

#: ../../../UsersManual.rst:4576
msgid ""
"For the X86 target, clang supports the `-m16` command line argument which "
"enables 16-bit code output. This is broadly similar to using ``asm(\"."
"code16gcc\")`` with the GNU toolchain. The generated code and the ABI "
"remains 32-bit but the assembler emits instructions appropriate for a CPU "
"running in 16-bit mode, with address-size and operand-size prefixes to "
"enable 32-bit addressing and operations."
msgstr ""

#: ../../../UsersManual.rst:4583
msgid ""
"Several micro-architecture levels as specified by the x86-64 psABI are "
"defined. They are cumulative in the sense that features from previous levels "
"are implicitly included in later levels."
msgstr ""

#: ../../../UsersManual.rst:4587
msgid ""
"``-march=x86-64``: CMOV, CMPXCHG8B, FPU, FXSR, MMX, FXSR, SCE, SSE, SSE2"
msgstr ""

#: ../../../UsersManual.rst:4588
msgid ""
"``-march=x86-64-v2``: (close to Nehalem) CMPXCHG16B, LAHF-SAHF, POPCNT, "
"SSE3, SSE4.1, SSE4.2, SSSE3"
msgstr ""

#: ../../../UsersManual.rst:4589
msgid ""
"``-march=x86-64-v3``: (close to Haswell) AVX, AVX2, BMI1, BMI2, F16C, FMA, "
"LZCNT, MOVBE, XSAVE"
msgstr ""

#: ../../../UsersManual.rst:4590
msgid "``-march=x86-64-v4``: AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL"
msgstr ""

#: ../../../UsersManual.rst:4592
msgid ""
"`Intel AVX10 ISA <https://cdrdv2.intel.com/v1/dl/getContent/784343>`_ is a "
"major new vector ISA incorporating the modern vectorization aspects of Intel "
"AVX-512. This ISA will be supported on all future Intel processors. Users "
"are supposed to use the new options ``-mavx10.N`` on these processors and "
"should not use traditional AVX512 options anymore. The ``N`` in ``-mavx10."
"N`` represents a continuous integer number starting from ``1``. Current "
"binaries built with AVX512 features can run on Intel AVX10 capable "
"processors without re-compile."
msgstr ""

#: ../../../UsersManual.rst:4602
msgid "ARM"
msgstr ""

#: ../../../UsersManual.rst:4604
msgid ""
"The support for ARM (specifically ARMv6 and ARMv7) is considered stable on "
"Darwin (iOS): it has been tested to correctly compile many large C, C++, "
"Objective-C, and Objective-C++ codebases. Clang only supports a limited "
"number of ARM architectures. It does not yet fully support ARMv5, for "
"example."
msgstr ""

#: ../../../UsersManual.rst:4611
msgid "PowerPC"
msgstr ""

#: ../../../UsersManual.rst:4613
msgid ""
"The support for PowerPC (especially PowerPC64) is considered stable on Linux "
"and FreeBSD: it has been tested to correctly compile many large C and C++ "
"codebases. PowerPC (32bit) is still missing certain features (e.g. PIC code "
"on ELF platforms)."
msgstr ""

#: ../../../UsersManual.rst:4619
msgid "Other platforms"
msgstr ""

#: ../../../UsersManual.rst:4621
msgid ""
"clang currently contains some support for other architectures (e.g. Sparc); "
"however, significant pieces of code generation are still missing, and they "
"haven't undergone significant testing."
msgstr ""

#: ../../../UsersManual.rst:4625
msgid ""
"clang contains limited support for the MSP430 embedded processor, but both "
"the clang support and the LLVM backend support are highly experimental."
msgstr ""

#: ../../../UsersManual.rst:4629
msgid ""
"Other platforms are completely unsupported at the moment. Adding the minimal "
"support needed for parsing and semantic analysis on a new platform is quite "
"easy; see ``lib/Basic/Targets.cpp`` in the clang source tree. This level of "
"support is also sufficient for conversion to LLVM IR for simple programs. "
"Proper support for conversion to LLVM IR requires adding code to ``lib/"
"CodeGen/CGCall.cpp`` at the moment; this is likely to change soon, though. "
"Generating assembly requires a suitable LLVM backend."
msgstr ""

#: ../../../UsersManual.rst:4639
msgid "Operating System Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:4642
msgid "Windows"
msgstr ""

#: ../../../UsersManual.rst:4644
msgid ""
"Clang has experimental support for targeting \"Cygming\" (Cygwin / MinGW) "
"platforms."
msgstr ""

#: ../../../UsersManual.rst:4647
msgid "See also :ref:`Microsoft Extensions <c_ms>`."
msgstr ""

#: ../../../UsersManual.rst:4650
msgid "Cygwin"
msgstr ""

#: ../../../UsersManual.rst:4652
msgid "Clang works on Cygwin-1.7."
msgstr ""

#: ../../../UsersManual.rst:4655
msgid "MinGW32"
msgstr ""

#: ../../../UsersManual.rst:4657
msgid ""
"Clang works on some mingw32 distributions. Clang assumes directories as "
"below;"
msgstr ""

#: ../../../UsersManual.rst:4660
msgid "``C:/mingw/include``"
msgstr ""

#: ../../../UsersManual.rst:4661
msgid "``C:/mingw/lib``"
msgstr ""

#: ../../../UsersManual.rst:4662
msgid "``C:/mingw/lib/gcc/mingw32/4.[3-5].0/include/c++``"
msgstr ""

#: ../../../UsersManual.rst:4664
msgid "On MSYS, a few tests might fail."
msgstr ""

#: ../../../UsersManual.rst:4667
msgid "MinGW-w64"
msgstr ""

#: ../../../UsersManual.rst:4669
msgid ""
"For 32-bit (i686-w64-mingw32), and 64-bit (x86\\_64-w64-mingw32), Clang "
"assumes as below;"
msgstr ""

#: ../../../UsersManual.rst:4672
msgid ""
"``GCC versions 4.5.0 to 4.5.3, 4.6.0 to 4.6.2, or 4.7.0 (for the C++ header "
"search path)``"
msgstr ""

#: ../../../UsersManual.rst:4673
msgid "``some_directory/bin/gcc.exe``"
msgstr ""

#: ../../../UsersManual.rst:4674
msgid "``some_directory/bin/clang.exe``"
msgstr ""

#: ../../../UsersManual.rst:4675
msgid "``some_directory/bin/clang++.exe``"
msgstr ""

#: ../../../UsersManual.rst:4676
msgid "``some_directory/bin/../include/c++/GCC_version``"
msgstr ""

#: ../../../UsersManual.rst:4677
msgid "``some_directory/bin/../include/c++/GCC_version/x86_64-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:4678
msgid "``some_directory/bin/../include/c++/GCC_version/i686-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:4679
msgid "``some_directory/bin/../include/c++/GCC_version/backward``"
msgstr ""

#: ../../../UsersManual.rst:4680
msgid "``some_directory/bin/../x86_64-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:4681
msgid "``some_directory/bin/../i686-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:4682
msgid "``some_directory/bin/../include``"
msgstr ""

#: ../../../UsersManual.rst:4684
msgid ""
"This directory layout is standard for any toolchain you will find on the "
"official `MinGW-w64 website <http://mingw-w64.sourceforge.net>`_."
msgstr ""

#: ../../../UsersManual.rst:4687
msgid ""
"Clang expects the GCC executable \"gcc.exe\" compiled for ``i686-w64-"
"mingw32`` (or ``x86_64-w64-mingw32``) to be present on PATH."
msgstr ""

#: ../../../UsersManual.rst:4690
msgid ""
"`Some tests might fail <https://bugs.llvm.org/show_bug.cgi?id=9072>`_ on "
"``x86_64-w64-mingw32``."
msgstr ""

#: ../../../UsersManual.rst:4694
msgid "AIX"
msgstr ""

#: ../../../UsersManual.rst:4696
msgid "TOC Data Transformation"
msgstr ""

#: ../../../UsersManual.rst:4697
msgid ""
"TOC data transformation is off by default (``-mno-tocdata``). When ``-"
"mtocdata`` is specified, the TOC data transformation will be applied to all "
"suitable variables with static storage duration, including static data "
"members of classes and block-scope static variables (if not marked as "
"exceptions, see further below)."
msgstr ""

#: ../../../UsersManual.rst:4703
msgid "Suitable variables must:"
msgstr ""

#: ../../../UsersManual.rst:4705
msgid "have complete types"
msgstr ""

#: ../../../UsersManual.rst:4706
msgid "be independently generated (i.e., not placed in a pool)"
msgstr ""

#: ../../../UsersManual.rst:4707
msgid "be at most as large as a pointer"
msgstr ""

#: ../../../UsersManual.rst:4708
msgid "not be aligned more strictly than a pointer"
msgstr ""

#: ../../../UsersManual.rst:4709
msgid "not be structs containing flexible array members"
msgstr ""

#: ../../../UsersManual.rst:4710
msgid "not have internal linkage"
msgstr ""

#: ../../../UsersManual.rst:4711
msgid "not have aliases"
msgstr ""

#: ../../../UsersManual.rst:4712
msgid "not have section attributes"
msgstr ""

#: ../../../UsersManual.rst:4713
msgid "not be thread local storage"
msgstr ""

#: ../../../UsersManual.rst:4715
msgid ""
"The TOC data transformation results in the variable, not its address, being "
"placed in the TOC. This eliminates the need to load the address of the "
"variable from the TOC."
msgstr ""

#: ../../../UsersManual.rst:4719
msgid ""
"Note: If the TOC data transformation is applied to a variable whose "
"definition is imported, the linker will generate fixup code for reading or "
"writing to the variable."
msgstr ""

#: ../../../UsersManual.rst:4724
msgid ""
"When multiple toc-data options are used, the last option used has the "
"affect. For example: -mno-tocdata=g5,g1 -mtocdata=g1,g2 -mno-tocdata=g2 -"
"mtocdata=g3,g4 results in -mtocdata=g1,g3,g4"
msgstr ""

#: ../../../UsersManual.rst:4728
msgid "Names of variables not having external linkage will be ignored."
msgstr ""

#: ../../../UsersManual.rst:4730
msgid "**Options:**"
msgstr ""

#: ../../../UsersManual.rst:4734
msgid ""
"This is the default behaviour. Only variables explicitly specified with ``-"
"mtocdata=`` will have the TOC data transformation applied."
msgstr ""

#: ../../../UsersManual.rst:4739
msgid ""
"Apply the TOC data transformation to all suitable variables with static "
"storage duration (including static data members of classes and block-scope "
"static variables) that are not explicitly specified with ``-mno-tocdata=``."
msgstr ""

#: ../../../UsersManual.rst:4745
msgid ""
"Can be used in conjunction with ``-mtocdata`` to mark the comma-separated "
"list of external linkage variables, specified using their mangled names, as "
"exceptions to ``-mtocdata``."
msgstr ""

#: ../../../UsersManual.rst:4751
msgid ""
"Apply the TOC data transformation to the comma-separated list of external "
"linkage variables, specified using their mangled names, if they are "
"suitable. Emit diagnostics for all unsuitable variables specified."
msgstr ""

#: ../../../UsersManual.rst:4756
msgid "Default Visibility Export Mapping"
msgstr ""

#: ../../../UsersManual.rst:4757
msgid ""
"The ``-mdefault-visibility-export-mapping=`` option can be used to control "
"mapping of default visibility to an explicit shared object export (i.e. "
"XCOFF exported visibility). Three values are provided for the option:"
msgstr ""

#: ../../../UsersManual.rst:4761
msgid ""
"``-mdefault-visibility-export-mapping=none``: no additional export "
"information is created for entities with default visibility."
msgstr ""

#: ../../../UsersManual.rst:4763
msgid ""
"``-mdefault-visibility-export-mapping=explicit``: mark entities for export "
"if they have explicit (e.g. via an attribute) default visibility from the "
"source, including RTTI."
msgstr ""

#: ../../../UsersManual.rst:4766
msgid ""
"``-mdefault-visibility-export-mapping=all``: set XCOFF exported visibility "
"for all entities with default visibility from any source. This gives a "
"export behavior similar to ELF platforms where all entities with default "
"visibility are exported."
msgstr ""

#: ../../../UsersManual.rst:4774
msgid "SPIR-V support"
msgstr ""

#: ../../../UsersManual.rst:4776
msgid ""
"Clang supports generation of SPIR-V conformant to `the OpenCL Environment "
"Specification <https://www.khronos.org/registry/OpenCL/specs/3.0-unified/"
"html/OpenCL_Env.html>`_."
msgstr ""

#: ../../../UsersManual.rst:4780
msgid ""
"To generate SPIR-V binaries, Clang uses the in-tree LLVM SPIR-V backend."
msgstr ""

#: ../../../UsersManual.rst:4782
msgid "Example usage for OpenCL kernel compilation:"
msgstr ""

#: ../../../UsersManual.rst:4789
msgid ""
"Both invocations of Clang will result in the generation of a SPIR-V binary "
"file `test.o` for 32 bit and 64 bit respectively. This file can be imported "
"by an OpenCL driver that support SPIR-V consumption or it can be compiled "
"further by offline SPIR-V consumer tools."
msgstr ""

#: ../../../UsersManual.rst:4794
msgid ""
"Converting to SPIR-V produced with the optimization levels other than `-O0` "
"is currently available as an experimental feature and it is not guaranteed "
"to work in all cases."
msgstr ""

#: ../../../UsersManual.rst:4798
msgid ""
"Linking is done using ``spirv-link`` from `the SPIRV-Tools project <https://"
"github.com/KhronosGroup/SPIRV-Tools#linker>`_. Similar to other external "
"linkers, Clang will expect ``spirv-link`` to be installed separately and to "
"be present in the ``PATH`` environment variable. Please refer to `the build "
"and installation instructions <https://github.com/KhronosGroup/SPIRV-"
"Tools#build>`_."
msgstr ""

#: ../../../UsersManual.rst:4809
msgid ""
"More information about the SPIR-V target settings and supported versions of "
"SPIR-V format can be found in `the SPIR-V target guide <https://llvm.org/"
"docs/SPIRVUsage.html>`__."
msgstr ""

#: ../../../UsersManual.rst:4816
msgid "clang-cl"
msgstr ""

#: ../../../UsersManual.rst:4818
msgid ""
"clang-cl is an alternative command-line interface to Clang, designed for "
"compatibility with the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:4821
msgid ""
"To enable clang-cl to find system headers, libraries, and the linker when "
"run from the command-line, it should be executed inside a Visual Studio "
"Native Tools Command Prompt or a regular Command Prompt where the "
"environment has been set up using e.g. `vcvarsall.bat <https://msdn."
"microsoft.com/en-us/library/f2ccy3wt.aspx>`_."
msgstr ""

#: ../../../UsersManual.rst:4826
msgid ""
"clang-cl can also be used from inside Visual Studio by selecting the LLVM "
"Platform Toolset. The toolset is not part of the installer, but may be "
"installed separately from the `Visual Studio Marketplace <https://"
"marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-"
"toolchain>`_. To use the toolset, select a project in Solution Explorer, "
"open its Property Page (Alt+F7), and in the \"General\" section of "
"\"Configuration Properties\" change \"Platform Toolset\" to LLVM.  Doing so "
"enables an additional Property Page for selecting the clang-cl executable to "
"use for builds."
msgstr ""

#: ../../../UsersManual.rst:4835
msgid ""
"To use the toolset with MSBuild directly, invoke it with e.g. ``/p:"
"PlatformToolset=LLVM``. This allows trying out the clang-cl toolchain "
"without modifying your project files."
msgstr ""

#: ../../../UsersManual.rst:4839
msgid ""
"It's also possible to point MSBuild at clang-cl without changing toolset by "
"passing ``/p:CLToolPath=c:\\llvm\\bin /p:CLToolExe=clang-cl.exe``."
msgstr ""

#: ../../../UsersManual.rst:4842
msgid ""
"When using CMake and the Visual Studio generators, the toolset can be set "
"with the ``-T`` flag:"
msgstr ""

#: ../../../UsersManual.rst:4848
msgid ""
"When using CMake with the Ninja generator, set the ``CMAKE_C_COMPILER`` and "
"``CMAKE_CXX_COMPILER`` variables to clang-cl:"
msgstr ""

#: ../../../UsersManual.rst:4858
msgid "Command-Line Options"
msgstr ""

#: ../../../UsersManual.rst:4860
msgid ""
"To be compatible with cl.exe, clang-cl supports most of the same command-"
"line options. Those options can start with either ``/`` or ``-``. It also "
"supports some of Clang's core options, such as the ``-W`` options."
msgstr ""

#: ../../../UsersManual.rst:4864
msgid ""
"Options that are known to clang-cl, but not currently supported, are ignored "
"with a warning. For example:"
msgstr ""

#: ../../../UsersManual.rst:4871
msgid ""
"To suppress warnings about unused arguments, use the ``-Qunused-arguments`` "
"option."
msgstr ""

#: ../../../UsersManual.rst:4873
msgid ""
"Options that are not known to clang-cl will be ignored by default. Use the "
"``-Werror=unknown-argument`` option in order to treat them as errors. If "
"these options are spelled with a leading ``/``, they will be mistaken for a "
"filename:"
msgstr ""

#: ../../../UsersManual.rst:4881
msgid ""
"Please `file a bug <https://github.com/llvm/llvm-project/issues/new?"
"labels=clang-cl>`_ for any valid cl.exe flags that clang-cl does not "
"understand."
msgstr ""

#: ../../../UsersManual.rst:4884
msgid "Execute ``clang-cl /?`` to see a list of supported options:"
msgstr ""

#: ../../../UsersManual.rst:5190
msgid "The /clang: Option"
msgstr ""

#: ../../../UsersManual.rst:5192
msgid ""
"When clang-cl is run with a set of ``/clang:<arg>`` options, it will gather "
"all of the ``<arg>`` arguments and process them as if they were passed to "
"the clang driver. This mechanism allows you to pass flags that are not "
"exposed in the clang-cl options or flags that have a different meaning when "
"passed to the clang driver. Regardless of where they appear in the command "
"line, the ``/clang:`` arguments are treated as if they were passed at the "
"end of the clang-cl command line."
msgstr ""

#: ../../../UsersManual.rst:5201
msgid "The /Zc:dllexportInlines- Option"
msgstr ""

#: ../../../UsersManual.rst:5203
msgid ""
"This causes the class-level `dllexport` and `dllimport` attributes to not "
"apply to inline member functions, as they otherwise would. For example, in "
"the code below `S::foo()` would normally be defined and exported by the DLL, "
"but when using the ``/Zc:dllexportInlines-`` flag it is not:"
msgstr ""

#: ../../../UsersManual.rst:5214
msgid ""
"This has the benefit that the compiler doesn't need to emit a definition of "
"`S::foo()` in every translation unit where the declaration is included, as "
"it would otherwise do to ensure there's a definition in the DLL even if it's "
"not used there. If the declaration occurs in a header file that's widely "
"used, this can save significant compilation time and output size. It also "
"reduces the number of functions exported by the DLL similarly to what ``-"
"fvisibility-inlines-hidden`` does for shared objects on ELF and Mach-O. "
"Since the function declaration comes with an inline definition, users of the "
"library can use that definition directly instead of importing it from the "
"DLL."
msgstr ""

#: ../../../UsersManual.rst:5224
msgid ""
"Note that the Microsoft Visual C++ compiler does not support this option, "
"and if code in a DLL is compiled with ``/Zc:dllexportInlines-``, the code "
"using the DLL must be compiled in the same way so that it doesn't attempt to "
"dllimport the inline member functions. The reverse scenario should generally "
"work though: a DLL compiled without this flag (such as a system library "
"compiled with Visual C++) can be referenced from code compiled using the "
"flag, meaning that the referencing code will use the inline definitions "
"instead of importing them from the DLL."
msgstr ""

#: ../../../UsersManual.rst:5233
msgid ""
"Also note that like when using ``-fvisibility-inlines-hidden``, the address "
"of `S::foo()` will be different inside and outside the DLL, breaking the C/C+"
"+ standard requirement that functions have a unique address."
msgstr ""

#: ../../../UsersManual.rst:5237
msgid ""
"The flag does not apply to explicit class template instantiation definitions "
"or declarations, as those are typically used to explicitly provide a single "
"definition in a DLL, (dllexported instantiation definition) or to signal "
"that the definition is available elsewhere (dllimport instantiation "
"declaration). It also doesn't apply to inline members with static local "
"variables, to ensure that the same instance of the variable is used inside "
"and outside the DLL."
msgstr ""

#: ../../../UsersManual.rst:5244
msgid ""
"Using this flag can cause problems when inline functions that would "
"otherwise be dllexported refer to internal symbols of a DLL. For example:"
msgstr ""

#: ../../../UsersManual.rst:5255
msgid ""
"Normally, references to `S::foo()` would use the definition in the DLL from "
"which it was exported, and which presumably also has the definition of "
"`internal()`. However, when using ``/Zc:dllexportInlines-``, the inline "
"definition of `S::foo()` is used directly, resulting in a link error since "
"`internal()` is not available. Even worse, if there is an inline definition "
"of `internal()` containing a static local variable, we will now refer to a "
"different instance of that variable than in the DLL:"
msgstr ""

#: ../../../UsersManual.rst:5271
msgid ""
"This could lead to very subtle bugs. Using ``-fvisibility-inlines-hidden`` "
"can lead to the same issue. To avoid it in this case, make `S::foo()` or "
"`internal()` non-inline, or mark them `dllimport/dllexport` explicitly."
msgstr ""

#: ../../../UsersManual.rst:5276
msgid "Finding Clang runtime libraries"
msgstr ""

#: ../../../UsersManual.rst:5278
msgid ""
"clang-cl supports several features that require runtime library support:"
msgstr ""

#: ../../../UsersManual.rst:5280
msgid "Address Sanitizer (ASan): ``-fsanitize=address``"
msgstr ""

#: ../../../UsersManual.rst:5281
msgid "Undefined Behavior Sanitizer (UBSan): ``-fsanitize=undefined``"
msgstr ""

#: ../../../UsersManual.rst:5282
msgid "Code coverage: ``-fprofile-instr-generate -fcoverage-mapping``"
msgstr ""

#: ../../../UsersManual.rst:5283
msgid "Profile Guided Optimization (PGO): ``-fprofile-generate``"
msgstr ""

#: ../../../UsersManual.rst:5284
msgid "Certain math operations (int128 division) require the builtins library"
msgstr ""

#: ../../../UsersManual.rst:5286
msgid ""
"In order to use these features, the user must link the right runtime "
"libraries into their program. These libraries are distributed alongside "
"Clang in the library resource directory. Clang searches for the resource "
"directory by searching relative to the Clang executable. For example, if "
"LLVM is installed in ``C:\\Program Files\\LLVM``, then the profile runtime "
"library will be located at the path ``C:\\Program "
"Files\\LLVM\\lib\\clang\\11.0.0\\lib\\windows\\clang_rt.profile-x86_64.lib``."
msgstr ""

#: ../../../UsersManual.rst:5294
msgid ""
"For UBSan, PGO, and coverage, Clang will emit object files that auto-link "
"the appropriate runtime library, but the user generally needs to help the "
"linker (whether it is ``lld-link.exe`` or MSVC ``link.exe``) find the "
"library resource directory. Using the example installation above, this would "
"mean passing ``/LIBPATH:C:\\Program "
"Files\\LLVM\\lib\\clang\\11.0.0\\lib\\windows`` to the linker. If the user "
"links the program with the ``clang`` or ``clang-cl`` drivers, the driver "
"will pass this flag for them."
msgstr ""

#: ../../../UsersManual.rst:5302
msgid ""
"The auto-linking can be disabled with -fno-rtlib-defaultlib. If that flag is "
"used, pass the complete flag to required libraries as described for ASan "
"below."
msgstr ""

#: ../../../UsersManual.rst:5305
msgid ""
"If the linker cannot find the appropriate library, it will emit an error "
"like this::"
msgstr ""

#: ../../../UsersManual.rst:5317
msgid ""
"To fix the error, add the appropriate ``/libpath:`` flag to the link line."
msgstr ""

#: ../../../UsersManual.rst:5319
msgid ""
"For ASan, as of this writing, the user is also responsible for linking "
"against the correct ASan libraries."
msgstr ""

#: ../../../UsersManual.rst:5322
msgid ""
"If the user is using the dynamic CRT (``/MD``), then they should add "
"``clang_rt.asan_dynamic-x86_64.lib`` to the link line as a regular input. "
"For other architectures, replace x86_64 with the appropriate name here and "
"below."
msgstr ""

#: ../../../UsersManual.rst:5326
msgid ""
"If the user is using the static CRT (``/MT``), then different runtimes are "
"used to produce DLLs and EXEs. To link a DLL, pass ``clang_rt.asan_dll_thunk-"
"x86_64.lib``. To link an EXE, pass ``-wholearchive:clang_rt.asan-x86_64."
"lib``."
msgstr ""

#: ../../../UsersManual.rst:5332
msgid "Windows System Headers and Library Lookup"
msgstr ""

#: ../../../UsersManual.rst:5334
msgid ""
"clang-cl uses a set of different approaches to locate the right system "
"libraries to link against when building code.  The Windows environment uses "
"libraries from three distinct sources:"
msgstr ""

#: ../../../UsersManual.rst:5338
msgid "Windows SDK"
msgstr ""

#: ../../../UsersManual.rst:5339
msgid "UCRT (Universal C Runtime)"
msgstr ""

#: ../../../UsersManual.rst:5340
msgid "Visual C++ Tools (VCRuntime)"
msgstr ""

#: ../../../UsersManual.rst:5342
msgid ""
"The Windows SDK provides the import libraries and headers required to build "
"programs against the Windows system packages.  Underlying the Windows SDK is "
"the UCRT, the universal C runtime."
msgstr ""

#: ../../../UsersManual.rst:5346
msgid ""
"This difference is best illustrated by the various headers that one would "
"find in the different categories.  The WinSDK would contain headers such as "
"`WinSock2.h` which is part of the Windows API surface, providing the Windows "
"socketing interfaces for networking.  UCRT provides the C library headers, "
"including e.g. `stdio.h`.  Finally, the Visual C++ tools provides the "
"underlying Visual C++ Runtime headers such as `stdint.h` or `crtdefs.h`."
msgstr ""

#: ../../../UsersManual.rst:5353
msgid ""
"There are various controls that allow the user control over where clang-cl "
"will locate these headers.  The default behaviour for the Windows SDK and "
"UCRT is as follows:"
msgstr ""

#: ../../../UsersManual.rst:5357 ../../../UsersManual.rst:5399
msgid "Consult the command line."
msgstr ""

#: ../../../UsersManual.rst:5359
msgid ""
"Anything the user specifies is always given precedence.  The following "
"extensions are part of the clang-cl toolset:"
msgstr ""

#: ../../../UsersManual.rst:5362 ../../../UsersManual.rst:5401
msgid "`/winsysroot:`"
msgstr ""

#: ../../../UsersManual.rst:5364
msgid ""
"The `/winsysroot:` is used as an equivalent to `-sysroot` on Unix "
"environments.  It allows the control of an alternate location to be treated "
"as a system root.  When specified, it will be used as the root where the "
"`Windows Kits` is located."
msgstr ""

#: ../../../UsersManual.rst:5369
msgid "`/winsdkversion:`"
msgstr ""

#: ../../../UsersManual.rst:5370
msgid "`/winsdkdir:`"
msgstr ""

#: ../../../UsersManual.rst:5372
msgid ""
"If `/winsysroot:` is not specified, the `/winsdkdir:` argument is consulted "
"as a location to identify where the Windows SDK is located.  Contrary to `/"
"winsysroot:`, `/winsdkdir:` is expected to be the complete path rather than "
"a root to locate `Windows Kits`."
msgstr ""

#: ../../../UsersManual.rst:5377
msgid ""
"The `/winsdkversion:` flag allows the user to specify a version identifier "
"for the SDK to prefer.  When this is specified, no additional validation is "
"performed and this version is preferred.  If the version is not specified, "
"the highest detected version number will be used."
msgstr ""

#: ../../../UsersManual.rst:5382 ../../../UsersManual.rst:5416
msgid "Consult the environment."
msgstr ""

#: ../../../UsersManual.rst:5384
msgid "TODO: This is not yet implemented."
msgstr ""

#: ../../../UsersManual.rst:5386
msgid "This will consult the environment variables:"
msgstr ""

#: ../../../UsersManual.rst:5388
msgid "`WindowsSdkDir`"
msgstr ""

#: ../../../UsersManual.rst:5389
msgid "`UCRTVersion`"
msgstr ""

#: ../../../UsersManual.rst:5391
msgid "Fallback to the registry."
msgstr ""

#: ../../../UsersManual.rst:5393
msgid ""
"If no arguments are used to indicate where the SDK is present, and the "
"compiler is running on Windows, the registry is consulted to locate the "
"installation."
msgstr ""

#: ../../../UsersManual.rst:5397
msgid ""
"The Visual C++ Toolset has a slightly more elaborate mechanism for detection."
msgstr ""

#: ../../../UsersManual.rst:5403
msgid ""
"The `/winsysroot:` is used as an equivalent to `-sysroot` on Unix "
"environments.  It allows the control of an alternate location to be treated "
"as a system root.  When specified, it will be used as the root where the "
"`VC` directory is located."
msgstr ""

#: ../../../UsersManual.rst:5408
msgid "`/vctoolsdir:`"
msgstr ""

#: ../../../UsersManual.rst:5409
msgid "`/vctoolsversion:`"
msgstr ""

#: ../../../UsersManual.rst:5411
msgid ""
"If `/winsysroot:` is not specified, the `/vctoolsdir:` argument is consulted "
"as a location to identify where the Visual C++ Tools are located.  If `/"
"vctoolsversion:` is specified, that version is preferred, otherwise, the "
"highest version detected is used."
msgstr ""

#: ../../../UsersManual.rst:5418
msgid "`/external:[VARIABLE]`"
msgstr ""

#: ../../../UsersManual.rst:5420
msgid ""
"This specifies a user identified environment variable which is treated as a "
"path delimiter (`;`) separated list of paths to map into `-imsvc` arguments "
"which are treated as `-isystem`."
msgstr ""

#: ../../../UsersManual.rst:5424
msgid "`INCLUDE` and `EXTERNAL_INCLUDE`"
msgstr ""

#: ../../../UsersManual.rst:5426
msgid ""
"The path delimiter (`;`) separated list of paths will be mapped to `-imsvc` "
"arguments which are treated as `-isystem`."
msgstr ""

#: ../../../UsersManual.rst:5429
msgid "`LIB` (indirectly)"
msgstr ""

#: ../../../UsersManual.rst:5431
msgid ""
"The linker `link.exe` or `lld-link.exe` will honour the environment variable "
"`LIB` which is a path delimiter (`;`) set of paths to consult for the import "
"libraries to use when linking the final target."
msgstr ""

#: ../../../UsersManual.rst:5435
msgid ""
"The following environment variables will be consulted and used to form paths "
"to validate and load content from as appropriate:"
msgstr ""

#: ../../../UsersManual.rst:5438
msgid "`VCToolsInstallDir`"
msgstr ""

#: ../../../UsersManual.rst:5439
msgid "`VCINSTALLDIR`"
msgstr ""

#: ../../../UsersManual.rst:5440
msgid "`Path`"
msgstr ""

#: ../../../UsersManual.rst:5442
msgid "Consult `ISetupConfiguration` [Windows Only]"
msgstr ""

#: ../../../UsersManual.rst:5444
msgid ""
"Assuming that the toolchain is built with `USE_MSVC_SETUP_API` defined and "
"is running on Windows, the Visual Studio COM interface `ISetupConfiguration` "
"will be used to locate the installation of the MSVC toolset."
msgstr ""

#: ../../../UsersManual.rst:5448
msgid "Fallback to the registry [DEPRECATED]"
msgstr ""

#: ../../../UsersManual.rst:5450
msgid ""
"The registry information is used to help locate the installation as a final "
"fallback.  This is only possible for pre-VS2017 installations and is "
"considered deprecated."
msgstr ""

#: ../../../UsersManual.rst:5455
msgid "Restrictions and Limitations compared to Clang"
msgstr ""

#: ../../../UsersManual.rst:5457
msgid ""
"Strict aliasing (TBAA) is always off by default in clang-cl whereas in "
"clang, strict aliasing is turned on by default for all optimization levels. "
"For more details, see :ref:`Strict aliasing <strict_aliasing>`."
msgstr ""
