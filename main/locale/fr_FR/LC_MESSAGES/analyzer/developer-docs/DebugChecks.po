# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/developer-docs/DebugChecks.rst:3
msgid "Debug Checks"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:8
msgid ""
"The analyzer contains a number of checkers which can aid in debugging. "
"Enable them by using the \"-analyzer-checker=\" flag, followed by the name "
"of the checker."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:12
msgid ""
"These checkers are especially useful when analyzing a specific function, "
"using the `-analyze-function` flag. The flag accepts the function name for C "
"code, like `-analyze-function=myfunction`. For C++ code, due to overloading, "
"the function name must include the parameter list, like `-analyze-"
"function=\"myfunction(int, _Bool)\"`."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:18
msgid ""
"Note that `bool` must be spelled as `_Bool` in the parameter list. Refer to "
"the output of `-analyzer-display-progress` to find the fully qualified "
"function name."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:22
msgid ""
"There are cases when this name can still collide. For example with template "
"function instances with non-deducible (aka. explicit) template parameters. "
"In such cases, prefer passing a USR instead of a function name can resolve "
"this ambiguity, like this: `-analyze-function=\"c:"
"@S@Window@F@overloaded#I#\"`."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:27
msgid ""
"Use the `clang-extdef-mapping` tool to find the USR for different functions."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:30
msgid "General Analysis Dumpers"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:32
msgid ""
"These checkers are used to dump the results of various infrastructural "
"analyses to stderr. Some checkers also have \"view\" variants, which will "
"display a graph using a 'dot' format viewer (such as Graphviz on macOS) "
"instead."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:36
msgid ""
"debug.DumpCallGraph, debug.ViewCallGraph: Show the call graph generated for "
"the current translation unit. This is used to determine the order in which "
"to analyze functions when inlining is enabled."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:40
msgid ""
"debug.DumpCFG, debug.ViewCFG: Show the CFG generated for each top-level "
"function being analyzed."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:43
msgid ""
"debug.DumpDominators: Shows the dominance tree for the CFG of each top-level "
"function."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:46
msgid ""
"debug.DumpLiveVars: Show the results of live variable analysis for each top-"
"level function being analyzed."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:49
msgid ""
"debug.DumpLiveExprs: Show the results of live expression analysis for each "
"top-level function being analyzed."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:52
msgid ""
"debug.ViewExplodedGraph: Show the Exploded Graphs generated for the analysis "
"of different functions in the input translation unit. When there are several "
"functions analyzed, display one graph per function. Beware that these graphs "
"may grow very large, even for small functions."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:58
msgid "Path Tracking"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:60
msgid ""
"These checkers print information about the path taken by the analyzer engine."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:62
msgid ""
"debug.DumpCalls: Prints out every function or method call encountered during "
"a path traversal. This is indented to show the call stack, but does NOT do "
"any special handling of branches, meaning different paths could end up "
"interleaved."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:67
msgid ""
"debug.DumpTraversal: Prints the name of each branch statement encountered "
"during a path traversal (\"IfStmt\", \"WhileStmt\", etc). Currently used to "
"check whether the analysis engine is doing BFS or DFS."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:73
msgid "State Checking"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:75
msgid ""
"These checkers will print out information about the analyzer state in the "
"form of analysis warnings. They are intended for use with the -verify "
"functionality in regression tests."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:79
msgid ""
"debug.TaintTest: Prints out the word \"tainted\" for every expression that "
"carries taint. At the time of this writing, taint was only introduced by the "
"checks under experimental.security.taint.TaintPropagation; this checker may "
"eventually move to the security.taint package."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:84
msgid ""
"debug.ExprInspection: Responds to certain function calls, which are modeled "
"after builtins. These function calls should affect the program state other "
"than the evaluation of their arguments; to use them, you will need to "
"declare them within your test file. The available functions are described "
"below."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:89
msgid ""
"(FIXME: debug.ExprInspection should probably be renamed, since it no longer "
"only inspects expressions.)"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:94
msgid "ExprInspection checks"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:96
msgid "``void clang_analyzer_eval(bool);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:98
msgid ""
"Prints TRUE if the argument is known to have a non-zero value, FALSE if the "
"argument is known to have a zero or null value, and UNKNOWN if the argument "
"isn't sufficiently constrained on this path.  You can use this to test other "
"values by using expressions like \"x == 5\".  Note that this functionality "
"is currently DISABLED in inlined functions, since different calls to the "
"same inlined function could provide different information, making it "
"difficult to write proper -verify directives."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:106
#: ../../../analyzer/developer-docs/DebugChecks.rst:131
msgid "In C, the argument can be typed as 'int' or as '_Bool'."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:108
#: ../../../analyzer/developer-docs/DebugChecks.rst:133
#: ../../../analyzer/developer-docs/DebugChecks.rst:151
#: ../../../analyzer/developer-docs/DebugChecks.rst:165
#: ../../../analyzer/developer-docs/DebugChecks.rst:187
#: ../../../analyzer/developer-docs/DebugChecks.rst:204
#: ../../../analyzer/developer-docs/DebugChecks.rst:224
#: ../../../analyzer/developer-docs/DebugChecks.rst:238
#: ../../../analyzer/developer-docs/DebugChecks.rst:257
#: ../../../analyzer/developer-docs/DebugChecks.rst:270
#: ../../../analyzer/developer-docs/DebugChecks.rst:283
#: ../../../analyzer/developer-docs/DebugChecks.rst:303
#: ../../../analyzer/developer-docs/DebugChecks.rst:321
#: ../../../analyzer/developer-docs/DebugChecks.rst:341
msgid "Example usage::"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:115
msgid "``void clang_analyzer_checkInlined(bool);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:117
msgid ""
"If a call occurs within an inlined function, prints TRUE or FALSE according "
"to the value of its argument. If a call occurs outside an inlined function, "
"nothing is printed."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:121
msgid ""
"The intended use of this checker is to assert that a function is inlined at "
"least once (by passing 'true' and expecting a warning), or to assert that a "
"function is never inlined (by passing 'false' and expecting no warning). The "
"argument is technically unnecessary but is intended to clarify intent."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:126
msgid ""
"You might wonder why we can't print TRUE if a function is ever inlined and "
"FALSE if it is not. The problem is that any inlined function could "
"conceivably also be analyzed as a top-level function (in which case both "
"TRUE and FALSE would be printed), depending on the value of the -analyzer-"
"inlining option."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:147
msgid "``void clang_analyzer_warnIfReached();``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:149
msgid "Generate a warning if this line of code gets reached by the analyzer."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:160
msgid "``void clang_analyzer_numTimesReached();``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:162
msgid ""
"Same as above, but include the number of times this call expression gets "
"reached by the analyzer during the current analysis."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:171
msgid "``void clang_analyzer_warnOnDeadSymbol(int);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:173
msgid ""
"Subscribe for a delayed warning when the symbol that represents the value of "
"the argument is garbage-collected by the analyzer."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:176
msgid ""
"When calling 'clang_analyzer_warnOnDeadSymbol(x)', if value of 'x' is a "
"symbol, then this symbol is marked by the ExprInspection checker. Then, "
"during each garbage collection run, the checker sees if the marked symbol is "
"being collected and issues the 'SYMBOL DEAD' warning if it does. This way "
"you know where exactly, up to the line of code, the symbol dies."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:182
msgid ""
"It is unlikely that you call this function after the symbol is already dead, "
"because the very reference to it as the function argument prevents it from "
"dying. However, if the argument is not a symbol but a concrete value, no "
"warning would be issued."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:195
msgid "``void clang_analyzer_explain(a single argument of any type);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:197
msgid ""
"This function explains the value of its argument in a human-readable manner "
"in the warning message. You can make as many overrides of its prototype in "
"the test code as necessary to explain various integral, pointer, or even "
"record-type values. To simplify usage in C code (where overloading the "
"function declaration is not allowed), you may append an arbitrary suffix to "
"the function name, without affecting functionality."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:219
msgid "``void clang_analyzer_dump( /* a single argument of any type */);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:221
msgid ""
"Similar to clang_analyzer_explain, but produces a raw dump of the value, "
"same as SVal::dump()."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:231
msgid "``size_t clang_analyzer_getExtent(void *);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:233
msgid ""
"This function returns the value that represents the extent of a memory "
"region pointed to by the argument. This value is often difficult to obtain "
"otherwise, because no valid code that produces this value. However, it may "
"be useful for testing purposes, to see how well does the analyzer model "
"region extents."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:248
msgid "``void clang_analyzer_printState();``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:250
msgid ""
"Dumps the current ProgramState to the stderr. Quickly lookup the program "
"state at any execution point without ViewExplodedGraph or re-compiling the "
"program. This is not very useful for writing tests (apart from testing how "
"ProgramState gets printed), but useful for debugging tests. Also, this "
"method doesn't produce a warning, so it gets printed on the console before "
"all other ExprInspection warnings."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:264
msgid "``void clang_analyzer_hashDump(int);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:266
msgid ""
"The analyzer can generate a hash to identify reports. To debug what "
"information is used to calculate this hash it is possible to dump the hashed "
"string as a warning of an arbitrary expression using the function above."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:277
msgid "``void clang_analyzer_denote(int, const char *);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:279
msgid ""
"Denotes symbols with strings. A subsequent call to clang_analyzer_express() "
"will expresses another symbol in terms of these string. Useful for testing "
"relationships between different symbols."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:290
msgid "``void clang_analyzer_express(int);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:292
msgid "See clang_analyzer_denote()."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:294
msgid "``void clang_analyzer_isTainted(a single argument of any type);``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:296
msgid ""
"Queries the analyzer whether the expression used as argument is tainted or "
"not. This is useful in tests, where we don't want to issue warning for all "
"tainted expressions but only check for certain expressions. This would help "
"to reduce the *noise* that the `TaintTest` debug checker would introduce and "
"let you focus on the `expected-warning`'s that you really care about."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:316
msgid "``clang_analyzer_dumpExtent(a single argument of any type)``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:317
msgid "``clang_analyzer_dumpElementCount(a single argument of any type)``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:319
msgid "Dumps out the extent and the element count of the argument."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:329
msgid "``clang_analyzer_value(a single argument of integer or pointer type)``"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:331
msgid ""
"Prints an associated value for the given argument. Supported argument types "
"are integers, enums and pointers. The value can be represented either as a "
"range set or as a concrete integer. For the rest of the types function "
"prints ``n/a`` (aka not available)."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:336
msgid ""
"**Note:** This function will print nothing when clang uses Z3 as the "
"constraint manager (which is an unsupported and badly broken analysis mode "
"that's distinct from the supported and stable \"Z3 refutation\" aka \"Z3 "
"crosscheck\" mode)."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:352
msgid "Statistics"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:354
msgid ""
"The debug.Stats checker collects various information about the analysis of "
"each function, such as how many blocks were reached and if the analyzer "
"timed out."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:357
msgid ""
"There is also an additional -analyzer-stats flag, which enables various "
"statistics within the analyzer engine. Note the Stats checker (which "
"produces at least one bug report per function) may actually change the "
"values reported by -analyzer-stats."
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:363
msgid "Output testing checkers"
msgstr ""

#: ../../../analyzer/developer-docs/DebugChecks.rst:365
msgid ""
"debug.ReportStmts reports a warning at **every** statement, making it a very "
"useful tool for testing thoroughly bug report construction and output "
"emission."
msgstr ""
