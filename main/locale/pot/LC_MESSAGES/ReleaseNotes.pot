# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:6
msgid "Clang |release| |ReleaseNotesTitle|"
msgstr ""

#: ../../../ReleaseNotes.rst:12
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"These are in-progress notes for the upcoming Clang |version| release. "
"Release notes for previous releases can be found on `the Releases Page "
"<https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:22
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release |release|. Here "
"we describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <https://llvm.org/docs/ReleaseNotes."
"html>`_. For the libc++ release notes, see `this page <https://libcxx.llvm."
"org/ReleaseNotes.html>`_. All LLVM releases may be downloaded from the `LLVM "
"releases web site <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:38
msgid "Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:40
msgid ""
"Clang will now emit a warning if the auto-detected GCC installation "
"directory (i.e. the one with the largest version number) does not contain "
"libstdc++ include directories although a \"complete\" GCC installation "
"directory containing the include directories is available. It is planned to "
"change the auto-detection to prefer the \"complete\" directory in the "
"future.  The warning will disappear if the libstdc++ include directories are "
"either installed or removed for all GCC installation directories considered "
"by the auto-detection; see the output of ``clang -v`` for a list of those "
"directories. If the GCC installations cannot be modified and maintaining the "
"current choice of the auto-detection is desired, the GCC installation "
"directory can be selected explicitly using the ``--gcc-install-dir`` command "
"line argument. This will silence the warning. It can also be disabled using "
"the ``-Wno-gcc-install-dir-libstdcxx`` command line flag."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"Scalar deleting destructor support has been aligned with MSVC when targeting "
"the MSVC ABI. Clang previously implemented support for ``::delete`` by "
"calling the complete object destructor and then the appropriate global "
"delete operator (as is done for the Itanium ABI). The scalar deleting "
"destructor is now called to destroy the object and deallocate its storage. "
"This is an ABI change that can result in memory corruption when a program "
"built for the MSVC ABI has portions compiled with clang 21 or earlier and "
"portions compiled with a version of clang 22 (or MSVC). Consider a class "
"``X`` that declares a virtual destructor and an ``operator delete`` member "
"with the destructor defined in library ``A`` and a call to `::delete`` in "
"library ``B``. If library ``A`` is compiled with clang 21 and library ``B`` "
"is compiled with clang 22, the ``::delete`` call might dispatch to the "
"scalar deleting destructor emitted in library ``A`` which will erroneously "
"call the member ``operator delete`` instead of the expected global delete "
"operator. The old behavior is retained under ``-fclang-abi-compat=21`` flag."
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid "C/C++ Language Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid ""
"The ``__has_builtin`` function now only considers the currently active "
"target when being used with target offloading."
msgstr ""

#: ../../../ReleaseNotes.rst:78
msgid ""
"The ``-Wincompatible-pointer-types`` diagnostic now defaults to an error; it "
"can still be downgraded to a warning by passing ``-Wno-error=incompatible-"
"pointer-types``. (`#74605 <https://github.com/llvm/llvm-project/"
"issues/74605>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:82
msgid "C++ Specific Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"For C++20 modules, the Reduced BMI mode will be the default option. This may "
"introduce regressions if your build system supports two-phase compilation "
"model but haven't support reduced BMI or it is a compiler bug or a bug in "
"users code."
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid ""
"Clang now correctly diagnoses during constant expression evaluation "
"undefined behavior due to member pointer access to a member which is not a "
"direct or indirect member of the most-derived object of the accessed object "
"but is instead located directly in a sibling class to one of the classes "
"along the inheritance hierarchy of the most-derived object as ill-formed. "
"Other scenarios in which the member is not member of the most derived object "
"were already diagnosed previously. (`#150709 <https://github.com/llvm/llvm-"
"project/issues/150709>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid ""
"``VarTemplateSpecializationDecl::getTemplateArgsAsWritten()`` method now "
"returns ``nullptr`` for implicitly instantiated declarations."
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid "ABI Changes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:114
msgid "AST Dumping Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid ""
"How nested name specifiers are dumped and printed changes, keeping track of "
"clang AST changes."
msgstr ""

#: ../../../ReleaseNotes.rst:117
msgid ""
"Pretty-printing of atomic builtins ``__atomic_test_and_set`` and "
"``__atomic_clear`` in ``-ast-print`` output. These previously displayed an "
"extra ``<null expr>`` argument, e.g.:"
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid "``__atomic_test_and_set(p, <null expr>, 0)``"
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid "Now they are printed as:"
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "``__atomic_test_and_set(p, 0)``"
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid ""
"Pretty-printing of templates with inherited (i.e. specified in a previous "
"redeclaration) default arguments has been fixed."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid ""
"Default arguments of template template parameters are pretty-printed now."
msgstr ""

#: ../../../ReleaseNotes.rst:132
msgid "Clang Frontend Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"Members of anonymous unions/structs are now injected as "
"``IndirectFieldDecl`` into the enclosing record even if their names conflict "
"with other names in the scope. These ``IndirectFieldDecl`` are marked "
"invalid."
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid "Clang Python Bindings Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"TypeKind ``ELABORATED`` is not used anymore, per clang AST changes removing "
"ElaboratedTypes. The value becomes unused, and all the existing users should "
"expect the former underlying type to be reported instead."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Remove ``AccessSpecifier.NONE`` kind. No libclang interfaces ever returned "
"this kind."
msgstr ""

#: ../../../ReleaseNotes.rst:145
msgid "What's New in Clang |release|?"
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid "C++ Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid ""
"A new family of builtins ``__builtin_*_synthesizes_from_spaceship`` has been "
"added. These can be queried to know whether the ``<`` (``lt``), ``>`` "
"(``gt``), ``<=`` (``le``), or ``>=`` (``ge``) operators are synthesized from "
"a ``<=>``. This makes it possible to optimize certain facilities by using "
"the ``<=>`` operation directly instead of doing multiple comparisons."
msgstr ""

#: ../../../ReleaseNotes.rst:156
msgid "C++2c Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid ""
"Started the implementation of `P2686R5 <https://wg21.link/P2686R5>`_ "
"Constexpr structured bindings. At this timem, references to constexpr and "
"decomposition of *tuple-like* types are not supported (only arrays and "
"aggregates are)."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid "C++23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid "C++20 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid ""
"Clang now normalizes constraints before checking whether they are satisfied, "
"as mandated by the standard. As a result, Clang no longer incorrectly "
"diagnoses substitution failures in template arguments only used in concept-"
"ids, and produces better diagnostics for satisfaction failure. (`#61811 "
"<https://github.com/llvm/llvm-project/issues/61811>`_) (`#135190 <https://"
"github.com/llvm/llvm-project/issues/135190>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid "C++17 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Resolutions to C++ Defect Reports"
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid "C Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:182
msgid "C2y Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:183
msgid ""
"No longer triggering ``-Wstatic-in-inline`` in C2y mode; use of a static "
"function or variable within an extern inline function is no longer a "
"constraint per `WG14 N3622 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3622.txt>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"Clang now supports `N3355 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3355.htm>`_ Named Loops."
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid "C23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Added ``FLT_SNAN``, ``DBL_SNAN``, and ``LDBL_SNAN`` to Clang's ``<float.h>`` "
"header in C23 and later modes. This implements `WG14 N2710 <https://www.open-"
"std.org/jtc1/sc22/wg14/www/docs/n2710.htm>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Added ``__builtin_elementwise_fshl`` and ``__builtin_elementwise_fshr``."
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "``__builtin_elementwise_abs`` can now be used in constant expression."
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid ""
"Added ``__builtin_elementwise_minnumnum`` and "
"``__builtin_elementwise_maxnumnum``."
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid ""
"Trapping UBSan (e.g. ``-fsanitize=undefined -fsanitize-trap=undefined``) now "
"emits a string describing the reason for trapping into the generated debug "
"info. This feature allows debuggers (e.g. LLDB) to display the reason for "
"trapping if the trap is reached. The string is currently encoded in the "
"debug info as an artificial frame that claims to be inlined at the trap "
"location. The function used for the artificial frame is an artificial "
"function whose name encodes the reason for trapping. The encoding used is "
"currently the same as ``__builtin_verbose_trap`` but might change in the "
"future. This feature is enabled by default but can be disabled by compiling "
"with ``-fno-sanitize-debug-trap-reasons``. The feature has a ``basic`` and "
"``detailed`` mode (the default). The ``basic`` mode emits a hard-coded "
"string per trap kind (e.g. ``Integer addition overflowed``) and the "
"``detailed`` mode emits a more descriptive string describing each individual "
"trap (e.g. ``signed integer addition overflow in 'a + b'``). The "
"``detailed`` mode produces larger debug info than ``basic`` but is more "
"helpful for debugging. The ``-fsanitize-debug-trap-reasons=`` flag can be "
"used to switch between the different modes or disable the feature entirely. "
"Note due to trap merging in optimized builds (i.e. in each function all "
"traps of the same kind get merged into the same trap instruction) the trap "
"reasons might be removed. To prevent this build without optimizations (i.e. "
"use `-O0` or use the `optnone` function attribute) or use the `fno-sanitize-"
"merge=` flag in optimized builds."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"``__builtin_elementwise_max`` and ``__builtin_elementwise_min`` functions "
"for integer types can now be used in constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid ""
"A vector of booleans is now a valid condition for the ternary ``?:`` "
"operator. This binds to a simple vector select operation."
msgstr ""

#: ../../../ReleaseNotes.rst:230
msgid ""
"Added ``__builtin_masked_load``, ``__builtin_masked_expand_load``, "
"``__builtin_masked_store``, ``__builtin_masked_compress_store`` for "
"conditional memory loads from vectors. Binds to the LLVM intrinsics of the "
"same name."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"Added ``__builtin_masked_gather`` and ``__builtin_masked_scatter`` for "
"conditional gathering and scattering operations on vectors. Binds to the "
"LLVM intrinsics of the same name."
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid ""
"The ``__builtin_popcountg``, ``__builtin_ctzg``, and ``__builtin_clzg`` "
"functions now accept fixed-size boolean vectors."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid ""
"Use of ``__has_feature`` to detect the ``ptrauth_qualifier`` and "
"``ptrauth_intrinsics`` features has been deprecated, and is restricted to "
"the arm64e target only. The correct method to check for these features is to "
"test for the ``__PTRAUTH__`` macro."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid ""
"Added a new builtin, ``__builtin_dedup_pack``, to remove duplicate types "
"from a parameter pack. This feature is particularly useful in template "
"metaprogramming for normalizing type lists. The builtin produces a new, "
"unexpanded parameter pack that can be used in contexts like template "
"argument lists or base specifiers."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"Currently, the use of ``__builtin_dedup_pack`` is limited to template "
"arguments and base specifiers, it also must be used within a template "
"context."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid ""
"``__builtin_assume_dereferenceable`` now accepts non-constant size operands."
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid ""
"Fixed a crash when the second argument to ``__builtin_assume_aligned`` was "
"not constant (`#161314 <https://github.com/llvm/llvm-project/"
"issues/161314>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"Introduce support for :doc:`allocation tokens <AllocToken>` to enable "
"allocator-level heap organization strategies. A feature to instrument all "
"allocation functions with a token ID can be enabled via the ``-"
"fsanitize=alloc-token`` flag."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"New option ``-fno-sanitize-debug-trap-reasons`` added to disable emitting "
"trap reasons into the debug info when compiling with trapping UBSan (e.g. ``-"
"fsanitize-trap=undefined``)."
msgstr ""

#: ../../../ReleaseNotes.rst:274
msgid ""
"New option ``-fsanitize-debug-trap-reasons=`` added to control emitting trap "
"reasons into the debug info when compiling with trapping UBSan (e.g. ``-"
"fsanitize-trap=undefined``)."
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid ""
"New options for enabling allocation token instrumentation: ``-"
"fsanitize=alloc-token``, ``-falloc-token-max=``, ``-fsanitize-alloc-token-"
"fast-abi``, ``-fsanitize-alloc-token-extended``."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid "Lanai Support"
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid "The option ``-mcmodel={small,medium,large}`` is supported again."
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid ""
"The `-gkey-instructions` compiler flag is now enabled by default when DWARF "
"is emitted for plain C/C++ and optimizations are enabled. (`#149509 <https://"
"github.com/llvm/llvm-project/issues/149509>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid "Removed Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid ""
"The definition of a function declaration with ``[[clang::"
"cfi_unchecked_callee]]`` inherits this attribute, allowing the attribute to "
"only be attached to the declaration. Prior, this would be treated as an "
"error where the definition and declaration would have differing types."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid ""
"New format attributes ``gnu_printf``, ``gnu_scanf``, ``gnu_strftime`` and "
"``gnu_strfmon`` are added as aliases for ``printf``, ``scanf``, ``strftime`` "
"and ``strfmon``. (`#16219 <https://github.com/llvm/llvm-project/"
"issues/16219>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid ""
"Added a separate diagnostic group ``-Wfunction-effect-redeclarations``, for "
"the more pedantic diagnostics for function effects (``[[clang::"
"nonblocking]]`` and ``[[clang::nonallocating]]``). Moved the warning for a "
"missing (though implied) attribute on a redeclaration into this group. Added "
"a new warning in this group for the case where the attribute is missing/"
"implicit on an override of a virtual method."
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid ""
"Implemented diagnostics when retrieving the tuple size for types where its "
"specialization of `std::tuple_size` produces an invalid size (either "
"negative or greater than the implementation limit). (`#159563 <https://"
"github.com/llvm/llvm-project/issues/159563>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid ""
"Fixed fix-it hint for fold expressions. Clang now correctly places the "
"suggested right parenthesis when diagnosing malformed fold expressions. "
"(`#151787 <https://github.com/llvm/llvm-project/issues/151787>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid ""
"Added fix-it hint for when scoped enumerations require explicit conversions "
"for binary operations. (`#24265 <https://github.com/llvm/llvm-project/"
"issues/24265>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid ""
"Constant template parameters are now type checked in template definitions, "
"including template template parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"Fixed an issue where emitted format-signedness diagnostics were not "
"associated with an appropriate diagnostic id. Besides being incorrect from "
"an API standpoint, this was user visible, e.g.: \"format specifies type "
"'unsigned int' but the argument has type 'int' [-Wformat]\" \"signedness of "
"format specifier 'u' is incompatible with 'c' [-Wformat]\" This was "
"misleading, because even though -Wformat is required in order to emit the "
"diagnostics, the warning flag the user needs to concerned with here is -"
"Wformat-signedness, which is also required and is not enabled by default. "
"With the change you'll now see: \"format specifies type 'unsigned int' but "
"the argument has type 'int', which differs in signedness [-Wformat-"
"signedness]\" \"signedness of format specifier 'u' is incompatible with "
"'c' [-Wformat-signedness]\" and the API-visible diagnostic id will be "
"appropriate."
msgstr ""

#: ../../../ReleaseNotes.rst:325
msgid ""
"Clang now produces better diagnostics for template template parameter "
"matching involving 'auto' template parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:327
msgid ""
"Fixed false positives in ``-Waddress-of-packed-member`` diagnostics when "
"potential misaligned members get processed before they can get discarded. "
"(`#144729 <https://github.com/llvm/llvm-project/issues/144729>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:331
msgid ""
"Clang now emits dignostic with correct message in case of assigning to const "
"reference captured in lambda. (`#105647 <https://github.com/llvm/llvm-"
"project/issues/105647>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:333
msgid ""
"Fixed false positive in ``-Wmissing-noreturn`` diagnostic when it was "
"requiring the usage of ``[[noreturn]]`` on lambdas before C++23 (`#154493 "
"<https://github.com/llvm/llvm-project/issues/154493>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid ""
"Clang now diagnoses the use of ``#`` and ``##`` preprocessor tokens in "
"attribute argument lists in C++ when ``-pedantic`` is enabled. The operators "
"can be used in macro replacement lists with the usual preprocessor "
"semantics, however, non-preprocessor use of tokens now triggers a pedantic "
"warning in C++. Compilation in C mode is unchanged, and still permits these "
"tokens to be used. (`#147217 <https://github.com/llvm/llvm-project/"
"issues/147217>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid ""
"Clang now diagnoses misplaced array bounds on declarators for template "
"specializations in th same way as it already did for other declarators. "
"(`#147333 <https://github.com/llvm/llvm-project/issues/147333>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:346
msgid ""
"A new warning ``-Walloc-size`` has been added to detect calls to functions "
"decorated with the ``alloc_size`` attribute don't allocate enough space for "
"the target pointer type."
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid ""
"The :doc:`ThreadSafetyAnalysis` attributes ``ACQUIRED_BEFORE(...)`` and "
"``ACQUIRED_AFTER(...)`` have been moved to the stable feature set and no "
"longer require ``-Wthread-safety-beta`` to be used."
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid ""
"The :doc:`ThreadSafetyAnalysis` gains basic alias-analysis of capability "
"pointers under ``-Wthread-safety-beta`` (still experimental), which reduces "
"both false positives but also false negatives through more precise analysis."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid ""
"Clang now looks through parenthesis for ``-Wundefined-reinterpret-cast`` "
"diagnostic."
msgstr ""

#: ../../../ReleaseNotes.rst:359
msgid ""
"Fixed a bug where the source location was missing when diagnosing ill-formed "
"placeholder constraints."
msgstr ""

#: ../../../ReleaseNotes.rst:362
msgid ""
"The two-element, unary mask variant of ``__builtin_shufflevector`` is now "
"properly being rejected when used at compile-time. It was not implemented "
"and caused assertion failures before (`#158471 <https://github.com/llvm/llvm-"
"project/issues/158471>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:366
msgid ""
"Closed a loophole in the diagnosis of function pointer conversions changing "
"extended function type information in C mode (`#41465 <https://github.com/"
"llvm/llvm-project/issues/41465>`_). Function conversions that were "
"previously incorrectly accepted in case of other irrelevant conditions are "
"now consistently diagnosed, identical to C++ mode."
msgstr ""

#: ../../../ReleaseNotes.rst:372
msgid "Improvements to Clang's time-trace"
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid "Improvements to Coverage Mapping"
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid "Bug Fixes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:379
msgid ""
"Fix a crash when marco name is empty in ``#pragma push_macro(\"\")`` or "
"``#pragma pop_macro(\"\")``. (`#149762 <https://github.com/llvm/llvm-project/"
"issues/149762>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:381
msgid ""
"Fix a crash in variable length array (e.g. ``int a[*]``) function parameter "
"type being used in ``_Countof`` expression. (`#152826 <https://github.com/"
"llvm/llvm-project/issues/152826>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid ""
"``-Wunreachable-code`` now diagnoses tautological or contradictory "
"comparisons such as ``x != 0 || x != 1.0`` and ``x == 0 && x == 1.0`` on "
"targets that treat ``_Float16``/``__fp16`` as native scalar types. "
"Previously the warning was silently lost because the operands differed only "
"by an implicit cast chain. (`#149967 <https://github.com/llvm/llvm-project/"
"issues/149967>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:388
msgid ""
"Fix crash in ``__builtin_function_start`` by checking for invalid first "
"parameter. (`#113323 <https://github.com/llvm/llvm-project/issues/113323>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:390
msgid ""
"Fixed a crash with incompatible pointer to integer conversions in designated "
"initializers involving string literals. (`#154046 <https://github.com/llvm/"
"llvm-project/issues/154046>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid ""
"Fix crash on CTAD for alias template. (`#131342 <https://github.com/llvm/"
"llvm-project/issues/131342>`_), (`#131408 <https://github.com/llvm/llvm-"
"project/issues/131408>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid ""
"Clang now emits a frontend error when a function marked with the `flatten` "
"attribute calls another function that requires target features not enabled "
"in the caller. This prevents a fatal error in the backend."
msgstr ""

#: ../../../ReleaseNotes.rst:396
msgid ""
"Fixed scope of typedefs present inside a template class. (`#91451 <https://"
"github.com/llvm/llvm-project/issues/91451>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:397
msgid ""
"Builtin elementwise operators now accept vector arguments that have "
"different qualifiers on their elements. For example, vector of 4 ``const "
"float`` values and vector of 4 ``float`` values. (`#155405 <https://github."
"com/llvm/llvm-project/issues/155405>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:400
msgid ""
"Fixed inconsistent shadow warnings for lambda capture of structured "
"bindings. Previously, ``[val = val]`` (regular parameter) produced no "
"warnings with ``-Wshadow`` while ``[a = a]`` (where ``a`` is from ``auto [a, "
"b] = std::make_pair(1, 2)``) incorrectly produced warnings. Both cases now "
"consistently show no warnings with ``-Wshadow`` and show uncaptured-local "
"warnings with ``-Wshadow-all``. (`#68605 <https://github.com/llvm/llvm-"
"project/issues/68605>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid ""
"Fixed a failed assertion with a negative limit parameter value inside of "
"``__has_embed``. (`#157842 <https://github.com/llvm/llvm-project/"
"issues/157842>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:407
msgid ""
"Fixed an assertion when an improper use of the ``malloc`` attribute "
"targeting a function without arguments caused us to try to access a non-"
"existent argument. (`#159080 <https://github.com/llvm/llvm-project/"
"issues/159080>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:410
msgid ""
"Fixed a failed assertion with empty filename arguments in ``__has_embed``. "
"(`#159898 <https://github.com/llvm/llvm-project/issues/159898>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:411
msgid ""
"Fixed a failed assertion with empty filename in ``#embed`` directive. "
"(`#162951 <https://github.com/llvm/llvm-project/issues/162951>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:414
msgid "Bug Fixes to Compiler Builtins"
msgstr ""

#: ../../../ReleaseNotes.rst:415
msgid ""
"Fix an ambiguous reference to the builtin `type_info` (available when using "
"`-fms-compatibility`) with modules. (`#38400 <https://github.com/llvm/llvm-"
"project/issues/38400>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid "Bug Fixes to Attribute Support"
msgstr ""

#: ../../../ReleaseNotes.rst:421
msgid ""
"``[[nodiscard]]`` is now respected on Objective-C and Objective-C++ methods "
"(`#141504 <https://github.com/llvm/llvm-project/issues/141504>`_) and on "
"types returned from indirect calls (`#142453 <https://github.com/llvm/llvm-"
"project/issues/142453>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:423
msgid ""
"Fixes some late parsed attributes, when applied to function definitions, not "
"being parsed in function try blocks, and some situations where parsing of "
"the function body is skipped, such as error recovery and code completion. "
"(`#153551 <https://github.com/llvm/llvm-project/issues/153551>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:426
msgid ""
"Using ``[[gnu::cleanup(some_func)]]`` where some_func is annotated with "
"``[[gnu::error(\"some error\")]]`` now correctly triggers an error. "
"(`#146520 <https://github.com/llvm/llvm-project/issues/146520>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"Fix a crash when the function name is empty in the `swift_name` attribute. "
"(`#157075 <https://github.com/llvm/llvm-project/issues/157075>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:431
msgid "Bug Fixes to C++ Support"
msgstr ""

#: ../../../ReleaseNotes.rst:432
msgid ""
"Diagnose binding a reference to ``*nullptr`` during constant evaluation. "
"(`#48665 <https://github.com/llvm/llvm-project/issues/48665>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:433
msgid ""
"Suppress ``-Wdeprecated-declarations`` in implicitly generated functions. "
"(`#147293 <https://github.com/llvm/llvm-project/issues/147293>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:434
msgid ""
"Fix a crash when deleting a pointer to an incomplete array (`#150359 "
"<https://github.com/llvm/llvm-project/issues/150359>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:435
msgid ""
"Fixed a mismatched lambda scope bug when propagating up ``consteval`` within "
"nested lambdas. (`#145776 <https://github.com/llvm/llvm-project/"
"issues/145776>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:436
msgid ""
"Fix an assertion failure when expression in assumption attribute "
"(``[[assume(expr)]]``) creates temporary objects."
msgstr ""

#: ../../../ReleaseNotes.rst:438
msgid ""
"Fix the dynamic_cast to final class optimization to correctly handle casts "
"that are guaranteed to fail (`#137518 <https://github.com/llvm/llvm-project/"
"issues/137518>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:440
msgid ""
"Fix bug rejecting partial specialization of variable templates with auto "
"NTTPs (`#118190 <https://github.com/llvm/llvm-project/issues/118190>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:441
msgid ""
"Fix a crash if errors \"member of anonymous [...] redeclares\" and "
"\"intializing multiple members of union\" coincide (`#149985 <https://github."
"com/llvm/llvm-project/issues/149985>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:443
msgid ""
"Fix a crash when using ``explicit(bool)`` in pre-C++11 language modes. "
"(`#152729 <https://github.com/llvm/llvm-project/issues/152729>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:444
msgid ""
"Fix the parsing of variadic member functions when the ellipis immediately "
"follows a default argument.(`#153445 <https://github.com/llvm/llvm-project/"
"issues/153445>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:445
msgid ""
"Fixed a bug that caused ``this`` captured by value in a lambda with a "
"dependent explicit object parameter to not be instantiated properly. "
"(`#154054 <https://github.com/llvm/llvm-project/issues/154054>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:447
msgid ""
"Fixed a bug where our ``member-like constrained friend`` checking caused an "
"incorrect analysis of lambda captures. (`#156225 <https://github.com/llvm/"
"llvm-project/issues/156225>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:448
msgid ""
"Fixed a crash when implicit conversions from initialize list to arrays of "
"unknown bound during constant evaluation. (`#151716 <https://github.com/llvm/"
"llvm-project/issues/151716>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:450
msgid ""
"Support the dynamic_cast to final class optimization with pointer "
"authentication enabled. (`#152601 <https://github.com/llvm/llvm-project/"
"issues/152601>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:452
msgid ""
"Fix the check for narrowing int-to-float conversions, so that they are "
"detected in cases where converting the float back to an integer is undefined "
"behaviour (`#157067 <https://github.com/llvm/llvm-project/issues/157067>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:454
msgid ""
"Stop rejecting C++11-style attributes on the first argument of constructors "
"in older standards. (`#156809 <https://github.com/llvm/llvm-project/"
"issues/156809>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:456
msgid ""
"Fix a crash when applying binary or ternary operators to two same function "
"types with different spellings, where at least one of the function "
"parameters has an attribute which affects the function type."
msgstr ""

#: ../../../ReleaseNotes.rst:459
msgid ""
"Fix an assertion failure when a ``constexpr`` variable is only referenced "
"through ``__builtin_addressof``, and related issues with builtin arguments. "
"(`#154034 <https://github.com/llvm/llvm-project/issues/154034>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:461
msgid ""
"Fix an assertion failure when taking the address on a non-type template "
"parameter argument of object type. (`#151531 <https://github.com/llvm/llvm-"
"project/issues/151531>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:463
msgid ""
"Suppress ``-Wdouble-promotion`` when explicitly asked for with C++ list "
"initialization (`#33409 <https://github.com/llvm/llvm-project/"
"issues/33409>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:464
msgid ""
"Fix the result of `__builtin_is_implicit_lifetime` for types with a user-"
"provided constructor. (`#160610 <https://github.com/llvm/llvm-project/"
"issues/160610>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:465
msgid ""
"Correctly deduce return types in ``decltype`` expressions. (`#160497 "
"<https://github.com/llvm/llvm-project/issues/160497>`_) (`#56652 <https://"
"github.com/llvm/llvm-project/issues/56652>`_) (`#116319 <https://github.com/"
"llvm/llvm-project/issues/116319>`_) (`#161196 <https://github.com/llvm/llvm-"
"project/issues/161196>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:466
msgid ""
"Fixed a crash in the pre-C++23 warning for attributes before a lambda "
"declarator (`#161070 <https://github.com/llvm/llvm-project/issues/161070>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:467
msgid ""
"Fix a crash when attempting to deduce a deduction guide from a non deducible "
"template template parameter. (#130604)"
msgstr ""

#: ../../../ReleaseNotes.rst:468
msgid ""
"Fix for clang incorrectly rejecting the default construction of a union with "
"nontrivial member when another member has an initializer. (`#81774 <https://"
"github.com/llvm/llvm-project/issues/81774>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:470
msgid ""
"Diagnose unresolved overload sets in non-dependent compound requirements. "
"(`#51246 <https://github.com/llvm/llvm-project/issues/51246>`_) (`#97753 "
"<https://github.com/llvm/llvm-project/issues/97753>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:473
msgid "Bug Fixes to AST Handling"
msgstr ""

#: ../../../ReleaseNotes.rst:474
msgid ""
"Fix incorrect name qualifiers applied to alias CTAD. (`#136624 <https://"
"github.com/llvm/llvm-project/issues/136624>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:475
msgid ""
"Fixed ElaboratedTypes appearing within NestedNameSpecifier, which was not a "
"legal representation. This is fixed because ElaboratedTypes don't exist "
"anymore. (`#43179 <https://github.com/llvm/llvm-project/issues/43179>`_) "
"(`#68670 <https://github.com/llvm/llvm-project/issues/68670>`_) (`#92757 "
"<https://github.com/llvm/llvm-project/issues/92757>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:477
msgid ""
"Fix unrecognized html tag causing undesirable comment lexing (`#152944 "
"<https://github.com/llvm/llvm-project/issues/152944>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:478
msgid ""
"Fix comment lexing of special command names (`#152943 <https://github.com/"
"llvm/llvm-project/issues/152943>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:479
msgid ""
"Use `extern` as a hint to continue parsing when recovering from a malformed "
"declaration."
msgstr ""

#: ../../../ReleaseNotes.rst:482
msgid "Miscellaneous Bug Fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:483
msgid ""
"Fixed missing diagnostics of ``diagnose_if`` on templates involved in "
"initialization. (`#160776 <https://github.com/llvm/llvm-project/"
"issues/160776>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:486
msgid "Miscellaneous Clang Crashes Fixed"
msgstr ""

#: ../../../ReleaseNotes.rst:489
msgid "OpenACC Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:492
msgid "Target Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:495
msgid "AMDGPU Support"
msgstr ""

#: ../../../ReleaseNotes.rst:498
msgid "NVPTX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:501
msgid "X86 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:502
msgid ""
"More SSE, AVX and AVX512 intrinsics, including initializers and general "
"arithmetic can now be used in C++ constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:504
msgid ""
"Some SSE, AVX and AVX512 intrinsics have been converted to wrap generic "
"__builtin intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:506
msgid ""
"NOTE: Please avoid use of the __builtin_ia32_* intrinsics - these are not "
"guaranteed to exist in future releases, or match behaviour with previous "
"releases of clang or other compilers."
msgstr ""

#: ../../../ReleaseNotes.rst:509
msgid ""
"Remove `m[no-]avx10.x-[256,512]` and `m[no-]evex512` options from Clang "
"driver."
msgstr ""

#: ../../../ReleaseNotes.rst:511
msgid "Remove `[no-]evex512` feature request from intrinsics and builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:512
msgid "Change features `avx10.x-[256,512]` to `avx10.x`."
msgstr ""

#: ../../../ReleaseNotes.rst:515
msgid "Arm and AArch64 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:518
msgid "Android Support"
msgstr ""

#: ../../../ReleaseNotes.rst:521
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:524
msgid "LoongArch Support"
msgstr ""

#: ../../../ReleaseNotes.rst:525
msgid "Enable linker relaxation by default for loongarch64."
msgstr ""

#: ../../../ReleaseNotes.rst:528
msgid "RISC-V Support"
msgstr ""

#: ../../../ReleaseNotes.rst:530
msgid ""
"Add support for `__attribute__((interrupt(\"rnmi\")))` to be used with the "
"`Smrnmi` extension. With this the `Smrnmi` extension is fully supported."
msgstr ""

#: ../../../ReleaseNotes.rst:533
msgid ""
"Add `-march=unset` to clear any previous `-march=` value. This ISA string "
"will be computed from `-mcpu` or the platform default."
msgstr ""

#: ../../../ReleaseNotes.rst:537
msgid "CUDA/HIP Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:540
msgid "CUDA Support"
msgstr ""

#: ../../../ReleaseNotes.rst:542
msgid "Support calling `consteval` function between different target."
msgstr ""

#: ../../../ReleaseNotes.rst:545
msgid "AIX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:548
msgid "NetBSD Support"
msgstr ""

#: ../../../ReleaseNotes.rst:551
msgid "WebAssembly Support"
msgstr ""

#: ../../../ReleaseNotes.rst:554
msgid "AVR Support"
msgstr ""

#: ../../../ReleaseNotes.rst:557
msgid "DWARF Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:560
msgid "Floating Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:563
msgid "Fixed Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:566
msgid "AST Matchers"
msgstr ""

#: ../../../ReleaseNotes.rst:567
msgid ""
"Removed elaboratedType matchers, and related nested name specifier changes, "
"following the corresponding changes in the clang AST."
msgstr ""

#: ../../../ReleaseNotes.rst:569
msgid ""
"Ensure ``hasBitWidth`` doesn't crash on bit widths that are dependent on "
"template parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:571
msgid ""
"Remove the ``dependentTemplateSpecializationType`` matcher, as the "
"corresponding AST node was removed. This matcher was never very useful, "
"since there was no way to match on its template name."
msgstr ""

#: ../../../ReleaseNotes.rst:574
msgid ""
"Add a boolean member ``IgnoreSystemHeaders`` to ``MatchFinderOptions``. This "
"allows it to ignore nodes in system headers when traversing the AST."
msgstr ""

#: ../../../ReleaseNotes.rst:577
msgid ""
"``hasConditionVariableStatement`` now supports ``for`` loop, ``while`` loop "
"and ``switch`` statements."
msgstr ""

#: ../../../ReleaseNotes.rst:581
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:582
msgid ""
"Add ``SpaceInEmptyBraces`` option and set it to ``Always`` for WebKit style."
msgstr ""

#: ../../../ReleaseNotes.rst:583
msgid ""
"Add ``NumericLiteralCase`` option for enforcing character case in numeric "
"literals."
msgstr ""

#: ../../../ReleaseNotes.rst:585
msgid "Add ``Leave`` suboption to ``IndentPPDirectives``."
msgstr ""

#: ../../../ReleaseNotes.rst:586
msgid "Add ``AllowBreakBeforeQtProperty`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:589
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:592
msgid "Code Completion"
msgstr ""

#: ../../../ReleaseNotes.rst:595
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:596
msgid ""
"The Clang Static Analyzer now handles parenthesized initialization. "
"(`#148875 <https://github.com/llvm/llvm-project/issues/148875>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:598
msgid ""
"``__datasizeof`` (C++) and ``_Countof`` (C) no longer cause a failed "
"assertion when given an operand of VLA type. (`#151711 <https://github.com/"
"llvm/llvm-project/issues/151711>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:602
msgid "New features"
msgstr ""

#: ../../../ReleaseNotes.rst:605
msgid "Crash and bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:606
msgid ""
"Fixed a crash in the static analyzer that when the expression in an "
"``[[assume(expr)]]`` attribute was enclosed in parentheses.  (`#151529 "
"<https://github.com/llvm/llvm-project/issues/151529>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:608
msgid ""
"Fixed a crash when parsing ``#embed`` parameters with unmatched closing "
"brackets. (`#152829 <https://github.com/llvm/llvm-project/issues/152829>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:609
msgid ""
"Fixed a crash when compiling ``__real__`` or ``__imag__`` unary operator on "
"scalar value with type promotion. (`#160583 <https://github.com/llvm/llvm-"
"project/issues/160583>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:612 ../../../ReleaseNotes.rst:644
msgid "Improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:615
msgid "Moved checkers"
msgstr ""

#: ../../../ReleaseNotes.rst:620
msgid "Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:621
msgid "Improved documentation for legacy ``no_sanitize`` attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:624
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:625
msgid "Exposed ``clang_getCursorLanguage`` via ``Cursor.language``."
msgstr ""

#: ../../../ReleaseNotes.rst:626
msgid ""
"Add all missing ``CursorKind``s, ``TypeKind``s and "
"``ExceptionSpecificationKind``s from ``Index.h``"
msgstr ""

#: ../../../ReleaseNotes.rst:630
msgid "OpenMP Support"
msgstr ""

#: ../../../ReleaseNotes.rst:631
msgid ""
"Added parsing and semantic analysis support for the ``need_device_addr`` "
"modifier in the ``adjust_args`` clause."
msgstr ""

#: ../../../ReleaseNotes.rst:633
msgid "Allow array length to be omitted in array section subscript expression."
msgstr ""

#: ../../../ReleaseNotes.rst:634
msgid ""
"Fixed non-contiguous strided update in the ``omp target update`` directive "
"with the ``from`` clause."
msgstr ""

#: ../../../ReleaseNotes.rst:635
msgid ""
"Properly handle array section/assumed-size array privatization in C/C++."
msgstr ""

#: ../../../ReleaseNotes.rst:636
msgid "Added support to handle new syntax of the ``uses_allocators`` clause."
msgstr ""

#: ../../../ReleaseNotes.rst:637
msgid "Added support for ``variable-category`` modifier in ``default clause``."
msgstr ""

#: ../../../ReleaseNotes.rst:638
msgid ""
"Added support for ``defaultmap`` directive implicit-behavior ``storage``."
msgstr ""

#: ../../../ReleaseNotes.rst:639
msgid ""
"Added support for ``defaultmap`` directive implicit-behavior ``private``."
msgstr ""

#: ../../../ReleaseNotes.rst:640
msgid ""
"Added parsing and semantic analysis support for ``groupprivate`` directive."
msgstr ""

#: ../../../ReleaseNotes.rst:641
msgid "Added support for 'omp fuse' directive."
msgstr ""

#: ../../../ReleaseNotes.rst:647
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:649
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Git version of the source code. "
"You can access versions of these documents specific to this release by going "
"into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:656
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us on the `Discourse forums (Clang Frontend category) <https://"
"discourse.llvm.org/c/clang/6>`_."
msgstr ""
