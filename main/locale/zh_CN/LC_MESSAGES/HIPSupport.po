# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HIPSupport.rst:1
msgid ""
"<style type=\"text/css\">\n"
"  .none { background-color: #FFCCCC }\n"
"  .part { background-color: #FFFF99 }\n"
"  .good { background-color: #CCFF99 }\n"
"</style>"
msgstr ""

#: ../../../HIPSupport.rst:18
msgid "HIP Support"
msgstr ""

#: ../../../HIPSupport.rst:20
msgid ""
"HIP (Heterogeneous-Compute Interface for Portability) `<https://github.com/"
"ROCm/HIP>`_ is a C++ Runtime API and Kernel Language. It enables developers "
"to create portable applications for offloading computation to different "
"hardware platforms from a single source code."
msgstr ""

#: ../../../HIPSupport.rst:25
msgid "AMD GPU Support"
msgstr ""

#: ../../../HIPSupport.rst:27
msgid ""
"Clang provides HIP support on AMD GPUs via the ROCm platform `<https://rocm."
"docs.amd.com/en/latest/#>`_. The ROCm runtime forms the base for HIP host "
"APIs, while HIP device APIs are realized through HIP header files and the "
"ROCm device library. The Clang driver uses the HIPAMD toolchain to compile "
"HIP device code to AMDGPU ISA via the AMDGPU backend, or SPIR-V via the "
"workflow outlined below. The compiled code is then bundled and embedded in "
"the host executables."
msgstr ""

#: ../../../HIPSupport.rst:34
msgid "Intel GPU Support"
msgstr ""

#: ../../../HIPSupport.rst:36
msgid ""
"Clang provides partial HIP support on Intel GPUs using the CHIP-Star project "
"`<https://github.com/CHIP-SPV/chipStar>`_. CHIP-Star implements the HIP "
"runtime over oneAPI Level Zero or OpenCL runtime. The Clang driver uses the "
"HIPSPV toolchain to compile HIP device code into LLVM IR, which is "
"subsequently translated to SPIR-V via the SPIR-V backend or the out-of-tree "
"LLVM-SPIRV translator. The SPIR-V is then bundled and embedded into the host "
"executables."
msgstr ""

#: ../../../HIPSupport.rst:42
msgid ""
"While Clang does not directly provide HIP support for NVIDIA GPUs and CPUs, "
"these platforms are supported via other means:"
msgstr ""

#: ../../../HIPSupport.rst:44
msgid ""
"NVIDIA GPUs: HIP support is offered through the HIP project `<https://github."
"com/ROCm/HIP>`_, which provides a header-only library for translating HIP "
"runtime APIs into CUDA runtime APIs. The code is subsequently compiled using "
"NVIDIA's `nvcc`."
msgstr ""

#: ../../../HIPSupport.rst:46
msgid ""
"CPUs: HIP support is available through the HIP-CPU runtime library `<https://"
"github.com/ROCm/HIP-CPU>`_. This header-only library enables CPUs to execute "
"unmodified HIP code."
msgstr ""

#: ../../../HIPSupport.rst:50 ../../../HIPSupport.rst:265
msgid "Example Usage"
msgstr ""

#: ../../../HIPSupport.rst:52
msgid "To compile a HIP program, use the following command:"
msgstr ""

#: ../../../HIPSupport.rst:58
msgid ""
"The ``-xhip`` option indicates that the source is a HIP program. If the file "
"has a ``.hip`` extension, Clang will automatically recognize it as a HIP "
"program:"
msgstr ""

#: ../../../HIPSupport.rst:65
msgid "To link a HIP program, use this command:"
msgstr ""

#: ../../../HIPSupport.rst:71
msgid ""
"In the above command, the ``--hip-link`` flag instructs Clang to link the "
"HIP runtime library. However, the use of this flag is unnecessary if a HIP "
"input file is already present in your program."
msgstr ""

#: ../../../HIPSupport.rst:74
msgid ""
"For convenience, Clang also supports compiling and linking in a single step:"
msgstr ""

#: ../../../HIPSupport.rst:80
msgid ""
"In the above commands, ``gfx906`` is the GPU architecture that the code is "
"being compiled for. The supported GPU architectures can be found in the "
"`AMDGPU Processor Table <https://llvm.org/docs/AMDGPUUsage."
"html#processors>`_. Alternatively, you can use the ``amdgpu-arch`` tool that "
"comes with Clang to list the GPU architecture on your system:"
msgstr ""

#: ../../../HIPSupport.rst:88
msgid ""
"You can use ``--offload-arch=native`` to automatically detect the GPU "
"architectures on your system:"
msgstr ""

#: ../../../HIPSupport.rst:96
msgid "Path Setting for Dependencies"
msgstr ""

#: ../../../HIPSupport.rst:98
msgid ""
"Compiling a HIP program depends on the HIP runtime and device library. The "
"paths to the HIP runtime and device libraries can be specified either using "
"compiler options or environment variables. The paths can also be set through "
"the ROCm path if they follow the ROCm installation directory structure."
msgstr ""

#: ../../../HIPSupport.rst:103
msgid "Order of Precedence for HIP Path"
msgstr ""

#: ../../../HIPSupport.rst:105
msgid "``--hip-path`` compiler option"
msgstr ""

#: ../../../HIPSupport.rst:106
msgid "``HIP_PATH`` environment variable *(use with caution)*"
msgstr ""

#: ../../../HIPSupport.rst:107 ../../../HIPSupport.rst:116
msgid "``--rocm-path`` compiler option"
msgstr ""

#: ../../../HIPSupport.rst:108 ../../../HIPSupport.rst:117
msgid "``ROCM_PATH`` environment variable *(use with caution)*"
msgstr ""

#: ../../../HIPSupport.rst:109 ../../../HIPSupport.rst:118
msgid ""
"Default automatic detection (relative to Clang or at the default ROCm "
"installation location)"
msgstr ""

#: ../../../HIPSupport.rst:112
msgid "Order of Precedence for Device Library Path"
msgstr ""

#: ../../../HIPSupport.rst:114
msgid "``--hip-device-lib-path`` compiler option"
msgstr ""

#: ../../../HIPSupport.rst:115
msgid "``HIP_DEVICE_LIB_PATH`` environment variable *(use with caution)*"
msgstr ""

#: ../../../HIPSupport.rst:123
msgid "Compiler Option"
msgstr ""

#: ../../../HIPSupport.rst:124
msgid "Environment Variable"
msgstr ""

#: ../../../HIPSupport.rst:125 ../../../HIPSupport.rst:152
#: ../../../HIPSupport.rst:517
msgid "Description"
msgstr ""

#: ../../../HIPSupport.rst:126
msgid "Default Value"
msgstr ""

#: ../../../HIPSupport.rst:127
msgid "``--rocm-path=<path>``"
msgstr ""

#: ../../../HIPSupport.rst:128
msgid "``ROCM_PATH``"
msgstr ""

#: ../../../HIPSupport.rst:129
msgid "Specifies the ROCm installation path."
msgstr ""

#: ../../../HIPSupport.rst:130
msgid "Automatic detection"
msgstr ""

#: ../../../HIPSupport.rst:131
msgid "``--hip-path=<path>``"
msgstr ""

#: ../../../HIPSupport.rst:132
msgid "``HIP_PATH``"
msgstr ""

#: ../../../HIPSupport.rst:133
msgid "Specifies the HIP runtime installation path."
msgstr ""

#: ../../../HIPSupport.rst:134 ../../../HIPSupport.rst:138
msgid "Determined by ROCm directory structure"
msgstr ""

#: ../../../HIPSupport.rst:135
msgid "``--hip-device-lib-path=<path>``"
msgstr ""

#: ../../../HIPSupport.rst:136
msgid "``HIP_DEVICE_LIB_PATH``"
msgstr ""

#: ../../../HIPSupport.rst:137
msgid "Specifies the HIP device library installation path."
msgstr ""

#: ../../../HIPSupport.rst:142
msgid ""
"We recommend using the compiler options as the primary method for specifying "
"these paths. While the environment variables ``ROCM_PATH``, ``HIP_PATH``, "
"and ``HIP_DEVICE_LIB_PATH`` are supported, their use can lead to implicit "
"dependencies that might cause issues in the long run. Use them with caution."
msgstr ""

#: ../../../HIPSupport.rst:146 ../../../HIPSupport.rst:511
msgid "Predefined Macros"
msgstr ""

#: ../../../HIPSupport.rst:151 ../../../HIPSupport.rst:516
msgid "Macro"
msgstr ""

#: ../../../HIPSupport.rst:153
msgid "``__CLANG_RDC__``"
msgstr ""

#: ../../../HIPSupport.rst:154
msgid ""
"Defined when Clang is compiling code in Relocatable Device Code (RDC) mode. "
"RDC, enabled with the ``-fgpu-rdc`` compiler option, is necessary for "
"linking device codes across translation units."
msgstr ""

#: ../../../HIPSupport.rst:155
msgid "``__HIP__``"
msgstr ""

#: ../../../HIPSupport.rst:156
msgid ""
"Defined when compiling with HIP language support, indicating that the code "
"targets the HIP environment."
msgstr ""

#: ../../../HIPSupport.rst:157
msgid "``__HIPCC__``"
msgstr ""

#: ../../../HIPSupport.rst:158
msgid "Alias to ``__HIP__``."
msgstr ""

#: ../../../HIPSupport.rst:159
msgid "``__HIP_DEVICE_COMPILE__``"
msgstr ""

#: ../../../HIPSupport.rst:160
msgid ""
"Defined during device code compilation in Clang's separate compilation "
"process for the host and each offloading GPU architecture."
msgstr ""

#: ../../../HIPSupport.rst:161
msgid "``__HIP_MEMORY_SCOPE_SINGLETHREAD``"
msgstr ""

#: ../../../HIPSupport.rst:162
msgid "Represents single-thread memory scope in HIP (value is 1)."
msgstr ""

#: ../../../HIPSupport.rst:163
msgid "``__HIP_MEMORY_SCOPE_WAVEFRONT``"
msgstr ""

#: ../../../HIPSupport.rst:164
msgid "Represents wavefront memory scope in HIP (value is 2)."
msgstr ""

#: ../../../HIPSupport.rst:165
msgid "``__HIP_MEMORY_SCOPE_WORKGROUP``"
msgstr ""

#: ../../../HIPSupport.rst:166
msgid "Represents workgroup memory scope in HIP (value is 3)."
msgstr ""

#: ../../../HIPSupport.rst:167
msgid "``__HIP_MEMORY_SCOPE_AGENT``"
msgstr ""

#: ../../../HIPSupport.rst:168
msgid "Represents agent memory scope in HIP (value is 4)."
msgstr ""

#: ../../../HIPSupport.rst:169
msgid "``__HIP_MEMORY_SCOPE_SYSTEM``"
msgstr ""

#: ../../../HIPSupport.rst:170
msgid "Represents system-wide memory scope in HIP (value is 5)."
msgstr ""

#: ../../../HIPSupport.rst:171
msgid "``__HIP_NO_IMAGE_SUPPORT__``"
msgstr ""

#: ../../../HIPSupport.rst:172
msgid ""
"Defined with a value of 1 when the target device lacks support for HIP image "
"functions."
msgstr ""

#: ../../../HIPSupport.rst:173
msgid "``__HIP_NO_IMAGE_SUPPORT``"
msgstr ""

#: ../../../HIPSupport.rst:174
msgid "Alias to ``__HIP_NO_IMAGE_SUPPORT__``. Deprecated."
msgstr ""

#: ../../../HIPSupport.rst:175
msgid "``__HIP_API_PER_THREAD_DEFAULT_STREAM__``"
msgstr ""

#: ../../../HIPSupport.rst:176
msgid "Defined when the GPU default stream is set to per-thread mode."
msgstr ""

#: ../../../HIPSupport.rst:177
msgid "``HIP_API_PER_THREAD_DEFAULT_STREAM``"
msgstr ""

#: ../../../HIPSupport.rst:178
msgid "Alias to ``__HIP_API_PER_THREAD_DEFAULT_STREAM__``. Deprecated."
msgstr ""

#: ../../../HIPSupport.rst:180
msgid ""
"Note that some architecture specific AMDGPU macros will have default values "
"when used from the HIP host compilation. Other :doc:`AMDGPU macros "
"<AMDGPUSupport>` like ``__AMDGCN_WAVEFRONT_SIZE__`` (deprecated) will "
"default to 64 for example."
msgstr ""

#: ../../../HIPSupport.rst:185
msgid "Compilation Modes"
msgstr ""

#: ../../../HIPSupport.rst:187
msgid ""
"Each HIP source file contains intertwined device and host code. Depending on "
"the chosen compilation mode by the compiler options ``-fno-gpu-rdc`` and ``-"
"fgpu-rdc``, these portions of code are compiled differently."
msgstr ""

#: ../../../HIPSupport.rst:190
msgid "Device Code Compilation"
msgstr ""

#: ../../../HIPSupport.rst:192
msgid "**``-fno-gpu-rdc`` Mode (default)**:"
msgstr ""

#: ../../../HIPSupport.rst:194
msgid ""
"Compiles to a self-contained, fully linked offloading device binary for each "
"offloading device architecture."
msgstr ""

#: ../../../HIPSupport.rst:195
msgid ""
"Device code within a Translation Unit (TU) cannot call functions located in "
"another TU."
msgstr ""

#: ../../../HIPSupport.rst:197
msgid "**``-fgpu-rdc`` Mode**:"
msgstr ""

#: ../../../HIPSupport.rst:199
msgid "Compiles to a bitcode for each GPU architecture."
msgstr ""

#: ../../../HIPSupport.rst:200
msgid ""
"For each offloading device architecture, the bitcode from different TUs are "
"linked together to create a single offloading device binary."
msgstr ""

#: ../../../HIPSupport.rst:201
msgid "Device code in one TU can call functions located in another TU."
msgstr ""

#: ../../../HIPSupport.rst:204
msgid "Host Code Compilation"
msgstr ""

#: ../../../HIPSupport.rst:206
msgid "**Both Modes**:"
msgstr ""

#: ../../../HIPSupport.rst:208
msgid "Compiles to a relocatable object for each TU."
msgstr ""

#: ../../../HIPSupport.rst:209
msgid "These relocatable objects are then linked together."
msgstr ""

#: ../../../HIPSupport.rst:210
msgid ""
"Host code within a TU can call host functions and launch kernels from "
"another TU."
msgstr ""

#: ../../../HIPSupport.rst:213
msgid "Syntax Difference with CUDA"
msgstr ""

#: ../../../HIPSupport.rst:215
msgid ""
"Clang's front end, used for both CUDA and HIP programming models, shares the "
"same parsing and semantic analysis mechanisms. This includes the resolution "
"of overloads concerning device and host functions. While there exists a "
"comprehensive documentation on the syntax differences between Clang and NVCC "
"for CUDA at `Dialect Differences Between Clang and NVCC <https://llvm.org/"
"docs/CompileCudaWithLLVM.html#dialect-differences-between-clang-and-nvcc>`_, "
"it is important to note that these differences also apply to HIP code "
"compilation."
msgstr ""

#: ../../../HIPSupport.rst:218
msgid "Predefined Macros for Differentiation"
msgstr ""

#: ../../../HIPSupport.rst:220
msgid ""
"To facilitate differentiation between HIP and CUDA code, as well as between "
"device and host compilations within HIP, Clang defines specific macros:"
msgstr ""

#: ../../../HIPSupport.rst:222
msgid ""
"``__HIP__`` : This macro is defined only when compiling HIP code. It can be "
"used to conditionally compile code specific to HIP, enabling developers to "
"write portable code that can be compiled for both CUDA and HIP."
msgstr ""

#: ../../../HIPSupport.rst:224
msgid ""
"``__HIP_DEVICE_COMPILE__`` : Defined exclusively during HIP device "
"compilation, this macro allows for conditional compilation of device-"
"specific code. It provides a mechanism to segregate device and host code, "
"ensuring that each can be optimized for their respective execution "
"environments."
msgstr ""

#: ../../../HIPSupport.rst:227
msgid "Function Pointers Support"
msgstr ""

#: ../../../HIPSupport.rst:229
msgid ""
"Function pointers' support varies with the usage mode in Clang with HIP. The "
"following table provides an overview of the support status across different "
"use-cases and modes."
msgstr ""

#: ../../../HIPSupport.rst:231
msgid "Function Pointers Support Overview"
msgstr ""

#: ../../../HIPSupport.rst:235
msgid "Use Case"
msgstr ""

#: ../../../HIPSupport.rst:236
msgid "``-fno-gpu-rdc`` Mode (default)"
msgstr ""

#: ../../../HIPSupport.rst:237
msgid "``-fgpu-rdc`` Mode"
msgstr ""

#: ../../../HIPSupport.rst:238
msgid "Defined and used in the same TU"
msgstr ""

#: ../../../HIPSupport.rst:239 ../../../HIPSupport.rst:240
#: ../../../HIPSupport.rst:243
msgid "Supported"
msgstr ""

#: ../../../HIPSupport.rst:241
msgid "Defined in one TU and used in another TU"
msgstr ""

#: ../../../HIPSupport.rst:242
msgid "Not Supported"
msgstr ""

#: ../../../HIPSupport.rst:245
msgid ""
"In the ``-fno-gpu-rdc`` mode, the compiler calculates the resource usage of "
"kernels based only on functions present within the same TU. This mode does "
"not support the use of function pointers defined in a different TU due to "
"the possibility of incorrect resource usage calculations, leading to "
"undefined behavior."
msgstr ""

#: ../../../HIPSupport.rst:247
msgid ""
"On the other hand, the ``-fgpu-rdc`` mode allows the definition and use of "
"function pointers across different TUs, as resource usage calculations can "
"accommodate functions from disparate TUs."
msgstr ""

#: ../../../HIPSupport.rst:250
msgid "Virtual Function Support"
msgstr ""

#: ../../../HIPSupport.rst:252
msgid ""
"In Clang with HIP, support for calling virtual functions of an object in "
"device or host code is contingent on where the object is constructed."
msgstr ""

#: ../../../HIPSupport.rst:254
msgid ""
"**Constructed in Device Code**: Virtual functions of an object can be called "
"in device code on a specific offloading device if the object is constructed "
"in device code on an offloading device with the same architecture."
msgstr ""

#: ../../../HIPSupport.rst:255
msgid ""
"**Constructed in Host Code**: Virtual functions of an object can be called "
"in host code if the object is constructed in host code."
msgstr ""

#: ../../../HIPSupport.rst:257
msgid "In other scenarios, calling virtual functions is not allowed."
msgstr ""

#: ../../../HIPSupport.rst:260
msgid "Explanation"
msgstr ""

#: ../../../HIPSupport.rst:262
msgid ""
"An object constructed on the device side contains a pointer to the virtual "
"function table on the device side, which is not accessible in host code, and "
"vice versa. Thus, trying to invoke virtual functions from a context "
"different from where the object was constructed will be disallowed because "
"the appropriate virtual table cannot be accessed. The virtual function "
"tables for offloading devices with different architectures are different, "
"therefore trying to invoke virtual functions from an offloading device with "
"a different architecture than where the object is constructed is also "
"disallowed."
msgstr ""

#: ../../../HIPSupport.rst:290
msgid "Host and Device Attributes of Default Destructors"
msgstr ""

#: ../../../HIPSupport.rst:292
msgid ""
"If a default destructor does not have explicit host or device attributes, "
"clang infers these attributes based on the destructors of its data members "
"and base classes. If any conflicts are detected among these destructors, "
"clang diagnoses the issue. Otherwise, clang adds an implicit host or device "
"attribute according to whether the data members's and base classes's "
"destructors can execute on the host or device side."
msgstr ""

#: ../../../HIPSupport.rst:299
msgid ""
"For explicit template classes with virtual destructors, which must be "
"emitted, the inference adopts a conservative approach. In this case, "
"implicit host or device attributes from member and base class destructors "
"are ignored. This precaution is necessary because, although a constexpr "
"destructor carries implicit host or device attributes, a constexpr function "
"may call a non-constexpr function, which is by default a host function."
msgstr ""

#: ../../../HIPSupport.rst:306
msgid ""
"Users can override the inferred host and device attributes of default "
"destructors by adding explicit host and device attributes to them."
msgstr ""

#: ../../../HIPSupport.rst:310
msgid "C++ Standard Parallelism Offload Support: Compiler And Runtime"
msgstr ""

#: ../../../HIPSupport.rst:313
msgid "Introduction"
msgstr ""

#: ../../../HIPSupport.rst:315
msgid ""
"This section describes the implementation of support for offloading the "
"execution of standard C++ algorithms to accelerators that can be targeted "
"via HIP. Furthermore, it enumerates restrictions on user defined code, as "
"well as the interactions with runtimes."
msgstr ""

#: ../../../HIPSupport.rst:321
msgid "Algorithm Offload: What, Why, Where"
msgstr ""

#: ../../../HIPSupport.rst:323
msgid ""
"C++17 introduced overloads `for most algorithms in the standard library "
"<https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html>`_ "
"which allow the user to specify a desired `execution policy <https://en."
"cppreference.com/w/cpp/algorithm#Execution_policies>`_. The "
"`parallel_unsequenced_policy <https://en.cppreference.com/w/cpp/algorithm/"
"execution_policy_tag_t>`_ maps relatively well to the execution model of AMD "
"GPUs. This, coupled with the the availability and maturity of GPU "
"accelerated algorithm libraries that implement most / all corresponding "
"algorithms in the standard library (e.g. `rocThrust <https://github.com/ROCm/"
"rocm-libraries/tree/develop/projects/rocthrust>`__), makes it feasible to "
"provide seamless accelerator offload for supported algorithms, when an "
"accelerated version exists. Thus, it becomes possible to easily access the "
"computational resources of an AMD accelerator, via a well specified, "
"familiar, algorithmic interface, without having to delve into low-level "
"hardware specific details. Putting it all together:"
msgstr ""

#: ../../../HIPSupport.rst:338
msgid ""
"**What**: standard library algorithms, when invoked with the "
"``parallel_unsequenced_policy``"
msgstr ""

#: ../../../HIPSupport.rst:340
msgid ""
"**Why**: democratise AMDGPU accelerator programming, without loss of user "
"familiarity"
msgstr ""

#: ../../../HIPSupport.rst:342
msgid "**Where**: only AMDGPU accelerators targeted by Clang/LLVM via HIP"
msgstr ""

#: ../../../HIPSupport.rst:345
msgid "Small Example"
msgstr ""

#: ../../../HIPSupport.rst:347
msgid "Given the following C++ code:"
msgstr ""

#: ../../../HIPSupport.rst:355
msgid ""
"if Clang is invoked with the ``--hipstdpar --offload-arch=foo`` flags, the "
"call to ``find`` will be offloaded to an accelerator that is part of the "
"``foo`` target family. If either ``foo`` or its runtime environment do not "
"support transparent on-demand paging (such as e.g. that provided in Linux "
"via `HMM <https://docs.kernel.org/mm/hmm.html>`_), it is necessary to also "
"include the ``--hipstdpar-interpose-alloc`` flag. If the accelerator "
"specific algorithm library ``foo`` uses doesn't have an implementation of a "
"particular algorithm, execution seamlessly falls back to the host CPU. It is "
"legal to specify multiple ``--offload-arch``\\s. All the flags we introduce, "
"as well as a thorough view of various restrictions an their implementations, "
"will be provided below."
msgstr ""

#: ../../../HIPSupport.rst:367
msgid "Implementation - General View"
msgstr ""

#: ../../../HIPSupport.rst:369
msgid ""
"We built support for Algorithm Offload support atop the pre-existing HIP "
"infrastructure. More specifically, when one requests offload via ``--"
"hipstdpar``, compilation is switched to HIP compilation, as if ``-x hip`` "
"was specified. Similarly, linking is also switched to HIP linking, as if ``--"
"hip-link`` was specified. Note that these are implicit, and one should not "
"assume that any interop with HIP specific language constructs is available e."
"g. ``__device__`` annotations are neither necessary nor guaranteed to work."
msgstr ""

#: ../../../HIPSupport.rst:377
msgid ""
"Since there are no language restriction mechanisms in place, it is necessary "
"to relax HIP language specific semantic checks performed by the FE; they "
"would identify otherwise valid, offloadable code, as invalid HIP code. Given "
"that we know that the user intended only for certain algorithms to be "
"offloaded, and encoded this by specifying the "
"``parallel_unsequenced_policy``, we rely on a pass over IR to clean up any "
"and all code that was not \"meant\" for offload. If requested, allocation "
"interposition is also handled via a separate pass over IR."
msgstr ""

#: ../../../HIPSupport.rst:385
msgid ""
"To interface with the client HIP runtime, and to forward offloaded algorithm "
"invocations to the corresponding accelerator specific library "
"implementation, an implementation detail forwarding header is implicitly "
"included by the driver, when compiling with ``--hipstdpar``. In what "
"follows, we will delve into each component that contributes to implementing "
"Algorithm Offload support."
msgstr ""

#: ../../../HIPSupport.rst:392
msgid "Implementation - Driver"
msgstr ""

#: ../../../HIPSupport.rst:394
msgid "We augment the ``clang`` driver with the following flags:"
msgstr ""

#: ../../../HIPSupport.rst:396
msgid ""
"``--hipstdpar`` enables algorithm offload, which depending on phase, has the "
"following effects:"
msgstr ""

#: ../../../HIPSupport.rst:399
msgid "when compiling:"
msgstr ""

#: ../../../HIPSupport.rst:401
msgid "``-x hip`` gets prepended to enable HIP support;"
msgstr ""

#: ../../../HIPSupport.rst:402
msgid ""
"the ``ROCmToolchain`` component checks for the ``hipstdpar_lib.hpp`` "
"forwarding header, `rocThrust <https://rocm.docs.amd.com/projects/rocThrust/"
"en/latest/>`_ and `rocPrim <https://rocm.docs.amd.com/projects/rocPRIM/en/"
"latest/>`_ in their canonical locations, which can be overriden via flags "
"found below; if all are found, the forwarding header gets implicitly "
"included, otherwise an error listing the missing component is generated;"
msgstr ""

#: ../../../HIPSupport.rst:409
msgid "the ``LangOpts.HIPStdPar`` member is set."
msgstr ""

#: ../../../HIPSupport.rst:411
msgid "when linking:"
msgstr ""

#: ../../../HIPSupport.rst:413
msgid ""
"``--hip-link`` and ``-frtlib-add-rpath`` gets appended to enable HIP support."
msgstr ""

#: ../../../HIPSupport.rst:416
msgid ""
"``--hipstdpar-interpose-alloc`` enables the interposition of standard "
"allocation / deallocation functions with accelerator aware equivalents; the "
"``LangOpts.HIPStdParInterposeAlloc`` member is set;"
msgstr ""

#: ../../../HIPSupport.rst:419
msgid ""
"``--hipstdpar-path=`` specifies a non-canonical path for the forwarding "
"header; it must point to the folder where the header is located and not to "
"the header itself;"
msgstr ""

#: ../../../HIPSupport.rst:422
msgid ""
"``--hipstdpar-thrust-path=`` specifies a non-canonical path for `rocThrust "
"<https://rocm.docs.amd.com/projects/rocThrust/en/latest/>`_; it must point "
"to the folder where the library is installed / built under a ``/thrust`` "
"subfolder;"
msgstr ""

#: ../../../HIPSupport.rst:426
msgid ""
"``--hipstdpar-prim-path=`` specifies a non-canonical path for `rocPrim "
"<https://rocm.docs.amd.com/projects/rocPRIM/en/latest/>`_; it must point to "
"the folder where the library is installed / built under a ``/rocprim`` "
"subfolder;"
msgstr ""

#: ../../../HIPSupport.rst:431
msgid ""
"The `--offload-arch <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-"
"processors>`_ flag can be used to specify the accelerator for which offload "
"code is to be generated."
msgstr ""

#: ../../../HIPSupport.rst:436
msgid "Implementation - Front-End"
msgstr ""

#: ../../../HIPSupport.rst:438
msgid ""
"When ``LangOpts.HIPStdPar`` is set, we relax some of the HIP language "
"specific ``Sema`` checks to account for the fact that we want to consume "
"pure unannotated C++ code:"
msgstr ""

#: ../../../HIPSupport.rst:442
msgid ""
"``__device__`` / ``__host__ __device__`` functions (which would originate in "
"the accelerator specific algorithm library) are allowed to call implicitly "
"``__host__`` functions;"
msgstr ""

#: ../../../HIPSupport.rst:445
msgid ""
"``__global__`` functions (which would originate in the accelerator specific "
"algorithm library) are allowed to call implicitly ``__host__`` functions;"
msgstr ""

#: ../../../HIPSupport.rst:447
msgid ""
"resolving ``__builtin`` availability is deferred, because it is possible "
"that a ``__builtin`` that is unavailable on the target accelerator is not "
"reachable from any offloaded algorithm, and thus will be safely removed in "
"the middle-end;"
msgstr ""

#: ../../../HIPSupport.rst:451
msgid ""
"ASM parsing / checking is deferred, because it is possible that an ASM block "
"that e.g. uses some constraints that are incompatible with the target "
"accelerator is not reachable from any offloaded algorithm, and thus will be "
"safely removed in the middle-end."
msgstr ""

#: ../../../HIPSupport.rst:456
msgid ""
"``CodeGen`` is similarly relaxed, with implicitly ``__host__`` functions "
"being emitted as well."
msgstr ""

#: ../../../HIPSupport.rst:460
msgid "Implementation - Middle-End"
msgstr ""

#: ../../../HIPSupport.rst:462
msgid "We add two ``opt`` passes:"
msgstr ""

#: ../../../HIPSupport.rst:464
msgid "``HipStdParAcceleratorCodeSelectionPass``"
msgstr ""

#: ../../../HIPSupport.rst:466
msgid ""
"For all kernels in a ``Module``, compute reachability, where a function "
"``F`` is reachable from a kernel ``K`` if and only if there exists a direct "
"call-chain rooted in ``F`` that includes ``K``;"
msgstr ""

#: ../../../HIPSupport.rst:469
msgid "Remove all functions that are not reachable from kernels;"
msgstr ""

#: ../../../HIPSupport.rst:470
msgid "This pass is only run when compiling for the accelerator."
msgstr ""

#: ../../../HIPSupport.rst:472
msgid ""
"The first pass assumes that the only code that the user intended to offload "
"was that which was directly or transitively invocable as part of an "
"algorithm execution. It also assumes that an accelerator aware algorithm "
"implementation would rely on accelerator specific special functions "
"(kernels), and that these effectively constitute the only roots for "
"accelerator execution graphs. Both of these assumptions are based on "
"observing how widespread accelerators, such as GPUs, work."
msgstr ""

#: ../../../HIPSupport.rst:480
msgid "``HipStdParAllocationInterpositionPass``"
msgstr ""

#: ../../../HIPSupport.rst:482
msgid ""
"Iterate through all functions in a ``Module``, and replace standard "
"allocation / deallocation functions with accelerator-aware equivalents, "
"based on a pre-established table; the list of functions that can be "
"interposed is available `here <https://github.com/ROCm/roc-"
"stdpar#allocation--deallocation-interposition-status>`__;"
msgstr ""

#: ../../../HIPSupport.rst:487
msgid "This is only run when compiling for the host."
msgstr ""

#: ../../../HIPSupport.rst:489
msgid "The second pass is optional."
msgstr ""

#: ../../../HIPSupport.rst:492
msgid "Implementation - Forwarding Header"
msgstr ""

#: ../../../HIPSupport.rst:494
msgid "The forwarding header implements two pieces of functionality:"
msgstr ""

#: ../../../HIPSupport.rst:496
msgid ""
"It forwards algorithms to a target accelerator, which is done by relying on "
"C++ language rules around overloading:"
msgstr ""

#: ../../../HIPSupport.rst:499
msgid ""
"overloads taking an explicit argument of type "
"``parallel_unsequenced_policy`` are introduced into the ``std`` namespace;"
msgstr ""

#: ../../../HIPSupport.rst:501
msgid "these will get preferentially selected versus the master template;"
msgstr ""

#: ../../../HIPSupport.rst:502
msgid ""
"the body forwards to the equivalent algorithm from the accelerator specific "
"library"
msgstr ""

#: ../../../HIPSupport.rst:505
msgid ""
"It provides allocation / deallocation functions that are equivalent to the "
"standard ones, but obtain memory by invoking `hipMallocManaged <https://rocm."
"docs.amd.com/projects/HIP/en/latest/.doxygen/docBin/html/group___memory_m."
"html#gab8cfa0e292193fa37e0cc2e4911fa90a>`_ and release it via `hipFree "
"<https://rocm.docs.amd.com/projects/HIP/en/latest/.doxygen/docBin/html/"
"group___memory.html#ga740d08da65cae1441ba32f8fedb863d1>`_."
msgstr ""

#: ../../../HIPSupport.rst:518
msgid "``__HIPSTDPAR__``"
msgstr ""

#: ../../../HIPSupport.rst:519
msgid ""
"Defined when Clang is compiling code in algorithm offload mode, enabled with "
"the ``--hipstdpar`` compiler option."
msgstr ""

#: ../../../HIPSupport.rst:521
msgid ""
"``__HIPSTDPAR_INTERPOSE_ALLOC__`` / ``__HIPSTDPAR_INTERPOSE_ALLOC_V1__``"
msgstr ""

#: ../../../HIPSupport.rst:522
msgid ""
"Defined only when compiling in algorithm offload mode, when the user enables "
"interposition mode with the ``--hipstdpar-interpose-alloc`` compiler option, "
"indicating that all dynamic memory allocation / deallocation functions "
"should be replaced with accelerator aware variants."
msgstr ""

#: ../../../HIPSupport.rst:529
msgid "Restrictions"
msgstr ""

#: ../../../HIPSupport.rst:531
msgid "We define two modes in which runtime execution can occur:"
msgstr ""

#: ../../../HIPSupport.rst:533
msgid ""
"**HMM Mode** - this assumes that the `HMM <https://docs.kernel.org/mm/hmm."
"html>`_ subsystem of the Linux kernel is used to provide transparent on-"
"demand paging i.e. memory obtained from a system / OS allocator such as via "
"a call to ``malloc`` or ``operator new`` is directly accessible to the "
"accelerator and it follows the C++ memory model;"
msgstr ""

#: ../../../HIPSupport.rst:538
msgid ""
"**Interposition Mode** - this is a fallback mode for cases where transparent "
"on-demand paging is unavailable (e.g. in the Windows OS), which means that "
"memory must be allocated via an accelerator aware mechanism, and system "
"allocated memory is inaccessible for the accelerator."
msgstr ""

#: ../../../HIPSupport.rst:543
msgid "The following restrictions imposed on user code apply to both modes:"
msgstr ""

#: ../../../HIPSupport.rst:545
msgid ""
"Pointers to function, and all associated features, such as e.g. dynamic "
"polymorphism, cannot be used (directly or transitively) by the user provided "
"callable passed to an algorithm invocation;"
msgstr ""

#: ../../../HIPSupport.rst:548
msgid ""
"``static`` (except for program-wide unique ones) / ``thread`` storage "
"duration variables cannot be used (directly or transitively) in name by the "
"user provided callable;"
msgstr ""

#: ../../../HIPSupport.rst:551
msgid ""
"User code must be compiled in ``-fgpu-rdc`` mode in order for global / "
"namespace scope variables / program-wide unique ``static`` storage duration "
"variables to be usable in name by the user provided callable;"
msgstr ""

#: ../../../HIPSupport.rst:554
msgid ""
"Only algorithms that are invoked with the ``parallel_unsequenced_policy`` "
"are candidates for offload;"
msgstr ""

#: ../../../HIPSupport.rst:556
msgid ""
"Only algorithms that are invoked with iterator arguments that model "
"`random_access_iterator <https://en.cppreference.com/w/cpp/iterator/"
"random_access_iterator>`_ are candidates for offload;"
msgstr ""

#: ../../../HIPSupport.rst:559
msgid ""
"`Exceptions <https://en.cppreference.com/w/cpp/language/exceptions>`_ cannot "
"be used by the user provided callable;"
msgstr ""

#: ../../../HIPSupport.rst:561
msgid ""
"Dynamic memory allocation (e.g. ``operator new``) cannot be used by the user "
"provided callable;"
msgstr ""

#: ../../../HIPSupport.rst:563
msgid ""
"Selective offload is not possible i.e. it is not possible to indicate that "
"only some algorithms invoked with the ``parallel_unsequenced_policy`` are to "
"be executed on the accelerator."
msgstr ""

#: ../../../HIPSupport.rst:567
msgid ""
"In addition to the above, using **Interposition Mode** imposes the following "
"additional restrictions:"
msgstr ""

#: ../../../HIPSupport.rst:570
msgid ""
"All code that is expected to interoperate has to be recompiled with the ``--"
"hipstdpar-interpose-alloc`` flag i.e. it is not safe to compose libraries "
"that have been independently compiled;"
msgstr ""

#: ../../../HIPSupport.rst:575
msgid "Current Support"
msgstr ""

#: ../../../HIPSupport.rst:577
msgid ""
"At the moment, C++ Standard Parallelism Offload is only available for AMD "
"GPUs, when the `ROCm <https://rocm.docs.amd.com/en/latest/>`_ stack is used, "
"on the Linux operating system. Support is synthesised in the following table:"
msgstr ""

#: ../../../HIPSupport.rst:584
msgid "`Processor <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-processors>`_"
msgstr ""

#: ../../../HIPSupport.rst:585
msgid "HMM Mode"
msgstr ""

#: ../../../HIPSupport.rst:586
msgid "Interposition Mode"
msgstr ""

#: ../../../HIPSupport.rst:587
msgid "GCN GFX9 (Vega)"
msgstr ""

#: ../../../HIPSupport.rst:588 ../../../HIPSupport.rst:589
#: ../../../HIPSupport.rst:592 ../../../HIPSupport.rst:595
#: ../../../HIPSupport.rst:598 ../../../HIPSupport.rst:601
msgid "YES"
msgstr ""

#: ../../../HIPSupport.rst:590
msgid "GCN GFX10.1 (RDNA 1)"
msgstr ""

#: ../../../HIPSupport.rst:591 ../../../HIPSupport.rst:594
#: ../../../HIPSupport.rst:597 ../../../HIPSupport.rst:600
msgid "*NO*"
msgstr ""

#: ../../../HIPSupport.rst:593
msgid "GCN GFX10.3 (RDNA 2)"
msgstr ""

#: ../../../HIPSupport.rst:596
msgid "GCN GFX11 (RDNA 3)"
msgstr ""

#: ../../../HIPSupport.rst:599
msgid "GCN GFX12 (RDNA 4)"
msgstr ""

#: ../../../HIPSupport.rst:603
msgid "The minimum Linux kernel version for running in HMM mode is 6.4."
msgstr ""

#: ../../../HIPSupport.rst:605
msgid ""
"The forwarding header is packaged by `ROCm <https://rocm.docs.amd.com/en/"
"latest/>`_, and is obtainable by installing the `hipstdpar` packege. The "
"list algorithms that can be offloaded is available `here <https://github.com/"
"ROCm/roc-stdpar#algorithm-support-status>`_. More details are available via "
"the dedicated blog `<https://rocm.blogs.amd.com/software-tools-optimization/"
"hipstdpar/README.html>`_."
msgstr ""

#: ../../../HIPSupport.rst:613
msgid "HIP Specific Elements"
msgstr ""

#: ../../../HIPSupport.rst:615
msgid ""
"There is no defined interop with the `HIP kernel language <https://rocm.docs."
"amd.com/projects/HIP/en/latest/reference/kernel_language.html>`_; whilst "
"things like using `__device__` annotations might accidentally \"work\", they "
"are not guaranteed to, and thus cannot be relied upon by user code;"
msgstr ""

#: ../../../HIPSupport.rst:620
msgid ""
"A consequence of the above is that both bitcode linking and linking "
"relocatable object files will \"work\", but it is not guaranteed to remain "
"working or actively tested at the moment; this restriction might be relaxed "
"in the future."
msgstr ""

#: ../../../HIPSupport.rst:625
msgid ""
"Combining explicit HIP, CUDA or OpenMP Offload compilation with ``--"
"hipstdpar`` based offloading is not allowed or supported in any way."
msgstr ""

#: ../../../HIPSupport.rst:627
msgid ""
"There is no way to target different accelerators via a standard algorithm "
"invocation (`this might be addressed in future C++ standards <https://www."
"open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2500r1.html>`_); an unsafe "
"(per the point above) way of achieving this is to spawn new threads and "
"invoke the `hipSetDevice <https://rocm.docs.amd.com/projects/HIP/en/latest/."
"doxygen/docBin/html/group___device."
"html#ga43c1e7f15925eeb762195ccb5e063eae>`_ interface e.g.:"
msgstr ""

#: ../../../HIPSupport.rst:658
msgid ""
"Note that this is a temporary, unsafe workaround for a deficiency in the C++ "
"Standard."
msgstr ""

#: ../../../HIPSupport.rst:662
msgid "Open Questions / Future Developments"
msgstr ""

#: ../../../HIPSupport.rst:664
msgid ""
"The restriction on the use of ``static`` / ``thread`` storage duration "
"variables in offloaded algorithms might be lifted;"
msgstr ""

#: ../../../HIPSupport.rst:666
msgid ""
"The restriction on the use of dynamic memory allocation in offloaded "
"algorithms will be lifted in the future."
msgstr ""

#: ../../../HIPSupport.rst:668
msgid ""
"The restriction on the use of pointers to function, and associated features "
"such as dynamic polymorphism might be lifted in the future, when running in "
"**HMM Mode**;"
msgstr ""

#: ../../../HIPSupport.rst:671
msgid ""
"Offload support might be extended to cases where the ``parallel_policy`` is "
"used for some or all targets."
msgstr ""

#: ../../../HIPSupport.rst:675
msgid "SPIR-V Support on HIPAMD ToolChain"
msgstr ""

#: ../../../HIPSupport.rst:677
msgid ""
"The HIPAMD ToolChain supports targeting `AMDGCN Flavoured SPIR-V <https://"
"llvm.org/docs/SPIRVUsage.html#target-triples>`_. The support for SPIR-V in "
"the ROCm and HIPAMD ToolChain is under active development."
msgstr ""

#: ../../../HIPSupport.rst:683
msgid "Compilation Process"
msgstr ""

#: ../../../HIPSupport.rst:685
msgid ""
"When compiling HIP programs with the intent of utilizing SPIR-V, the process "
"diverges from the traditional compilation flow:"
msgstr ""

#: ../../../HIPSupport.rst:689
msgid "Using ``--offload-arch=amdgcnspirv``"
msgstr ""

#: ../../../HIPSupport.rst:691
msgid ""
"**Target Triple**: The ``--offload-arch=amdgcnspirv`` flag instructs the "
"compiler to use the target triple ``spirv64-amd-amdhsa``. This approach does "
"generates generic AMDGCN SPIR-V which retains architecture specific elements "
"without hardcoding them, thus allowing for optimal target specific code to "
"be generated at run time, when the concrete target is known."
msgstr ""

#: ../../../HIPSupport.rst:697
msgid ""
"**LLVM IR Translation**: The program is compiled to LLVM Intermediate "
"Representation (IR), which is subsequently translated into SPIR-V. In the "
"future, this translation step will be replaced by direct SPIR-V emission via "
"the SPIR-V Back-end."
msgstr ""

#: ../../../HIPSupport.rst:702
msgid ""
"**Clang Offload Bundler**: The resulting SPIR-V is embedded in the Clang "
"offload bundler with the bundle ID ``hip-spirv64-amd-amdhsa--amdgcnspirv``."
msgstr ""

#: ../../../HIPSupport.rst:706
msgid "Architecture Specific Macros"
msgstr ""

#: ../../../HIPSupport.rst:708
msgid ""
"None of the architecture specific :doc:`AMDGPU macros <AMDGPUSupport>` are "
"defined when targeting SPIR-V. An alternative, more flexible mechanism to "
"enable doing per target / per feature code selection will be added in the "
"future."
msgstr ""
