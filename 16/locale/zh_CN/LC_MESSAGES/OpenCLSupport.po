# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../OpenCLSupport.rst:1
msgid ""
"<style type=\"text/css\">\n"
"  .none { background-color: #FFCCCC }\n"
"  .part { background-color: #FFFF99 }\n"
"  .good { background-color: #CCFF99 }\n"
"</style>"
msgstr ""

#: ../../../OpenCLSupport.rst:18
msgid "OpenCL Support"
msgstr ""

#: ../../../OpenCLSupport.rst:20
msgid ""
"Clang has complete support of OpenCL C versions from 1.0 to 3.0. Support for "
"OpenCL 3.0 is in experimental phase (:ref:`OpenCL 3.0 <opencl_300>`)."
msgstr ""

#: ../../../OpenCLSupport.rst:23
msgid ""
"Clang also supports :ref:`the C++ for OpenCL kernel language "
"<cxx_for_opencl_impl>`."
msgstr ""

#: ../../../OpenCLSupport.rst:25
msgid ""
"There are also other :ref:`new and experimental features "
"<opencl_experimenal>` available."
msgstr ""

#: ../../../OpenCLSupport.rst:28
msgid ""
"Details about usage of clang for OpenCL can be found in :doc:`UsersManual`."
msgstr ""

#: ../../../OpenCLSupport.rst:31 ../../../OpenCLSupport.rst:327
msgid "Missing features or with limited support"
msgstr ""

#: ../../../OpenCLSupport.rst:33
msgid ""
"For general issues and bugs with OpenCL in clang refer to `the GitHub issue "
"list <https://github.com/llvm/llvm-project/issues?"
"q=is%3Aopen+is%3Aissue+label%3Aopencl>`__."
msgstr ""

#: ../../../OpenCLSupport.rst:37
msgid ""
"Command-line flag :option:`-cl-ext` (used to override extensions/ features "
"supported by a target) is missing support of some functionality i.e. that is "
"implemented fully through libraries (see :ref:`library-based features and "
"extensions <opencl_ext_libs>`)."
msgstr ""

#: ../../../OpenCLSupport.rst:43
msgid "Internals Manual"
msgstr ""

#: ../../../OpenCLSupport.rst:45
msgid ""
"This section acts as internal documentation for OpenCL features design as "
"well as some important implementation aspects. It is primarily targeted at "
"the advanced users and the toolchain developers integrating frontend "
"functionality as a component."
msgstr ""

#: ../../../OpenCLSupport.rst:51
msgid "OpenCL Metadata"
msgstr ""

#: ../../../OpenCLSupport.rst:53
msgid ""
"Clang uses metadata to provide additional OpenCL semantics in IR needed for "
"backends and OpenCL runtime."
msgstr ""

#: ../../../OpenCLSupport.rst:56
msgid ""
"Each kernel will have function metadata attached to it, specifying the "
"arguments. Kernel argument metadata is used to provide source level "
"information for querying at runtime, for example using the "
"`clGetKernelArgInfo <https://www.khronos.org/registry/OpenCL/specs/"
"opencl-1.2.pdf#167>`_ call."
msgstr ""

#: ../../../OpenCLSupport.rst:62
msgid ""
"Note that ``-cl-kernel-arg-info`` enables more information about the "
"original kernel code to be added e.g. kernel parameter names will appear in "
"the OpenCL metadata along with other information."
msgstr ""

#: ../../../OpenCLSupport.rst:66
msgid ""
"The IDs used to encode the OpenCL's logical address spaces in the argument "
"info metadata follows the SPIR address space mapping as defined in the SPIR "
"specification `section 2.2 <https://www.khronos.org/registry/spir/specs/"
"spir_spec-2.0.pdf#18>`_"
msgstr ""

#: ../../../OpenCLSupport.rst:72
msgid "OpenCL Specific Options"
msgstr ""

#: ../../../OpenCLSupport.rst:74
msgid ""
"In addition to the options described in :doc:`UsersManual` there are the "
"following options specific to the OpenCL frontend."
msgstr ""

#: ../../../OpenCLSupport.rst:77
msgid ""
"All the options in this section are frontend-only and therefore if used with "
"regular clang driver they require frontend forwarding, e.g. ``-cc1`` or ``-"
"Xclang``."
msgstr ""

#: ../../../OpenCLSupport.rst:85
msgid ""
"Adds most of builtin types and function declarations during compilations. By "
"default the OpenCL headers are not loaded by the frontend and therefore "
"certain builtin types and most of builtin functions are not declared. To "
"load them automatically this flag can be passed to the frontend (see also :"
"ref:`the section on the OpenCL Header <opencl_header>`):"
msgstr ""

#: ../../../OpenCLSupport.rst:95
msgid ""
"Alternatively the internal header `opencl-c.h` containing the declarations "
"can be included manually using ``-include`` or ``-I`` followed by the path "
"to the header location. The header can be found in the clang source tree or "
"installation directory."
msgstr ""

#: ../../../OpenCLSupport.rst:105
msgid ""
"In this example it is assumed that the kernel code contains ``#include "
"<opencl-c.h>`` just as a regular C include."
msgstr ""

#: ../../../OpenCLSupport.rst:108
msgid ""
"Because the header is very large and long to parse, PCH (:doc:"
"`PCHInternals`) and modules (:doc:`Modules`) can be used internally to "
"improve the compilation speed."
msgstr ""

#: ../../../OpenCLSupport.rst:112
msgid "To enable modules for OpenCL:"
msgstr ""

#: ../../../OpenCLSupport.rst:118
msgid ""
"Another way to circumvent long parsing latency for the OpenCL builtin "
"declarations is to use mechanism enabled by :ref:`-fdeclare-opencl-builtins "
"<opencl_fdeclare_opencl_builtins>` flag that is available as an alternative "
"feature."
msgstr ""

#: ../../../OpenCLSupport.rst:127
msgid ""
"In addition to regular header includes with builtin types and functions "
"using :ref:`-finclude-default-header <opencl_finclude_default_header>`, "
"clang supports a fast mechanism to declare builtin functions with ``-"
"fdeclare-opencl-builtins``. This does not declare the builtin types and "
"therefore it has to be used in combination with ``-finclude-default-header`` "
"if full functionality is required."
msgstr ""

#: ../../../OpenCLSupport.rst:134 ../../../OpenCLSupport.rst:435
msgid "**Example of Use**:"
msgstr ""

#: ../../../OpenCLSupport.rst:144
msgid ""
"Overrides the target address space map with a fake map. This allows adding "
"explicit address space IDs to the bitcode for non-segmented memory "
"architectures that do not have separate IDs for each of the OpenCL logical "
"address spaces by default. Passing ``-ffake-address-space-map`` will add/"
"override address spaces of the target compiled for with the following "
"values: ``1-global``, ``2-constant``, ``3-local``, ``4-generic``. The "
"private address space is represented by the absence of an address space "
"attribute in the IR (see also :ref:`the section on the address space "
"attribute <opencl_addrsp>`)."
msgstr ""

#: ../../../OpenCLSupport.rst:160
msgid "OpenCL builtins"
msgstr ""

#: ../../../OpenCLSupport.rst:162
msgid "**Clang builtins**"
msgstr ""

#: ../../../OpenCLSupport.rst:164
msgid ""
"There are some standard OpenCL functions that are implemented as Clang "
"builtins:"
msgstr ""

#: ../../../OpenCLSupport.rst:166
msgid ""
"All pipe functions from `section 6.13.16.2/6.13.16.3 <https://www.khronos."
"org/registry/cl/specs/opencl-2.0-openclc.pdf#160>`_ of the OpenCL v2.0 "
"kernel language specification."
msgstr ""

#: ../../../OpenCLSupport.rst:170
msgid ""
"Address space qualifier conversion functions ``to_global``/``to_local``/"
"``to_private`` from `section 6.13.9 <https://www.khronos.org/registry/cl/"
"specs/opencl-2.0-openclc.pdf#101>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:174
msgid ""
"All the ``enqueue_kernel`` functions from `section 6.13.17.1 <https://www."
"khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#164>`_ and enqueue "
"query functions from `section 6.13.17.5 <https://www.khronos.org/registry/cl/"
"specs/opencl-2.0-openclc.pdf#171>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:179
msgid "**Fast builtin function declarations**"
msgstr ""

#: ../../../OpenCLSupport.rst:181
msgid ""
"The implementation of the fast builtin function declarations (available via "
"the :ref:`-fdeclare-opencl-builtins option "
"<opencl_fdeclare_opencl_builtins>`) consists of the following main "
"components:"
msgstr ""

#: ../../../OpenCLSupport.rst:185
msgid ""
"A TableGen definitions file ``OpenCLBuiltins.td``.  This contains a compact "
"representation of the supported builtin functions.  When adding new builtin "
"function declarations, this is normally the only file that needs modifying."
msgstr ""

#: ../../../OpenCLSupport.rst:189
msgid ""
"A Clang TableGen emitter defined in ``ClangOpenCLBuiltinEmitter.cpp``.  "
"During Clang build time, the emitter reads the TableGen definition file and "
"generates ``OpenCLBuiltins.inc``.  This generated file contains various "
"tables and functions that capture the builtin function data from the "
"TableGen definitions in a compact manner."
msgstr ""

#: ../../../OpenCLSupport.rst:195
msgid ""
"OpenCL specific code in ``SemaLookup.cpp``.  When ``Sema::LookupBuiltin`` "
"encounters a potential builtin function, it will check if the name "
"corresponds to a valid OpenCL builtin function.  If so, all overloads of the "
"function are inserted using ``InsertOCLBuiltinDeclarationsFromTable`` and "
"overload resolution takes place."
msgstr ""

#: ../../../OpenCLSupport.rst:202
msgid "OpenCL Extensions and Features"
msgstr ""

#: ../../../OpenCLSupport.rst:204
msgid "Clang implements various extensions to OpenCL kernel languages."
msgstr ""

#: ../../../OpenCLSupport.rst:206
msgid ""
"New functionality is accepted as soon as the documentation is detailed to "
"the level sufficient to be implemented. There should be an evidence that the "
"extension is designed with implementation feasibility in consideration and "
"assessment of complexity for C/C++ based compilers. Alternatively, the "
"documentation can be accepted in a format of a draft that can be further "
"refined during the implementation."
msgstr ""

#: ../../../OpenCLSupport.rst:214
msgid "Implementation guidelines"
msgstr ""

#: ../../../OpenCLSupport.rst:216
msgid "This section explains how to extend clang with the new functionality."
msgstr ""

#: ../../../OpenCLSupport.rst:218
msgid "**Parsing functionality**"
msgstr ""

#: ../../../OpenCLSupport.rst:220
msgid ""
"If an extension modifies the standard parsing it needs to be added to the "
"clang frontend source code. This also means that the associated macro "
"indicating the presence of the extension should be added to clang."
msgstr ""

#: ../../../OpenCLSupport.rst:224
msgid ""
"The default flow for adding a new extension into the frontend is to modify "
"`OpenCLExtensions.def <https://github.com/llvm/llvm-project/blob/main/clang/"
"include/clang/Basic/OpenCLExtensions.def>`__, containing the list of all "
"extensions and optional features supported by the frontend."
msgstr ""

#: ../../../OpenCLSupport.rst:230
msgid ""
"This will add the macro automatically and also add a field in the target "
"options ``clang::TargetOptions::OpenCLFeaturesMap`` to control the exposure "
"of the new extension during the compilation."
msgstr ""

#: ../../../OpenCLSupport.rst:234
msgid ""
"Note that by default targets like `SPIR-V`, `SPIR` or `X86` expose all the "
"OpenCL extensions. For all other targets the configuration has to be made "
"explicitly."
msgstr ""

#: ../../../OpenCLSupport.rst:237
msgid ""
"Note that the target extension support performed by clang can be overridden "
"with :option:`-cl-ext` command-line flags."
msgstr ""

#: ../../../OpenCLSupport.rst:242
msgid "**Library functionality**"
msgstr ""

#: ../../../OpenCLSupport.rst:244
msgid ""
"If an extension adds functionality that does not modify standard language "
"parsing it should not require modifying anything other than header files and "
"``OpenCLBuiltins.td`` detailed in :ref:`OpenCL builtins <opencl_builtins>`. "
"Most commonly such extensions add functionality via libraries (by adding non-"
"native types or functions) parsed regularly. Similar to other languages this "
"is the most common way to add new functionality."
msgstr ""

#: ../../../OpenCLSupport.rst:251
msgid ""
"Clang has standard headers where new types and functions are being added, "
"for more details refer to :ref:`the section on the OpenCL Header "
"<opencl_header>`. The macros indicating the presence of such extensions can "
"be added in the standard header files conditioned on target specific "
"predefined macros or/and language version predefined macros (see `feature/"
"extension preprocessor macros defined in opencl-c-base.h <https://github.com/"
"llvm/llvm-project/blob/main/clang/lib/Headers/opencl-c-base.h>`__)."
msgstr ""

#: ../../../OpenCLSupport.rst:260
msgid "**Pragmas**"
msgstr ""

#: ../../../OpenCLSupport.rst:262
msgid "Some extensions alter standard parsing dynamically via pragmas."
msgstr ""

#: ../../../OpenCLSupport.rst:264
msgid ""
"Clang provides a mechanism to add the standard extension pragma ``OPENCL "
"EXTENSION`` by setting a dedicated flag in the extension list entry of "
"``OpenCLExtensions.def``. Note that there is no default behavior for the "
"standard extension pragmas as it is not specified (for the standards up to "
"and including version 3.0) in a sufficient level of detail and, therefore, "
"there is no default functionality provided by clang."
msgstr ""

#: ../../../OpenCLSupport.rst:271
msgid ""
"Pragmas without detailed information of their behavior (e.g. an explanation "
"of changes it triggers in the parsing) should not be added to clang. "
"Moreover, the pragmas should provide useful functionality to the user. For "
"example, such functionality should address a practical use case and not be "
"redundant i.e. cannot be achieved using existing features."
msgstr ""

#: ../../../OpenCLSupport.rst:277
msgid ""
"Note that some legacy extensions (published prior to OpenCL 3.0) still "
"provide some non-conformant functionality for pragmas e.g. add diagnostics "
"on the use of types or functions. This functionality is not guaranteed to "
"remain in future releases. However, any future changes should not affect "
"backward compatibility."
msgstr ""

#: ../../../OpenCLSupport.rst:286
msgid "Address spaces attribute"
msgstr ""

#: ../../../OpenCLSupport.rst:288
msgid ""
"Clang has arbitrary address space support using the ``address_space(N)`` "
"attribute, where ``N`` is an integer number in the range specified in the "
"Clang source code. This addresses spaces can be used along with the OpenCL "
"address spaces however when such addresses spaces converted to/from OpenCL "
"address spaces the behavior is not governed by OpenCL specification."
msgstr ""

#: ../../../OpenCLSupport.rst:294
msgid ""
"An OpenCL implementation provides a list of standard address spaces using "
"keywords: ``private``, ``local``, ``global``, and ``generic``. In the AST "
"and in the IR each of the address spaces will be represented by unique "
"number provided in the Clang source code. The specific IDs for an address "
"space do not have to match between the AST and the IR. Typically in the AST "
"address space numbers represent logical segments while in the IR they "
"represent physical segments. Therefore, machines with flat memory segments "
"can map all AST address space numbers to the same physical segment ID or "
"skip address space attribute completely while generating the IR. However, if "
"the address space information is needed by the IR passes e.g. to improve "
"alias analysis, it is recommended to keep it and only lower to reflect "
"physical memory segments in the late machine passes. The mapping between "
"logical and target address spaces is specified in the Clang's source code."
msgstr ""

#: ../../../OpenCLSupport.rst:312
msgid "C++ for OpenCL Implementation Status"
msgstr ""

#: ../../../OpenCLSupport.rst:314
msgid ""
"Clang implements language versions 1.0 and 2021 published in `the official "
"release of C++ for OpenCL Documentation <https://github.com/KhronosGroup/"
"OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:318
msgid ""
"Limited support of experimental C++ libraries is described in the :ref:"
"`experimental features <opencl_experimenal>`."
msgstr ""

#: ../../../OpenCLSupport.rst:320
msgid ""
"GitHub issues for this functionality are typically prefixed with '[C+"
"+4OpenCL]' - click `here <https://github.com/llvm/llvm-project/issues?"
"q=is%3Aissue+is%3Aopen+%5BC%2B%2B4OpenCL%5D>`__ to view the full bug list."
msgstr ""

#: ../../../OpenCLSupport.rst:329
msgid ""
"Support of C++ for OpenCL 2021 is currently in experimental phase. Refer to :"
"ref:`OpenCL 3.0 status <opencl_300>` for details of common missing "
"functionality from OpenCL 3.0."
msgstr ""

#: ../../../OpenCLSupport.rst:333
msgid ""
"IR generation for non-trivial global destructors is incomplete (See: "
"`PR48047 <https://llvm.org/PR48047>`_)."
msgstr ""

#: ../../../OpenCLSupport.rst:336
msgid ""
"Support of `destrutors with non-default address spaces <https://www.khronos."
"org/opencl/assets/CXX_for_OpenCL."
"html#_construction_initialization_and_destruction>`_ is incomplete (See: "
"`D109609 <https://reviews.llvm.org/D109609>`_)."
msgstr ""

#: ../../../OpenCLSupport.rst:343
msgid "OpenCL C 3.0 Usage"
msgstr ""

#: ../../../OpenCLSupport.rst:345
msgid ""
"OpenCL C 3.0 language standard makes most OpenCL C 2.0 features optional. "
"Optional functionality in OpenCL C 3.0 is indicated with the presence of "
"feature-test macros (list of feature-test macros is `here <https://www."
"khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_C."
"html#features>`__). Command-line flag :option:`-cl-ext` can be used to "
"override features supported by a target."
msgstr ""

#: ../../../OpenCLSupport.rst:350
msgid ""
"For cases when there is an associated extension for a specific feature (fp64 "
"and 3d image writes) user should specify both (extension and feature) in "
"command-line flag:"
msgstr ""

#: ../../../OpenCLSupport.rst:361
msgid "OpenCL C 3.0 Implementation Status"
msgstr ""

#: ../../../OpenCLSupport.rst:363
msgid ""
"The following table provides an overview of features in OpenCL C 3.0 and "
"their implementation status."
msgstr ""

#: ../../../OpenCLSupport.rst:367
msgid "Category"
msgstr ""

#: ../../../OpenCLSupport.rst:367
msgid "Feature"
msgstr ""

#: ../../../OpenCLSupport.rst:367
msgid "Status"
msgstr ""

#: ../../../OpenCLSupport.rst:367
msgid "Reviews"
msgstr ""

#: ../../../OpenCLSupport.rst:369
msgid "Command line interface"
msgstr ""

#: ../../../OpenCLSupport.rst:369
msgid "New value for ``-cl-std`` flag"
msgstr ""

#: ../../../OpenCLSupport.rst:369 ../../../OpenCLSupport.rst:371
#: ../../../OpenCLSupport.rst:373 ../../../OpenCLSupport.rst:375
#: ../../../OpenCLSupport.rst:377 ../../../OpenCLSupport.rst:379
#: ../../../OpenCLSupport.rst:381 ../../../OpenCLSupport.rst:383
#: ../../../OpenCLSupport.rst:385 ../../../OpenCLSupport.rst:387
#: ../../../OpenCLSupport.rst:389 ../../../OpenCLSupport.rst:391
#: ../../../OpenCLSupport.rst:393 ../../../OpenCLSupport.rst:395
#: ../../../OpenCLSupport.rst:397 ../../../OpenCLSupport.rst:399
#: ../../../OpenCLSupport.rst:401
msgid ":good:`done`"
msgstr ""

#: ../../../OpenCLSupport.rst:369 ../../../OpenCLSupport.rst:371
msgid "https://reviews.llvm.org/D88300"
msgstr ""

#: ../../../OpenCLSupport.rst:371 ../../../OpenCLSupport.rst:373
msgid "Predefined macros"
msgstr ""

#: ../../../OpenCLSupport.rst:371
msgid "New version macro"
msgstr ""

#: ../../../OpenCLSupport.rst:373
msgid "Feature macros"
msgstr ""

#: ../../../OpenCLSupport.rst:373
msgid "https://reviews.llvm.org/D95776"
msgstr ""

#: ../../../OpenCLSupport.rst:375 ../../../OpenCLSupport.rst:377
#: ../../../OpenCLSupport.rst:379 ../../../OpenCLSupport.rst:381
#: ../../../OpenCLSupport.rst:383 ../../../OpenCLSupport.rst:385
#: ../../../OpenCLSupport.rst:387 ../../../OpenCLSupport.rst:389
#: ../../../OpenCLSupport.rst:391 ../../../OpenCLSupport.rst:393
#: ../../../OpenCLSupport.rst:395
msgid "Feature optionality"
msgstr ""

#: ../../../OpenCLSupport.rst:375
msgid "Generic address space"
msgstr ""

#: ../../../OpenCLSupport.rst:375
msgid "https://reviews.llvm.org/D95778 and https://reviews.llvm.org/D103401"
msgstr ""

#: ../../../OpenCLSupport.rst:377
msgid "Builtin function overloads with generic address space"
msgstr ""

#: ../../../OpenCLSupport.rst:377
msgid "https://reviews.llvm.org/D105526, https://reviews.llvm.org/D107769"
msgstr ""

#: ../../../OpenCLSupport.rst:379
msgid "Program scope variables in global memory"
msgstr ""

#: ../../../OpenCLSupport.rst:379
msgid "https://reviews.llvm.org/D103191"
msgstr ""

#: ../../../OpenCLSupport.rst:381
msgid "3D image writes including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:381
msgid "https://reviews.llvm.org/D106260 (frontend)"
msgstr ""

#: ../../../OpenCLSupport.rst:383
msgid "read_write images including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:383
msgid ""
"https://reviews.llvm.org/D104915 (frontend) and https://reviews.llvm.org/"
"D107539, https://reviews.llvm.org/D117899 (functions)"
msgstr ""

#: ../../../OpenCLSupport.rst:385
msgid "C11 atomics memory scopes, ordering and builtin function"
msgstr ""

#: ../../../OpenCLSupport.rst:385
msgid "https://reviews.llvm.org/D106111, https://reviews.llvm.org/D119420"
msgstr ""

#: ../../../OpenCLSupport.rst:387
msgid "Blocks and Device-side kernel enqueue including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:387
msgid "https://reviews.llvm.org/D115640, https://reviews.llvm.org/D118605"
msgstr ""

#: ../../../OpenCLSupport.rst:389
msgid "Pipes including builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:389
msgid ""
"https://reviews.llvm.org/D107154 (frontend) and https://reviews.llvm.org/"
"D105858 (functions)"
msgstr ""

#: ../../../OpenCLSupport.rst:391
msgid "Work group collective builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:391
msgid "https://reviews.llvm.org/D105858"
msgstr ""

#: ../../../OpenCLSupport.rst:393
msgid "Image types and builtin functions"
msgstr ""

#: ../../../OpenCLSupport.rst:393
msgid ""
"https://reviews.llvm.org/D103911 (frontend) and https://reviews.llvm.org/"
"D107539 (functions)"
msgstr ""

#: ../../../OpenCLSupport.rst:395
msgid "Double precision floating point type"
msgstr ""

#: ../../../OpenCLSupport.rst:395
msgid "https://reviews.llvm.org/D96524"
msgstr ""

#: ../../../OpenCLSupport.rst:397 ../../../OpenCLSupport.rst:399
#: ../../../OpenCLSupport.rst:401
msgid "New functionality"
msgstr ""

#: ../../../OpenCLSupport.rst:397
msgid "RGBA vector components"
msgstr ""

#: ../../../OpenCLSupport.rst:397
msgid "https://reviews.llvm.org/D99969"
msgstr ""

#: ../../../OpenCLSupport.rst:399
msgid "Subgroup functions"
msgstr ""

#: ../../../OpenCLSupport.rst:399
msgid "https://reviews.llvm.org/D105858, https://reviews.llvm.org/D118999"
msgstr ""

#: ../../../OpenCLSupport.rst:401
msgid "Atomic mem scopes: subgroup, all devices including functions"
msgstr ""

#: ../../../OpenCLSupport.rst:401
msgid "https://reviews.llvm.org/D103241"
msgstr ""

#: ../../../OpenCLSupport.rst:407
msgid "Experimental features"
msgstr ""

#: ../../../OpenCLSupport.rst:409
msgid ""
"Clang provides the following new WIP features for the developers to "
"experiment and provide early feedback or contribute with further "
"improvements. Feel free to contact us on `the Discourse forums (Clang "
"Frontend category) <https://discourse.llvm.org/c/clang/6>`_ or file `a "
"GitHub issue <https://github.com/llvm/llvm-project/issues/new>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:418
msgid "C++ libraries for OpenCL"
msgstr ""

#: ../../../OpenCLSupport.rst:420
msgid ""
"There is ongoing work to support C++ standard libraries from `LLVM's libcxx "
"<https://libcxx.llvm.org/>`_ in OpenCL kernel code using C++ for OpenCL mode."
msgstr ""

#: ../../../OpenCLSupport.rst:423
msgid ""
"It is currently possible to include `type_traits` from C++17 in the kernel "
"sources when the following clang extensions are enabled "
"``__cl_clang_function_pointers`` and ``__cl_clang_variadic_functions``, see :"
"doc:`LanguageExtensions` for more details. The use of non-conformant "
"features enabled by the extensions does not expose non-conformant behavior "
"beyond the compilation i.e. does not get generated in IR or binary. The "
"extension only appear in metaprogramming mechanism to identify or verify the "
"properties of types. This allows to provide the full C++ functionality "
"without a loss of portability. To avoid unsafe use of the extensions it is "
"recommended that the extensions are disabled directly after the header "
"include."
msgstr ""

#: ../../../OpenCLSupport.rst:437
msgid "The example of kernel code with `type_traits` is illustrated here."
msgstr ""

#: ../../../OpenCLSupport.rst:453
msgid "The possible clang invocation to compile the example is as follows:"
msgstr ""

#: ../../../OpenCLSupport.rst:459
msgid ""
"Note that `type_traits` is a header only library and therefore no extra "
"linking step against the standard libraries is required. See full example in "
"`Compiler Explorer <https://godbolt.org/z/5WbnTfb65>`_."
msgstr ""

#: ../../../OpenCLSupport.rst:463
msgid ""
"More OpenCL specific C++ library implementations built on top of libcxx are "
"available in `libclcxx <https://github.com/KhronosGroup/libclcxx>`_ project."
msgstr ""
