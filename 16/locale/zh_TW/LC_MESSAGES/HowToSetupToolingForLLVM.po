# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToSetupToolingForLLVM.rst:3
msgid "How To Setup Clang Tooling For LLVM"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:5
msgid ""
"Clang Tooling provides infrastructure to write tools that need syntactic and "
"semantic information about a program. This term also relates to a set of "
"specific tools using this infrastructure (e.g. ``clang-check``). This "
"document provides information on how to set up and use Clang Tooling for the "
"LLVM source code."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:12
msgid "Introduction"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:14
msgid ""
"Clang Tooling needs a compilation database to figure out specific build "
"options for each file. Currently it can create a compilation database from "
"the ``compile_commands.json`` file, generated by CMake. When invoking clang "
"tools, you can either specify a path to a build directory using a command "
"line parameter ``-p`` or let Clang Tooling find this file in your source "
"tree. In either case you need to configure your build using CMake to use "
"clang tools."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:23
msgid "Setup Clang Tooling Using CMake and Make"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:25
msgid ""
"If you intend to use make to build LLVM, you should have CMake 2.8.6 or "
"later installed (can be found `here <https://cmake.org>`_)."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:28
msgid ""
"First, you need to generate Makefiles for LLVM with CMake. You need to make "
"a build directory and run CMake from it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:37
msgid ""
"If you want to use clang instead of GCC, you can add ``-DCMAKE_C_COMPILER=/"
"path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``. You can also use "
"``ccmake``, which provides a curses interface to configure CMake variables."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:42
#: ../../../HowToSetupToolingForLLVM.rst:233
msgid ""
"As a result, the new ``compile_commands.json`` file should appear in the "
"current directory. You should link it to the LLVM source tree so that Clang "
"Tooling is able to use it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:50
msgid "Now you are ready to build and test LLVM using make:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:57
msgid "Setup Clang Tooling Using CMake on Windows"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:59
msgid ""
"For Windows developers, the Visual Studio project generators in CMake do not "
"support `CMAKE_EXPORT_COMPILE_COMMANDS <https://cmake.org/cmake/help/latest/"
"variable/CMAKE_EXPORT_COMPILE_COMMANDS.html>`_. However, the Ninja generator "
"does support this variable and can be used on Windows to generate a suitable "
"``compile_commands.json`` that invokes the MSVC compiler."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:66
msgid ""
"First, you will need to install `Ninja`_.  Once installed, the Ninja "
"executable will need to be in your search path for CMake to locate it."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:69
msgid ""
"Next, assuming you already have Visual Studio installed on your machine, you "
"need to have the appropriate environment variables configured so that CMake "
"will locate the MSVC compiler for the Ninja generator.  The `documentation "
"<https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?"
"view=msvc-170#path_and_environment>`_ describes the necessary environment "
"variable settings, but the simplest thing is to use a `developer command-"
"prompt window <https://docs.microsoft.com/en-us/cpp/build/building-on-the-"
"command-line?view=msvc-170#developer_command_prompt_shortcuts>`_ or call a "
"`developer command file <https://docs.microsoft.com/en-us/cpp/build/building-"
"on-the-command-line?view=msvc-170#developer_command_file_locations>`_ to set "
"the environment variables appropriately."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:80
msgid ""
"Now you can run CMake with the Ninja generator to export a compilation "
"database:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:89
msgid ""
"It is best to keep your Visual Studio IDE build folder separate from the "
"Ninja build folder.  This prevents the two build systems from negatively "
"interacting with each other."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:93
msgid ""
"Once the ``compile_commands.json`` file has been created by Ninja, you can "
"use that compilation database with Clang Tooling.  One caveat is that "
"because there are indirect settings obtained through the environment "
"variables, you may need to run any Clang Tooling executables through a "
"command prompt window created for use with Visual Studio as described "
"above.  An alternative, e.g. for using the Visual Studio debugger on a Clang "
"Tooling executable, is to ensure that the environment variables are also "
"visible to the debugger settings.  This can be done locally in Visual "
"Studio's debugger configuration locally or globally by launching the Visual "
"Studio IDE from a suitable command-prompt window."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:105
msgid "Using Clang Tools"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:107
msgid ""
"After you completed the previous steps, you are ready to run clang tools. If "
"you have a recent clang installed, you should have ``clang-check`` in "
"``$PATH``. Try to run it on any ``.cpp`` file inside the LLVM source tree:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:115
msgid ""
"If you're using vim, it's convenient to have clang-check integrated. Put "
"this into your ``.vimrc``:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:146
msgid ""
"When editing a .cpp/.cxx/.cc/.c file, hit F5 to reparse the file. In case "
"the current file has a different extension (for example, .h), F5 will re-run "
"the last clang-check invocation made from this vim instance (if any). The "
"output will go into the error window, which is opened automatically when "
"clang-check finds errors, and can be re-opened with ``:cope``."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:153
msgid ""
"Other ``clang-check`` options that can be useful when working with clang AST:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:156
msgid "``-ast-print`` --- Build ASTs and then pretty-print them."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:157
msgid "``-ast-dump`` --- Build ASTs and then debug dump them."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:158
msgid ""
"``-ast-dump-filter=<string>`` --- Use with ``-ast-dump`` or ``-ast-print`` "
"to dump/print only AST declaration nodes having a certain substring in a "
"qualified name. Use ``-ast-list`` to list all filterable declaration node "
"names."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:162
msgid ""
"``-ast-list`` --- Build ASTs and print the list of declaration node "
"qualified names."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:165
msgid "Examples:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:192
msgid "Using Ninja Build System"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:194
msgid ""
"Optionally you can use the `Ninja`_ build system instead of make. It is "
"aimed at making your builds faster.  Currently this step will require "
"building Ninja from sources."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:198
msgid ""
"To take advantage of using Clang Tools along with Ninja build you need at "
"least CMake 2.8.9."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:201
msgid "Clone the Ninja git repository and build Ninja from sources:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:209
msgid ""
"This will result in a single binary ``ninja`` in the current directory. It "
"doesn't require installation and can just be copied to any location inside "
"``$PATH``, say ``/usr/local/bin/``:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:218
msgid ""
"After doing all of this, you'll need to generate Ninja build files for LLVM "
"with CMake. You need to make a build directory and run CMake from it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:228
msgid ""
"If you want to use clang instead of GCC, you can add ``-DCMAKE_C_COMPILER=/"
"path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``. You can also use "
"``ccmake``, which provides a curses interface to configure CMake variables "
"in an interactive manner."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:241
msgid "Now you are ready to build and test LLVM using Ninja:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:247
msgid "Other target names can be used in the same way as with make."
msgstr ""
