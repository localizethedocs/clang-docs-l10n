# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangOffloadPackager.rst:3
msgid "Clang Offload Packager"
msgstr ""

#: ../../../ClangOffloadPackager.rst:11
msgid "Introduction"
msgstr ""

#: ../../../ClangOffloadPackager.rst:13
msgid ""
"This tool bundles device files into a single image containing necessary "
"metadata. We use a custom binary format for bundling all the device images "
"together. The image format is a small header wrapping around a string map. "
"This tool creates bundled binaries so that they can be embedded into the "
"host to create a fat-binary."
msgstr ""

#: ../../../ClangOffloadPackager.rst:20
msgid "Binary Format"
msgstr ""

#: ../../../ClangOffloadPackager.rst:22
msgid ""
"The binary format is marked by the ``0x10FF10AD`` magic bytes, followed by a "
"version. Each created binary contains its own magic bytes. This allows us to "
"locate all the embedded offloading sections even after they may have been "
"merged by the linker, such as when using relocatable linking. Conceptually, "
"this binary format is a serialization of a string map and an image buffer. "
"The binary header is described in the following :ref:`table<table-"
"binary_header>`."
msgstr ""

#: ../../../ClangOffloadPackager.rst:29
msgid "Offloading Binary Header"
msgstr ""

#: ../../../ClangOffloadPackager.rst:33 ../../../ClangOffloadPackager.rst:57
#: ../../../ClangOffloadPackager.rst:125
msgid "Type"
msgstr ""

#: ../../../ClangOffloadPackager.rst:33 ../../../ClangOffloadPackager.rst:57
#: ../../../ClangOffloadPackager.rst:125
msgid "Identifier"
msgstr ""

#: ../../../ClangOffloadPackager.rst:33 ../../../ClangOffloadPackager.rst:57
#: ../../../ClangOffloadPackager.rst:86 ../../../ClangOffloadPackager.rst:105
#: ../../../ClangOffloadPackager.rst:125
msgid "Description"
msgstr ""

#: ../../../ClangOffloadPackager.rst:35
msgid "uint8_t"
msgstr ""

#: ../../../ClangOffloadPackager.rst:35
msgid "magic"
msgstr ""

#: ../../../ClangOffloadPackager.rst:35
msgid "The magic bytes for the binary format (0x10FF10AD)"
msgstr ""

#: ../../../ClangOffloadPackager.rst:37 ../../../ClangOffloadPackager.rst:63
msgid "uint32_t"
msgstr ""

#: ../../../ClangOffloadPackager.rst:37
msgid "version"
msgstr ""

#: ../../../ClangOffloadPackager.rst:37
msgid "Version of this format (currently version 1)"
msgstr ""

#: ../../../ClangOffloadPackager.rst:39 ../../../ClangOffloadPackager.rst:41
#: ../../../ClangOffloadPackager.rst:43 ../../../ClangOffloadPackager.rst:65
#: ../../../ClangOffloadPackager.rst:67 ../../../ClangOffloadPackager.rst:69
#: ../../../ClangOffloadPackager.rst:71 ../../../ClangOffloadPackager.rst:127
#: ../../../ClangOffloadPackager.rst:129
msgid "uint64_t"
msgstr ""

#: ../../../ClangOffloadPackager.rst:39
msgid "size"
msgstr ""

#: ../../../ClangOffloadPackager.rst:39
msgid "Size of this binary in bytes"
msgstr ""

#: ../../../ClangOffloadPackager.rst:41
msgid "entry offset"
msgstr ""

#: ../../../ClangOffloadPackager.rst:41
msgid "Absolute offset of the offload entries in bytes"
msgstr ""

#: ../../../ClangOffloadPackager.rst:43
msgid "entry size"
msgstr ""

#: ../../../ClangOffloadPackager.rst:43
msgid "Size of the offload entries in bytes"
msgstr ""

#: ../../../ClangOffloadPackager.rst:46
msgid ""
"Once identified through the magic bytes, we use the size field to take a "
"slice of the binary blob containing the information for a single offloading "
"image. We can then use the offset field to find the actual offloading "
"entries containing the image and metadata. The offload entry contains "
"information about the device image. It contains the fields shown in the "
"following :ref:`table<table-binary_entry>`."
msgstr ""

#: ../../../ClangOffloadPackager.rst:53
msgid "Offloading Entry Table"
msgstr ""

#: ../../../ClangOffloadPackager.rst:59 ../../../ClangOffloadPackager.rst:61
msgid "uint16_t"
msgstr ""

#: ../../../ClangOffloadPackager.rst:59
msgid "image kind"
msgstr ""

#: ../../../ClangOffloadPackager.rst:59
msgid "The kind of the device image (e.g. bc, cubin)"
msgstr ""

#: ../../../ClangOffloadPackager.rst:61
msgid "offload kind"
msgstr ""

#: ../../../ClangOffloadPackager.rst:61
msgid "The producer of the image (e.g. openmp, cuda)"
msgstr ""

#: ../../../ClangOffloadPackager.rst:63
msgid "flags"
msgstr ""

#: ../../../ClangOffloadPackager.rst:63
msgid "Generic flags for the image"
msgstr ""

#: ../../../ClangOffloadPackager.rst:65
msgid "string offset"
msgstr ""

#: ../../../ClangOffloadPackager.rst:65
msgid "Absolute offset of the string metadata table"
msgstr ""

#: ../../../ClangOffloadPackager.rst:67
msgid "num strings"
msgstr ""

#: ../../../ClangOffloadPackager.rst:67
msgid "Number of string entries in the table"
msgstr ""

#: ../../../ClangOffloadPackager.rst:69
msgid "image offset"
msgstr ""

#: ../../../ClangOffloadPackager.rst:69
msgid "Absolute offset of the device image in bytes"
msgstr ""

#: ../../../ClangOffloadPackager.rst:71
msgid "image size"
msgstr ""

#: ../../../ClangOffloadPackager.rst:71
msgid "Size of the device image in bytes"
msgstr ""

#: ../../../ClangOffloadPackager.rst:74
msgid ""
"This table contains the offsets of the string table and the device image "
"itself along with some other integer information. The image kind lets us "
"easily identify the type of image stored here without needing to inspect the "
"binary. The offloading kind is used to determine which registration code or "
"linking semantics are necessary for this image. These are stored as "
"enumerations with the following values for the :ref:`offload kind<table-"
"offload_kind>` and the :ref:`image kind<table-image_kind>`."
msgstr ""

#: ../../../ClangOffloadPackager.rst:82
msgid "Image Kind"
msgstr ""

#: ../../../ClangOffloadPackager.rst:86 ../../../ClangOffloadPackager.rst:105
msgid "Name"
msgstr ""

#: ../../../ClangOffloadPackager.rst:86 ../../../ClangOffloadPackager.rst:105
msgid "Value"
msgstr ""

#: ../../../ClangOffloadPackager.rst:88
msgid "IMG_None"
msgstr ""

#: ../../../ClangOffloadPackager.rst:88 ../../../ClangOffloadPackager.rst:107
msgid "0x00"
msgstr ""

#: ../../../ClangOffloadPackager.rst:88
msgid "No image information provided"
msgstr ""

#: ../../../ClangOffloadPackager.rst:90
msgid "IMG_Object"
msgstr ""

#: ../../../ClangOffloadPackager.rst:90 ../../../ClangOffloadPackager.rst:109
msgid "0x01"
msgstr ""

#: ../../../ClangOffloadPackager.rst:90
msgid "The image is a generic object file"
msgstr ""

#: ../../../ClangOffloadPackager.rst:92
msgid "IMG_Bitcode"
msgstr ""

#: ../../../ClangOffloadPackager.rst:92 ../../../ClangOffloadPackager.rst:111
msgid "0x02"
msgstr ""

#: ../../../ClangOffloadPackager.rst:92
msgid "The image is an LLVM-IR bitcode file"
msgstr ""

#: ../../../ClangOffloadPackager.rst:94
msgid "IMG_Cubin"
msgstr ""

#: ../../../ClangOffloadPackager.rst:94 ../../../ClangOffloadPackager.rst:113
msgid "0x03"
msgstr ""

#: ../../../ClangOffloadPackager.rst:94
msgid "The image is a CUDA object file"
msgstr ""

#: ../../../ClangOffloadPackager.rst:96
msgid "IMG_Fatbinary"
msgstr ""

#: ../../../ClangOffloadPackager.rst:96
msgid "0x04"
msgstr ""

#: ../../../ClangOffloadPackager.rst:96
msgid "The image is a CUDA fatbinary file"
msgstr ""

#: ../../../ClangOffloadPackager.rst:98
msgid "IMG_PTX"
msgstr ""

#: ../../../ClangOffloadPackager.rst:98
msgid "0x05"
msgstr ""

#: ../../../ClangOffloadPackager.rst:98
msgid "The image is a CUDA PTX file"
msgstr ""

#: ../../../ClangOffloadPackager.rst:101
msgid "Offload Kind"
msgstr ""

#: ../../../ClangOffloadPackager.rst:107
msgid "OFK_None"
msgstr ""

#: ../../../ClangOffloadPackager.rst:107
msgid "No offloading information provided"
msgstr ""

#: ../../../ClangOffloadPackager.rst:109
msgid "OFK_OpenMP"
msgstr ""

#: ../../../ClangOffloadPackager.rst:109
msgid "The producer was OpenMP offloading"
msgstr ""

#: ../../../ClangOffloadPackager.rst:111
msgid "OFK_CUDA"
msgstr ""

#: ../../../ClangOffloadPackager.rst:111
msgid "The producer was CUDA"
msgstr ""

#: ../../../ClangOffloadPackager.rst:113
msgid "OFK_HIP"
msgstr ""

#: ../../../ClangOffloadPackager.rst:113
msgid "The producer was HIP"
msgstr ""

#: ../../../ClangOffloadPackager.rst:116
msgid ""
"The flags are used to signify certain conditions, such as the presence of "
"debugging information or whether or not LTO was used. The string entry table "
"is used to generically contain any arbitrary key-value pair. This is stored "
"as an array of the :ref:`string entry<table-binary_string>` format."
msgstr ""

#: ../../../ClangOffloadPackager.rst:121
msgid "Offloading String Entry"
msgstr ""

#: ../../../ClangOffloadPackager.rst:127
msgid "key offset"
msgstr ""

#: ../../../ClangOffloadPackager.rst:127
msgid "Absolute byte offset of the key in th string table"
msgstr ""

#: ../../../ClangOffloadPackager.rst:129
msgid "value offset"
msgstr ""

#: ../../../ClangOffloadPackager.rst:129
msgid "Absolute byte offset of the value in the string table"
msgstr ""

#: ../../../ClangOffloadPackager.rst:132
msgid ""
"The string entries simply provide offsets to a key and value pair in the "
"binary images string table. The string table is simply a collection of null "
"terminated strings with defined offsets in the image. The string entry "
"allows us to create a key-value pair from this string table. This is used "
"for passing arbitrary arguments to the image, such as the triple and "
"architecture."
msgstr ""

#: ../../../ClangOffloadPackager.rst:138
msgid ""
"All of these structures are combined to form a single binary blob, the order "
"does not matter because of the use of absolute offsets. This makes it easier "
"to extend in the future. As mentioned previously, multiple offloading images "
"are bundled together by simply concatenating them in this format. Because we "
"have the magic bytes and size of each image, we can extract them as-needed."
msgstr ""

#: ../../../ClangOffloadPackager.rst:145
msgid "Usage"
msgstr ""

#: ../../../ClangOffloadPackager.rst:147
msgid ""
"This tool can be used with the following arguments. Generally information is "
"passed as a key-value pair to the ``image=`` argument. The ``file`` and "
"``triple``, arguments are considered mandatory to make a valid image. The "
"``arch`` argument is suggested."
msgstr ""

#: ../../../ClangOffloadPackager.rst:175
msgid "Example"
msgstr ""

#: ../../../ClangOffloadPackager.rst:177
msgid ""
"This tool simply takes many input files from the ``image`` option and "
"creates a single output file with all the images combined."
msgstr ""

#: ../../../ClangOffloadPackager.rst:184
msgid ""
"The inverse operation can be performed instead by passing the packaged "
"binary as input. In this mode the matching images will either be placed in "
"the output specified by the ``file`` option. If no ``file`` argument is "
"provided a name will be generated for each matching image."
msgstr ""
