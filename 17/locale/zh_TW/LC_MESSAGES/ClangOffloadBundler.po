# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangOffloadBundler.rst:3
msgid "Clang Offload Bundler"
msgstr ""

#: ../../../ClangOffloadBundler.rst:11
msgid "Introduction"
msgstr ""

#: ../../../ClangOffloadBundler.rst:13
msgid ""
"For heterogeneous single source programming languages, use one or more ``--"
"offload-arch=<target-id>`` Clang options to specify the target IDs of the "
"code to generate for the offload code regions."
msgstr ""

#: ../../../ClangOffloadBundler.rst:17
msgid ""
"The tool chain may perform multiple compilations of a translation unit to "
"produce separate code objects for the host and potentially multiple "
"offloaded devices. The ``clang-offload-bundler`` tool may be used as part of "
"the tool chain to combine these multiple code objects into a single bundled "
"code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:22
msgid ""
"The tool chain may use a bundled code object as an intermediate step so that "
"each tool chain step consumes and produces a single file as in traditional "
"non-heterogeneous tool chains. The bundled code object contains the code "
"objects for the host and all the offload devices."
msgstr ""

#: ../../../ClangOffloadBundler.rst:27
msgid ""
"A bundled code object may also be used to bundle just the offloaded code "
"objects, and embedded as data into the host code object. The host "
"compilation includes an ``init`` function that will use the runtime "
"corresponding to the offload kind (see :ref:`clang-offload-kind-table`) to "
"load the offload code objects appropriate to the devices present when the "
"host program is executed."
msgstr ""

#: ../../../ClangOffloadBundler.rst:34 ../../../ClangOffloadBundler.rst:38
msgid "Supported File Formats"
msgstr ""

#: ../../../ClangOffloadBundler.rst:35
msgid ""
"Several text and binary file formats are supported for bundling/unbundling. "
"See :ref:`supported-file-formats-table` for a list of currently supported "
"formats."
msgstr ""

#: ../../../ClangOffloadBundler.rst:42
msgid "File Format"
msgstr ""

#: ../../../ClangOffloadBundler.rst:42
msgid "File Extension"
msgstr ""

#: ../../../ClangOffloadBundler.rst:42
msgid "Text/Binary"
msgstr ""

#: ../../../ClangOffloadBundler.rst:44
msgid "CPP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:44
msgid "i"
msgstr ""

#: ../../../ClangOffloadBundler.rst:44 ../../../ClangOffloadBundler.rst:46
#: ../../../ClangOffloadBundler.rst:48 ../../../ClangOffloadBundler.rst:50
#: ../../../ClangOffloadBundler.rst:52 ../../../ClangOffloadBundler.rst:56
msgid "Text"
msgstr ""

#: ../../../ClangOffloadBundler.rst:46
msgid "C++ CPP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:46
msgid "ii"
msgstr ""

#: ../../../ClangOffloadBundler.rst:48
msgid "CUDA/HIP output"
msgstr ""

#: ../../../ClangOffloadBundler.rst:48
msgid "cui"
msgstr ""

#: ../../../ClangOffloadBundler.rst:50
msgid "Dependency"
msgstr ""

#: ../../../ClangOffloadBundler.rst:50
msgid "d"
msgstr ""

#: ../../../ClangOffloadBundler.rst:52
msgid "LLVM"
msgstr ""

#: ../../../ClangOffloadBundler.rst:52
msgid "ll"
msgstr ""

#: ../../../ClangOffloadBundler.rst:54
msgid "LLVM Bitcode"
msgstr ""

#: ../../../ClangOffloadBundler.rst:54
msgid "bc"
msgstr ""

#: ../../../ClangOffloadBundler.rst:54 ../../../ClangOffloadBundler.rst:58
#: ../../../ClangOffloadBundler.rst:60 ../../../ClangOffloadBundler.rst:62
#: ../../../ClangOffloadBundler.rst:64
msgid "Binary"
msgstr ""

#: ../../../ClangOffloadBundler.rst:56
msgid "Assembler"
msgstr ""

#: ../../../ClangOffloadBundler.rst:56
msgid "s"
msgstr ""

#: ../../../ClangOffloadBundler.rst:58
msgid "Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:58
msgid "o"
msgstr ""

#: ../../../ClangOffloadBundler.rst:60
msgid "Archive of objects"
msgstr ""

#: ../../../ClangOffloadBundler.rst:60
msgid "a"
msgstr ""

#: ../../../ClangOffloadBundler.rst:62
msgid "Precompiled header"
msgstr ""

#: ../../../ClangOffloadBundler.rst:62
msgid "gch"
msgstr ""

#: ../../../ClangOffloadBundler.rst:64
msgid "Clang AST file"
msgstr ""

#: ../../../ClangOffloadBundler.rst:64
msgid "ast"
msgstr ""

#: ../../../ClangOffloadBundler.rst:70
msgid "Bundled Text File Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:72
msgid ""
"The format of the bundled files is currently very simple: text formats are "
"concatenated with comments that have a magic string and bundle entry ID in "
"between."
msgstr ""

#: ../../../ClangOffloadBundler.rst:89
msgid "Bundled Binary File Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:91
msgid "The layout of a bundled code object is defined by the following table:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:93
msgid "Bundled Code Object Layout"
msgstr ""

#: ../../../ClangOffloadBundler.rst:97
msgid "Field"
msgstr ""

#: ../../../ClangOffloadBundler.rst:97
msgid "Type"
msgstr ""

#: ../../../ClangOffloadBundler.rst:97
msgid "Size in Bytes"
msgstr ""

#: ../../../ClangOffloadBundler.rst:97 ../../../ClangOffloadBundler.rst:149
msgid "Description"
msgstr ""

#: ../../../ClangOffloadBundler.rst:99
msgid "Magic String"
msgstr ""

#: ../../../ClangOffloadBundler.rst:99 ../../../ClangOffloadBundler.rst:107
#: ../../../ClangOffloadBundler.rst:115
msgid "string"
msgstr ""

#: ../../../ClangOffloadBundler.rst:99
msgid "24"
msgstr ""

#: ../../../ClangOffloadBundler.rst:99
msgid "``__CLANG_OFFLOAD_BUNDLE__``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:100
msgid "Number Of Bundle Entries"
msgstr ""

#: ../../../ClangOffloadBundler.rst:100 ../../../ClangOffloadBundler.rst:101
#: ../../../ClangOffloadBundler.rst:104 ../../../ClangOffloadBundler.rst:105
#: ../../../ClangOffloadBundler.rst:112 ../../../ClangOffloadBundler.rst:113
#: ../../../ClangOffloadBundler.rst:114
msgid "integer"
msgstr ""

#: ../../../ClangOffloadBundler.rst:100 ../../../ClangOffloadBundler.rst:101
#: ../../../ClangOffloadBundler.rst:104 ../../../ClangOffloadBundler.rst:105
#: ../../../ClangOffloadBundler.rst:112 ../../../ClangOffloadBundler.rst:113
#: ../../../ClangOffloadBundler.rst:114
msgid "8"
msgstr ""

#: ../../../ClangOffloadBundler.rst:100
msgid "Number of bundle entries."
msgstr ""

#: ../../../ClangOffloadBundler.rst:101
msgid "1st Bundle Entry Code Object Offset"
msgstr ""

#: ../../../ClangOffloadBundler.rst:101
msgid "Byte offset from beginning of bundled code object to 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:104 ../../../ClangOffloadBundler.rst:117
msgid "1st Bundle Entry Code Object Size"
msgstr ""

#: ../../../ClangOffloadBundler.rst:104
msgid "Byte size of 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:105 ../../../ClangOffloadBundler.rst:107
#: ../../../ClangOffloadBundler.rst:115
msgid "1st Bundle Entry ID Length"
msgstr ""

#: ../../../ClangOffloadBundler.rst:105
msgid "Character length of bundle entry ID of 1st code object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:107
msgid "1st Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:107
msgid ""
"Bundle entry ID of 1st code object. This is not NUL terminated. See :ref:"
"`clang-bundle-entry-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:111 ../../../ClangOffloadBundler.rst:119
msgid "\\..."
msgstr ""

#: ../../../ClangOffloadBundler.rst:112
msgid "Nth Bundle Entry Code Object Offset"
msgstr ""

#: ../../../ClangOffloadBundler.rst:113 ../../../ClangOffloadBundler.rst:120
msgid "Nth Bundle Entry Code Object Size"
msgstr ""

#: ../../../ClangOffloadBundler.rst:114
msgid "Nth Bundle Entry ID Length"
msgstr ""

#: ../../../ClangOffloadBundler.rst:115
msgid "Nth Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:117
msgid "1st Bundle Entry Code Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:117 ../../../ClangOffloadBundler.rst:120
msgid "bytes"
msgstr ""

#: ../../../ClangOffloadBundler.rst:120
msgid "Nth Bundle Entry Code Object"
msgstr ""

#: ../../../ClangOffloadBundler.rst:127
msgid "Bundle Entry ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:129
msgid ""
"Each entry in a bundled code object (see :ref:`clang-bundled-code-object-"
"layout`) has a bundle entry ID that indicates the kind of the entry's code "
"object and the runtime that manages it."
msgstr ""

#: ../../../ClangOffloadBundler.rst:133
msgid "Bundle entry ID syntax is defined by the following BNF syntax:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:139 ../../../ClangOffloadBundler.rst:224
msgid "Where:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:174
msgid "**offload-kind**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:142
msgid ""
"The runtime responsible for managing the bundled entry code object. See :ref:"
"`clang-offload-kind-table`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:145
msgid "Bundled Code Object Offload Kind"
msgstr ""

#: ../../../ClangOffloadBundler.rst:149
msgid "Offload Kind"
msgstr ""

#: ../../../ClangOffloadBundler.rst:151
msgid "host"
msgstr ""

#: ../../../ClangOffloadBundler.rst:151
msgid ""
"Host code object. ``clang-offload-bundler`` always includes this entry as "
"the first bundled code object entry. For an embedded bundled code object "
"this entry is not used by the runtime and so is generally an empty code "
"object."
msgstr ""

#: ../../../ClangOffloadBundler.rst:156
msgid "hip"
msgstr ""

#: ../../../ClangOffloadBundler.rst:156
msgid ""
"Offload code object for the HIP language. Used for all HIP language offload "
"code objects when the ``clang-offload-bundler`` is used to bundle code "
"objects as intermediate steps of the tool chain. Also used for AMD GPU code "
"objects before ABI version V4 when the ``clang-offload-bundler`` is used to "
"create a *fat binary* to be loaded by the HIP runtime. The fat binary can be "
"loaded directly from a file, or be embedded in the host code object as a "
"data section with the name ``.hip_fatbin``."
msgstr ""

#: ../../../ClangOffloadBundler.rst:166
msgid "hipv4"
msgstr ""

#: ../../../ClangOffloadBundler.rst:166
msgid ""
"Offload code object for the HIP language. Used for AMD GPU code objects with "
"at least ABI version V4 when the ``clang-offload-bundler`` is used to create "
"a *fat binary* to be loaded by the HIP runtime. The fat binary can be loaded "
"directly from a file, or be embedded in the host code object as a data "
"section with the name ``.hip_fatbin``."
msgstr ""

#: ../../../ClangOffloadBundler.rst:173
msgid "openmp"
msgstr ""

#: ../../../ClangOffloadBundler.rst:173
msgid "Offload code object for the OpenMP language extension."
msgstr ""

#: ../../../ClangOffloadBundler.rst:190
msgid "**target-triple**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:177
msgid ""
"The target triple of the code object. See `Target Triple <https://clang.llvm."
"org/docs/CrossCompilation.html#target-triple>`_."
msgstr ""

#: ../../../ClangOffloadBundler.rst:180
msgid ""
"The bundler accepts target triples with or without the optional environment "
"field:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:183
msgid "``<arch><sub>-<vendor>-<sys>``, or ``<arch><sub>-<vendor>-<sys>-<env>``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:186
msgid ""
"However, in order to standardize outputs for tools that consume bitcode "
"bundles, bundles written by the bundler internally use only the 4-field "
"target triple:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:190
msgid "``<arch><sub>-<vendor>-<sys>-<env>``"
msgstr ""

#: ../../../ClangOffloadBundler.rst:194
msgid "**target-id**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:193
msgid ""
"The canonical target ID of the code object. Present only if the target "
"supports a target ID. See :ref:`clang-target-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:196
msgid ""
"Each entry of a bundled code object must have a different bundle entry ID. "
"There can be multiple entries for the same processor provided they differ in "
"target feature settings. If there is an entry with a target feature "
"specified as *Any*, then all entries must specify that target feature as "
"*Any* for the same processor. There may be additional target specific "
"restrictions."
msgstr ""

#: ../../../ClangOffloadBundler.rst:205
msgid "Target ID"
msgstr ""

#: ../../../ClangOffloadBundler.rst:207
msgid ""
"A target ID is used to indicate the processor and optionally its "
"configuration, expressed by a set of target features, that affect ISA "
"generation. It is target specific if a target ID is supported, or if the "
"target triple alone is sufficient to specify the ISA generation."
msgstr ""

#: ../../../ClangOffloadBundler.rst:212
msgid ""
"It is used with the ``-mcpu=<target-id>`` and ``--offload-arch=<target-id>`` "
"Clang compilation options to specify the kind of code to generate."
msgstr ""

#: ../../../ClangOffloadBundler.rst:215
msgid ""
"It is also used as part of the bundle entry ID to identify the code object. "
"See :ref:`clang-bundle-entry-id`."
msgstr ""

#: ../../../ClangOffloadBundler.rst:218
msgid "Target ID syntax is defined by the following BNF syntax:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:227
msgid "**processor**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:227
msgid "Is a the target specific processor or any alternative processor name."
msgstr ""

#: ../../../ClangOffloadBundler.rst:248
msgid "**target-feature**"
msgstr ""

#: ../../../ClangOffloadBundler.rst:230
msgid ""
"Is a target feature name that is supported by the processor. Each target "
"feature must appear at most once in a target ID and can have one of three "
"values:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:238
msgid "*Any*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:235
msgid ""
"Specified by omitting the target feature from the target ID. A code object "
"compiled with a target ID specifying the default value of a target feature "
"can be loaded and executed on a processor configured with the target feature "
"on or off."
msgstr ""

#: ../../../ClangOffloadBundler.rst:243
msgid "*On*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:241
msgid ""
"Specified by ``+``, indicating the target feature is enabled. A code object "
"compiled with a target ID specifying a target feature on can only be loaded "
"on a processor configured with the target feature on."
msgstr ""

#: ../../../ClangOffloadBundler.rst:248
msgid "*Off*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:246
msgid ""
"specified by ``-``, indicating the target feature is disabled. A code object "
"compiled with a target ID specifying a target feature off can only be loaded "
"on a processor configured with the target feature off."
msgstr ""

#: ../../../ClangOffloadBundler.rst:250
msgid "There are two forms of target ID:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:255
msgid "*Non-Canonical Form*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:253
msgid ""
"The non-canonical form is used as the input to user commands to allow the "
"user greater convenience. It allows both the primary and alternative "
"processor name to be used and the target features may be specified in any "
"order."
msgstr ""

#: ../../../ClangOffloadBundler.rst:263
msgid "*Canonical Form*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:258
msgid ""
"The canonical form is used for all generated output to allow greater "
"convenience for tools that consume the information. It is also used for "
"internal passing of information between tools. Only the primary and not "
"alternative processor name is used and the target features are specified in "
"alphabetic order. Command line tools convert non-canonical form to canonical "
"form."
msgstr ""

#: ../../../ClangOffloadBundler.rst:266
msgid "Target Specific information"
msgstr ""

#: ../../../ClangOffloadBundler.rst:268
msgid "Target specific information is available for the following:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:275
msgid "*AMD GPU*"
msgstr ""

#: ../../../ClangOffloadBundler.rst:271
msgid ""
"AMD GPU supports target ID and target features. See `User Guide for AMDGPU "
"Backend <https://llvm.org/docs/AMDGPUUsage.html>`_ which defines the "
"`processors <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-processors>`_ and "
"`target features <https://llvm.org/docs/AMDGPUUsage.html#amdgpu-target-"
"features>`_ supported."
msgstr ""

#: ../../../ClangOffloadBundler.rst:277
msgid "Most other targets do not support target IDs."
msgstr ""

#: ../../../ClangOffloadBundler.rst:280
msgid "Archive Unbundling"
msgstr ""

#: ../../../ClangOffloadBundler.rst:282
msgid ""
"Unbundling of heterogeneous device archive is done to create device specific "
"archives. Heterogeneous Device Archive is in a format compatible with GNU ar "
"utility and contains a collection of bundled device binaries where each "
"bundle file will contain device binaries for a host and one or more targets. "
"The output device specific archive is in a format compatible with GNU ar "
"utility and contains a collection of device binaries for a specific target."
msgstr ""

#: ../../../ClangOffloadBundler.rst:302
msgid ""
"clang-offload-bundler extracts compatible device binaries for a given target "
"from the bundled device binaries in a heterogeneous device archive and "
"creates a target specific device archive without bundling."
msgstr ""

#: ../../../ClangOffloadBundler.rst:306
msgid ""
"clang-offload-bundler determines whether a device binary is compatible with "
"a target by comparing bundle ID's. Two bundle ID's are considered compatible "
"if:"
msgstr ""

#: ../../../ClangOffloadBundler.rst:309
msgid "Their offload kind are the same"
msgstr ""

#: ../../../ClangOffloadBundler.rst:310
msgid "Their target triple are the same"
msgstr ""

#: ../../../ClangOffloadBundler.rst:311
msgid "Their GPUArch are the same"
msgstr ""
