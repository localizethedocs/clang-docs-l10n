# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/checkers.rst:3
msgid "Available Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:5
msgid ""
"The analyzer performs checks that are categorized into families or "
"\"checkers\"."
msgstr ""

#: ../../../analyzer/checkers.rst:7
msgid ""
"The default set of checkers covers a variety of checks targeted at finding "
"security and API usage bugs, dead code, and other logic errors. See the :ref:"
"`default-checkers` checkers list below."
msgstr ""

#: ../../../analyzer/checkers.rst:10
msgid ""
"In addition to these, the analyzer contains a number of :ref:`alpha-"
"checkers` (aka *alpha* checkers). These checkers are under development and "
"are switched off by default. They may crash or emit a higher number of false "
"positives."
msgstr ""

#: ../../../analyzer/checkers.rst:13
msgid ""
"The :ref:`debug-checkers` package contains checkers for analyzer developers "
"for debugging purposes."
msgstr ""

#: ../../../analyzer/checkers.rst:17
msgid "Table of Contents"
msgstr ""

#: ../../../analyzer/checkers.rst:22
msgid "Default Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:27
msgid "core"
msgstr ""

#: ../../../analyzer/checkers.rst:28
msgid ""
"Models core language features and contains general-purpose checkers such as "
"division by zero, null pointer dereference, usage of uninitialized values, "
"etc. *These checkers must be always switched on as other checker rely on "
"them.*"
msgstr ""

#: ../../../analyzer/checkers.rst:35
msgid "core.CallAndMessage (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:36
msgid ""
"Check for logical errors for function calls and Objective-C message "
"expressions (e.g., uninitialized arguments, null function pointers)."
msgstr ""

#: ../../../analyzer/checkers.rst:44
msgid "core.DivideZero (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:45
msgid "Check for division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:53
msgid "core.NonNullParamChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:54
msgid ""
"Check for null pointers passed as arguments to a function whose arguments "
"are references or marked with the 'nonnull' attribute."
msgstr ""

#: ../../../analyzer/checkers.rst:68
msgid "core.NullDereference (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:69
msgid "Check for dereferences of null pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:71
msgid ""
"This checker specifically does not report null pointer dereferences for x86 "
"and x86-64 targets when the address space is 256 (x86 GS Segment), 257 (x86 "
"FS Segment), or 258 (x86 SS segment). See `X86/X86-64 Language Extensions "
"<https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-"
"specified-segments>`__ for reference."
msgstr ""

#: ../../../analyzer/checkers.rst:78
msgid ""
"The ``SuppressAddressSpaces`` option suppresses warnings for null "
"dereferences of all pointers with address spaces. You can disable this "
"behavior with the option ``-analyzer-config core.NullDereference:"
"SuppressAddressSpaces=false``. *Defaults to true*."
msgstr ""

#: ../../../analyzer/checkers.rst:126
msgid "core.StackAddressEscape (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:127
msgid "Check that addresses to stack memory do not escape the function."
msgstr ""

#: ../../../analyzer/checkers.rst:152
msgid "core.UndefinedBinaryOperatorResult (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:153
msgid "Check for undefined results of binary operators."
msgstr ""

#: ../../../analyzer/checkers.rst:165
msgid "core.VLASize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:166
msgid ""
"Check for declarations of Variable Length Arrays of undefined or zero size."
msgstr ""

#: ../../../analyzer/checkers.rst:168
msgid "Check for declarations of VLA of undefined or zero size."
msgstr ""

#: ../../../analyzer/checkers.rst:185
msgid "core.uninitialized.ArraySubscript (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:186
msgid "Check for uninitialized values used as array subscripts."
msgstr ""

#: ../../../analyzer/checkers.rst:198
msgid "core.uninitialized.Assign (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:199
msgid "Check for assigning uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:211
msgid "core.uninitialized.Branch (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:212
msgid "Check for uninitialized values used as branch conditions."
msgstr ""

#: ../../../analyzer/checkers.rst:225
msgid "core.uninitialized.CapturedBlockVariable (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:226
msgid "Check for blocks that capture uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:238
msgid "core.uninitialized.UndefReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:239
msgid "Check for uninitialized values being returned to the caller."
msgstr ""

#: ../../../analyzer/checkers.rst:251
msgid "core.uninitialized.NewArraySize (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:253
msgid "Check if the element count in new[] is garbage or undefined."
msgstr ""

#: ../../../analyzer/checkers.rst:268
msgid "cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:270
msgid "C++ Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:275
msgid "cplusplus.InnerPointer (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:276
msgid "Check for inner pointers of C++ containers used after re/deallocation."
msgstr ""

#: ../../../analyzer/checkers.rst:278
msgid ""
"Many container methods in the C++ standard library are known to invalidate "
"\"references\" (including actual references, iterators and raw pointers) to "
"elements of the container. Using such references after they are invalidated "
"causes undefined behavior, which is a common source of memory errors in C++ "
"that this checker is capable of finding."
msgstr ""

#: ../../../analyzer/checkers.rst:284
msgid ""
"The checker is currently limited to ``std::string`` objects and doesn't "
"recognize some of the more sophisticated approaches to passing unowned "
"pointers around, such as ``std::string_view``."
msgstr ""

#: ../../../analyzer/checkers.rst:306
msgid "cplusplus.NewDelete (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:307
msgid ""
"Check for double-free and use-after-free problems. Traces memory managed by "
"new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:315
msgid "cplusplus.NewDeleteLeaks (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:316
msgid "Check for memory leaks. Traces memory managed by new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:327
msgid "cplusplus.PlacementNewChecker (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:328
msgid ""
"Check if default placement new is provided with pointers to sufficient "
"storage capacity."
msgstr ""

#: ../../../analyzer/checkers.rst:342
msgid "cplusplus.SelfAssignment (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:343
msgid "Checks C++ copy and move assignment operators for self assignment."
msgstr ""

#: ../../../analyzer/checkers.rst:348
msgid "cplusplus.StringChecker (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:349
msgid "Checks std::string operations."
msgstr ""

#: ../../../analyzer/checkers.rst:351
msgid ""
"Checks if the cstring pointer from which the ``std::string`` object is "
"constructed is ``NULL`` or not. If the checker cannot reason about the "
"nullness of the pointer it will assume that it was non-null to satisfy the "
"precondition of the constructor."
msgstr ""

#: ../../../analyzer/checkers.rst:356
msgid ""
"This checker is capable of checking the `SEI CERT C++ coding rule STR51-CPP. "
"Do not attempt to create a std::string from a null pointer <https://wiki.sei."
"cmu.edu/confluence/x/E3s-BQ>`__."
msgstr ""

#: ../../../analyzer/checkers.rst:373
msgid "deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:375
msgid "Dead Code Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:380
msgid "deadcode.DeadStores (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:381
msgid "Check for values stored to variables that are never read afterwards."
msgstr ""

#: ../../../analyzer/checkers.rst:390
msgid ""
"The ``WarnForDeadNestedAssignments`` option enables the checker to emit "
"warnings for nested dead assignments. You can disable with the ``-analyzer-"
"config deadcode.DeadStores:WarnForDeadNestedAssignments=false``. *Defaults "
"to true*."
msgstr ""

#: ../../../analyzer/checkers.rst:395
msgid "Would warn for this e.g.: if ((y = make_int())) { }"
msgstr ""

#: ../../../analyzer/checkers.rst:402
msgid "nullability"
msgstr ""

#: ../../../analyzer/checkers.rst:404
msgid ""
"Objective C checkers that warn for null pointer passing and dereferencing "
"errors."
msgstr ""

#: ../../../analyzer/checkers.rst:409
msgid "nullability.NullPassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:410
msgid ""
"Warns when a null pointer is passed to a pointer which has a _Nonnull type."
msgstr ""

#: ../../../analyzer/checkers.rst:422
msgid "nullability.NullReturnedFromNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:423
msgid ""
"Warns when a null pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:440
msgid "nullability.NullableDereferenced (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:441
msgid "Warns when a nullable pointer is dereferenced."
msgstr ""

#: ../../../analyzer/checkers.rst:461
msgid "nullability.NullablePassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:462
msgid ""
"Warns when a nullable pointer is passed to a pointer which has a _Nonnull "
"type."
msgstr ""

#: ../../../analyzer/checkers.rst:478
msgid "nullability.NullableReturnedFromNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:479
msgid ""
"Warns when a nullable pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:484
msgid "optin"
msgstr ""

#: ../../../analyzer/checkers.rst:486
msgid "Checkers for portability, performance or coding style specific rules."
msgstr ""

#: ../../../analyzer/checkers.rst:491
msgid "optin.cplusplus.UninitializedObject (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:493
msgid ""
"This checker reports uninitialized fields in objects created after a "
"constructor call. It doesn't only find direct uninitialized fields, but "
"rather makes a deep inspection of the object, analyzing all of its fields' "
"subfields. The checker regards inherited fields as direct fields, so one "
"will receive warnings for uninitialized inherited data members as well."
msgstr ""

#: ../../../analyzer/checkers.rst:573
msgid "**Options**"
msgstr ""

#: ../../../analyzer/checkers.rst:575
msgid ""
"This checker has several options which can be set from command line (e.g. ``-"
"analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true``):"
msgstr ""

#: ../../../analyzer/checkers.rst:578
msgid ""
"``Pedantic`` (boolean). If to false, the checker won't emit warnings for "
"objects that don't have at least one initialized field. Defaults to false."
msgstr ""

#: ../../../analyzer/checkers.rst:581
msgid ""
"``NotesAsWarnings``  (boolean). If set to true, the checker will emit a "
"warning for each uninitialized field, as opposed to emitting one warning per "
"constructor call, and listing the uninitialized fields that belongs to it in "
"notes. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:586
msgid ""
"``CheckPointeeInitialization`` (boolean). If set to false, the checker will "
"not analyze the pointee of pointer/reference fields, and will only check "
"whether the object itself is initialized. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:590
msgid ""
"``IgnoreRecordsWithField`` (string). If supplied, the checker will not "
"analyze structures that have a field with a name or type name that matches  "
"the given pattern. *Defaults to \"\"*."
msgstr ""

#: ../../../analyzer/checkers.rst:597
msgid "optin.cplusplus.VirtualCall (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:598
msgid "Check virtual function calls during construction or destruction."
msgstr ""

#: ../../../analyzer/checkers.rst:621
msgid "optin.mpi.MPI-Checker (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:622
msgid "Checks MPI code."
msgstr ""

#: ../../../analyzer/checkers.rst:652
msgid "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:653
msgid "Check that NSLocalizedString macros include a comment for context."
msgstr ""

#: ../../../analyzer/checkers.rst:667
msgid "optin.osx.cocoa.localizability.NonLocalizedStringChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:668
msgid ""
"Warns about uses of non-localized NSStrings passed to UI methods expecting "
"localized NSStrings."
msgstr ""

#: ../../../analyzer/checkers.rst:685
msgid "optin.performance.GCDAntipattern"
msgstr ""

#: ../../../analyzer/checkers.rst:686
msgid "Check for performance anti-patterns when using Grand Central Dispatch."
msgstr ""

#: ../../../analyzer/checkers.rst:691
msgid "optin.performance.Padding"
msgstr ""

#: ../../../analyzer/checkers.rst:692
msgid "Check for excessively padded structs."
msgstr ""

#: ../../../analyzer/checkers.rst:697
msgid "optin.portability.UnixAPI"
msgstr ""

#: ../../../analyzer/checkers.rst:698
msgid "Finds implementation-defined behavior in UNIX/Posix functions."
msgstr ""

#: ../../../analyzer/checkers.rst:704
msgid "security"
msgstr ""

#: ../../../analyzer/checkers.rst:706
msgid "Security related checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:711
msgid "security.FloatLoopCounter (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:712
msgid ""
"Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-"
"CPP)."
msgstr ""

#: ../../../analyzer/checkers.rst:723
msgid "security.insecureAPI.UncheckedReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:724
msgid "Warn on uses of functions whose return values must be always checked."
msgstr ""

#: ../../../analyzer/checkers.rst:735
msgid "security.insecureAPI.bcmp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:736
msgid "Warn on uses of the 'bcmp' function."
msgstr ""

#: ../../../analyzer/checkers.rst:747
msgid "security.insecureAPI.bcopy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:748
msgid "Warn on uses of the 'bcopy' function."
msgstr ""

#: ../../../analyzer/checkers.rst:759
msgid "security.insecureAPI.bzero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:760
msgid "Warn on uses of the 'bzero' function."
msgstr ""

#: ../../../analyzer/checkers.rst:771
msgid "security.insecureAPI.getpw (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:772
msgid "Warn on uses of the 'getpw' function."
msgstr ""

#: ../../../analyzer/checkers.rst:784
msgid "security.insecureAPI.gets (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:785
msgid "Warn on uses of the 'gets' function."
msgstr ""

#: ../../../analyzer/checkers.rst:797
msgid "security.insecureAPI.mkstemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:798
msgid "Warn when 'mkstemp' is passed fewer than 6 X's in the format string."
msgstr ""

#: ../../../analyzer/checkers.rst:809
msgid "security.insecureAPI.mktemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:810
msgid "Warn on uses of the ``mktemp`` function."
msgstr ""

#: ../../../analyzer/checkers.rst:821
msgid "security.insecureAPI.rand (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:822
msgid ""
"Warn on uses of inferior random number generating functions (only if "
"arc4random function is available): ``drand48, erand48, jrand48, lcong48, "
"lrand48, mrand48, nrand48, random, rand_r``."
msgstr ""

#: ../../../analyzer/checkers.rst:834
msgid "security.insecureAPI.strcpy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:835
msgid "Warn on uses of the ``strcpy`` and ``strcat`` functions."
msgstr ""

#: ../../../analyzer/checkers.rst:850
msgid "security.insecureAPI.vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:851
msgid "Warn on uses of the 'vfork' function."
msgstr ""

#: ../../../analyzer/checkers.rst:862
msgid "security.insecureAPI.DeprecatedOrUnsafeBufferHandling (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:863
msgid ""
"Warn on occurrences of unsafe or deprecated buffer handling functions, which "
"now have a secure variant: ``sprintf, vsprintf, scanf, wscanf, fscanf, "
"fwscanf, vscanf, vwscanf, vfscanf, vfwscanf, sscanf, swscanf, vsscanf, "
"vswscanf, swprintf, snprintf, vswprintf, vsnprintf, memcpy, memmove, "
"strncpy, strncat, memset``"
msgstr ""

#: ../../../analyzer/checkers.rst:875
msgid "unix"
msgstr ""

#: ../../../analyzer/checkers.rst:876
msgid "POSIX/Unix checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:881
msgid "unix.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:882
msgid ""
"Check calls to various UNIX/Posix functions: ``open, pthread_once, calloc, "
"malloc, realloc, alloca``."
msgstr ""

#: ../../../analyzer/checkers.rst:890
msgid "unix.Malloc (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:891
msgid ""
"Check for memory leaks, double free, and use-after-free problems. Traces "
"memory managed by malloc()/free()."
msgstr ""

#: ../../../analyzer/checkers.rst:899
msgid "unix.MallocSizeof (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:900
msgid "Check for dubious ``malloc`` arguments involving ``sizeof``."
msgstr ""

#: ../../../analyzer/checkers.rst:914
msgid "unix.MismatchedDeallocator (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:915
msgid "Check for mismatched deallocators."
msgstr ""

#: ../../../analyzer/checkers.rst:923
msgid "unix.Vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:924
msgid "Check for proper usage of ``vfork``."
msgstr ""

#: ../../../analyzer/checkers.rst:955
msgid "unix.cstring.BadSizeArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:956
msgid ""
"Check the size argument passed into C string functions for common erroneous "
"patterns. Use ``-Wno-strncat-size`` compiler option to mute other "
"``strncat``-related compiler warnings."
msgstr ""

#: ../../../analyzer/checkers.rst:969
msgid "unix.cstring.NullArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:970
msgid ""
"Check for null pointers being passed as arguments to C string functions: "
"``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, "
"strcasecmp, strncasecmp, wcslen, wcsnlen``."
msgstr ""

#: ../../../analyzer/checkers.rst:982
msgid "osx"
msgstr ""

#: ../../../analyzer/checkers.rst:983
msgid "macOS checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:988
msgid "osx.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:989
msgid "Check for proper uses of various Apple APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1001
msgid "osx.NumberObjectConversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1002
msgid ""
"Check for erroneous conversions of objects representing numbers into numbers."
msgstr ""

#: ../../../analyzer/checkers.rst:1016
msgid "osx.ObjCProperty (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1017
msgid "Check for proper uses of Objective-C properties."
msgstr ""

#: ../../../analyzer/checkers.rst:1032
msgid "osx.SecKeychainAPI (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1033
msgid "Check for proper uses of Secure Keychain APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1041
msgid "osx.cocoa.AtSync (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1042
msgid "Check for nil pointers used as mutexes for @synchronized."
msgstr ""

#: ../../../analyzer/checkers.rst:1059
msgid "osx.cocoa.AutoreleaseWrite"
msgstr ""

#: ../../../analyzer/checkers.rst:1060
msgid ""
"Warn about potentially crashing writes to autoreleasing objects from "
"different autoreleasing pools in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:1065
msgid "osx.cocoa.ClassRelease (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1066
msgid ""
"Check for sending 'retain', 'release', or 'autorelease' directly to a Class."
msgstr ""

#: ../../../analyzer/checkers.rst:1080
msgid "osx.cocoa.Dealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1081
msgid ""
"Warn about Objective-C classes that lack a correct implementation of -dealloc"
msgstr ""

#: ../../../analyzer/checkers.rst:1089
msgid "osx.cocoa.IncompatibleMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1090
msgid "Warn about Objective-C method signatures with type incompatibilities."
msgstr ""

#: ../../../analyzer/checkers.rst:1113
msgid "osx.cocoa.Loops"
msgstr ""

#: ../../../analyzer/checkers.rst:1114
msgid "Improved modeling of loops using Cocoa collection types."
msgstr ""

#: ../../../analyzer/checkers.rst:1119
msgid "osx.cocoa.MissingSuperCall (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1120
msgid "Warn about Objective-C methods that lack a necessary call to super."
msgstr ""

#: ../../../analyzer/checkers.rst:1134
msgid "osx.cocoa.NSAutoreleasePool (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1135
msgid "Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode."
msgstr ""

#: ../../../analyzer/checkers.rst:1147
msgid "osx.cocoa.NSError (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1148
msgid "Check usage of NSError parameters."
msgstr ""

#: ../../../analyzer/checkers.rst:1177
msgid "osx.cocoa.NilArg (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1178
msgid "Check for prohibited nil arguments to ObjC method calls."
msgstr ""

#: ../../../analyzer/checkers.rst:1180
msgid "caseInsensitiveCompare:"
msgstr ""

#: ../../../analyzer/checkers.rst:1181
msgid "compare:"
msgstr ""

#: ../../../analyzer/checkers.rst:1182
msgid "compare:options:"
msgstr ""

#: ../../../analyzer/checkers.rst:1183
msgid "compare:options:range:"
msgstr ""

#: ../../../analyzer/checkers.rst:1184
msgid "compare:options:range:locale:"
msgstr ""

#: ../../../analyzer/checkers.rst:1185
msgid "componentsSeparatedByCharactersInSet:"
msgstr ""

#: ../../../analyzer/checkers.rst:1186
msgid "initWithFormat:"
msgstr ""

#: ../../../analyzer/checkers.rst:1201
msgid "osx.cocoa.NonNilReturnValue"
msgstr ""

#: ../../../analyzer/checkers.rst:1202
msgid "Models the APIs that are guaranteed to return a non-nil value."
msgstr ""

#: ../../../analyzer/checkers.rst:1207
msgid "osx.cocoa.ObjCGenerics (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1208
msgid "Check for type errors when using Objective-C generics."
msgstr ""

#: ../../../analyzer/checkers.rst:1222
msgid "osx.cocoa.RetainCount (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1223
msgid "Check for leaks and improper reference count management"
msgstr ""

#: ../../../analyzer/checkers.rst:1240
msgid "osx.cocoa.RunLoopAutoreleaseLeak"
msgstr ""

#: ../../../analyzer/checkers.rst:1241
msgid ""
"Check for leaked memory in autorelease pools that will never be drained."
msgstr ""

#: ../../../analyzer/checkers.rst:1246
msgid "osx.cocoa.SelfInit (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1247
msgid "Check that 'self' is properly initialized inside an initializer method."
msgstr ""

#: ../../../analyzer/checkers.rst:1280
msgid "osx.cocoa.SuperDealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1281
msgid "Warn about improper use of '[super dealloc]' in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:1300
msgid "osx.cocoa.UnusedIvars (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1301
msgid "Warn about private ivars that are never used."
msgstr ""

#: ../../../analyzer/checkers.rst:1317
msgid "osx.cocoa.VariadicMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1318
msgid ""
"Check for passing non-Objective-C types to variadic collection "
"initialization methods that expect only Objective-C types."
msgstr ""

#: ../../../analyzer/checkers.rst:1331
msgid "osx.coreFoundation.CFError (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1332
msgid "Check usage of CFErrorRef* parameters"
msgstr ""

#: ../../../analyzer/checkers.rst:1349
msgid "osx.coreFoundation.CFNumber (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1350
msgid "Check for proper uses of CFNumber APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1362
msgid "osx.coreFoundation.CFRetainRelease (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1363
msgid "Check for null arguments to CFRetain/CFRelease/CFMakeCollectable."
msgstr ""

#: ../../../analyzer/checkers.rst:1382
msgid "osx.coreFoundation.containers.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1383
msgid "Checks for index out-of-bounds when using 'CFArray' API."
msgstr ""

#: ../../../analyzer/checkers.rst:1395
msgid "osx.coreFoundation.containers.PointerSizedValues (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1396
msgid ""
"Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-"
"size values."
msgstr ""

#: ../../../analyzer/checkers.rst:1407
msgid "Fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:1409
msgid ""
"Fuchsia is an open source capability-based operating system currently being "
"developed by Google. This section describes checkers that can find various "
"misuses of Fuchsia APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1416
msgid "fuchsia.HandleChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1417
msgid ""
"Handles identify resources. Similar to pointers they can be leaked, double "
"freed, or use after freed. This check attempts to find such problems."
msgstr ""

#: ../../../analyzer/checkers.rst:1432
msgid "WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:1434
msgid ""
"WebKit is an open-source web browser engine available for macOS, iOS and "
"Linux. This section describes checkers that can find issues in WebKit "
"codebase."
msgstr ""

#: ../../../analyzer/checkers.rst:1437
msgid ""
"Most of the checkers focus on memory management for which WebKit uses custom "
"implementation of reference counted smartpointers."
msgstr ""

#: ../../../analyzer/checkers.rst:1442
msgid "Checkers are formulated in terms related to ref-counting:"
msgstr ""

#: ../../../analyzer/checkers.rst:1440
msgid "*Ref-counted type* is either ``Ref<T>`` or ``RefPtr<T>``."
msgstr ""

#: ../../../analyzer/checkers.rst:1441
msgid ""
"*Ref-countable type* is any type that implements ``ref()`` and ``deref()`` "
"methods as ``RefPtr<>`` is a template (i. e. relies on duck typing)."
msgstr ""

#: ../../../analyzer/checkers.rst:1442
msgid "*Uncounted type* is ref-countable but not ref-counted type."
msgstr ""

#: ../../../analyzer/checkers.rst:1447
msgid "webkit.RefCntblBaseVirtualDtor"
msgstr ""

#: ../../../analyzer/checkers.rst:1448
msgid ""
"All uncounted types used as base classes must have a virtual destructor."
msgstr ""

#: ../../../analyzer/checkers.rst:1450
msgid ""
"Ref-counted types hold their ref-countable data by a raw pointer and allow "
"implicit upcasting from ref-counted pointer to derived type to ref-counted "
"pointer to base type. This might lead to an object of (dynamic) derived type "
"being deleted via pointer to the base class type which C++ standard defines "
"as UB in case the base class doesn't have virtual destructor ``[expr."
"delete]``."
msgstr ""

#: ../../../analyzer/checkers.rst:1464
msgid "webkit.NoUncountedMemberChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1465
msgid ""
"Raw pointers and references to uncounted types can't be used as class "
"members. Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:1483
msgid "webkit.UncountedLambdaCapturesChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1484
msgid ""
"Raw pointers and references to uncounted types can't be captured in lambdas. "
"Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:1502
msgid "Experimental Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:1504
msgid ""
"*These are checkers with known issues or limitations that keep them from "
"being on by default. They are likely to have false positives. Bug reports "
"and especially patches are welcome.*"
msgstr ""

#: ../../../analyzer/checkers.rst:1507
msgid "alpha.clone"
msgstr ""

#: ../../../analyzer/checkers.rst:1512
msgid "alpha.clone.CloneChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1513
msgid "Reports similar pieces of code."
msgstr ""

#: ../../../analyzer/checkers.rst:1534
msgid "alpha.core"
msgstr ""

#: ../../../analyzer/checkers.rst:1539
msgid "alpha.core.BoolAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1540
msgid "Warn about assigning non-{0,1} values to boolean variables."
msgstr ""

#: ../../../analyzer/checkers.rst:1551
msgid "alpha.core.C11Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:1552
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of ``mtx_t`` mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:1568
msgid "alpha.core.CallAndMessageUnInitRefArg (C,C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1569
msgid ""
"Check for logical errors for function calls and Objective-C message "
"expressions (e.g., uninitialized arguments, null function pointers, and "
"pointer to undefined variables)."
msgstr ""

#: ../../../analyzer/checkers.rst:1590
msgid "alpha.core.CastSize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1591
msgid ""
"Check when casting a malloc'ed type ``T``, whether the size is a multiple of "
"the size of ``T``."
msgstr ""

#: ../../../analyzer/checkers.rst:1602
msgid "alpha.core.CastToStruct (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1603
msgid "Check for cast from non-struct pointer to struct pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:1624
msgid "alpha.core.Conversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1625
msgid "Loss of sign/precision in implicit conversions."
msgstr ""

#: ../../../analyzer/checkers.rst:1648
msgid "alpha.core.DynamicTypeChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1649
msgid ""
"Check for cases where the dynamic and the static type of an object are "
"unrelated."
msgstr ""

#: ../../../analyzer/checkers.rst:1664
msgid "alpha.core.FixedAddr (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1665
msgid "Check for assignment of a fixed address to a pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:1677
msgid "alpha.core.IdenticalExpr (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1678
msgid "Warn about unintended use of identical expressions in operators."
msgstr ""

#: ../../../analyzer/checkers.rst:1707
msgid "alpha.core.PointerArithm (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1708
msgid "Check for pointer arithmetic on locations other than array elements."
msgstr ""

#: ../../../analyzer/checkers.rst:1721
msgid "alpha.core.PointerSub (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1722
msgid ""
"Check for pointer subtractions on two pointers pointing to different memory "
"chunks."
msgstr ""

#: ../../../analyzer/checkers.rst:1734
msgid "alpha.core.SizeofPtr (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1735
msgid "Warn about unintended use of ``sizeof()`` on pointer expressions."
msgstr ""

#: ../../../analyzer/checkers.rst:1749
msgid "alpha.core.StackAddressAsyncEscape (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1750
msgid ""
"Check that addresses to stack memory do not escape the function that "
"involves dispatch_after or dispatch_async. This checker is a part of ``core."
"StackAddressEscape``, but is temporarily disabled until some false positives "
"are fixed."
msgstr ""

#: ../../../analyzer/checkers.rst:1773
msgid "alpha.core.TestAfterDivZero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1774
msgid ""
"Check for division by variable that is later compared against 0. Either the "
"comparison is useless or there is division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:1785
msgid "alpha.cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:1790
msgid "alpha.cplusplus.DeleteWithNonVirtualDtor (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1791
msgid ""
"Reports destructions of polymorphic objects with a non-virtual destructor in "
"their base class."
msgstr ""

#: ../../../analyzer/checkers.rst:1809
msgid "alpha.cplusplus.EnumCastOutOfRange (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1810
msgid ""
"Check for integer to enumeration casts that could result in undefined values."
msgstr ""

#: ../../../analyzer/checkers.rst:1826
msgid "alpha.cplusplus.InvalidatedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1827
msgid "Check for use of invalidated iterators."
msgstr ""

#: ../../../analyzer/checkers.rst:1842
msgid "alpha.cplusplus.IteratorRange (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1843
msgid "Check for iterators used outside their valid ranges."
msgstr ""

#: ../../../analyzer/checkers.rst:1855
msgid "alpha.cplusplus.MismatchedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1856
msgid ""
"Check for use of iterators of different containers where iterators of the "
"same container are expected."
msgstr ""

#: ../../../analyzer/checkers.rst:1879
msgid "alpha.cplusplus.MisusedMovedObject (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1880
msgid ""
"Method calls on a moved-from object and copying a moved-from object will be "
"reported."
msgstr ""

#: ../../../analyzer/checkers.rst:1898
msgid "alpha.cplusplus.SmartPtr (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1899
msgid "Check for dereference of null smart pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:1910
msgid "alpha.deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:1914
msgid "alpha.deadcode.UnreachableCode (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1915
msgid "Check unreachable code."
msgstr ""

#: ../../../analyzer/checkers.rst:1944
msgid "alpha.fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:1949
msgid "alpha.fuchsia.Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:1950
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of fuchsia mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:1964
msgid "alpha.llvm"
msgstr ""

#: ../../../analyzer/checkers.rst:1969
msgid "alpha.llvm.Conventions"
msgstr ""

#: ../../../analyzer/checkers.rst:1971
msgid "Check code for LLVM codebase conventions:"
msgstr ""

#: ../../../analyzer/checkers.rst:1973
msgid ""
"A StringRef should not be bound to a temporary std::string whose lifetime is "
"shorter than the StringRef's."
msgstr ""

#: ../../../analyzer/checkers.rst:1974
msgid "Clang AST nodes should not have fields that can allocate memory."
msgstr ""

#: ../../../analyzer/checkers.rst:1978
msgid "alpha.osx"
msgstr ""

#: ../../../analyzer/checkers.rst:1983
msgid "alpha.osx.cocoa.DirectIvarAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1984
msgid "Check for direct assignments to instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:2003
msgid "alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2004
msgid ""
"Check for direct assignments to instance variables in the methods annotated "
"with ``objc_no_direct_instance_variable_assignment``."
msgstr ""

#: ../../../analyzer/checkers.rst:2029
msgid "alpha.osx.cocoa.InstanceVariableInvalidation (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2030
msgid ""
"Check that the invalidatable instance variables are invalidated in the "
"methods annotated with objc_instance_variable_invalidator."
msgstr ""

#: ../../../analyzer/checkers.rst:2057
msgid "alpha.osx.cocoa.MissingInvalidationMethod (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2058
msgid ""
"Check that the invalidation methods are present in classes that contain "
"invalidatable instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:2081
msgid "alpha.osx.cocoa.localizability.PluralMisuseChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2082
msgid ""
"Warns against using one vs. many plural pattern in code when generating "
"localized strings."
msgstr ""

#: ../../../analyzer/checkers.rst:2103
msgid "alpha.security"
msgstr ""

#: ../../../analyzer/checkers.rst:2108
msgid "alpha.security.ArrayBound (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2109
msgid "Warn about buffer overflows (older checker)."
msgstr ""

#: ../../../analyzer/checkers.rst:2146
msgid "alpha.security.ArrayBoundV2 (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2147
msgid "Warn about buffer overflows (newer checker)."
msgstr ""

#: ../../../analyzer/checkers.rst:2180
msgid "alpha.security.MallocOverflow (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2181
msgid ""
"Check for overflows in the arguments to ``malloc()``. It tries to catch "
"``malloc(n * c)`` patterns, where:"
msgstr ""

#: ../../../analyzer/checkers.rst:2184
msgid "``n``: a variable or member access of an object"
msgstr ""

#: ../../../analyzer/checkers.rst:2185
msgid "``c``: a constant foldable integral"
msgstr ""

#: ../../../analyzer/checkers.rst:2187
msgid ""
"This checker was designed for code audits, so expect false-positive reports. "
"One is supposed to silence this checker by ensuring proper bounds checking "
"on the variable in question using e.g. an ``assert()`` or a branch."
msgstr ""

#: ../../../analyzer/checkers.rst:2208 ../../../analyzer/checkers.rst:2287
#: ../../../analyzer/checkers.rst:2971
msgid "Limitations:"
msgstr ""

#: ../../../analyzer/checkers.rst:2210
msgid ""
"The checker won't warn for variables involved in explicit casts, since that "
"might limit the variable's domain. E.g.: ``(unsigned char)int x`` would "
"limit the domain to ``[0,255]``. The checker will miss the true-positive "
"cases when the explicit cast would not tighten the domain to prevent the "
"overflow in the subsequent multiplication operation."
msgstr ""

#: ../../../analyzer/checkers.rst:2217
msgid ""
"It is an AST-based checker, thus it does not make use of the path-sensitive "
"taint-analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:2223
msgid "alpha.security.MmapWriteExec (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2224
msgid "Warn on mmap() calls that are both writable and executable."
msgstr ""

#: ../../../analyzer/checkers.rst:2239
msgid "alpha.security.ReturnPtrRange (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2240
msgid "Check for an out-of-bound pointer being returned to callers."
msgstr ""

#: ../../../analyzer/checkers.rst:2258
msgid "alpha.security.cert"
msgstr ""

#: ../../../analyzer/checkers.rst:2260
msgid ""
"SEI CERT checkers which tries to find errors based on their `C coding rules "
"<https://wiki.sei.cmu.edu/confluence/display/c/2+Rules>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2265
msgid "alpha.security.cert.pos"
msgstr ""

#: ../../../analyzer/checkers.rst:2267
msgid ""
"SEI CERT checkers of `POSIX C coding rules <https://wiki.sei.cmu.edu/"
"confluence/pages/viewpage.action?pageId=87152405>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2272
msgid "alpha.security.cert.pos.34c"
msgstr ""

#: ../../../analyzer/checkers.rst:2273
msgid ""
"Finds calls to the ``putenv`` function which pass a pointer to an automatic "
"variable as the argument."
msgstr ""

#: ../../../analyzer/checkers.rst:2289
msgid ""
"Technically, one can pass automatic variables to ``putenv``, but one needs "
"to ensure that the given environment key stays alive until it's removed or "
"overwritten. Since the analyzer cannot keep track of which envvars get "
"overwritten and when, it needs to be slightly more aggressive and warn for "
"such cases too, leading in some cases to false-positive reports like this:"
msgstr ""

#: ../../../analyzer/checkers.rst:2307
msgid "alpha.security.cert.env"
msgstr ""

#: ../../../analyzer/checkers.rst:2309
msgid ""
"SEI CERT checkers of `Environment C coding rules <https://wiki.sei.cmu.edu/"
"confluence/x/JdcxBQ>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2314
msgid "alpha.security.cert.env.InvalidPtr"
msgstr ""

#: ../../../analyzer/checkers.rst:2316
msgid "Corresponds to SEI CERT Rules ENV31-C and ENV34-C."
msgstr ""

#: ../../../analyzer/checkers.rst:2318
msgid ""
"ENV31-C: Rule is about the possible problem with `main` function's third "
"argument, environment pointer, \"envp\". When environment array is modified "
"using some modification function such as putenv, setenv or others, It may "
"happen that memory is reallocated, however \"envp\" is not updated to "
"reflect the changes and points to old memory region."
msgstr ""

#: ../../../analyzer/checkers.rst:2325
msgid ""
"ENV34-C: Some functions return a pointer to a statically allocated buffer. "
"Consequently, subsequent call of these functions will invalidate previous "
"pointer. These functions include: getenv, localeconv, asctime, setlocale, "
"strerror"
msgstr ""

#: ../../../analyzer/checkers.rst:2360
msgid "alpha.security.taint"
msgstr ""

#: ../../../analyzer/checkers.rst:2362
msgid ""
"Checkers implementing `taint analysis <https://en.wikipedia.org/wiki/"
"Taint_checking>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2368
msgid "alpha.security.taint.TaintPropagation (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2370
msgid ""
"Taint analysis identifies potential security vulnerabilities where the "
"attacker can inject malicious data to the program to execute an attack "
"(privilege escalation, command injection, SQL injection etc.)."
msgstr ""

#: ../../../analyzer/checkers.rst:2374
msgid ""
"The malicious data is injected at the taint source (e.g. ``getenv()`` call) "
"which is then propagated through function calls and being used as arguments "
"of sensitive operations, also called as taint sinks (e.g. ``system()`` call)."
msgstr ""

#: ../../../analyzer/checkers.rst:2378
msgid ""
"One can defend agains this type of vulnerability by always checking and "
"santizing the potentially malicious, untrusted user input."
msgstr ""

#: ../../../analyzer/checkers.rst:2381
msgid ""
"The goal of the checker is to discover and show to the user these potential "
"taint source-sink pairs and the propagation call chain."
msgstr ""

#: ../../../analyzer/checkers.rst:2384
msgid "The most notable examples of taint sources are:"
msgstr ""

#: ../../../analyzer/checkers.rst:2386
msgid "data from network"
msgstr ""

#: ../../../analyzer/checkers.rst:2387
msgid "files or standard input"
msgstr ""

#: ../../../analyzer/checkers.rst:2388
msgid "environment variables"
msgstr ""

#: ../../../analyzer/checkers.rst:2389
msgid "data from databases"
msgstr ""

#: ../../../analyzer/checkers.rst:2391
msgid "Let us examine a practical example of a Command Injection attack."
msgstr ""

#: ../../../analyzer/checkers.rst:2405
msgid ""
"The program prints the content of any user specified file. Unfortunately the "
"attacker can execute arbitrary commands with shell escapes. For example with "
"the following input the `ls` command is also executed after the contents of "
"`/etc/shadow` is printed. `Input: /etc/shadow ; ls /`"
msgstr ""

#: ../../../analyzer/checkers.rst:2411
msgid "The analysis implemented in this checker points out this problem."
msgstr ""

#: ../../../analyzer/checkers.rst:2413
msgid ""
"One can protect against such attack by for example checking if the provided "
"input refers to a valid file and removing any invalid user input."
msgstr ""

#: ../../../analyzer/checkers.rst:2437
msgid ""
"Unfortunately, the checker cannot discover automatically that the programmer "
"have performed data sanitation, so it still emits the warning."
msgstr ""

#: ../../../analyzer/checkers.rst:2440
msgid ""
"One can get rid of this superflous warning by telling by specifying the "
"sanitation functions in the taint configuation file (see :doc:`user-docs/"
"TaintAnalysisConfiguration`)."
msgstr ""

#: ../../../analyzer/checkers.rst:2450
msgid "The clang invocation to pass the configuration file location:"
msgstr ""

#: ../../../analyzer/checkers.rst:2456
msgid ""
"If you are validating your inputs instead of sanitizing them, or don't want "
"to mention each sanitizing function in our configuration, you can use a more "
"generic approach."
msgstr ""

#: ../../../analyzer/checkers.rst:2460
msgid ""
"Introduce a generic no-op `csa_mark_sanitized(..)` function to tell the "
"Clang Static Analyzer that the variable is safe to be used on that analysis "
"path."
msgstr ""

#: ../../../analyzer/checkers.rst:2490
msgid ""
"Similarly to the previous example, you need to define a `Filter` function in "
"a `YAML` configuration file and add the `csa_mark_sanitized` function."
msgstr ""

#: ../../../analyzer/checkers.rst:2500
msgid ""
"Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe "
"to be used after this point, because its contents are verified. It is the "
"responisibility of the programmer to ensure that this verification was "
"indeed correct. Please note that `csa_mark_sanitized` function is only "
"declared and used during Clang Static Analysis and skipped in (production) "
"builds."
msgstr ""

#: ../../../analyzer/checkers.rst:2506
msgid "Further examples of injection vulnerabilities this checker can find."
msgstr ""

#: ../../../analyzer/checkers.rst:2532
msgid ""
"There are built-in sources, propagations and sinks even if no external taint "
"configuration is provided."
msgstr ""

#: ../../../analyzer/checkers.rst:2540
msgid "Default sources:"
msgstr ""

#: ../../../analyzer/checkers.rst:2536
msgid ""
"``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``, "
"``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``, "
"``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, "
"``getnameinfo``, ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, "
"``readlinkat``, ``scanf``, ``scanf_s``, ``socket``, ``wgetch``"
msgstr ""

#: ../../../analyzer/checkers.rst:2555
msgid "Default propagations rules:"
msgstr ""

#: ../../../analyzer/checkers.rst:2543
msgid ""
"``atoi``, ``atol``, ``atoll``, ``basename``, ``dirname``, ``fgetc``, "
"``fgetln``, ``fgets``, ``fnmatch``, ``fread``, ``fscanf``, ``fscanf_s``, "
"``index``, ``inflate``, ``isalnum``, ``isalpha``, ``isascii``, ``isblank``, "
"``iscntrl``, ``isdigit``, ``isgraph``, ``islower``, ``isprint``, "
"``ispunct``, ``isspace``, ``isupper``, ``isxdigit``, ``memchr``, "
"``memrchr``, ``sscanf``, ``getc``, ``getc_unlocked``, ``getdelim``, "
"``getline``, ``getw``, ``memcmp``, ``memcpy``, ``memmem``, ``memmove``, "
"``mbtowc``, ``pread``, ``qsort``, ``qsort_r``, ``rawmemchr``, ``read``, "
"``recv``, ``recvfrom``, ``rindex``, ``strcasestr``, ``strchr``, "
"``strchrnul``, ``strcasecmp``, ``strcmp``, ``strcspn``, ``strlen``, "
"``strncasecmp``, ``strncmp``, ``strndup``, ``strndupa``, ``strnlen``, "
"``strpbrk``, ``strrchr``, ``strsep``, ``strspn``, ``strstr``, ``strtol``, "
"``strtoll``, ``strtoul``, ``strtoull``, ``tolower``, ``toupper``, "
"``ttyname``, ``ttyname_r``, ``wctomb``, ``wcwidth``"
msgstr ""

#: ../../../analyzer/checkers.rst:2561
msgid "Default sinks:"
msgstr ""

#: ../../../analyzer/checkers.rst:2558
msgid ""
"``printf``, ``setproctitle``, ``system``, ``popen``, ``execl``, ``execle``, "
"``execlp``, ``execv``, ``execvp``, ``execvP``, ``execve``, ``dlopen``, "
"``memcpy``, ``memmove``, ``strncpy``, ``strndup``, ``malloc``, ``calloc``, "
"``alloca``, ``memccpy``, ``realloc``, ``bcopy``"
msgstr ""

#: ../../../analyzer/checkers.rst:2563
msgid "Please note that there are no built-in filter functions."
msgstr ""

#: ../../../analyzer/checkers.rst:2565
msgid ""
"One can configure their own taint sources, sinks, and propagation rules by "
"providing a configuration file via checker option ``alpha.security.taint."
"TaintPropagation:Config``. The configuration file is in `YAML <http://llvm."
"org/docs/YamlIO.html#introduction-to-yaml>`_ format. The taint-related "
"options defined in the config file extend but do not override the built-in "
"sources, rules, sinks. The format of the external taint configuration file "
"is not stable, and could change without any notice even in a non-backward "
"compatible way."
msgstr ""

#: ../../../analyzer/checkers.rst:2574
msgid ""
"For a more detailed description of configuration options, please see the :"
"doc:`user-docs/TaintAnalysisConfiguration`. For an example see :ref:`clangsa-"
"taint-configuration-example`."
msgstr ""

#: ../../../analyzer/checkers.rst:2578
msgid "**Configuration**"
msgstr ""

#: ../../../analyzer/checkers.rst:2580
msgid ""
"`Config`  Specifies the name of the YAML configuration file. The user can "
"define their own taint sources and sinks."
msgstr ""

#: ../../../analyzer/checkers.rst:2583
msgid "**Related Guidelines**"
msgstr ""

#: ../../../analyzer/checkers.rst:2585
msgid ""
"`CWE Data Neutralization Issues <https://cwe.mitre.org/data/definitions/137."
"html>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2587
msgid ""
"`SEI Cert STR02-C. Sanitize data passed to complex subsystems <https://wiki."
"sei.cmu.edu/confluence/display/c/STR02-C."
"+Sanitize+data+passed+to+complex+subsystems>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2589
msgid ""
"`SEI Cert ENV33-C. Do not call system() <https://wiki.sei.cmu.edu/confluence/"
"pages/viewpage.action?pageId=87152177>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2591
msgid ""
"`ENV03-C. Sanitize the environment when invoking external programs <https://"
"wiki.sei.cmu.edu/confluence/display/c/ENV03-C."
"+Sanitize+the+environment+when+invoking+external+programs>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2594 ../../../analyzer/checkers.rst:2679
#: ../../../analyzer/checkers.rst:2791
msgid "**Limitations**"
msgstr ""

#: ../../../analyzer/checkers.rst:2596
msgid ""
"The taintedness property is not propagated through function calls which are "
"unknown (or too complex) to the analyzer, unless there is a specific "
"propagation rule built-in to the checker or given in the YAML configuration "
"file. This causes potential true positive findings to be lost."
msgstr ""

#: ../../../analyzer/checkers.rst:2602
msgid "alpha.unix"
msgstr ""

#: ../../../analyzer/checkers.rst:2607
msgid "alpha.unix.StdCLibraryFunctions (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2608
msgid ""
"Check for calls of standard library functions that violate predefined "
"argument constraints. For example, it is stated in the C standard that for "
"the ``int isalnum(int ch)`` function the behavior is undefined if the value "
"of ``ch`` is not representable as unsigned char and is not equal to ``EOF``."
msgstr ""

#: ../../../analyzer/checkers.rst:2635
msgid ""
"You can think of this checker as defining restrictions (pre- and "
"postconditions) on standard library functions. Preconditions are checked, "
"and when they are violated, a warning is emitted. Post conditions are added "
"to the analysis, e.g. that the return value must be no greater than 255."
msgstr ""

#: ../../../analyzer/checkers.rst:2640
msgid ""
"For example if an argument to a function must be in between 0 and 255, but "
"the value of the argument is unknown, the analyzer will conservatively "
"assume that it is in this interval. Similarly, if a function mustn't be "
"called with a null pointer and the null value of the argument can not be "
"proven, the analyzer will assume that it is non-null."
msgstr ""

#: ../../../analyzer/checkers.rst:2658
msgid ""
"These are the possible checks on the values passed as function arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:2647
msgid ""
"The argument has an allowed range (or multiple ranges) of values. The "
"checker can detect if a passed value is outside of the allowed range and "
"show the actual and allowed values."
msgstr ""

#: ../../../analyzer/checkers.rst:2650
msgid ""
"The argument has pointer type and is not allowed to be null pointer. Many "
"(but not all) standard functions can produce undefined behavior if a null "
"pointer is passed, these cases can be detected by the checker."
msgstr ""

#: ../../../analyzer/checkers.rst:2653
msgid ""
"The argument is a pointer to a memory block and the minimal size of this "
"buffer is determined by another argument to the function, or by "
"multiplication of two arguments (like at function ``fread``), or is a fixed "
"value (for example ``asctime_r`` requires at least a buffer of size 26). The "
"checker can detect if the buffer size is too small and in optimal case show "
"the size of the buffer and the values of the corresponding arguments."
msgstr ""

#: ../../../analyzer/checkers.rst:2672
msgid ""
"Additionally to the argument and return value conditions, this checker also "
"adds state of the value ``errno`` if applicable to the analysis. Many system "
"functions set the ``errno`` value only if an error occurs (together with a "
"specific return value of the function), otherwise it becomes undefined. This "
"checker changes the analysis state to contain such information. This data is "
"used by other checkers, for example :ref:`alpha-unix-Errno`."
msgstr ""

#: ../../../analyzer/checkers.rst:2681
msgid ""
"The checker can not always provide notes about the values of the arguments. "
"Without this information it is hard to confirm if the constraint is indeed "
"violated. The argument values are shown if they are known constants or the "
"value is determined by previous (not too complicated) assumptions."
msgstr ""

#: ../../../analyzer/checkers.rst:2686
msgid ""
"The checker can produce false positives in cases such as if the program has "
"invariants not known to the analyzer engine or the bug report path contains "
"calls to unknown functions. In these cases the analyzer fails to detect the "
"real range of the argument."
msgstr ""

#: ../../../analyzer/checkers.rst:2691 ../../../analyzer/checkers.rst:2770
msgid "**Parameters**"
msgstr ""

#: ../../../analyzer/checkers.rst:2693
msgid ""
"The checker models functions (and emits diagnostics) from the C standard by "
"default. The ``ModelPOSIX`` option enables modeling (and emit diagnostics) "
"of additional functions that are defined in the POSIX standard. This option "
"is disabled by default."
msgstr ""

#: ../../../analyzer/checkers.rst:2701
msgid "alpha.unix.BlockInCriticalSection (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2702
msgid ""
"Check for calls to blocking functions inside a critical section. Applies to: "
"``lock, unlock, sleep, getc, fgets, read, recv, pthread_mutex_lock,`` `` "
"pthread_mutex_unlock, mtx_lock, mtx_timedlock, mtx_trylock, mtx_unlock, "
"lock_guard, unique_lock``"
msgstr ""

#: ../../../analyzer/checkers.rst:2719
msgid "alpha.unix.Chroot (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2720
msgid "Check improper use of chroot."
msgstr ""

#: ../../../analyzer/checkers.rst:2734
msgid "alpha.unix.Errno (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2736
msgid ""
"Check for improper use of ``errno``. This checker implements partially CERT "
"rule `ERR30-C. Set errno to zero before calling a library function known to "
"set errno, and check errno only after the function returns a value "
"indicating failure <https://wiki.sei.cmu.edu/confluence/pages/viewpage."
"action?pageId=87152351>`_. The checker can find the first read of ``errno`` "
"after successful standard function calls."
msgstr ""

#: ../../../analyzer/checkers.rst:2744
msgid ""
"The C and POSIX standards often do not define if a standard library function "
"may change value of ``errno`` if the call does not fail. Therefore, "
"``errno`` should only be used if it is known from the return value of a "
"function that the call has failed. There are exceptions to this rule (for "
"example ``strtol``) but the affected functions are not yet supported by the "
"checker. The return values for the failure cases are documented in the "
"standard Linux man pages of the functions and in the `POSIX standard "
"<https://pubs.opengroup.org/onlinepubs/9699919799/>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2765
msgid ""
"The checker :ref:`alpha-unix-StdCLibraryFunctions` must be turned on to get "
"the warnings from this checker. The supported functions are the same as by :"
"ref:`alpha-unix-StdCLibraryFunctions`. The ``ModelPOSIX`` option of that "
"checker affects the set of checked functions."
msgstr ""

#: ../../../analyzer/checkers.rst:2772
msgid ""
"The ``AllowErrnoReadOutsideConditionExpressions`` option allows read of the "
"errno value if the value is not used in a condition (in ``if`` statements, "
"loops, conditional expressions, ``switch`` statements). For example "
"``errno`` can be stored into a variable without getting a warning by the "
"checker."
msgstr ""

#: ../../../analyzer/checkers.rst:2788
msgid ""
"Default value of this option is ``true``. This allows save of the errno "
"value for possible later error handling."
msgstr ""

#: ../../../analyzer/checkers.rst:2793
msgid ""
"Only the very first usage of ``errno`` is checked after an affected function "
"call. Value of ``errno`` is not followed when it is stored into a variable "
"or returned from a function."
msgstr ""

#: ../../../analyzer/checkers.rst:2796
msgid ""
"Documentation of function ``lseek`` is not clear about what happens if the "
"function returns different value than the expected file position but not -1. "
"To avoid possible false-positives ``errno`` is allowed to be used in this "
"case."
msgstr ""

#: ../../../analyzer/checkers.rst:2804
msgid "alpha.unix.PthreadLock (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2805
msgid ""
"Simple lock -> unlock checker. Applies to: ``pthread_mutex_lock, "
"pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, "
"lck_rw_lock_exclusive`` ``lck_rw_lock_shared, pthread_mutex_trylock, "
"pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock, "
"lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, "
"pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``."
msgstr ""

#: ../../../analyzer/checkers.rst:2844
msgid "alpha.unix.SimpleStream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2845
msgid ""
"Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, "
"fclose`` (demo checker, the subject of the demo (`Slides <https://llvm.org/"
"devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ , `Video <https://youtu.be/"
"kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the `2012 LLVM "
"Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_)."
msgstr ""

#: ../../../analyzer/checkers.rst:2868
msgid "alpha.unix.Stream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2869
msgid ""
"Check stream handling functions: ``fopen, tmpfile, fclose, fread, fwrite, "
"fseek, ftell, rewind, fgetpos,`` ``fsetpos, clearerr, feof, ferror, fileno``."
msgstr ""

#: ../../../analyzer/checkers.rst:2910
msgid "alpha.unix.cstring.BufferOverlap (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2911
msgid ""
"Checks for overlap in two buffer arguments. Applies to:  ``memcpy, mempcpy, "
"wmemcpy, wmempcpy``."
msgstr ""

#: ../../../analyzer/checkers.rst:2923
msgid "alpha.unix.cstring.NotNullTerminated (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2924
msgid ""
"Check for arguments which are not null-terminated strings; applies to: "
"``strlen, strnlen, strcpy, strncpy, strcat, strncat, wcslen, wcsnlen``."
msgstr ""

#: ../../../analyzer/checkers.rst:2935
msgid "alpha.unix.cstring.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2936
msgid ""
"Check for out-of-bounds access in string functions, such as: ``memcpy, "
"bcopy, strcpy, strncpy, strcat, strncat, memmove, memcmp, memset`` and more."
msgstr ""

#: ../../../analyzer/checkers.rst:2939
msgid ""
"This check also works with string literals, except there is a known bug in "
"that the analyzer cannot detect embedded NULL characters when determining "
"the string length."
msgstr ""

#: ../../../analyzer/checkers.rst:2959
msgid "alpha.unix.cstring.UninitializedRead (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2961
msgid ""
"Check for uninitialized reads from common memory copy/manipulation functions "
"such as:"
msgstr ""

#: ../../../analyzer/checkers.rst:2961
msgid ""
"``memcpy, mempcpy, memmove, memcmp, strcmp, strncmp, strcpy, strlen, "
"strsep`` and many more."
msgstr ""

#: ../../../analyzer/checkers.rst:2973
msgid ""
"Due to limitations of the memory modeling in the analyzer, one can likely "
"observe a lot of false-positive reports like this:"
msgstr ""

#: ../../../analyzer/checkers.rst:2987
msgid ""
"More details at the corresponding `GitHub issue <https://github.com/llvm/"
"llvm-project/issues/43459>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2992
msgid "alpha.nondeterminism.PointerIteration (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2993
msgid ""
"Check for non-determinism caused by iterating unordered containers of "
"pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:3008
msgid "alpha.nondeterminism.PointerSorting (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3009
msgid "Check for non-determinism caused by sorting of pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:3021
msgid "alpha.WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:3026
msgid "alpha.webkit.UncountedCallArgsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3027
msgid ""
"The goal of this rule is to make sure that lifetime of any dynamically "
"allocated ref-countable object passed as a call argument spans past the end "
"of the call. This applies to call to any function, method, lambda, function "
"pointer or functor. Ref-countable types aren't supposed to be allocated on "
"stack so we check arguments for parameters of raw pointers and references to "
"uncounted types."
msgstr ""

#: ../../../analyzer/checkers.rst:3029 ../../../analyzer/checkers.rst:3136
msgid ""
"Here are some examples of situations that we warn about as they *might* be "
"potentially unsafe. The logic is that either we're able to guarantee that an "
"argument is safe or it's considered if not a bug then bug-prone."
msgstr ""

#: ../../../analyzer/checkers.rst:3047
msgid ""
"Although we are enforcing member variables to be ref-counted by `webkit."
"NoUncountedMemberChecker` any method of the same class still has "
"unrestricted access to these. Since from a caller's perspective we can't "
"guarantee a particular member won't get modified by callee (directly or "
"indirectly) we don't consider values obtained from members safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3049
msgid ""
"Note: It's likely this heuristic could be made more precise with fewer false "
"positives - for example calls to free functions that don't have any "
"parameter other than the pointer should be safe as the callee won't be able "
"to tamper with the member unless it's a global variable."
msgstr ""

#: ../../../analyzer/checkers.rst:3061
msgid ""
"The implementation of this rule is a heuristic - we define a whitelist of "
"kinds of values that are considered safe to be passed as arguments. If we "
"can't prove an argument is safe it's considered an error."
msgstr ""

#: ../../../analyzer/checkers.rst:3063
msgid "Allowed kinds of arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:3065
msgid ""
"values obtained from ref-counted objects (including temporaries as those "
"survive the call too)"
msgstr ""

#: ../../../analyzer/checkers.rst:3078
msgid "forwarding uncounted arguments from caller to callee"
msgstr ""

#: ../../../analyzer/checkers.rst:3086
msgid "Caller of ``foo()`` is responsible for  ``a``'s lifetime."
msgstr ""

#: ../../../analyzer/checkers.rst:3088
msgid "``this`` pointer"
msgstr ""

#: ../../../analyzer/checkers.rst:3096
msgid ""
"Caller of ``foo()`` is responsible for keeping the memory pointed to by "
"``this`` pointer safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3098
msgid "constants"
msgstr ""

#: ../../../analyzer/checkers.rst:3104
msgid ""
"We also define a set of safe transformations which if passed a safe value as "
"an input provide (usually it's the return value) a safe value (or an object "
"that provides safe values). This is also a heuristic."
msgstr ""

#: ../../../analyzer/checkers.rst:3106
msgid "constructors of ref-counted types (including factory methods)"
msgstr ""

#: ../../../analyzer/checkers.rst:3107
msgid "getters of ref-counted types"
msgstr ""

#: ../../../analyzer/checkers.rst:3108
msgid "member overloaded operators"
msgstr ""

#: ../../../analyzer/checkers.rst:3109
msgid "casts"
msgstr ""

#: ../../../analyzer/checkers.rst:3110
msgid "unary operators like ``&`` or ``*``"
msgstr ""

#: ../../../analyzer/checkers.rst:3113
msgid "alpha.webkit.UncountedLocalVarsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3114
msgid ""
"The goal of this rule is to make sure that any uncounted local variable is "
"backed by a ref-counted object with lifetime that is strictly larger than "
"the scope of the uncounted local variable. To be on the safe side we require "
"the scope of an uncounted variable to be embedded in the scope of ref-"
"counted object that backs it."
msgstr ""

#: ../../../analyzer/checkers.rst:3116
msgid "These are examples of cases that we consider safe:"
msgstr ""

#: ../../../analyzer/checkers.rst:3155
msgid ""
"We don't warn about these cases - we don't consider them necessarily safe "
"but since they are very common and usually safe we'd introduce a lot of "
"false positives otherwise: - variable defined in condition part of an "
"```if``` statement - variable defined in init statement condition of a "
"```for``` statement"
msgstr ""

#: ../../../analyzer/checkers.rst:3159
msgid ""
"For the time being we also don't warn about uninitialized uncounted local "
"variables."
msgstr ""

#: ../../../analyzer/checkers.rst:3162
msgid "Debug Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:3168
msgid "debug"
msgstr ""

#: ../../../analyzer/checkers.rst:3170
msgid ""
"Checkers used for debugging the analyzer. :doc:`developer-docs/DebugChecks` "
"page contains a detailed description."
msgstr ""

#: ../../../analyzer/checkers.rst:3176
msgid "debug.AnalysisOrder"
msgstr ""

#: ../../../analyzer/checkers.rst:3177
msgid "Print callbacks that are called during analysis in order."
msgstr ""

#: ../../../analyzer/checkers.rst:3182
msgid "debug.ConfigDumper"
msgstr ""

#: ../../../analyzer/checkers.rst:3183
msgid "Dump config table."
msgstr ""

#: ../../../analyzer/checkers.rst:3188
msgid "debug.DumpCFG Display"
msgstr ""

#: ../../../analyzer/checkers.rst:3189
msgid "Control-Flow Graphs."
msgstr ""

#: ../../../analyzer/checkers.rst:3194
msgid "debug.DumpCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3195
msgid "Display Call Graph."
msgstr ""

#: ../../../analyzer/checkers.rst:3200
msgid "debug.DumpCalls"
msgstr ""

#: ../../../analyzer/checkers.rst:3201
msgid "Print calls as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3206
msgid "debug.DumpDominators"
msgstr ""

#: ../../../analyzer/checkers.rst:3207
msgid "Print the dominance tree for a given CFG."
msgstr ""

#: ../../../analyzer/checkers.rst:3212
msgid "debug.DumpLiveVars"
msgstr ""

#: ../../../analyzer/checkers.rst:3213
msgid "Print results of live variable analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:3218
msgid "debug.DumpTraversal"
msgstr ""

#: ../../../analyzer/checkers.rst:3219
msgid "Print branch conditions as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3224
msgid "debug.ExprInspection"
msgstr ""

#: ../../../analyzer/checkers.rst:3225
msgid "Check the analyzer's understanding of expressions."
msgstr ""

#: ../../../analyzer/checkers.rst:3230
msgid "debug.Stats"
msgstr ""

#: ../../../analyzer/checkers.rst:3231
msgid "Emit warnings with analyzer statistics."
msgstr ""

#: ../../../analyzer/checkers.rst:3236
msgid "debug.TaintTest"
msgstr ""

#: ../../../analyzer/checkers.rst:3237
msgid "Mark tainted symbols as such."
msgstr ""

#: ../../../analyzer/checkers.rst:3242
msgid "debug.ViewCFG"
msgstr ""

#: ../../../analyzer/checkers.rst:3243
msgid "View Control-Flow Graphs using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3248
msgid "debug.ViewCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3249
msgid "View Call Graph using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3254
msgid "debug.ViewExplodedGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3255
msgid "View Exploded Graphs using GraphViz."
msgstr ""
