# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang 5.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <http://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:12
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:14
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release 5.0.0. Here we "
"describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <http://llvm.org/docs/ReleaseNotes."
"html>`_. All LLVM releases may be downloaded from the `LLVM releases web "
"site <http://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:23
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <http://clang.llvm.org>`_ or "
"the `LLVM Web Site <http://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:28
msgid "What's New in Clang 5.0.0?"
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"Some of the major new features and improvements to Clang are listed here. "
"Generic improvements to Clang as a whole or to its underlying infrastructure "
"are described first, followed by language-specific sections with "
"improvements to Clang's support for those languages."
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid "Major New Features"
msgstr ""

#: ../../../ReleaseNotes.rst:39
msgid "C++ coroutines"
msgstr ""

#: ../../../ReleaseNotes.rst:40
msgid ""
"`C++ coroutines TS <http://open-std.org/jtc1/sc22/wg21/docs/papers/2017/"
"n4680.pdf>`_ implementation has landed. Use ``-fcoroutines-ts -stdlib=libc+"
"+`` to enable coroutine support. Here is `an example <https://wandbox.org/"
"permlink/Dth1IO5q8Oe31ew2>`_ to get you started."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:50
msgid ""
"``-Wcast-qual`` was implemented for C++. C-style casts are now properly "
"diagnosed."
msgstr ""

#: ../../../ReleaseNotes.rst:53
msgid ""
"``-Wunused-lambda-capture`` warns when a variable explicitly captured by a "
"lambda is not used in the body of the lambda."
msgstr ""

#: ../../../ReleaseNotes.rst:56
msgid ""
"``-Wstrict-prototypes`` is a new warning that warns about non-prototype "
"function and block declarations and types in C and Objective-C."
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid ""
"``-Wunguarded-availability`` is a new warning that warns about uses of new "
"APIs that were introduced in a system whose version is newer than the "
"deployment target version. A new Objective-C expression ``@available`` has "
"been introduced to perform system version checking at runtime. This warning "
"is off by default to prevent unexpected warnings in existing projects. "
"However, its less strict sibling ``-Wunguarded-availability-new`` is on by "
"default. It warns about unguarded uses of APIs only when they were "
"introduced in or after macOS 10.13, iOS 11, tvOS 11 or watchOS 4."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"The ``-Wdocumentation`` warning now allows the use of ``\\param`` and "
"``\\returns`` documentation directives in the documentation comments for "
"declarations with a function or a block pointer type."
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid ""
"The compiler no longer warns about unreachable ``__builtin_unreachable`` "
"statements."
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:78
msgid ""
"``--autocomplete`` was implemented to obtain a list of flags and its "
"arguments. This is used for shell autocompletion."
msgstr ""

#: ../../../ReleaseNotes.rst:82
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:84
msgid ""
"The following options are deprecated and ignored. They will be removed in "
"future versions of Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid ""
"``-fslp-vectorize-aggressive`` used to enable the BB vectorizing pass. They "
"have been superseeded by the normal SLP vectorizer."
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid ""
"``-fno-slp-vectorize-aggressive`` used to be the default behavior of clang."
msgstr ""

#: ../../../ReleaseNotes.rst:92
msgid "New Pragmas in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid ""
"Clang now supports the ``clang attribute`` pragma that allows users to apply "
"an attribute to multiple declarations."
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"``pragma pack`` directives that are included in a precompiled header are now "
"applied correctly to the declarations in the compilation unit that includes "
"that precompiled header."
msgstr ""

#: ../../../ReleaseNotes.rst:102
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:104
msgid ""
"The ``overloadable`` attribute now allows at most one function with a given "
"name to lack the ``overloadable`` attribute. This unmarked function will not "
"have its name mangled."
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid ""
"The ``ms_abi`` attribute and the ``__builtin_ms_va_list`` types and builtins "
"are now supported on AArch64."
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid "C Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid ""
"Added near complete support for implicit scalar to vector conversion, a GNU "
"C/C++ language extension. With this extension, the following code is "
"considered valid:"
msgstr ""

#: ../../../ReleaseNotes.rst:127
msgid ""
"The implicit conversion of a scalar value to a vector value--in the context "
"of a vector expression--occurs when:"
msgstr ""

#: ../../../ReleaseNotes.rst:130
msgid ""
"The type of the vector is that of a ``__attribute__((vector_size(size)))`` "
"vector, not an OpenCL ``__attribute__((ext_vector_type(size)))`` vector type."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"The scalar value can be casted to that of the vector element's type without "
"the loss of precision based on the type of the scalar and the type of the "
"vector's elements."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid ""
"For compile time constant values, the above rule is weakened to consider the "
"value of the scalar constant rather than the constant's type. However, for "
"compatibility with GCC, floating point constants with precise integral "
"representations are not implicitly converted to integer values."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Currently the basic integer and floating point types with the following "
"operators are supported: ``+``, ``/``, ``-``, ``*``, ``%``, ``>``, ``<``, "
"``>=``, ``<=``, ``==``, ``!=``, ``&``, ``|``, ``^`` and the corresponding "
"assignment operators where applicable."
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid "C++ Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:151
msgid ""
"We expect this to be the last Clang release that defaults to ``-std=gnu+"
"+98`` when using the GCC-compatible ``clang++`` driver. From Clang 6 onwards "
"we expect to use ``-std=gnu++14`` or a later standard by default, to match "
"the behavior of recent GCC releases. Users are encouraged to change their "
"build files to explicitly specify their desired C++ standard."
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"Support for the C++17 standard has been completed. This mode can be enabled "
"using ``-std=c++17`` (the old flag ``-std=c++1z`` is still supported for "
"compatibility)."
msgstr ""

#: ../../../ReleaseNotes.rst:161
msgid ""
"When targeting a platform that uses the Itanium C++ ABI, Clang implements a "
"`recent change to the ABI`__ that passes objects of class type indirectly if "
"they have a non-trivial move constructor. Previous versions of Clang only "
"considered the copy constructor, resulting in an ABI change in rare cases, "
"but GCC has already implemented this change for several releases. This "
"affects all targets other than Windows and PS4. You can opt out of this ABI "
"change with ``-fclang-abi-compat=4.0``."
msgstr ""

#: ../../../ReleaseNotes.rst:169
msgid ""
"As mentioned in `C Language Changes in Clang`_, Clang's support for implicit "
"scalar to vector conversions also applies to C++. Additionally the following "
"operators are also supported: ``&&`` and ``||``."
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Objective-C Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid ""
"Clang now guarantees that a ``readwrite`` property is synthesized when an "
"ambiguous property (i.e. a property that's declared in multiple protocols) "
"is synthesized. The ``-Wprotocol-property-synthesis-ambiguity`` warning that "
"warns about incompatible property types is now promoted to an error when "
"there's an ambiguity between ``readwrite`` and ``readonly`` properties."
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid ""
"Clang now prohibits synthesis of ambiguous properties with incompatible "
"explicit property attributes. The following property attributes are checked "
"for differences: ``copy``, ``retain``/``strong``, ``atomic``, ``getter`` and "
"``setter``."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid "OpenCL C Language Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "Various bug fixes and improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "Extended OpenCL-related Clang tests."
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Improved diagnostics across several areas: scoped address space qualified "
"variables, function pointers, atomics, type rank for overloading, block "
"captures, ``reserve_id_t``."
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid ""
"Several address space related fixes for constant address space function "
"scope variables, IR generation, mangling of ``generic`` and alloca (post-fix "
"from general Clang refactoring of address spaces)."
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid ""
"Several improvements in extensions: fixed OpenCL version for "
"``cl_khr_mipmap_image``, added missing ``cl_khr_3d_image_writes``."
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid ""
"Improvements in ``enqueue_kernel``, especially the implementation of "
"``ndrange_t`` and blocks."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid ""
"OpenCL type related fixes: global samplers, the ``pipe_t`` size, internal "
"type redefinition, and type compatibility checking in ternary and other "
"operations."
msgstr ""

#: ../../../ReleaseNotes.rst:212
msgid ""
"The OpenCL header has been extended with missing extension guards, and "
"direct mapping of ``as_type`` to ``__builtin_astype``."
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid "Fixed ``kernel_arg_type_qual`` and OpenCL/SPIR version in metadata."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid "Added proper use of the kernel calling convention to various targets."
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid "The following new functionalities have been added:"
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid "Added documentation on OpenCL to Clang user manual."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "Extended Clang builtins with required ``cl_khr_subgroups`` support."
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid "Add ``intel_reqd_sub_group_size`` attribute support."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid "Added OpenCL types to ``CIndex``."
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid ""
"Option **BreakBeforeInheritanceComma** added to break before ``:`` and ``,"
"``  in case of multiple inheritance in a class declaration. Enabled by "
"default in the Mozilla coding style."
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "true"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "false"
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid "Align block comment decorations."
msgstr ""

#: ../../../ReleaseNotes.rst:250 ../../../ReleaseNotes.rst:264
msgid "Before"
msgstr ""

#: ../../../ReleaseNotes.rst:250 ../../../ReleaseNotes.rst:264
msgid "After"
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"The :doc:`ClangFormatStyleOptions` documentation provides detailed examples "
"for most options."
msgstr ""

#: ../../../ReleaseNotes.rst:261
msgid "Namespace end comments are now added or updated automatically."
msgstr ""

#: ../../../ReleaseNotes.rst:274
msgid ""
"Comment reflow support added. Overly long comment lines will now be reflown "
"with the rest of the paragraph instead of just broken. Option "
"**ReflowComments** added and enabled by default."
msgstr ""

#: ../../../ReleaseNotes.rst:278
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid ""
"Libclang now provides code-completion results for more C++ constructs and "
"keywords. The following keywords/identifiers are now included in the code-"
"completion results: ``static_assert``, ``alignas``, ``constexpr``, "
"``final``, ``noexcept``, ``override`` and ``thread_local``."
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid ""
"Libclang now provides code-completion results for members from dependent "
"classes. For example:"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid ""
"Note that code-completion results are still not provided when the member "
"expression includes a dependent base expression. For example:"
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid ""
"The static analyzer now supports using the `z3 theorem prover <https://"
"github.com/z3prover/z3>`_ from Microsoft Research as an external constraint "
"solver. This allows reasoning over more complex queries, but performance is "
"~15x slower than the default range-based constraint solver. To enable the z3 "
"solver backend, clang must be built with the ``CLANG_ANALYZER_BUILD_Z3=ON`` "
"option, and the ``-Xanalyzer -analyzer-constraints=z3`` arguments passed at "
"runtime."
msgstr ""

#: ../../../ReleaseNotes.rst:317
msgid "Undefined Behavior Sanitizer (UBSan)"
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid ""
"The Undefined Behavior Sanitizer has a new check for pointer overflow. This "
"check is on by default. The flag to control this functionality is ``-"
"fsanitize=pointer-overflow``."
msgstr ""

#: ../../../ReleaseNotes.rst:323
msgid ""
"Pointer overflow is an indicator of undefined behavior: when a pointer "
"indexing expression wraps around the address space, or produces other "
"unexpected results, its result may not point to a valid object."
msgstr ""

#: ../../../ReleaseNotes.rst:327
msgid ""
"UBSan has several new checks which detect violations of nullability "
"annotations. These checks are off by default. The flag to control this group "
"of checks is ``-fsanitize=nullability``. The checks can be individially "
"enabled by ``-fsanitize=nullability-arg`` (which checks calls), ``-"
"fsanitize=nullability-assign`` (which checks assignments), and ``-"
"fsanitize=nullability-return`` (which checks return statements)."
msgstr ""

#: ../../../ReleaseNotes.rst:334
msgid "UBSan can now detect invalid loads from bitfields and from ObjC BOOLs."
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid ""
"UBSan can now avoid emitting unnecessary type checks in C++ class methods "
"and in several other cases where the result is known at compile-time. UBSan "
"can also avoid emitting unnecessary overflow checks in arithmetic "
"expressions with promoted integer operands."
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:345
msgid "Python bindings now support both Python 2 and Python 3."
msgstr ""

#: ../../../ReleaseNotes.rst:347
msgid "The following methods have been added:"
msgstr ""

#: ../../../ReleaseNotes.rst:349
msgid "``is_scoped_enum`` has been added to ``Cursor``."
msgstr ""

#: ../../../ReleaseNotes.rst:351
msgid "``exception_specification_kind`` has been added to ``Cursor``."
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid "``get_address_space`` has been added to ``Type``."
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid "``get_typedef_name`` has been added to ``Type``."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid "``get_exception_specification_kind`` has been added to ``Type``."
msgstr ""

#: ../../../ReleaseNotes.rst:361
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:363
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<http://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Subversion version of the source "
"code. You can access versions of these documents specific to this release by "
"going into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us via the `mailing list <http://lists.llvm.org/mailman/listinfo/cfe-"
"dev>`_."
msgstr ""
