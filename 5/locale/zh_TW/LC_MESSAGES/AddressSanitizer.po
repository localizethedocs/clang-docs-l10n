# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AddressSanitizer.rst:3
msgid "AddressSanitizer"
msgstr ""

#: ../../../AddressSanitizer.rst:9
msgid "Introduction"
msgstr ""

#: ../../../AddressSanitizer.rst:11
msgid ""
"AddressSanitizer is a fast memory error detector. It consists of a compiler "
"instrumentation module and a run-time library. The tool can detect the "
"following types of bugs:"
msgstr ""

#: ../../../AddressSanitizer.rst:15
msgid "Out-of-bounds accesses to heap, stack and globals"
msgstr ""

#: ../../../AddressSanitizer.rst:16
msgid "Use-after-free"
msgstr ""

#: ../../../AddressSanitizer.rst:17
msgid ""
"Use-after-return (runtime flag "
"`ASAN_OPTIONS=detect_stack_use_after_return=1`)"
msgstr ""

#: ../../../AddressSanitizer.rst:18
msgid "Use-after-scope (clang flag `-fsanitize-address-use-after-scope`)"
msgstr ""

#: ../../../AddressSanitizer.rst:19
msgid "Double-free, invalid free"
msgstr ""

#: ../../../AddressSanitizer.rst:20
msgid "Memory leaks (experimental)"
msgstr ""

#: ../../../AddressSanitizer.rst:22
msgid "Typical slowdown introduced by AddressSanitizer is **2x**."
msgstr ""

#: ../../../AddressSanitizer.rst:25
msgid "How to build"
msgstr ""

#: ../../../AddressSanitizer.rst:27
msgid "Build LLVM/Clang with `CMake <http://llvm.org/docs/CMake.html>`_."
msgstr ""

#: ../../../AddressSanitizer.rst:30
msgid "Usage"
msgstr ""

#: ../../../AddressSanitizer.rst:32
msgid ""
"Simply compile and link your program with ``-fsanitize=address`` flag.  The "
"AddressSanitizer run-time library should be linked to the final executable, "
"so make sure to use ``clang`` (not ``ld``) for the final link step.  When "
"linking shared libraries, the AddressSanitizer run-time is not linked, so ``-"
"Wl,-z,defs`` may cause link errors (don't use it with AddressSanitizer).  To "
"get a reasonable performance add ``-O1`` or higher.  To get nicer stack "
"traces in error messages add ``-fno-omit-frame-pointer``.  To get perfect "
"stack traces you may need to disable inlining (just use ``-O1``) and tail "
"call elimination (``-fno-optimize-sibling-calls``)."
msgstr ""

#: ../../../AddressSanitizer.rst:54
msgid "or:"
msgstr ""

#: ../../../AddressSanitizer.rst:63
msgid ""
"If a bug is detected, the program will print an error message to stderr and "
"exit with a non-zero exit code. AddressSanitizer exits on the first detected "
"error. This is by design:"
msgstr ""

#: ../../../AddressSanitizer.rst:67
msgid ""
"This approach allows AddressSanitizer to produce faster and smaller "
"generated code (both by ~5%)."
msgstr ""

#: ../../../AddressSanitizer.rst:69
msgid ""
"Fixing bugs becomes unavoidable. AddressSanitizer does not produce false "
"alarms. Once a memory corruption occurs, the program is in an inconsistent "
"state, which could lead to confusing results and potentially misleading "
"subsequent reports."
msgstr ""

#: ../../../AddressSanitizer.rst:74
msgid ""
"If your process is sandboxed and you are running on OS X 10.10 or earlier, "
"you will need to set ``DYLD_INSERT_LIBRARIES`` environment variable and "
"point it to the ASan library that is packaged with the compiler used to "
"build the executable. (You can find the library by searching for dynamic "
"libraries with ``asan`` in their name.) If the environment variable is not "
"set, the process will try to re-exec. Also keep in mind that when moving the "
"executable to another machine, the ASan library will also need to be copied "
"over."
msgstr ""

#: ../../../AddressSanitizer.rst:83
msgid "Symbolizing the Reports"
msgstr ""

#: ../../../AddressSanitizer.rst:85
msgid ""
"To make AddressSanitizer symbolize its output you need to set the "
"``ASAN_SYMBOLIZER_PATH`` environment variable to point to the ``llvm-"
"symbolizer`` binary (or make sure ``llvm-symbolizer`` is in your ``$PATH``):"
msgstr ""

#: ../../../AddressSanitizer.rst:108
msgid ""
"If that does not work for you (e.g. your process is sandboxed), you can use "
"a separate script to symbolize the result offline (online symbolization can "
"be force disabled by setting ``ASAN_OPTIONS=symbolize=0``):"
msgstr ""

#: ../../../AddressSanitizer.rst:122
msgid ""
"Note that on OS X you may need to run ``dsymutil`` on your binary to have "
"the file\\:line info in the AddressSanitizer reports."
msgstr ""

#: ../../../AddressSanitizer.rst:126
msgid "Additional Checks"
msgstr ""

#: ../../../AddressSanitizer.rst:129
msgid "Initialization order checking"
msgstr ""

#: ../../../AddressSanitizer.rst:131
msgid ""
"AddressSanitizer can optionally detect dynamic initialization order "
"problems, when initialization of globals defined in one translation unit "
"uses globals defined in another translation unit. To enable this check at "
"runtime, you should set environment variable "
"``ASAN_OPTIONS=check_initialization_order=1``."
msgstr ""

#: ../../../AddressSanitizer.rst:137
msgid "Note that this option is not supported on OS X."
msgstr ""

#: ../../../AddressSanitizer.rst:140
msgid "Memory leak detection"
msgstr ""

#: ../../../AddressSanitizer.rst:142
msgid ""
"For more information on leak detector in AddressSanitizer, see :doc:"
"`LeakSanitizer`. The leak detection is turned on by default on Linux; "
"however, it is not yet supported on other platforms."
msgstr ""

#: ../../../AddressSanitizer.rst:147
msgid "Issue Suppression"
msgstr ""

#: ../../../AddressSanitizer.rst:149
msgid ""
"AddressSanitizer is not expected to produce false positives. If you see one, "
"look again; most likely it is a true positive!"
msgstr ""

#: ../../../AddressSanitizer.rst:153
msgid "Suppressing Reports in External Libraries"
msgstr ""

#: ../../../AddressSanitizer.rst:154
msgid ""
"Runtime interposition allows AddressSanitizer to find bugs in code that is "
"not being recompiled. If you run into an issue in external libraries, we "
"recommend immediately reporting it to the library maintainer so that it gets "
"addressed. However, you can use the following suppression mechanism to "
"unblock yourself and continue on with the testing. This suppression "
"mechanism should only be used for suppressing issues in external code; it "
"does not work on code recompiled with AddressSanitizer. To suppress errors "
"in external libraries, set the ``ASAN_OPTIONS`` environment variable to "
"point to a suppression file. You can either specify the full path to the "
"file or the path of the file relative to the location of your executable."
msgstr ""

#: ../../../AddressSanitizer.rst:169
msgid ""
"Use the following format to specify the names of the functions or libraries "
"you want to suppress. You can see these in the error report. Remember that "
"the narrower the scope of the suppression, the more bugs you will be able to "
"catch."
msgstr ""

#: ../../../AddressSanitizer.rst:181
msgid "Conditional Compilation with ``__has_feature(address_sanitizer)``"
msgstr ""

#: ../../../AddressSanitizer.rst:183
msgid ""
"In some cases one may need to execute different code depending on whether "
"AddressSanitizer is enabled. :ref:`\\_\\_has\\_feature <langext-"
"__has_feature-__has_extension>` can be used for this purpose."
msgstr ""

#: ../../../AddressSanitizer.rst:197
msgid ""
"Disabling Instrumentation with ``__attribute__((no_sanitize(\"address\")))``"
msgstr ""

#: ../../../AddressSanitizer.rst:199
msgid ""
"Some code should not be instrumented by AddressSanitizer. One may use the "
"function attribute ``__attribute__((no_sanitize(\"address\")))`` (which has "
"deprecated synonyms `no_sanitize_address` and `no_address_safety_analysis`) "
"to disable instrumentation of a particular function. This attribute may not "
"be supported by other compilers, so we suggest to use it together with "
"``__has_feature(address_sanitizer)``."
msgstr ""

#: ../../../AddressSanitizer.rst:207
msgid "Suppressing Errors in Recompiled Code (Blacklist)"
msgstr ""

#: ../../../AddressSanitizer.rst:209
msgid ""
"AddressSanitizer supports ``src`` and ``fun`` entity types in :doc:"
"`SanitizerSpecialCaseList`, that can be used to suppress error reports in "
"the specified source files or functions. Additionally, AddressSanitizer "
"introduces ``global`` and ``type`` entity types that can be used to suppress "
"error reports for out-of-bound access to globals with certain names and "
"types (you may only specify class or struct types)."
msgstr ""

#: ../../../AddressSanitizer.rst:216
msgid ""
"You may use an ``init`` category to suppress reports about initialization-"
"order problems happening in certain source files or with certain global "
"variables."
msgstr ""

#: ../../../AddressSanitizer.rst:237
msgid "Suppressing memory leaks"
msgstr ""

#: ../../../AddressSanitizer.rst:239
msgid ""
"Memory leak reports produced by :doc:`LeakSanitizer` (if it is run as a part "
"of AddressSanitizer) can be suppressed by a separate file passed as"
msgstr ""

#: ../../../AddressSanitizer.rst:246
msgid ""
"which contains lines of the form `leak:<pattern>`. Memory leak will be "
"suppressed if pattern matches any function name, source file name, or "
"library name in the symbolized stack trace of the leak report. See `full "
"documentation <https://github.com/google/sanitizers/wiki/"
"AddressSanitizerLeakSanitizer#suppressions>`_ for more details."
msgstr ""

#: ../../../AddressSanitizer.rst:254
msgid "Limitations"
msgstr ""

#: ../../../AddressSanitizer.rst:256
msgid ""
"AddressSanitizer uses more real memory than a native run. Exact overhead "
"depends on the allocations sizes. The smaller the allocations you make the "
"bigger the overhead is."
msgstr ""

#: ../../../AddressSanitizer.rst:259
msgid ""
"AddressSanitizer uses more stack memory. We have seen up to 3x increase."
msgstr ""

#: ../../../AddressSanitizer.rst:260
msgid ""
"On 64-bit platforms AddressSanitizer maps (but not reserves) 16+ Terabytes "
"of virtual address space. This means that tools like ``ulimit`` may not work "
"as usually expected."
msgstr ""

#: ../../../AddressSanitizer.rst:263
msgid "Static linking is not supported."
msgstr ""

#: ../../../AddressSanitizer.rst:266
msgid "Supported Platforms"
msgstr ""

#: ../../../AddressSanitizer.rst:268
msgid "AddressSanitizer is supported on:"
msgstr ""

#: ../../../AddressSanitizer.rst:270
msgid "Linux i386/x86\\_64 (tested on Ubuntu 12.04)"
msgstr ""

#: ../../../AddressSanitizer.rst:271
msgid "OS X 10.7 - 10.11 (i386/x86\\_64)"
msgstr ""

#: ../../../AddressSanitizer.rst:272
msgid "iOS Simulator"
msgstr ""

#: ../../../AddressSanitizer.rst:273
msgid "Android ARM"
msgstr ""

#: ../../../AddressSanitizer.rst:274
msgid "FreeBSD i386/x86\\_64 (tested on FreeBSD 11-current)"
msgstr ""

#: ../../../AddressSanitizer.rst:276
msgid "Ports to various other platforms are in progress."
msgstr ""

#: ../../../AddressSanitizer.rst:279
msgid "Current Status"
msgstr ""

#: ../../../AddressSanitizer.rst:281
msgid ""
"AddressSanitizer is fully functional on supported platforms starting from "
"LLVM 3.1. The test suite is integrated into CMake build and can be run with "
"``make check-asan`` command."
msgstr ""

#: ../../../AddressSanitizer.rst:286
msgid "More Information"
msgstr ""

#: ../../../AddressSanitizer.rst:288
msgid "`<https://github.com/google/sanitizers/wiki/AddressSanitizer>`_"
msgstr ""
