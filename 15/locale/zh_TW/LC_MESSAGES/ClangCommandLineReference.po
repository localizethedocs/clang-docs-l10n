# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangCommandLineReference.rst:9
msgid "Clang command line argument reference"
msgstr ""

#: ../../../ClangCommandLineReference.rst:14
msgid "Introduction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:16
msgid ""
"This page lists the command line arguments currently supported by the GCC-"
"compatible ``clang`` and ``clang++`` drivers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:23
msgid ""
"Search $prefix$file for executables, libraries, and data files. If $prefix "
"is a directory, search $prefix/$file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:27
msgid "Add directory to framework include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:31
msgid "Treat source input files as Objective-C inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:37
msgid "Treat source input files as Objective-C++ inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:41
msgid "Do not emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:45
msgid "Don't emit warning for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:49
msgid "Emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:53
msgid "Pass the comma separated arguments in <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:63
msgid "Pass <arg> to the CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:69
msgid "Pass <arg> to the CUDA/HIP host compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:73
msgid "Pass <arg> to fatbinary invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:77
msgid "Pass <arg> to the ptxas assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:89
msgid "Run the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:95
msgid ""
"Static analyzer report output format (html\\|plist\\|plist-multi-file\\|"
"plist-html\\|sarif\\|sarif-html\\|text)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:109
msgid "Emit ARC errors even if the migrator can fix them"
msgstr ""

#: ../../../ClangCommandLineReference.rst:113
msgid "Output path for the plist report"
msgstr ""

#: ../../../ClangCommandLineReference.rst:131
msgid "Specifies configuration file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:137
msgid "Manually specify the CUDA feature to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:141
msgid ""
"Include PTX for the following GPU architecture (e.g. sm\\_35) or 'all'. May "
"be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:145
msgid "Enable device-side debug info generation. Disables ptxas optimizations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:149
msgid ""
"An ID for compilation unit, which should be the same for the same "
"compilation unit but different for different compilation units. It is used "
"to externalize device-side static variables for single source offloading "
"languages CUDA and HIP so that they can be accessed by the host code of the "
"same compilation unit."
msgstr ""

#: ../../../ClangCommandLineReference.rst:155
msgid ""
"Generate code for an additional runtime variant of the deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:159
msgid "Specify the darwin target variant triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:165
msgid "Filename to write DOT-formatted header dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:169
msgid "Filename (or -) to write dependency output to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:173
msgid "Directory to output dSYM's (if any) to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:195
msgid "Emit Clang AST files for source inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:199
msgid "Enable linker job to emit a static library."
msgstr ""

#: ../../../ClangCommandLineReference.rst:203
msgid ""
"Trivial automatic variable initialization to zero is only here for "
"benchmarks, it'll eventually be removed, and I'm OK with that because I'm "
"only using it to benchmark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:207
msgid "Start emitting warnings for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:217
msgid "Reserve register r19 (Hexagon only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:221
msgid ""
"Specify default stream. The default value is 'legacy'. (HIP only). <arg> "
"must be 'legacy' or 'per-thread'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:225
msgid "Flush denormal floating point values to zero in CUDA/HIP device mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:233
msgid ""
"Specify comma-separated list of triples OpenMP offloading targets to be "
"supported"
msgstr ""

#: ../../../ClangCommandLineReference.rst:247
msgid "Pass <arg> to plugin <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:253
msgid ""
"Add -rpath with architecture-specific resource directory to the linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:257
msgid "Path to system ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:262
msgid "#include files may be \"skipped\" due to include guard optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:262
msgid "or #pragma once. This flag makes -H show also such includes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:266
msgid "Build this module as a system module. Only used with -emit-module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:270
msgid ""
"Method to generate ID's for compilation units for single source offloading "
"languages CUDA and HIP: 'hash' (ID's generated by hashing file path and "
"command line options) \\| 'random' (ID's generated as random numbers) \\| "
"'none' (disabled). Default is 'hash'. This option will be overridden by "
"option '-cuid=\\[ID\\]' if it is specified."
msgstr ""

#: ../../../ClangCommandLineReference.rst:274
msgid ""
"Search for GCC installation in the specified directory on targets which "
"commonly use GCC. The directory usually contains 'lib{,32,64}/gcc{,-cross}/"
"$triple' and 'include'. If specified, sysroot is skipped for GCC detection. "
"Note: executables (e.g. ld) used by the compiler are not overridden by the "
"selected GCC installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:278
msgid "Generate CodeView debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:282
msgid "Emit type record hashes in a .debug$H section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:286
msgid "Emit reproducer on (option: off, crash (default), error, always)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:290
msgid ""
"Instrument device library for HIP, which is a LLVM bitcode containing "
"\\_\\_cyg\\_profile\\_func\\_enter and \\_\\_cyg\\_profile\\_func\\_exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:294
msgid "Default max threads per block for kernel launch bounds for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:300
msgid "Display available options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:304
msgid "Display help for hidden options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:308
msgid "Link clang-offload-bundler bundles for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:312
msgid "HIP version in the format of major.minor.patch"
msgstr ""

#: ../../../ClangCommandLineReference.rst:316
msgid ""
"Enable builtin #include directories even when -nostdinc is used before or "
"after -ibuiltininc. Using -nobuiltininc after the option disables it"
msgstr ""

#: ../../../ClangCommandLineReference.rst:322
msgid "Make the next included directory (-I or -F) an indexer header map"
msgstr ""

#: ../../../ClangCommandLineReference.rst:342
msgid ""
"Allow unsafe floating-point math optimizations which may decrease precision"
msgstr ""

#: ../../../ClangCommandLineReference.rst:346
msgid ""
"Select straight-line speculation hardening scope (ARM/AArch64/X86 only). "
"<arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/"
"AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:350
msgid "Run the migrator"
msgstr ""

#: ../../../ClangCommandLineReference.rst:360
msgid "Additional arguments to forward to LLVM's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:364
msgid "Additional arguments to forward to MLIR's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:368
msgid "Directory to dump module dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:384
msgid ""
"Don't error out if the detected version of the CUDA install is too low for "
"the requested CUDA gpu architecture."
msgstr ""

#: ../../../ClangCommandLineReference.rst:388
msgid "Do not link against HIP runtime libraries"
msgstr ""

#: ../../../ClangCommandLineReference.rst:396
msgid "Disable builtin #include directories"
msgstr ""

#: ../../../ClangCommandLineReference.rst:406
msgid ""
"Do not add include paths for CUDA/HIP and do not include the default CUDA/"
"HIP wrapper headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:410
msgid "Do not link device library for CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:414
msgid "Do not include the default HIP wrapper headers and include paths"
msgstr ""

#: ../../../ClangCommandLineReference.rst:434
msgid "Disable standard #include directories for the C++ standard library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:444
msgid "Write output to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:448
msgid ""
"Only modify files with a filename contained in the provided directory path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:452
msgid "Make migration to 'atomic' properties"
msgstr ""

#: ../../../ClangCommandLineReference.rst:456
msgid "Enable migration to modern ObjC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:460
msgid "Enable migration to property and method annotations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:464
msgid ""
"Enable migration to infer NS\\_DESIGNATED\\_INITIALIZER for initializer "
"methods"
msgstr ""

#: ../../../ClangCommandLineReference.rst:468
msgid "Enable migration to infer instancetype for method result type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:472
msgid "Enable migration to modern ObjC literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:476
msgid "Enable migration to NS\\_ENUM/NS\\_OPTIONS macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:480
msgid "Enable migration to modern ObjC property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:484
msgid "Enable migration of setter/getter messages to property-dot syntax"
msgstr ""

#: ../../../ClangCommandLineReference.rst:488
msgid "Enable migration to add protocol conformance on classes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:492
msgid "Enable migration to modern ObjC readonly property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:496
msgid "Enable migration to modern ObjC readwrite property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:500
msgid "Enable migration to modern ObjC subscripting"
msgstr ""

#: ../../../ClangCommandLineReference.rst:504
msgid ""
"Enable migration to use NS\\_NONATOMIC\\_IOSONLY macro for setting "
"property's 'atomic' attribute"
msgstr ""

#: ../../../ClangCommandLineReference.rst:508
msgid ""
"Enable migration to annotate property with NS\\_RETURNS\\_INNER\\_POINTER"
msgstr ""

#: ../../../ClangCommandLineReference.rst:514
msgid "Set the output <file> for debug infos"
msgstr ""

#: ../../../ClangCommandLineReference.rst:518
msgid ""
"CUDA offloading device architecture (e.g. sm\\_35), or HIP offloading target "
"ID in the form of a device architecture followed by target ID features "
"delimited by a colon. Each target ID feature is a pre-defined string "
"followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be "
"specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:522
msgid "Only compile for the offloading device."
msgstr ""

#: ../../../ClangCommandLineReference.rst:526
#: ../../../ClangCommandLineReference.rst:530
msgid "Only compile for the offloading host."
msgstr ""

#: ../../../ClangCommandLineReference.rst:534
msgid ""
"Specify comma-separated list of offloading target triples (CUDA and HIP only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:542
msgid "Enable mcount instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:546
msgid "Use pipes between commands, when possible"
msgstr ""

#: ../../../ClangCommandLineReference.rst:560
msgid "Print all of Clang's warning options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:564
msgid "Print the effective target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:568
msgid "Print the full library path of <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:572
msgid "Enable Objective-C Ivar layout bitmap print trace"
msgstr ""

#: ../../../ClangCommandLineReference.rst:576
msgid ""
"Print the library path for the currently used compiler runtime library "
"(\"libgcc.a\" or \"libclang\\_rt.builtins.\\*.a\")"
msgstr ""

#: ../../../ClangCommandLineReference.rst:584
msgid "Print the multiarch target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:588
msgid "Print the full program path of <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:592
msgid "Print the resource directory pathname"
msgstr ""

#: ../../../ClangCommandLineReference.rst:596
msgid "Print the paths used for finding ROCm installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:600
msgid "Print the directory pathname containing clangs runtime libraries"
msgstr ""

#: ../../../ClangCommandLineReference.rst:604
msgid "Print the paths used for finding libraries and programs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:608
msgid "Print the normalized target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:612
msgid "Print the registered targets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:620
msgid "Support POSIX threads in generated code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:628
msgid "Whether to build a relocatable precompiled header"
msgstr ""

#: ../../../ClangCommandLineReference.rst:634
msgid "Rewrite Legacy Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:638
msgid "Compiler runtime library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:642
msgid "Save llvm statistics."
msgstr ""

#: ../../../ClangCommandLineReference.rst:646
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../ClangCommandLineReference.rst:684
msgid "Serialize compiler diagnostics to a file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:690
msgid "Dynamically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:696
msgid "Don't emit warnings about unused arguments for the following arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:702
msgid "Statically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:708
msgid "Use the static host OpenMP runtime while linking."
msgstr ""

#: ../../../ClangCommandLineReference.rst:714
msgid ""
"C++ standard library to use. <arg> must be 'libc++', 'libstdc++' or "
"'platform'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:728
msgid "Generate code for the given target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:732
msgid "Time individual commands"
msgstr ""

#: ../../../ClangCommandLineReference.rst:738
msgid "Enable some traditional CPP emulation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:752
msgid ""
"Unwind library to use. <arg> must be 'libgcc', 'unwindlib' or 'platform'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:756
msgid "Show commands to run and use verbose output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:760
msgid "Verify the binary representation of debug output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:764
msgid "Print version information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:768
msgid "Suppress all warnings"
msgstr ""

#: ../../../ClangCommandLineReference.rst:788
msgid "Resolve file paths relative to the specified directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:792
msgid "Treat subsequent input files as having type <language>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:797
msgid "Actions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:798
msgid "The action to perform on the input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:802
msgid "Only run the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:806
msgid "Only run preprocess and compilation steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:810
msgid "Only run preprocess, compile, and assemble steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:814
msgid "Generate Interface Stub Files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:818
msgid "Use the LLVM representation for assembler and object files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:822
msgid "Generate Interface Stub Files, emit merged text not binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:826
msgid "Extract API information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:830
msgid "Only run the driver."
msgstr ""

#: ../../../ClangCommandLineReference.rst:836
msgid "Provide information about a particular module file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:840
msgid "Only precompile the input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:844
msgid "Rewrite Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:848
msgid "Load and verify that a pre-compiled header file is not stale"
msgstr ""

#: ../../../ClangCommandLineReference.rst:851
msgid "Compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:853
msgid ""
"Flags controlling the behavior of Clang during compilation. These flags have "
"no effect during actions that do not perform compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:858
msgid "Pass <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:862
msgid "Pass <arg> to the clang compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:866
msgid "Pass <arg> to the target offloading toolchain."
msgstr ""

#: ../../../ClangCommandLineReference.rst:872
msgid "Pass <arg> to the target offloading toolchain identified by <triple>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:878
msgid "C++ ABI to use. This will override the target C++ ABI."
msgstr ""

#: ../../../ClangCommandLineReference.rst:882
msgid ""
"Attempt to match the ABI of Clang <version>. <version> must be '<major>."
"<minor>' or 'latest'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:886
msgid ""
"Treat each comma separated argument in <arg> as a documentation comment "
"block command"
msgstr ""

#: ../../../ClangCommandLineReference.rst:890
msgid ""
"Require member pointer base types to be complete if they would be "
"significant under the Microsoft ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:894
msgid "Put crash-report files in <dir>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:898
msgid "Allow \\_\\_declspec as a keyword"
msgstr ""

#: ../../../ClangCommandLineReference.rst:908
msgid "Print fix-its in machine parseable form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:912
msgid "Print source range spans in numeric form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:918
msgid "Discard value names in LLVM IR"
msgstr ""

#: ../../../ClangCommandLineReference.rst:922
msgid "Use the experimental C++ class ABI for classes with virtual tables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:926
msgid "Enables experimental strict floating point in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:930
msgid ""
"Use separate accesses for consecutive bitfield runs with legal widths and "
"alignments."
msgstr ""

#: ../../../ClangCommandLineReference.rst:934
msgid "Enables the global instruction selector"
msgstr ""

#: ../../../ClangCommandLineReference.rst:938
msgid "Inline suitable functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:942
msgid "Inline functions which are (explicitly or implicitly) marked inline"
msgstr ""

#: ../../../ClangCommandLineReference.rst:948
msgid "Don't use ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:954
msgid "File holding the seed used by the randomize structure layout feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:958
msgid "The seed used by the randomize structure layout feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:964
msgid ""
"Set destructor type used in ASan instrumentation. <arg> must be 'none' or "
"'global'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:968
msgid "Level of field padding for AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:972
msgid "Enable linker dead stripping of globals in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:976
msgid "Always generate function calls for address sanitizer instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:980
msgid ""
"Enable poisoning array cookies when using custom operator new\\[\\] in "
"AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:984
msgid ""
"Select the mode of detecting stack use-after-return in AddressSanitizer. "
"<mode> must be 'never', 'runtime' or 'always'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:988
msgid "Enable use-after-scope detection in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:992
msgid ""
"Enable ODR indicator globals to avoid false ODR violation reports in "
"partially sanitized programs at the cost of an increase in binary size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:996
msgid "Make the jump table addresses canonical in the symbol table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1000
msgid "Enable control flow integrity (CFI) checks for cross-DSO calls."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1004
msgid "Generalize pointers in CFI indirect call type signature checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1008
msgid ""
"Restrict sanitizer coverage instrumentation exclusively to modules and "
"functions that match the provided special case list, except the blocked ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1012
msgid ""
"Disable sanitizer coverage instrumentation for modules and functions that "
"match the provided special case list, even the allowed ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1016
msgid "Specify the type of coverage instrumentation for Sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1020
msgid ""
"Select the HWAddressSanitizer ABI to target (interceptor or platform, "
"default interceptor). This option is currently unused."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1024
msgid "Enable aliasing mode in HWAddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1028
msgid "Path to ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1036
#: ../../../ClangCommandLineReference.rst:1042
msgid "Enable origins tracking in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1046
msgid "Enable use-after-destroy detection in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1050
msgid "Set default MTE mode to 'sync' (default) or 'async'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1056
msgid "Enable recovery for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1060
msgid "Enable sanitizer statistics gathering."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1064
msgid "Enable atomic operations instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1068
msgid "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1072
msgid "Enable memory access instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1076
msgid "Enable trapping for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1080
msgid ""
"Strip (or keep only, if negative) a given number of path components when "
"emitting check metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1084
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious "
"behavior. See user manual for available checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1088
msgid "Enable function outlining (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1092
msgid "Generate local calls to out-of-line atomic operations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1098
msgid ""
"Print supported cpu models for the given target (if target is not specified, "
"it will print the supported cpus for the default target)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1102
msgid "Language standard to compile for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1105
msgid "Preprocessor flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1107
msgid "Flags controlling the behavior of the Clang preprocessor."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1111
msgid "Include comments in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1115
msgid "Include comments from within macros in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1121
msgid "Define <macro> to <value> (or 1 if <value> omitted)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1125
msgid "Show header includes and nesting depth"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1129
msgid "Disable linemarker output in -E mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1133
msgid "Undefine macro <macro>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1137
msgid "Pass the comma separated arguments in <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1141
msgid "Pass <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1144
msgid "Include path management"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1146
msgid "Flags controlling how ``#include``\\s are resolved to files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1150
msgid ""
"Add directory to include search path. For C++ inputs, if there are multiple -"
"I options, these directories are searched in the order they are given before "
"the standard system directories are searched. If the same directory is in "
"the SYSTEM include search paths, for example if also specified with -"
"isystem, the -I option will be ignored"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1159
msgid ""
"Restrict all prior -I flags to double-quoted inclusion and remove current "
"directory from include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1163
msgid "Tool used for detecting AMD GPU arch in the system."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1167
msgid "Ignore environment variables to detect CUDA installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1171
msgid "CUDA installation path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1175
msgid "Add directory to the C++ SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1179
msgid "Use the last modification time of <file> as the build session timestamp"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1183
msgid "Time when the current build session started"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1187
msgid ""
"Specify the mapping of module name to precompiled module file, or load a "
"module file if name is omitted."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1191
msgid "Specify the module cache path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1195
msgid "Disable validation of the diagnostic options when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1199
msgid ""
"Specify the interval (in seconds) after which a module file will be "
"considered unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1203
msgid ""
"Specify the interval (in seconds) between attempts to prune the module cache"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1207
msgid "Specify the module user build path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1211
msgid ""
"Don't verify input files for the modules if the module has been successfully "
"validated or loaded during this build session"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1215
msgid ""
"Validate the system headers that a module depends on when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1219
msgid "Specify the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1223
msgid ""
"HIP runtime installation path, used for finding HIP version and adding HIP "
"include path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1227
msgid "Add directory to AFTER include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1231
msgid "Add directory to SYSTEM framework search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1235
msgid ""
"Add directory to SYSTEM framework search path, absolute paths are relative "
"to -isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1239
msgid "Include macros from file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1243
msgid "Include file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1247
msgid "Include precompiled header file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1251
msgid "Set the -iwithprefix/-iwithprefixbefore prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1255
msgid "Add directory to QUOTE include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1259
msgid "Set the system root directory (usually /)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1263
msgid "Add directory to SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1267
msgid "Add directory to end of the SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1271
msgid ""
"Overlay the virtual filesystem described by file over the real file system"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1275
msgid "Set directory to SYSTEM include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1279
msgid "Set directory to include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1283
msgid ""
"Add directory to SYSTEM include search path, absolute paths are relative to -"
"isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1287
msgid "Path to libomptarget-amdgcn bitcode library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1291
msgid "Path to libomptarget-nvptx bitcode library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1295
msgid "Path to ptxas (used for compiling CUDA code)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1299
msgid ""
"ROCm installation path, used for finding and automatically linking required "
"bitcode libraries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1305
msgid "Use directory as the C++ standard library include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1309
msgid ""
"Treat all #include paths starting with <prefix> as including a system header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1312
msgid "Dependency file generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1314
msgid ""
"Flags controlling generation of a dependency file for ``make``-like build "
"systems."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1319
msgid "Like -MD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1323
msgid "Write a depfile containing user and system headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1327
msgid "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1331
msgid "Add missing headers to depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1335
msgid "Write a compilation database entry per input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1339
msgid "Like -MMD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1343
msgid "Write a depfile containing user headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1347
msgid "Create phony target for each dependency (other than main file)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1351
msgid "Specify name of main file output to quote in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1355
msgid "Specify name of main file output in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1359
msgid "Use NMake/Jom format for the depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1362
msgid "Dumping preprocessor state"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1364
msgid ""
"Flags allowing the state of the preprocessor to be dumped in various ways."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1374
msgid "Print macro definitions in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1378
msgid "Print include directives in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1382
msgid "Print macro definitions in -E mode instead of normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1385
msgid "Diagnostic flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1387
msgid ""
"Flags controlling which warnings, errors, and remarks Clang will generate. "
"See the :doc:`full list of warning and remark flags <DiagnosticsReference>`."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1392
msgid "Enable the specified remark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1396
msgid ""
"Report transformation analysis from optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1400
msgid ""
"Report missed transformations by optimization passes whose name matches the "
"given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1404
msgid ""
"Report transformations performed by optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1408
msgid "Enable the specified warning"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1412
msgid "Enable warnings for deprecated constructs and define \\_\\_DEPRECATED"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1419
msgid "Target-independent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1428
msgid "Emit an address-significance table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1438
msgid "N must be a power of two. Align loops to the boundary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1444
msgid "Enable C++17 aligned allocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1448
msgid "Treat editor placeholders as valid source code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1456
msgid ""
"Source-level compatibility for Altivec vectors (for PowerPC targets). This "
"includes results of vector comparison (scalar for 'xl', vector for 'gcc') as "
"well as behavior when initializing with a scalar (splatting for 'xl', "
"element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for "
"'vector bool/vector pixel' and as 'xl' for other types. Current default is "
"'mixed'. <arg> must be 'mixed', 'gcc' or 'xl'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1460
msgid "Use ANSI escape codes for diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1464
msgid "Use Apple's kernel extensions ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1468
msgid "Force linking the clang builtins runtime library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1472
msgid "Enable Apple gcc-compatible #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1476
msgid "Restrict code to those available for App Extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1480
msgid ""
"Allow certain math function calls to be replaced with an approximately "
"equivalent calculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1498
msgid "Enable EH Asynchronous exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1506
msgid ""
"Generate labels for each basic block or place each basic block or a subset "
"of basic blocks in its own section. <arg> must be 'all', 'labels', 'none' or "
"'list='."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1510
msgid ""
"Produced object files can use all ELF features supported by this binutils "
"version and newer. If -fno-integrated-as is specified, the generated "
"assembly will consider GNU as support. 'none' means that all ELF features "
"can be used, regardless of binutils support. Defaults to 2.26."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1514
msgid "Enable the 'blocks' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1520
msgid "Accept non-standard constructs supported by the Borland compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1528
msgid "Load the clang builtins module map file."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1538
msgid ""
"Instrument control-flow architecture protection. <arg> must be 'return', "
"'branch', 'full' or 'none'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1542
msgid ""
"<arg> must be 'unspecified', 'standalone', 'objc', 'swift', 'swift-5.0', "
"'swift-4.2' or 'swift-4.1'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1546
msgid "Enable C++ builtin type char8\\_t"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1552
msgid "Enable colors in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1556
msgid "Place uninitialized global variables in a common block"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1572
msgid "Assume functions may be convergent"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1576
msgid "Enable support for the C++ Coroutines TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1580
msgid "The compilation directory to embed in the coverage mapping."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1584
msgid "Generate coverage mapping to enable code coverage analysis"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1588
msgid "remap file source paths in coverage mapping"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1594
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1600
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into <directory>/default.profraw (overridden by LLVM\\_PROFILE\\_FILE env "
"var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1604
msgid "Use approximate transcendental functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1608
msgid "Use 32-bit pointers for accessing const/local/shared address spaces"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1612
msgid "Enable C++ exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1616
msgid "Enable modules for C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1620
msgid "Place each data in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1624
msgid "The compilation directory to embed in the debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1628
msgid ""
"Default DWARF version to use, if a -g option caused DWARF debug info to be "
"produced"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1632
msgid "Emit extra debug info to make sample profile more accurate"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1636
msgid "Emit macro debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1644
msgid "remap file source paths in debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1648
msgid "Use DWARF base address selection entries in .debug\\_ranges"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1652
msgid "Place debug types in their own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1656
msgid "Parse templated function definitions at the end of the translation unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1660
msgid "Treat usage of null pointers as undefined behavior (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1666
msgid "Print absolute paths in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1674
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this profile count. Use 'auto' to apply the threshold from profile summary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1678
msgid ""
"Prevent misexpect diagnostics from being output if the profile counts are "
"within N% of the expected."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1682
msgid "Enable profile hotness information in diagnostic line"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1686
msgid "Display include stacks for diagnostic notes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1690
msgid "Print option name with mappable diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1694
msgid "Print a template comparison tree for differing templates"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1698
msgid ""
"Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:"
"%:' (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1702
msgid "Don't use GOT indirection to reference external data symbols"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1708
msgid "Allow '$' in identifiers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1712
msgid "Enable '\\[\\[\\]\\]' attributes in all C and C++ language modes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1718
msgid "Use DWARF style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1726
msgid "Do not emit  debug info for defined but unused types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1730
msgid ""
"Embed LLVM bitcode. <option> must be 'off', 'all', 'bitcode' or 'marker'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1734
msgid "Embed Offloading device-side binary into host object file as a section."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1738
msgid "Emit all declarations, even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1742
msgid ""
"When to emit DWARF unwind (EH frame) info. <arg> must be 'always', 'no-"
"compact-unwind' or 'default'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1746
msgid "Use emutls functions to access thread\\_local variables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1750
msgid "Enable matrix data type and related builtin functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1760
msgid "Enable support for exception handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1766
msgid ""
"Control whether unstable and experimental library features are enabled. This "
"option enables various library features that are either experimental (also "
"known as TSes), or have been but are not stable yet in the selected Standard "
"Library implementation. It is not recommended to use this option in "
"production code, since neither ABI nor API stability are guaranteed. This is "
"intended to provide a preview of features that will ship in the future for "
"experimentation purposes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1770
msgid "Enable the experimental new constant interpreter"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1776
msgid ""
"Controls how scalar integer arguments are extended in calls to unprototyped "
"and varargs functions. <arg> must be '32' or '64'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1780
msgid "Allow aggressive, lossy floating-point optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1784
msgid ""
"The compilation directory to embed in the debug info and coverage mapping."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1788
msgid ""
"remap file source paths in debug info, predefined preprocessor macros and "
"\\_\\_builtin\\_FILE(). Implies -ffile-reproducible."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1792
msgid ""
"Use the target's platform-specific path separator character when expanding "
"the \\_\\_FILE\\_\\_ macro"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1796
msgid "Assume all loops are finite."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1802
msgid "Enable fixed point types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1808
msgid "Always emit a debug frame section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1812
msgid "Emits more virtual tables to improve devirtualization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1816
msgid "Enable support for int128\\_t type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1820
msgid ""
"Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding "
"pragmas) \\| on (only fuses in the same statement unless dictated by "
"pragmas) \\| off (never fuses) \\| fast-honor-pragmas (fuses across "
"statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-"
"honor-pragmas' for HIP, and 'on' otherwise. <arg> must be 'fast', 'on', "
"'off' or 'fast-honor-pragmas'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1824
msgid ""
"Specifies the evaluation method to use for floating-point arithmetic. <arg> "
"must be 'source', 'double' or 'extended'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1828
msgid ""
"Specifies the exception behavior of floating-point operations. <arg> must be "
"'ignore', 'maytrap' or 'strict'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1832
msgid "Controls the semantics of floating-point calculations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1836
msgid "Assert that the compilation takes place in a freestanding environment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1840
msgid "Place each function in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1846
msgid "Allow GNU-extension keywords regardless of language standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1850
msgid "Generate output compatible with the standard GNU Objective-C runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1854
msgid "Use the gnu89 inline semantics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1858
msgid ""
"Sets various macros to claim compatibility with the given GCC version "
"(default is 4.2.1)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1862
msgid "Allow device side init function in HIP (experimental)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1866
msgid "Defer host/device related diagnostic messages for CUDA/HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1870
msgid ""
"Generate relocatable device code, also known as separate compilation mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1874
msgid "Enable sanitizer for AMDGPU target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1878
msgid ""
"Specify that single precision floating-point divide and sqrt used in the "
"program source are correctly rounded (HIP device compilation only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1882
msgid "Specify that kernel argument names are preserved (HIP only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1886
msgid "Use new kernel launching API for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1896
msgid "Enable support for ignoring exception handling constructs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1900
msgid "Implicitly search the file system for module map files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1906
msgid "Specify the default character set for source files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1910
msgid ""
"Instrument function entry only, after inlining, without arguments to the "
"instrumentation call"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1914
msgid "Generate calls to instrument function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1918
msgid "Like -finstrument-functions, but insert the calls after inlining"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1922
msgid "Enable the integrated assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1926
msgid "Run cc1 in-process"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1930
msgid "Use internal machine object code emitter."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1934
msgid "Enable just-my-code debugging"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1938
msgid "Use jump tables for lowering switches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1942
msgid "Keep static const variables if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1946
msgid ""
"Enable implicit vector bit-casts. <arg> must be 'none', 'integer' or 'all'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1952
msgid ""
"Controls the backend parallelism of -flto=thin (default of 0 means the "
"number of threads will be derived from the number of CPUs detected)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1956
msgid "Set LTO mode. <arg> must be 'thin' or 'full'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1962
msgid ""
"remap file source paths in predefined preprocessor macros and "
"\\_\\_builtin\\_FILE(). Implies -ffile-reproducible."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1966
msgid "Require math functions to indicate errors by setting errno"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1970
msgid "Max total number of preprocessed tokens for -Wmax-tokens."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1974
msgid ""
"Specify the maximum alignment to enforce on pointers lacking an explicit "
"alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1978
msgid "Enable heap memory profiling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1984
msgid "Enable heap memory profiling and dump results into <directory>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1988
msgid "Allow merging of constants"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1992
msgid "Format message diagnostics so that they fit within N columns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1996
msgid "Minimize whitespace when emitting preprocessor output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2002
msgid "Build a C++20 Header Unit from a header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2008
msgid ""
"Build a C++20 Header Unit from a header that should be found in the user "
"(fmodule-header=user) or system (fmodule-header=system) search path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2012
msgid "Load this module map file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2016
msgid "Specify the name of the module to build"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2020
msgid "Enable the 'modules' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2024
msgid "Require declaration of modules used within a module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2028
msgid ""
"Ignore the definition of the given macro when building and loading modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2032
msgid "Search even non-imported modules to resolve references"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2036
msgid "Like -fmodules-decluse but requires all headers to be in modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2040
msgid "Enable support for the C++ Modules TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2044
msgid "Validate PCM input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2048
msgid "Enable full Microsoft Visual C++ compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2052
msgid ""
"Dot-separated value representing the Microsoft compiler version number to "
"report in \\_MSC\\_VER (0 = don't define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2056
msgid "Accept some non-standard constructs supported by the Microsoft compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2060
msgid "Ensure that all functions can be hotpatched at runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2064
msgid "<arg> must be 'single', 'multiple' or 'virtual'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2070
msgid ""
"Microsoft compiler version number to report in \\_MSC\\_VER (0 = don't "
"define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2080
msgid ""
"Specifies the largest alignment guaranteed by '::operator new(size\\_t)'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2084
msgid ""
"Enable treating throwing global C++ operator new as always returning valid "
"memory (annotates with \\_\\_attribute\\_\\_((returns\\_nonnull)) and "
"throw()). This is detectable in source."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2090
msgid "Disable implicit builtin knowledge of a specific function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2094
msgid "Do not elide types when printing diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2098
msgid "Disable support for K&R C function declarations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2106
msgid ""
"Directly create compilation output files. This may lead to incorrect "
"incremental builds if the compiler crashes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2122
msgid "Synthesize retain and release calls for Objective-C pointers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2126
msgid "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2132
msgid "Ignore attribute objc\\_direct so that direct methods can be tested"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2136
msgid "Fully encode c++ class template specialization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2140
msgid "Enable Objective-C exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2154
msgid "Specify the target Objective-C runtime kind and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2160
msgid "Enable ARC-style weak references in Objective-C"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2164
msgid "Set LTO mode for offload compilation. <arg> must be 'thin' or 'full'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2170
msgid "Parse OpenMP pragmas and generate parallel code."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2174
msgid "Enable all Clang extensions for OpenMP directives and clauses"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2178
msgid "Set rpath on OpenMP executables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2182
msgid "Use the new driver for OpenMP offloading."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2186
msgid "Do not create a host fallback if offloading to the device fails."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2190
msgid "Emit OpenMP code only for SIMD-based constructs."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2194
msgid "Enable debugging in the OpenMP offloading device RTL"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2198
msgid ""
"Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default "
"value is 50."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2210
msgid ""
"Specify the output name of the file containing the optimization remarks. "
"Implies -fsave-optimization-record. On Darwin platforms, this cannot be used "
"with multiple -arch <arch> options."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2214
msgid ""
"Only include passes which match a specified regular expression in the "
"generated optimization record (by default, include all passes)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2220
msgid ""
"Generate instrumented code to collect order file into default.profraw file "
"(overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2230
msgid "Specify the default maximum struct packing alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2234
msgid "Recognize and construct Pascal-style string literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2238
msgid ""
"Load pass plugin from a dynamic shared object file (only with new pass "
"manager)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2242
msgid "Generate M NOPs before function entry and N-M NOPs after function entry"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2246
msgid "Override the default ABI to return all structs on the stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2250
msgid ""
"Generate code for uses of this PCH that assumes an explicit object file will "
"be built for the PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2254
msgid ""
"Generate debug info for types in an object file built from this PCH and do "
"not generate them elsewhere"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2258
msgid "Instantiate templates already while building a PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2264
msgid "Validate PCH input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2274
msgid "Load the named plugin (dynamic shared object)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2278
msgid "Look up implicit modules in the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2284
msgid "Print subprocess statistics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2290
msgid "Save subprocess statistics to the given file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2298
msgid ""
"Instrument only functions from files where names don't match all the regexes "
"separated by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2302
msgid ""
"Instrument only functions from files where names match any regex separated "
"by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2306
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2312
msgid ""
"Generate instrumented code to collect execution counts into <directory>/"
"default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2316
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"file (overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2322
msgid ""
"Generate instrumented code to collect execution counts into <file> "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2330
msgid "Use instrumentation data for profile-guided optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2334
msgid "Filename defining the list of functions/files to instrument"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2338
msgid ""
"Partition functions into <N> groups and select only functions in group <i> "
"to be instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2342
msgid ""
"Use the remappings described in <file> to match the profile data against "
"names in the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2349
msgid "Specifies that the sample profile is accurate. If the sample"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2347
msgid ""
"profile is accurate, callsites without profile samples are marked as cold. "
"Otherwise, treat callsites without profile samples as if we have no profile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2357
msgid "Enable sample-based profile guided optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2361
msgid ""
"Set update method of profile counters. <method> must be 'atomic', 'prefer-"
"atomic' or 'single'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2367
msgid ""
"Use instrumentation data for profile-guided optimization. If pathname is a "
"directory, it reads from <pathname>/default.profdata. Otherwise, it reads "
"from file <pathname>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2371
msgid ""
"Determines whether the optimizer honors parentheses when floating-point "
"expressions are evaluated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2375
msgid "Emit pseudo probes for sample profiling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2379
msgid "Allow division operations to be reassociated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2383
msgid "Override the default ABI to return small structs in registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2387
msgid "Use atexit or \\_\\_cxa\\_atexit to register global destructors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2391
msgid "Enable C++17 relaxed template template argument matching"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2395
msgid "Turn on loop reroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2407
msgid "Generate read-only position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2417
msgid "Generate read-write position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2421
msgid "Enable detection of uninitialized parameters and return values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2425
msgid "Generate a YAML optimization record file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2431
msgid "Generate an optimization record file in a specific format"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2435
msgid "Use SEH style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2441
msgid ""
"Allocate to an enum type only as many bytes as it needs for the declared "
"range of possible values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2445
msgid "Force wchar\\_t to be a short unsigned int"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2451
msgid ""
"Which overload candidates to show when overload resolution fails. Defaults "
"to 'all'. <arg> must be 'best' or 'all'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2461
msgid "char is signed"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2467
msgid "Enable C++14 sized global deallocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2471
msgid "Use SjLj style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2475
msgid "Enable the superword-level parallelism vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2483
msgid ""
"Provide minimal debug info in the object/executable to facilitate online "
"symbolication/stack traces in the absence of .dwo/.dwp files when using "
"Split DWARF"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2487
msgid "Enables splitting of the LTO unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2491
msgid "Enable late function splitting using profile information (x86 ELF)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2495
msgid "Use segmented stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2499
msgid "Enable stack clash protection"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2503
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"This uses a loose heuristic which considers functions vulnerable if they "
"contain a char (or 8bit integer) array or constant sized calls to alloca , "
"which are of greater size than ssp-buffer-size (default: 8 bytes). All "
"variable sized calls to alloca are considered vulnerable. A function with a "
"stack protector has a guard value added to the stack frame that is checked "
"on function exit. The guard value must be positioned in the stack frame such "
"that a buffer overflow from a vulnerable variable will overwrite the guard "
"value before overwriting the function's return address. The reference stack "
"guard value is stored in a global variable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2507
msgid "Enable stack protectors for all functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2511
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"Compared to -fstack-protector, this uses a stronger heuristic that includes "
"functions containing arrays of any size (and any type), as well as any calls "
"to alloca or the taking of an address from a local variable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2515
msgid "Emit section containing metadata on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2519
msgid "Emit .su file containing information on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2523
msgid "Emit full debug info for all types used by the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2529
msgid ""
"Enable optimizations based on the strict definition of an enum's value range"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2533
msgid "Assume that overflowing float-to-int casts are undefined (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2541
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2547
msgid ""
"Control emission of Swift async extended frame info. <option> must be "
"'auto', 'always' or 'never'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2563
msgid "Write minimized bitcode to <file> for the ThinLTO thin link only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2567
msgid "Perform ThinLTO importing using provided function summary index"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2577
msgid ""
"(For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': "
"one report for each pass invocation. <arg> must be 'per-pass' or 'per-pass-"
"run'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2581
msgid ""
"Turn on time profiler. Generates JSON file based on output filename. Results "
"can be analyzed with chrome://tracing or `Speedscope App <https://www."
"speedscope.app>`_ for flamegraph visualization."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2587
msgid "Minimum time granularity (in microseconds) traced by time profiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2591
msgid ""
"<arg> must be 'global-dynamic', 'local-dynamic', 'initial-exec' or 'local-"
"exec'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2595
msgid "Issue call to specified function rather than a trap instruction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2601
msgid "Trap on integer overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2609
msgid "Specify the function to be called on overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2613
msgid "Process trigraph sequences"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2617
msgid ""
"Stop initializing trivial automatic stack variables after the specified "
"number of instances"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2621
msgid ""
"Initialize trivial automatic stack variables. Defaults to 'uninitialized'. "
"<arg> must be 'uninitialized', 'zero' or 'pattern'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2625
msgid "Use unique names for basic block sections (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2629
msgid ""
"Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the "
"module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2635
msgid "Turn on loop unroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2651
msgid ""
"Control which arrays are considered as flexible arrays members. <arg> can be "
"1 (array of size 0, 1 and undefined are considered) or 2 (array of size 0 "
"and undefined are considered)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2659
msgid "Use #line in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2663
msgid ""
"Compute and store the hash of input files used to build an AST. Files with "
"mismatching mtime's are considered valid if both contents is identical"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2667
msgid ""
"Use the given vector functions library. <arg> must be 'Accelerate', "
"'libmvec', 'MASSV', 'SVML', 'Darwin_libsystem_m' or 'none'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2671
msgid "Enable the loop vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2675
msgid "Generate verbose assembly output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2679
msgid ""
"Enables dead virtual function elimination optimization. Requires -flto=full"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2683
msgid ""
"The visibility for dllexport definitions \\[-fvisibility-from-"
"dllstorageclass\\]. <arg> must be 'default', 'hidden', 'internal' or "
"'protected'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2687
msgid ""
"The visibility for dllimport external declarations \\[-fvisibility-from-"
"dllstorageclass\\]. <arg> must be 'default', 'hidden', 'internal' or "
"'protected'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2691
msgid ""
"The visibility for external declarations without an explicit DLL "
"dllstorageclass \\[-fvisibility-from-dllstorageclass\\]. <arg> must be "
"'default', 'hidden', 'internal' or 'protected'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2695
msgid ""
"Set the visibility of symbols in the generated code from their DLL storage "
"class"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2699
msgid "Give global C++ operator new and delete declarations hidden visibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2703
msgid "Give inline C++ member functions hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2707
msgid ""
"When -fvisibility-inlines-hidden is enabled, static variables in inline C++ "
"member functions will also be given hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2711
msgid ""
"Give global types 'default' visibility and global functions and variables "
"'hidden' visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2715
msgid ""
"The visibility for definitions without an explicit DLL export class \\[-"
"fvisibility-from-dllstorageclass\\]. <arg> must be 'default', 'hidden', "
"'internal' or 'protected'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2719
msgid ""
"Set the default symbol visibility for all global declarations. <arg> must be "
"'hidden' or 'default'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2723
msgid "Use WebAssembly style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2727
msgid "Enables whole-program vtable optimization. Requires -flto"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2731
msgid "Treat signed integer overflow as two's complement"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2735
msgid "Store string literals as writable data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2739
msgid "Enable IBM XL #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2743
msgid ""
"Always emit \\_\\_xray\\_customevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2747
msgid ""
"Always emit \\_\\_xray\\_typedevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2751
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'always "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2755
msgid ""
"Filename defining the list of functions/types for imbuing XRay attributes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2759
msgid "Only instrument 1 of N groups"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2765
msgid ""
"Don't instrument functions with loops unless they also meet the minimum "
"function size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2773
msgid "Sets the minimum function size to instrument with XRay"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2777
msgid "Generate XRay instrumentation sleds on function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2781
msgid ""
"Select which XRay instrumentation points to emit. Options: all, none, "
"function-entry, function-exit, function, custom. Default is 'all'.  "
"'function' includes both 'function-entry' and 'function-exit'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2785
msgid "Tells clang to add the link dependencies for XRay."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2789
msgid "List of modes to link in by default into XRay instrumented binaries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2793
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'never "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2797
msgid ""
"When using -fxray-function-groups, select which group of functions to "
"instrument. Valid range is 0 to fxray-function-groups - 1"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2801
msgid ""
"Clear call-used registers upon function return (AArch64/x86 only). <arg> "
"must be 'skip', 'used-gpr-arg', 'used-gpr', 'used-arg', 'used', 'all-gpr-"
"arg', 'all-gpr', 'all-arg' or 'all'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2807
msgid "Enable System z vector language extension"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2811
msgid "Bundle output files of HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2815
msgid "Use the new driver for offloading compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2819
msgid "Warn on language extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2824
msgid "OpenCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2827
msgid "OpenCL only. Allow denormals to be flushed to zero."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2831
msgid ""
"OpenCL only. Enable or disable OpenCL extensions/optional features. The "
"argument is a comma-separated sequence of one or more extension names, each "
"prefixed by '+' or '-'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2835
msgid ""
"OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, "
"and defines \\_\\_FAST\\_RELAXED\\_MATH\\_\\_."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2839
msgid ""
"OpenCL only. Allow floating-point optimizations that assume arguments and "
"results are not NaNs or +-Inf."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2843
msgid ""
"OpenCL only. Specify that single precision floating-point divide and sqrt "
"used in the program source are correctly rounded."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2847
msgid "OpenCL only. Generate kernel argument metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2851
msgid ""
"OpenCL only. Allow use of less precise MAD computations in the generated "
"binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2855
msgid ""
"OpenCL only. Allow use of less precise no signed zeros computations in the "
"generated binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2859
msgid ""
"OpenCL only. Disables all standard includes containing non-native compiler "
"types and functions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2863
msgid ""
"OpenCL only. This option disables all optimizations. By default "
"optimizations are enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2867
msgid ""
"OpenCL only. Treat double precision floating-point constant as single "
"precision constant."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2871
msgid ""
"OpenCL language standard to compile for. <arg> must be 'cl', 'CL', 'cl1.0', "
"'CL1.0', 'cl1.1', 'CL1.1', 'cl1.2', 'CL1.2', 'cl2.0', 'CL2.0', 'cl3.0', "
"'CL3.0', 'clc++', 'CLC++', 'clc++1.0', 'CLC++1.0', 'clc++2021' or 'CLC+"
"+2021'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2875
msgid "OpenCL only. This option is added for compatibility with OpenCL 1.0."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2879
msgid ""
"OpenCL only. Defines that the global work-size be a multiple of the work-"
"group size specified to clEnqueueNDRangeKernel"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2883
msgid ""
"OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-"
"signed-zeros and -cl-mad-enable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2886
msgid "SYCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2889
msgid "Enables SYCL kernels compilation for device"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2893
msgid ""
"SYCL language standard to compile for. <arg> must be '2020', '2017', '121', "
"'1.2.1' or 'sycl-1.2.1'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2896
msgid "Target-dependent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2899
msgid ""
"Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2903
msgid "Reserve the x1 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2907
msgid "Reserve the x10 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2911
msgid "Reserve the x11 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2915
msgid "Reserve the x12 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2919
msgid "Reserve the x13 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2923
msgid "Reserve the x14 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2927
msgid "Reserve the x15 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2931
msgid "Reserve the x16 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2935
msgid "Reserve the x17 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2939
msgid "Reserve the x18 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2943
msgid "Reserve the x19 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2947
msgid "Reserve the x2 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2951
msgid "Reserve the x20 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2955
msgid "Reserve the x21 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2959
msgid "Reserve the x22 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2963
msgid "Reserve the x23 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2967
msgid "Reserve the x24 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2971
msgid "Reserve the x25 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2975
msgid "Reserve the x26 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2979
msgid "Reserve the x27 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2983
msgid "Reserve the x28 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2987
msgid "Reserve the x29 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2991
msgid "Reserve the x3 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2995
msgid "Reserve the x30 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2999
msgid "Reserve the x31 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3003
msgid "Reserve the x4 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3007
msgid "Reserve the x5 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3011
msgid "Reserve the x6 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3015
msgid "Reserve the x7 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3019
msgid "Reserve the x8 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3023
msgid "Reserve the x9 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3027
msgid "Set Fuchsia API level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3031
msgid "<arg> must be 'att' or 'intel'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3045
msgid ""
"Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector "
"registers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3051
msgid ""
"Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and "
"nonvolatile vector registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3055
msgid "Return all structs in memory (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3059
msgid "Specify the boundary's size to align branches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3063
msgid "Specify types of branches to align"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3067
msgid "Align doubles to two words in structs (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3071
msgid ""
"Sets the IEEE bit in the expected default floating point  mode register. "
"Floating point opcodes that support exception flag gathering quiet and "
"propagate signaling NaN inputs per IEEE 754-2008. This option changes the "
"ABI. (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3079
msgid "Link stack frames through backchain on System Z"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3083
msgid "Enforce targets of indirect branches and function returns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3087
msgid "Align selected branches (fused, jcc, jmp) within 32-byte boundary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3093
msgid "Legacy option to specify code object ABI V3 (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3097
msgid ""
"Specify code object ABI version. Defaults to 4. (AMDGPU only). <arg> must be "
"'none', '2', '3', '4' or '5'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3107
msgid "Allow use of CRC instructions (ARM/Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3113
msgid ""
"Mapping between default visibility and export. <arg> must be 'none', "
"'explicit' or 'all'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3119
msgid "Force double to be <n> bits. <n must be '32' or '64'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3125
msgid ""
"Set EABI type. Default depends on triple). <arg> must be 'default', '4', '5' "
"or 'gnu'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3129
msgid "Enable use of experimental RISC-V extensions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3133
msgid "Insert calls to fentry at function entry (x86/SystemZ only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3137
msgid "<arg> must be 'soft', 'softfp' or 'hard'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3145
msgid ""
"Generate code which only uses the general purpose registers (AArch64/x86 "
"only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3149
msgid "Enable merging of globals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3159
msgid "Use Intel MCU ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3163
msgid "Optimize fcf-protection=branch/full (requires LTO)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3167
msgid ""
"Not emit the visibility attribute for asm in AIX OS or give all symbols "
"'unspecified' visibility in XCOFF object file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3175
msgid ""
"(integrated-as) Emit an object file which can be used with an incremental "
"linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3183
msgid ""
"Generate branches with extended addressability, usually via indirect jumps."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3187
msgid "Enable only control-flow mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3191
msgid "Enable all mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3195
msgid "Set Mac OS X deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3201
msgid ""
"Set the default structure layout to be compatible with the Microsoft "
"compiler standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3205
msgid ""
"Generate mcount/\\_\\_fentry\\_\\_ calls as nops. To activate they need to "
"be patched in."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3209
msgid "Omit frame pointer setup for leaf functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3215
msgid "Use packed stack layout (SystemZ only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3219
msgid "Specify maximum number of prefixes to use for padding"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3223
msgid ""
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' "
"which allows target specific decisions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3227
msgid "Enable hexagon-qdsp6 backward compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3237
msgid ""
"Generate a \\_\\_mcount\\_loc section entry for each \\_\\_fentry\\_\\_ call."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3245
msgid "Enable linker relaxation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3249
msgid "(integrated-as) Relax all machine instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3255
msgid "Make StdCall calling convention the default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3259
msgid ""
"Enable speculative execution side effect suppression (SESES). Includes LVI "
"control flow integrity mitigations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3263
msgid ""
"Select return address signing scope. <arg> must be 'none', 'all' or 'non-"
"leaf'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3269
msgid "Skip setting up RAX register when passing variable arguments (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3273
msgid "Use software floating point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3279
msgid "Set the stack alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3283
msgid "Enable stack probes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3287
msgid "Set the stack probe size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3291
msgid "Use the given offset for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3295
msgid "Use the given reg for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3299
msgid "Use the given symbol for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3303
msgid ""
"Use the given guard (global, tls) for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3307
msgid "Force realign the stack at entry to every function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3311
msgid "Return small structs in registers (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3315
msgid "Set the deployment target to be the specified OS and OS version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3319
msgid ""
"The thread model to use. Defaults to 'posix'). <arg> must be 'posix' or "
"'single'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3327
msgid "Enable direct TLS access through segment registers (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3331
msgid ""
"Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) "
"\\| 24 (for 16MB, default) \\| 32 (for 4GB) \\| 48 (for 256TB, needs -"
"mcmodel=large)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3337
msgid ""
"Only supported on X86, RISC-V and SystemZ. Otherwise accepted for "
"compatibility with GCC."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3345
msgid "Enable unsafe floating point atomic instructions (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3355
msgid "Specify wavefront size 64 mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3362
msgid "AARCH64"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3365
msgid "Make the x10 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3369
msgid "Make the x11 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3373
msgid "Make the x12 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3377
msgid "Make the x13 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3381
msgid "Make the x14 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3385
msgid "Make the x15 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3389
msgid "Make the x18 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3393
msgid "Make the x8 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3397
msgid "Make the x9 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3401
msgid "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3405
msgid "Add .note.gnu.property with BTI to assembly files (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3409
msgid ""
"Specify the size in bits of an SVE vector register. Defaults to the vector "
"length agnostic value of \"scalable\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3413
msgid ""
"Specify the vscale maximum. Defaults to the vector length agnostic value of "
"\"0\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3417
msgid "Specify the vscale minimum. Defaults to \"1\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3420
msgid "AMDGPU"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3423
msgid "Specify CU wavefront execution mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3427
msgid "Enable threadgroup split execution mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3430
msgid "ARM"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3433
msgid ""
"Follows the AAPCS standard that all volatile bit-field write generates at "
"least one load. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3437
msgid ""
"Follow the AAPCS standard requirement stating that volatile bit-field width "
"is dictated by the field container type. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3441
msgid "Reserve the r9 register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3445
msgid "Allow use of CMSE (Armv8-M Security Extensions)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3449
msgid "Disallow generation of data access to code sections (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3453
msgid "Work around VLLDM erratum CVE-2021-35465 (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3457
msgid "Work around Cortex-A57 Erratum 1742098 (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3461
msgid ""
"Select the frame chain model used to emit frame records (Arm only). <arg> "
"must be 'none', 'aapcs' or 'aapcs+leaf'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3465
msgid ""
"Do not add a BTI instruction after a setjmp or other return-twice construct "
"(Arm/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3469
msgid "Disallow use of movt/movw pairs (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3473
msgid ""
"Disallow converting instructions with negative immediates to their negation "
"or inversion."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3477
msgid "Disallow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3481
msgid "Disallow generation of complex IT blocks."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3485
msgid ""
"Thread pointer access method (AArch32/AArch64 only). <arg> must be 'soft', "
"'cp15', 'el0', 'el1', 'el2' or 'el3'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3489
msgid "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3492
#: ../../../ClangCommandLineReference.rst:3516
msgid "Hexagon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3495
msgid "Enable Hexagon HVX IEEE floating-point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3501
msgid "Enable generation of memop instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3505
msgid "Enable generation of new-value jumps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3509
msgid "Enable generation of new-value stores"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3513
msgid "Enable generation of instruction packets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3519
#: ../../../ClangCommandLineReference.rst:3533
msgid "Enable Hexagon Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3523
msgid "Set Hexagon Vector Length. <arg> must be '64B' or '128B'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3527
msgid "Enable Hexagon HVX QFloat instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3536
msgid "M68k"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3539
msgid "Reserve the a0 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3543
msgid "Reserve the a1 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3547
msgid "Reserve the a2 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3551
msgid "Reserve the a3 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3555
msgid "Reserve the a4 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3559
msgid "Reserve the a5 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3563
msgid "Reserve the a6 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3567
msgid "Reserve the d0 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3571
msgid "Reserve the d1 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3575
msgid "Reserve the d2 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3579
msgid "Reserve the d3 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3583
msgid "Reserve the d4 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3587
msgid "Reserve the d5 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3591
msgid "Reserve the d6 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3595
msgid "Reserve the d7 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3610
msgid "MIPS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3613
msgid "Enable SVR4-style position-independent code (Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3629
msgid ""
"Place constants in the .rodata section instead of the .sdata section even if "
"they meet the -G <size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3633
msgid ""
"Assume that externally defined data is in the small data if it meets the -G "
"<size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3639
msgid "Use 32-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3643
msgid "Use 64-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3649
msgid ""
"Use GP relative accesses for symbols known to be in a small data section "
"(MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3653
msgid "Change indirect jump instructions to inhibit speculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3661
msgid "Extend the -G behaviour to object local data (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3665
msgid ""
"Enable the generation of 4-operand madd.s, madd.d and related instructions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3671
msgid "Enable MSA ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3675
msgid "Enable MT ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3688
msgid "PowerPC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3742
msgid "WebAssembly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3768
msgid "WebAssembly Driver"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3771
msgid ""
"Execution model (WebAssembly only). <arg> must be 'command' or 'reactor'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3774
msgid "X86"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3960
msgid "RISCV"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3963
msgid "Enable using library calls for save and restore"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3966
msgid "Long double flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3967
msgid "Selects the long double implementation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3971
msgid "Force long double to be 128 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3975
msgid "Force long double to be 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3979
msgid "Force long double to be 80 bits, padded to 128 bits for storage"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3982
msgid "Optimization level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3984
msgid "Flags controlling how much optimization should be performed."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3991
msgid "Debug information generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3993
msgid ""
"Flags controlling how much and what kind of debug information should be "
"generated."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3997
msgid "Kind and level of debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4000
msgid "Generate source-level debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4004
msgid "Generate source-level debug information with the default dwarf version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4008
msgid "Generate source-level debug information with dwarf version 2"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4012
msgid "Generate source-level debug information with dwarf version 3"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4016
msgid "Generate source-level debug information with dwarf version 4"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4020
msgid "Generate source-level debug information with dwarf version 5"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4024
msgid ""
"Enables DWARF32 format for ELF binaries, if debug information emission is "
"enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4028
msgid ""
"Enables DWARF64 format for ELF binaries, if debug information emission is "
"enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4037
msgid "Debug level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4054
msgid "Emit debug line info directives only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4058
msgid "Emit debug line number tables only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4062
msgid ""
"Generate debug info with external references to clang modules or precompiled "
"headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4065
msgid "Debugger to tune debug information for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4075
msgid "Debug information flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4082
msgid "Embed source text in DWARF debug sections"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4098
msgid "Set DWARF fission mode. <arg> must be 'split' or 'single'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4104
msgid "DWARF debug sections compression type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4107
msgid "Static analyzer flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4109
msgid "Flags controlling the behavior of the Clang Static Analyzer."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4113
msgid "Pass <arg> to the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4116
msgid "Fortran compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4118
msgid ""
"Flags that will be passed onto the ``gfortran`` compiler when Clang is given "
"a Fortran input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4232
msgid "Linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4233
msgid "Flags that are passed on to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4237
msgid "Add directory to library search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4243
msgid "Specify <script> as linker script"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4247
msgid "Set starting address of BSS to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4251
msgid "Set starting address of DATA to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4255
msgid "Set starting address of TEXT to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4259
msgid "Pass the comma separated arguments in <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4265
msgid "Pass <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4269
msgid "Pass <arg> to the offload linkers or the ones idenfied by -<triple>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4277
msgid "Pass -b <arg> to the linker on AIX (only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4287
msgid "HIP device library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4291
msgid "path to a pass plugin for HIP to SPIR-V passes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4305
msgid "Use the new offloading linker to perform the link job."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4315
msgid "ROCm device library path. Alternative to rocm-path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4335
msgid "undef all system defines"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4341
msgid "Pass -z <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4344
msgid "<clang-dxc options>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4345
msgid "dxc compatibility options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4351
msgid ""
"Set target profile. <profile> must be 'ps_6_0', ' ps_6_1', ' ps_6_2', ' "
"ps_6_3', ' ps_6_4', ' ps_6_5', ' ps_6_6', ' ps_6_7', 'vs_6_0', ' vs_6_1', ' "
"vs_6_2', ' vs_6_3', ' vs_6_4', ' vs_6_5', ' vs_6_6', ' vs_6_7', 'gs_6_0', ' "
"gs_6_1', ' gs_6_2', ' gs_6_3', ' gs_6_4', ' gs_6_5', ' gs_6_6', ' gs_6_7', "
"'hs_6_0', ' hs_6_1', ' hs_6_2', ' hs_6_3', ' hs_6_4', ' hs_6_5', ' hs_6_6', "
"' hs_6_7', 'ds_6_0', ' ds_6_1', ' ds_6_2', ' ds_6_3', ' ds_6_4', ' ds_6_5', "
"' ds_6_6', ' ds_6_7', 'cs_6_0', ' cs_6_1', ' cs_6_2', ' cs_6_3', ' cs_6_4', "
"' cs_6_5', ' cs_6_6', ' cs_6_7', 'lib_6_3', ' lib_6_4', ' lib_6_5', ' "
"lib_6_6', ' lib_6_7', ' lib_6_x', 'ms_6_5', ' ms_6_6', ' ms_6_7', 'as_6_5', "
"' as_6_6' or ' as_6_7'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4357
msgid ""
"Emit pristine LLVM IR from the frontend by not running any LLVM passes at "
"all.Same as -S + -emit-llvm + -disable-llvm-passes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4363
msgid ""
"HLSL only. Disables all standard includes containing non-native compiler "
"types and functions."
msgstr ""
