# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:3
msgid "Taint Analysis Configuration"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:5
msgid ""
"The Clang Static Analyzer uses taint analysis to detect injection "
"vulnerability related issues in code. The backbone of taint analysis in the "
"Clang SA is the ``TaintPropagation`` modeling checker. The reports are "
"emitted via the :ref:`alpha-security-taint-GenericTaint` checker. The "
"``TaintPropagation`` checker has a default taint-related configuration. The "
"built-in default settings are defined in code, and they are always in "
"effect. The checker also provides a configuration interface for extending "
"the default settings via the ``alpha.security.taint.TaintPropagation:"
"Config`` checker config parameter by providing a configuration file to the "
"in `YAML <http://llvm.org/docs/YamlIO.html#introduction-to-yaml>`_ format. "
"This documentation describes the syntax of the configuration file and gives "
"the informal semantics of the configuration options."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:20
msgid "Overview"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:22
msgid ""
"Taint analysis works by checking for the occurrence of special operations "
"during the symbolic execution of the program. Taint analysis defines "
"sources, sinks, and propagation rules. It identifies errors by detecting a "
"flow of information that originates from a taint source, reaches a taint "
"sink, and propagates through the program paths via propagation rules. A "
"source, sink, or an operation that propagates taint is mainly domain-"
"specific knowledge, but there are some built-in defaults provided by the "
"``TaintPropagation`` checker. It is possible to express that a statement "
"sanitizes tainted values by providing a ``Filters`` section in the external "
"configuration (see :ref:`clangsa-taint-configuration-example` and :ref:"
"`clangsa-taint-filter-details`). There are no default filters defined in the "
"built-in settings. The checker's documentation also specifies how to provide "
"a custom taint configuration with command-line options."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:32
msgid "Example configuration file"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:96
msgid ""
"In the example file above, the entries under the `Propagation` key implement "
"the conceptual sources and propagations, and sinks have their dedicated "
"`Sinks` key. The user can define operations (function calls) where the "
"tainted values should be cleansed by listing entries under the `Filters` "
"key. Filters model the sanitization of values done by the programmer, and "
"providing these is key to avoiding false-positive findings."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:101
msgid "Configuration file syntax and semantics"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:103
msgid ""
"The configuration file should have valid `YAML <http://llvm.org/docs/YamlIO."
"html#introduction-to-yaml>`_ syntax."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:108
msgid "The configuration file can have the following top-level keys:"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:106
msgid "Filters"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:107
msgid "Propagations"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:108
msgid "Sinks"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:110
msgid ""
"Under the `Filters` key, the user can specify a list of operations that "
"remove taint (see :ref:`clangsa-taint-filter-details` for details)."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:112
msgid ""
"Under the `Propagations` key, the user can specify a list of operations that "
"introduce and propagate taint (see :ref:`clangsa-taint-propagation-details` "
"for details). The user can mark taint sources with a `SrcArgs` key in the "
"`Propagation` key, while propagations have none. The lack of the `SrcArgs` "
"key means unconditional propagation, which is how sources are modeled. The "
"semantics of propagations are such, that if any of the source arguments are "
"tainted (specified by indexes in `SrcArgs`) then all of the destination "
"arguments (specified by indexes in `DstArgs`) also become tainted."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:117
msgid ""
"Under the `Sinks` key, the user can specify a list of operations where the "
"checker should emit a bug report if tainted data reaches it (see :ref:"
"`clangsa-taint-sink-details` for details)."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:122
msgid "Filter syntax and semantics"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:130
msgid ""
"An entry under `Filters` is a `YAML <http://llvm.org/docs/YamlIO."
"html#introduction-to-yaml>`_ object with the following mandatory keys:"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:125
msgid ""
"`Name` is a string that specifies the name of a function. Encountering this "
"function during symbolic execution the checker will sanitize taint from the "
"memory region referred to by the given arguments or return a sanitized value."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:127
msgid ""
"`Args` is a list of numbers in the range of ``[-1..int_max]``. It indicates "
"the indexes of arguments in the function call. The number ``-1`` signifies "
"the return value; other numbers identify call arguments. The values of these "
"arguments are considered clean after the function call."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:135
#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:159
#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:174
msgid "The following keys are optional:"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:133
msgid ""
"`Scope` is a string that specifies the prefix of the function's name in its "
"fully qualified name. This option restricts the set of matching function "
"calls. It can encode not only namespaces but struct/class names as well to "
"match member functions."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:138
msgid "Propagation syntax and semantics"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:143
msgid ""
"An entry under `Propagation` is a `YAML <http://llvm.org/docs/YamlIO."
"html#introduction-to-yaml>`_ object with the following mandatory keys:"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:141
msgid ""
"`Name` is a string that specifies the name of a function. Encountering this "
"function during symbolic execution propagate taint from one or more "
"arguments to other arguments and possibly the return value. It helps model "
"the taint-related behavior of functions that are not analyzable otherwise."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:146
#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:173
msgid ""
"`Scope` is a string that specifies the prefix of the function's name in its "
"fully qualified name. This option restricts the set of matching function "
"calls."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:147
msgid ""
"`SrcArgs` is a list of numbers in the range of ``[0..int_max]`` that "
"indicates the indexes of arguments in the function call. Taint-propagation "
"considers the values of these arguments during the evaluation of the "
"function call. If any `SrcArgs` arguments are tainted, the checker will "
"consider all `DstArgs` arguments tainted after the call."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:150
msgid ""
"`DstArgs` is a list of numbers in the range of ``[-1..int_max]`` that "
"indicates the indexes of arguments in the function call. The number ``-1`` "
"specifies the return value of the function. If any `SrcArgs` arguments are "
"tainted, the checker will consider all `DstArgs` arguments tainted after the "
"call."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:153
msgid ""
"`VariadicType` is a string that can be one of ``None``, ``Dst``, ``Src``. It "
"is used in conjunction with `VariadicIndex` to specify arguments inside a "
"variadic argument. The value of ``Src`` will treat every call site argument "
"that is part of a variadic argument list as a source concerning propagation "
"rules (as if specified by `SrcArg`). The value of ``Dst`` will treat every "
"call site argument that is part of a variadic argument list a destination "
"concerning propagation rules. The value of ``None`` will not consider the "
"arguments that are part of a variadic argument list (this option is "
"redundant but can be used to temporarily switch off handling of a particular "
"variadic argument option without removing the VariadicIndex key)."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:158
msgid ""
"`VariadicIndex` is a number in the range of ``[0..int_max]``. It indicates "
"the starting index of the variadic argument in the signature of the function."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:164
msgid "Sink syntax and semantics"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:170
msgid ""
"An entry under `Sinks` is a `YAML <http://llvm.org/docs/YamlIO."
"html#introduction-to-yaml>`_ object with the following mandatory keys:"
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:167
msgid ""
"`Name` is a string that specifies the name of a function. Encountering this "
"function during symbolic execution will emit a taint-related diagnostic if "
"any of the arguments specified with `Args` are tainted at the call site."
msgstr ""

#: ../../../analyzer/user-docs/TaintAnalysisConfiguration.rst:169
msgid ""
"`Args` is a list of numbers in the range of ``[0..int_max]`` that indicates "
"the indexes of arguments in the function call. The checker reports an error "
"if any of the specified arguments are tainted."
msgstr ""
