# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang |release| |ReleaseNotesTitle|"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:14
msgid ""
"These are in-progress notes for the upcoming Clang |version| release. "
"Release notes for previous releases can be found on `the Releases Page "
"<https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:21
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release |release|. Here "
"we describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <https://llvm.org/docs/ReleaseNotes."
"html>`_. For the libc++ release notes, see `this page <https://libcxx.llvm."
"org/ReleaseNotes.html>`_. All LLVM releases may be downloaded from the `LLVM "
"releases web site <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:35
msgid "Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"These changes are ones which we think may surprise users when upgrading to "
"Clang |release| because of the opportunity they pose for disruption to "
"existing code bases."
msgstr ""

#: ../../../ReleaseNotes.rst:40
msgid ""
"Setting the deprecated CMake variable ``GCC_INSTALL_PREFIX`` (which sets the "
"default ``--gcc-toolchain=``) now leads to a fatal error."
msgstr ""

#: ../../../ReleaseNotes.rst:44
msgid "C/C++ Language Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid ""
"Clang now supports raw string literals in ``-std=gnuXY`` mode as an "
"extension in C99 and later. This behaviour can also be overridden using ``-"
"f[no-]raw-string-literals``. Support of raw string literals in C++ is not "
"affected. Fixes (`#85703 <https://github.com/llvm/llvm-project/"
"issues/85703>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid "C++ Specific Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:52
msgid ""
"Clang now diagnoses function/variable templates that shadow their own "
"template parameters, e.g. ``template<class T> void T();``. This error can be "
"disabled via `-Wno-strict-primary-template-shadow` for compatibility with "
"previous versions of clang."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"The behavior controlled by the `-frelaxed-template-template-args` flag is "
"now on by default, and the flag is deprecated. Until the flag is finally "
"removed, it's negative spelling can be used to obtain compatibility with "
"previous versions of clang. The deprecation warning for the negative "
"spelling can be disabled with `-Wno-deprecated-no-relaxed-template-template-"
"args`."
msgstr ""

#: ../../../ReleaseNotes.rst:61
msgid ""
"Clang no longer tries to form pointer-to-members from qualified and "
"parenthesized unevaluated expressions such as ``decltype(&(foo::bar))``. "
"(`#40906 <https://github.com/llvm/llvm-project/issues/40906>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid ""
"Clang now performs semantic analysis for unary operators with dependent "
"operands that are known to be of non-class non-enumeration type prior to "
"instantiation."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid ""
"This change uncovered a bug in libstdc++ 14.1.0 which may cause compile "
"failures on systems using that version of libstdc++ and Clang 19, with an "
"error that looks something like this:"
msgstr ""

#: ../../../ReleaseNotes.rst:77
msgid "To fix this, update libstdc++ to version 14.1.1 or greater."
msgstr ""

#: ../../../ReleaseNotes.rst:80
msgid "ABI Changes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid ""
"Fixed Microsoft name mangling of implicitly defined variables used for "
"thread safe static initialization of static local variables. This change "
"resolves incompatibilities with code compiled by MSVC but might introduce "
"incompatibilities with code compiled by earlier versions of Clang when an "
"inline member function that contains a static local variable with a dynamic "
"initializer is declared with ``__declspec(dllimport)``. (`#83616 <https://"
"github.com/llvm/llvm-project/issues/83616>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:88
msgid ""
"Fixed Microsoft name mangling of lifetime extended temporary objects. This "
"change corrects missing back reference registrations that could result in "
"incorrect back reference indexes and suprising demangled name results. Since "
"MSVC uses a different mangling for these objects, compatibility is not "
"affected. (`#85423 <https://github.com/llvm/llvm-project/issues/85423>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid ""
"Fixed Microsoft calling convention for returning certain classes with a "
"templated constructor. If a class has a templated constructor, it should be "
"returned indirectly even if it meets all the other requirements for "
"returning a class in a register. This affects some uses of std::pair. "
"(`#86384 <https://github.com/llvm/llvm-project/issues/86384>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:100
msgid ""
"Fixed Microsoft calling convention when returning classes that have a "
"deleted copy assignment operator. Such a class should be returned indirectly."
msgstr ""

#: ../../../ReleaseNotes.rst:103
msgid ""
"Removed the global alias that was pointing to AArch64 Function "
"Multiversioning ifuncs. Its purpose was to preserve backwards compatibility "
"when the \".ifunc\" suffix got removed from the name mangling. The alias "
"interacts badly with GlobalOpt (see the issue #96197)."
msgstr ""

#: ../../../ReleaseNotes.rst:108
msgid ""
"Fixed Microsoft name mangling for auto non-type template arguments of "
"pointer type for MSVC 1920+. This change resolves incompatibilities with "
"code compiled by MSVC 1920+ but will introduce incompatibilities with code "
"compiled by earlier versions of Clang unless such code is built with the "
"compiler option `-fms-compatibility-version=19.14` to imitate the MSVC 1914 "
"mangling behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:114
msgid ""
"Fixed Microsoft name mangling for auto non-type template arguments of "
"pointer to member type for MSVC 1920+. This change resolves "
"incompatibilities with code compiled by MSVC 1920+ but will introduce "
"incompatibilities with code compiled by earlier versions of Clang unless "
"such code is built with the compiler option `-fms-compatibility-"
"version=19.14` to imitate the MSVC 1914 mangling behavior. (GH#70899)."
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid "AST Dumping Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "The text ast-dumper has improved printing of TemplateArguments."
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid ""
"The text decl-dumper prints template parameters' trailing requires "
"expressions now."
msgstr ""

#: ../../../ReleaseNotes.rst:128
msgid "Clang Frontend Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid ""
"Removed support for constructing on-stack ``TemplateArgumentList``\\ s; "
"interfaces should instead use ``ArrayRef<TemplateArgument>`` to pass "
"template arguments. Transitioning internal uses to "
"``ArrayRef<TemplateArgument>`` reduces AST memory usage by 0.4% when "
"compiling clang, and is expected to show similar improvements on other "
"workloads."
msgstr ""

#: ../../../ReleaseNotes.rst:134
msgid ""
"The ``-Wgnu-binary-literal`` diagnostic group no longer controls any "
"diagnostics. Binary literals are no longer a GNU extension, they're now a "
"C23 extension which is controlled via ``-pedantic`` or ``-Wc23-extensions``. "
"Use of ``-Wno-gnu-binary-literal`` will no longer silence this pedantic "
"warning, which may break existing uses with ``-Werror``."
msgstr ""

#: ../../../ReleaseNotes.rst:140
msgid ""
"The normalization of 3 element target triples where ``-none-`` is the middle "
"element has changed. For example, ``armv7m-none-eabi`` previously normalized "
"to ``armv7m-none-unknown-eabi``, with ``none`` for the vendor and "
"``unknown`` for the operating system. It now normalizes to ``armv7m-unknown-"
"none-eabi``, which has ``unknown`` vendor and ``none`` operating system."
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid ""
"The affected triples are primarily for bare metal Arm where it is intended "
"that ``none`` means that there is no operating system. As opposed to an "
"unknown type of operating system."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid ""
"This change can cause clang to not find libraries, or libraries to be built "
"at different file system locations. This can be fixed by changing your "
"builds to use the new normalized triple. However, we recommend instead "
"getting the normalized triple from clang itself, as this will make your "
"builds more robust in case of future changes::"
msgstr ""

#: ../../../ReleaseNotes.rst:159
msgid ""
"The ``hasTypeLoc`` AST matcher will no longer match a "
"``classTemplateSpecializationDecl``; existing uses should switch to "
"``templateArgumentLoc`` or ``hasAnyTemplateArgumentLoc`` instead."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid "Clang Python Bindings Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:164
msgid ""
"Renamed ``CursorKind`` variant 272 from ``OMP_TEAMS_DISTRIBUTE_DIRECTIVE`` "
"to ``OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE``. The previous name was incorrect, "
"it was a duplicate of variant 271."
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid ""
"Renamed ``TypeKind`` variant 162 from ``OBJCCLASS`` to ``OBJCTYPEPARAM``. "
"The previous name was incorrect, it was a duplicate of variant 28."
msgstr ""

#: ../../../ReleaseNotes.rst:169
msgid ""
"Refactored enum implementation, switching to the standard library `Enum` "
"type."
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid "What's New in Clang |release|?"
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid ""
"Some of the major new features and improvements to Clang are listed here. "
"Generic improvements to Clang as a whole or to its underlying infrastructure "
"are described first, followed by language-specific sections with "
"improvements to Clang's support for those languages."
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid ""
"Implemented improvements to BMIs for C++20 Modules that can reduce the "
"number of rebuilds during incremental recompilation. We are seeking feedback "
"from Build System authors and other interested users, especially when you "
"feel Clang changes the BMI and misses an opportunity to avoid recompilations "
"or causes correctness issues. See StandardCPlusPlusModules "
"`StandardCPlusPlusModules <StandardCPlusPlusModules.html>`_ for more details."
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid ""
"The ``\\par`` documentation comment command now supports an optional "
"argument, which denotes the header of the paragraph started by an instance "
"of the ``\\par`` command comment. The implementation of the argument "
"handling matches its semantics `in Doxygen <https://www.doxygen.nl/manual/"
"commands.html#cmdpar>`. Namely, any text on the same line as the ``\\par`` "
"command will become a header for the paragaph, and if there is no text then "
"the command will start a new paragraph."
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "C++ Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"C++17 support is now completed, with the enablement of the relaxed temlate "
"template argument matching rules introduced in P0522, which was "
"retroactively applied as a defect report. While the implementation already "
"existed since Clang 4, it was turned off by default, and was controlled with "
"the `-frelaxed-template-template-args` flag. In this release, we implement "
"provisional wording for a core defect on P0522 (CWG2398), which avoids the "
"most serious compatibility issues caused by it, allowing us to enable it by "
"default in this release. The flag is now deprecated, and will be removed in "
"the next release, but can still be used to turn it off and regain "
"compatibility with previous versions (`#36505 <https://github.com/llvm/llvm-"
"project/issues/36505>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid ""
"Implemented ``_BitInt`` literal suffixes ``__wb`` or ``__WB`` as a Clang "
"extension with ``unsigned`` modifiers also allowed. (`#85223 <https://github."
"com/llvm/llvm-project/issues/85223>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid "C++17 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid ""
"Clang now exposes ``__GCC_DESTRUCTIVE_SIZE`` and ``__GCC_CONSTRUCTIVE_SIZE`` "
"predefined macros to support standard library implementations of ``std::"
"hardware_destructive_interference_size`` and ``std::"
"hardware_constructive_interference_size``, respectively. These macros are "
"predefined in all C and C++ language modes. The values the macros expand to "
"are not stable between releases of Clang and do not need to match the values "
"produced by GCC, so these macros should not be used from header files "
"because they may not be stable across multiple TUs (the values may vary "
"based on compiler version as well as CPU tuning). `#60174 <https://github."
"com/llvm/llvm-project/issues/60174>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid "C++14 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid ""
"Sized deallocation is enabled by default in C++14 onwards. The user may "
"specify ``-fno-sized-deallocation`` to disable it if there are some "
"regressions."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid "C++20 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid ""
"Clang won't perform ODR checks for decls in the global module fragment any "
"more to ease the implementation and improve the user's using experience. "
"This follows the MSVC's behavior. Users interested in testing the more "
"strict behavior can use the flag '-Xclang -fno-skip-odr-check-in-gmf'. "
"(`#79240 <https://github.com/llvm/llvm-project/issues/79240>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"Implemented the `__is_layout_compatible` and "
"`__is_pointer_interconvertible_base_of` intrinsics to support `P0466R5: "
"Layout-compatibility and Pointer-interconvertibility Traits <https://wg21."
"link/P0466R5>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid ""
"Clang now implements [module.import]p7 fully. Clang now will import module "
"units transitively for the module units coming from the same module of the "
"current module units. Fixes `#84002 <https://github.com/llvm/llvm-project/"
"issues/84002>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid ""
"Initial support for class template argument deduction (CTAD) for type alias "
"templates (`P1814R0 <https://wg21.link/p1814r0>`_). (`#54051 <https://github."
"com/llvm/llvm-project/issues/54051>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid ""
"We have sufficient confidence and experience with the concepts "
"implementation to update the ``__cpp_concepts`` macro to `202002L`. This "
"enables ``<expected>`` from libstdc++ to work correctly with Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"User defined constructors are allowed for copy-list-initialization with "
"CTAD. (`#62925 <https://github.com/llvm/llvm-project/issues/62925>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid "C++23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"Implemented `P2718R0: Lifetime extension in range-based for loops <https://"
"wg21.link/P2718R0>`_. Also materialize temporary object which is a prvalue "
"in discarded-value expression."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"Implemented `P1774R8: Portable assumptions <https://wg21.link/P1774R8>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:261
msgid ""
"Implemented `P2448R2: Relaxing some constexpr restrictions <https://wg21."
"link/P2448R2>`_. Note, the ``-Winvalid-constexpr`` diagnostic is now "
"disabled in C++23 mode, but can be explicitly specified to retain the old "
"diagnostic checking behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"Added a ``__reference_converts_from_temporary`` builtin, completing the "
"necessary compiler support for `P2255R2: Type trait to determine if a "
"reference binds to a temporary <https://wg21.link/P2255R2>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid ""
"Implemented `P2797R0: Static and explicit object member functions with the "
"same parameter-type-lists <https://wg21.link/P2797R0>`_. This completes the "
"support for \"deducing this\"."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid "C++2c Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid "Implemented `P2662R3 Pack Indexing <https://wg21.link/P2662R3>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:277
msgid ""
"Implemented `P2573R2: = delete(\"should have a reason\"); <https://wg21.link/"
"P2573R2>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid ""
"Implemented `P0609R3: Attributes for Structured Bindings <https://wg21.link/"
"P0609R3>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:281
msgid ""
"Implemented `P2748R5 Disallow Binding a Returned Glvalue to a Temporary "
"<https://wg21.link/P2748R5>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid ""
"Implemented `P2809R3: Trivial infinite loops are not Undefined Behavior "
"<https://wg21.link/P2809R3>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid ""
"Implemented `P3144R2 Deleting a Pointer to an Incomplete Type Should be Ill-"
"formed <https://wg21.link/P3144R2>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid ""
"Implemented `P2963R3 Ordering of constraints involving fold expressions "
"<https://wg21.link/P2963R3>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid "Resolutions to C++ Defect Reports"
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid ""
"Substitute template parameter pack, when it is not explicitly specified in "
"the template parameters, but is deduced from a previous argument. (`#78449 "
"<https://github.com/llvm/llvm-project/issues/78449>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid ""
"Type qualifications are now ignored when evaluating layout compatibility of "
"two types. (`CWG1719: Layout compatibility and cv-qualification revisited "
"<https://cplusplus.github.io/CWG/issues/1719.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:299
msgid ""
"Alignment of members is now respected when evaluating layout compatibility "
"of structs. (`CWG2583: Common initial sequence should consider over-"
"alignment <https://cplusplus.github.io/CWG/issues/2583.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid ""
"``[[no_unique_address]]`` is now respected when evaluating layout "
"compatibility of two types. (`CWG2759: [[no_unique_address] and common "
"initial sequence  <https://cplusplus.github.io/CWG/issues/2759.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid ""
"Clang now diagnoses declarative nested-name-specifiers with pack-index-"
"specifiers. (`CWG2858: Declarative nested-name-specifiers and pack-index-"
"specifiers <https://cplusplus.github.io/CWG/issues/2858.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid ""
"Clang now allows attributes on concepts. (`CWG2428: Deprecating a concept "
"<https://cplusplus.github.io/CWG/issues/2428.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid ""
"P0522 implementation is enabled by default in all language versions, and "
"provisional wording for CWG2398 is implemented."
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid ""
"Clang now performs type-only lookup for the name in ``using enum`` "
"declaration. (`CWG2877: Type-only lookup for using-enum-declarator <https://"
"cplusplus.github.io/CWG/issues/2877.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid ""
"Clang now requires a template argument list after a template keyword. "
"(`CWG96: Syntactic disambiguation using the template keyword <https://"
"cplusplus.github.io/CWG/issues/96.html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid ""
"Clang now considers ``noexcept(typeid(expr))`` more carefully, instead of "
"always assuming that ``std::bad_typeid`` can be thrown. (`CWG2191: Incorrect "
"result for noexcept(typeid(v)) <https://cplusplus.github.io/CWG/issues/2191."
"html>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid "C Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "C2y Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:330
msgid ""
"Clang now enables C2y mode with ``-std=c2y``. This sets ``__STDC_VERSION__`` "
"to ``202400L`` so that it's greater than the value for C23. The value of "
"this macro is subject to change in the future."
msgstr ""

#: ../../../ReleaseNotes.rst:335
msgid "C23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid ""
"No longer diagnose use of binary literals as an extension in C23 mode. Fixes "
"`#72017 <https://github.com/llvm/llvm-project/issues/72017>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:339
msgid ""
"Corrected parsing behavior for the ``alignas`` specifier/qualifier in C23. "
"We previously handled it as an attribute as in C++, but there are parsing "
"differences. The behavioral differences are:"
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid "Fixes (`#81472 <https://github.com/llvm/llvm-project/issues/81472>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:352
msgid ""
"Clang now generates predefined macros of the form ``__TYPE_FMTB__`` and "
"``__TYPE_FMTb__`` (e.g., ``__UINT_FAST64_FMTB__``) in C23 mode for use with "
"macros typically exposed from ``<inttypes.h>``, such as ``PRIb8``. (`#81896 "
"<https://github.com/llvm/llvm-project/issues/81896>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:356
msgid ""
"Clang now supports `N3018 The constexpr specifier for object definitions` "
"<https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3018.htm>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:359
msgid ""
"Properly promote bit-fields of bit-precise integer types to the field's type "
"rather than to ``int``. `#87641 <https://github.com/llvm/llvm-project/"
"issues/87641>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:362
msgid ""
"Added the ``INFINITY`` and ``NAN`` macros to Clang's ``<float.h>`` "
"freestanding implementation; these macros were defined in ``<math.h>`` in "
"C99 but C23 added them to ``<float.h>`` in `WG14 N2848 <https://www.open-std."
"org/jtc1/sc22/wg14/www/docs/n2848.pdf>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:367
msgid ""
"Clang now supports `N3017 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n3017.htm>`_ ``#embed`` - a scannable, tooling-friendly binary resource "
"inclusion mechanism."
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"Added the ``FLT_NORM_MAX``, ``DBL_NORM_MAX``, and ``LDBL_NORM_MAX`` to the "
"freestanding implementation of ``<float.h>`` that ships with Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"Compiler support for `N2653 char8_t: A type for UTF-8 characters and "
"strings` <https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2653.htm>`_: "
"``u8`` string literals are now of type ``char8_t[N]`` in C23 and expose "
"``__CLANG_ATOMIC_CHAR8_T_LOCK_FREE``/``__GCC_ATOMIC_CHAR8_T_LOCK_FREE`` to "
"implement the corresponding macro in ``<stdatomic.h>``."
msgstr ""

#: ../../../ReleaseNotes.rst:380
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:382
msgid ""
"Added ``__builtin_readsteadycounter`` for reading fixed frequency hardware "
"counters."
msgstr ""

#: ../../../ReleaseNotes.rst:385
msgid ""
"``__builtin_addc``, ``__builtin_subc``, and the other sizes of those "
"builtins are now constexpr and may be used in constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:388
msgid ""
"Added ``__builtin_popcountg`` as a type-generic alternative to "
"``__builtin_popcount{,l,ll}`` with support for any unsigned integer type. "
"Like the previous builtins, this new builtin is constexpr and may be used in "
"constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid "Lambda expressions are now accepted in C++03 mode as an extension."
msgstr ""

#: ../../../ReleaseNotes.rst:395
msgid ""
"Added ``__builtin_clzg`` and ``__builtin_ctzg`` as type-generic alternatives "
"to ``__builtin_clz{,s,l,ll}`` and ``__builtin_ctz{,s,l,ll}`` respectively, "
"with support for any unsigned integer type. Like the previous builtins, "
"these new builtins are constexpr and may be used in constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:400
msgid ""
"``__typeof_unqual__`` is available in all C modes as an extension, which "
"behaves like ``typeof_unqual`` from C23, similar to ``__typeof__`` and "
"``typeof``."
msgstr ""

#: ../../../ReleaseNotes.rst:403
msgid ""
"``__builtin_reduce_{add|mul|xor|or|and|min|max}`` builtins now support "
"scalable vectors."
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid ""
"Shared libraries linked with either the ``-ffast-math``, ``-Ofast``, or ``-"
"funsafe-math-optimizations`` flags will no longer enable flush-to-zero "
"floating-point mode by default. This decision can be overridden with use of "
"``-mdaz-ftz``. This behavior now matches GCC's behavior. (`#57589 <https://"
"github.com/llvm/llvm-project/issues/57589>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:411
msgid ""
"``-fdenormal-fp-math=preserve-sign`` is no longer implied by ``-ffast-math`` "
"on x86 systems."
msgstr ""

#: ../../../ReleaseNotes.rst:414
msgid ""
"Builtins ``__builtin_shufflevector()`` and ``__builtin_convertvector()`` may "
"now be used within constant expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:417
msgid ""
"When compiling a constexpr function, Clang will check to see whether the "
"function can *never* be used in a constant expression context and issues a "
"diagnostic under the ``-Winvalid-constexpr`` diagostic flag (which defaults "
"to an error). This check can be expensive because the mere presence of a "
"function marked ``constexpr`` will cause us to undergo constant expression "
"evaluation, even if the function is not called within the translation unit "
"being compiled. Due to the expense, Clang no longer checks constexpr "
"function bodies when the function is defined in a system header file or when "
"``-Winvalid-constexpr`` is not enabled for the function definition, which "
"should result in mild compile-time performance improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"Added ``__is_bitwise_cloneable`` which is used to check whether a type can "
"be safely copied by memcpy/memmove."
msgstr ""

#: ../../../ReleaseNotes.rst:431
msgid ""
"``#pragma GCC diagnostic warning \"-Wfoo\"`` can now downgrade ``-"
"Werror=foo`` errors and certain default-to-error ``-W`` diagnostics to "
"warnings."
msgstr ""

#: ../../../ReleaseNotes.rst:434
msgid "Support importing C++20 modules in clang-repl."
msgstr ""

#: ../../../ReleaseNotes.rst:436
msgid ""
"Added support for ``TypeLoc::dump()`` for easier debugging, and improved "
"textual and JSON dumping for various ``TypeLoc``-related nodes."
msgstr ""

#: ../../../ReleaseNotes.rst:439
msgid ""
"Clang can now emit distinct type-based alias analysis tags for incompatible "
"pointers, enabling more powerful alias analysis when accessing pointer "
"types. The new behavior can be enabled using ``-fpointer-tbaa``."
msgstr ""

#: ../../../ReleaseNotes.rst:443
msgid ""
"The ``__atomic_always_lock_free`` and ``__atomic_is_lock_free`` builtins may "
"now return true if the pointer argument is a compile-time constant (e.g. "
"``(void*)4``), and constant pointer is sufficiently-aligned for the access "
"requested. Previously, only the type of the pointer was taken into account. "
"This improves compatibility with GCC's libstdc++."
msgstr ""

#: ../../../ReleaseNotes.rst:450
msgid ""
"The type traits builtin ``__is_nullptr`` is deprecated in CLang 19 and will "
"be removed in Clang 20. ``__is_same(__remove_cv(T), decltype(nullptr))`` can "
"be used instead to check whether a type ``T`` is a ``nullptr``."
msgstr ""

#: ../../../ReleaseNotes.rst:455
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:456
msgid ""
"``-fsanitize=implicit-bitfield-conversion`` checks implicit truncation and "
"sign change."
msgstr ""

#: ../../../ReleaseNotes.rst:458
msgid ""
"``-fsanitize=implicit-integer-conversion`` a group that replaces the "
"previous group ``-fsanitize=implicit-conversion``."
msgstr ""

#: ../../../ReleaseNotes.rst:461
msgid ""
"``-Wmissing-designated-field-initializers``, grouped under ``-Wmissing-field-"
"initializers``. This diagnostic can be disabled to make ``-Wmissing-field-"
"initializers`` behave like it did before Clang 18.x. Fixes `#56628 <https://"
"github.com/llvm/llvm-project/issues/56628>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:465
msgid ""
"``-fexperimental-modules-reduced-bmi`` enables the Reduced BMI for C++20 "
"named modules. See the document of standard C++ modules for details."
msgstr ""

#: ../../../ReleaseNotes.rst:468
msgid ""
"``-fexperimental-late-parse-attributes`` enables an experimental feature to "
"allow late parsing certain attributes in specific contexts where they would "
"not normally be late parsed. Currently this allows late parsing the "
"`counted_by` attribute in C. See `Attribute Changes in Clang`_."
msgstr ""

#: ../../../ReleaseNotes.rst:473
msgid ""
"``-fseparate-named-sections`` uses separate unique sections for global "
"symbols in named special sections (i.e. symbols annotated with "
"``__attribute__((section(...)))``. This enables linker GC to collect unused "
"symbols without having to use a per-symbol section."
msgstr ""

#: ../../../ReleaseNotes.rst:478
msgid ""
"``-fms-define-stdc`` and its clang-cl counterpart ``/Zc:__STDC__``. Matches "
"MSVC behaviour by defining ``__STDC__`` to ``1`` when MSVC compatibility "
"mode is used. It has no effect for C++ code."
msgstr ""

#: ../../../ReleaseNotes.rst:482
msgid ""
"``-Wc++23-compat`` group was added to help migrating existing codebases to C+"
"+23."
msgstr ""

#: ../../../ReleaseNotes.rst:485
msgid ""
"``-Wc++2c-compat`` group was added to help migrating existing codebases to "
"upcoming C++26."
msgstr ""

#: ../../../ReleaseNotes.rst:488
msgid ""
"``-fdisable-block-signature-string`` instructs clang not to emit the "
"signature string for blocks. Disabling the string can potentially break "
"existing code that relies on it. Users should carefully consider this "
"possibiilty when using the flag."
msgstr ""

#: ../../../ReleaseNotes.rst:493
msgid ""
"For the ARM target, added ``-Warm-interrupt-vfp-clobber`` that will emit a "
"diagnostic when an interrupt handler is declared and VFP is enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:496
msgid ""
"``-fpointer-tbaa`` enables emission of distinct type-based alias analysis "
"tags for incompatible pointers."
msgstr ""

#: ../../../ReleaseNotes.rst:500
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:502
msgid ""
"The ``-Ofast`` command-line option has been deprecated. This option both "
"enables the ``-O3`` optimization-level, as well as enabling non-standard ``-"
"ffast-math`` behaviors. As such, it is somewhat misleading as an "
"\"optimization level\". Users are advised to switch to ``-O3 -ffast-math`` "
"if the use of non-standard math behavior is intended, and ``-O3`` otherwise. "
"See `RFC <https://discourse.llvm.org/t/rfc-deprecate-ofast/78687>`_ for "
"details."
msgstr ""

#: ../../../ReleaseNotes.rst:510
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:511
msgid ""
"Added a new diagnostic flag ``-Wreturn-mismatch`` which is grouped under ``-"
"Wreturn-type``, and moved some of the diagnostics previously controlled by "
"``-Wreturn-type`` under this new flag. Fixes `#72116 <https://github.com/"
"llvm/llvm-project/issues/72116>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:514
msgid ""
"``-fsanitize=implicit-conversion`` is now a group for both ``-"
"fsanitize=implicit-integer-conversion`` and ``-fsanitize=implicit-bitfield-"
"conversion``."
msgstr ""

#: ../../../ReleaseNotes.rst:518
msgid ""
"Added ``-Wcast-function-type-mismatch`` under the ``-Wcast-function-type`` "
"warning group. Moved the diagnostic previously controlled by ``-Wcast-"
"function-type`` to the new warning group and added ``-Wcast-function-type-"
"mismatch`` to ``-Wextra``. `#76872 <https://github.com/llvm/llvm-project/"
"issues/76872>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:537
msgid ""
"Carved out ``-Wformat`` warning about scoped enums into a subwarning and "
"make it controlled by ``-Wformat-pedantic``. Fixes `#88595 <https://github."
"com/llvm/llvm-project/issues/88595>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:540
msgid ""
"Trivial infinite loops (i.e loops with a constant controlling expresion "
"evaluating to ``true`` and an empty body such as ``while(1);``) are "
"considered infinite, even when the ``-ffinite-loop`` flag is set."
msgstr ""

#: ../../../ReleaseNotes.rst:544
msgid ""
"Diagnostics groups about compatibility with a particular C++ Standard "
"version now include dianostics about C++26 features that are not present in "
"older versions."
msgstr ""

#: ../../../ReleaseNotes.rst:548
msgid ""
"Removed the \"arm interrupt calling convention\" warning that was included "
"in ``-Wextra`` without its own flag. This warning suggested adding "
"``__attribute__((interrupt))`` to functions that are called from interrupt "
"handlers to prevent clobbering VFP registers. Following this suggestion "
"leads to unpredictable behavior by causing multiple exception returns from "
"one exception. Fixes `#34876 <https://github.com/llvm/llvm-project/"
"issues/34876>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:556
msgid "Removed Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:558
msgid ""
"The ``-freroll-loops`` flag has been removed. It had no effect since Clang "
"13."
msgstr ""

#: ../../../ReleaseNotes.rst:559
msgid ""
"``-m[no-]unaligned-access`` is removed for RISC-V and LoongArch. ``-"
"m[no-]strict-align``, also supported by GCC, should be used instead. "
"(`#85350 <https://github.com/llvm/llvm-project/issues/85350>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:563
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:564
msgid ""
"Introduced a new function attribute "
"``__attribute__((amdgpu_max_num_work_groups(x, y, z)))`` or ``[[clang::"
"amdgpu_max_num_work_groups(x, y, z)]]`` for the AMDGPU target. This "
"attribute can be attached to HIP or OpenCL kernel function definitions to "
"provide an optimization hint. The parameters ``x``, ``y``, and ``z`` specify "
"the maximum number of workgroups for the respective dimensions, and each "
"must be a positive integer when provided. The parameter ``x`` is required, "
"while ``y`` and ``z`` are optional with default value of 1."
msgstr ""

#: ../../../ReleaseNotes.rst:571
msgid ""
"The ``swiftasynccc`` attribute is now considered to be a Clang extension "
"rather than a language standard feature. Please use "
"``__has_extension(swiftasynccc)`` to check the availability of this "
"attribute for the target platform instead of "
"``__has_feature(swiftasynccc)``. Also, added a new extension query "
"``__has_extension(swiftcc)`` corresponding to the "
"``__attribute__((swiftcc))`` attribute."
msgstr ""

#: ../../../ReleaseNotes.rst:578
msgid ""
"The ``_Nullable`` and ``_Nonnull`` family of type attributes can now apply "
"to certain C++ class types, such as smart pointers: ``void useObject(std::"
"unique_ptr<Object> _Nonnull obj);``."
msgstr ""

#: ../../../ReleaseNotes.rst:582
msgid ""
"This works for standard library types including ``unique_ptr``, "
"``shared_ptr``, and ``function``. See `the attribute reference documentation "
"<https://llvm.org/docs/AttributeReference.html#nullability-attributes>`_ for "
"the full list."
msgstr ""

#: ../../../ReleaseNotes.rst:587
msgid ""
"The ``_Nullable`` attribute can be applied to C++ class declarations: "
"``template <class T> class _Nullable MySmartPointer {};``."
msgstr ""

#: ../../../ReleaseNotes.rst:590
msgid ""
"This allows the ``_Nullable`` and ``_Nonnull`` family of type attributes to "
"apply to this class."
msgstr ""

#: ../../../ReleaseNotes.rst:593
msgid ""
"Clang now warns that the ``exclude_from_explicit_instantiation`` attribute "
"is ignored when applied to a local class or a member thereof."
msgstr ""

#: ../../../ReleaseNotes.rst:596
msgid ""
"The ``clspv_libclc_builtin`` attribute has been added to allow clspv "
"(`OpenCL-C to Vulkan SPIR-V compiler <https://github.com/google/clspv>`_) to "
"identify functions coming from libclc (`OpenCL-C builtin library <https://"
"libclc.llvm.org>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:599
msgid ""
"The ``counted_by`` attribute is now allowed on pointers that are members of "
"a struct in C."
msgstr ""

#: ../../../ReleaseNotes.rst:602
msgid ""
"The ``counted_by`` attribute can now be late parsed in C when ``-"
"fexperimental-late-parse-attributes`` is passed but only when attribute is "
"used in the declaration attribute position. This allows using the attribute "
"on existing code where it previously impossible to do so without re-ordering "
"struct field declarations would break ABI as shown below."
msgstr ""

#: ../../../ReleaseNotes.rst:617
msgid ""
"The attributes ``sized_by``, ``counted_by_or_null`` and "
"``sized_by_or_null``` have been added as variants on ``counted_by``, each "
"with slightly different semantics. ``sized_by`` takes a byte size parameter "
"instead of an element count, allowing pointees with unknown size. The "
"``counted_by_or_null`` and ``sized_by_or_null`` variants are equivalent to "
"their base variants, except the pointer can be null regardless of count/size "
"value. If the pointer is null the size is effectively 0. "
"``sized_by_or_null`` is needed to properly annotate allocator functions like "
"``malloc`` that return a buffer of a given byte size, but can also return "
"null."
msgstr ""

#: ../../../ReleaseNotes.rst:626
msgid ""
"The ``guarded_by``, ``pt_guarded_by``, ``acquired_after``, "
"``acquired_before`` attributes now support referencing struct members in C. "
"The arguments are also now late parsed when ``-fexperimental-late-parse-"
"attributes`` is passed like for ``counted_by``."
msgstr ""

#: ../../../ReleaseNotes.rst:631
msgid ""
"Introduced new function type attributes ``[[clang::nonblocking]]``, "
"``[[clang::nonallocating]]``, ``[[clang::blocking]]``, and ``[[clang::"
"allocating]]``, with GNU-style variants as well. The attributes declare "
"constraints about a function's behavior pertaining to blocking and heap "
"memory allocation."
msgstr ""

#: ../../../ReleaseNotes.rst:636
msgid ""
"The ``hybrid_patchable`` attribute is now supported on ARM64EC targets. It "
"can be used to specify that a function requires an additional x86-64 thunk, "
"which may be patched at runtime."
msgstr ""

#: ../../../ReleaseNotes.rst:640
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:641
msgid ""
"Clang now emits an error instead of a warning for ``-Wundefined-internal`` "
"when compiling with `-pedantic-errors` to conform to the C standard"
msgstr ""

#: ../../../ReleaseNotes.rst:644
msgid "Clang now applies syntax highlighting to the code snippets it prints."
msgstr ""

#: ../../../ReleaseNotes.rst:647
msgid ""
"Clang now diagnoses member template declarations with multiple declarators."
msgstr ""

#: ../../../ReleaseNotes.rst:649
msgid ""
"Clang now diagnoses use of the ``template`` keyword after declarative nested "
"name specifiers."
msgstr ""

#: ../../../ReleaseNotes.rst:653
msgid ""
"The ``-Wshorten-64-to-32`` diagnostic is now grouped under ``-Wimplicit-int-"
"conversion`` instead"
msgstr ""

#: ../../../ReleaseNotes.rst:653
msgid ""
"of ``-Wconversion``. Fixes `#69444 <https://github.com/llvm/llvm-project/"
"issues/69444>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:655
msgid ""
"Clang now uses thousand separators when printing large numbers in integer "
"overflow diagnostics. Fixes `#80939 <https://github.com/llvm/llvm-project/"
"issues/80939>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:658
msgid ""
"Clang now diagnoses friend declarations with an ``enum`` elaborated-type-"
"specifier in language modes after C++98."
msgstr ""

#: ../../../ReleaseNotes.rst:660
msgid ""
"Added diagnostics for C11 keywords being incompatible with language "
"standards before C11, under a new warning group: ``-Wpre-c11-compat``."
msgstr ""

#: ../../../ReleaseNotes.rst:663
msgid ""
"Now diagnoses an enumeration constant whose value is larger than can be "
"represented by ``unsigned long long``, which can happen with a large "
"constant using the ``wb`` or ``uwb`` suffix. The maximal underlying type is "
"currently ``unsigned long long``, but this behavior may change in the future "
"when Clang implements `WG14 N3029 <https://www.open-std.org/jtc1/sc22/wg14/"
"www/docs/n3029.htm>`_. (`#69352 <https://github.com/llvm/llvm-project/"
"issues/69352>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:671
msgid ""
"Clang now diagnoses extraneous template parameter lists as a language "
"extension."
msgstr ""

#: ../../../ReleaseNotes.rst:673
msgid ""
"Clang now diagnoses declarative nested name specifiers that name alias "
"templates."
msgstr ""

#: ../../../ReleaseNotes.rst:675
msgid ""
"Clang now diagnoses lambda function expressions being implicitly cast to "
"boolean values, under ``-Wpointer-bool-conversion``. Fixes `#82512 <https://"
"github.com/llvm/llvm-project/issues/82512>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:678
msgid ""
"Clang now provides improved warnings for the ``cleanup`` attribute to detect "
"misuse scenarios, such as attempting to call ``free`` on an unallocated "
"object. Fixes `#79443 <https://github.com/llvm/llvm-project/issues/79443>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:681
msgid ""
"Clang no longer warns when the ``bitand`` operator is used with boolean "
"operands, distinguishing it from potential typographical errors or "
"unintended bitwise operations. Fixes `#77601 <https://github.com/llvm/llvm-"
"project/issues/77601>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:685
msgid ""
"Clang now correctly diagnoses no arguments to a variadic macro parameter as "
"a C23/C++20 extension. Fixes `#84495 <https://github.com/llvm/llvm-project/"
"issues/84495>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:688
msgid ""
"Clang no longer emits a ``-Wexit-time destructors`` warning on static "
"variables explicitly annotated with the ``clang::always_destroy`` attribute. "
"Fixes `#68686 <https://github.com/llvm/llvm-project/issues/68686>`_, `#86486 "
"<https://github.com/llvm/llvm-project/issues/86486>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:692
msgid ""
"``-Wmicrosoft``, ``-Wgnu``, or ``-pedantic`` is now required to diagnose C99 "
"flexible array members in a union or alone in a struct. Fixes GH#84565."
msgstr ""

#: ../../../ReleaseNotes.rst:695
msgid ""
"Clang now no longer diagnoses type definitions in ``offsetof`` in C23 mode. "
"Fixes `#83658 <https://github.com/llvm/llvm-project/issues/83658>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:698
msgid ""
"New ``-Wformat-signedness`` diagnostic that warn if the format string "
"requires an unsigned argument and the argument is signed and vice versa."
msgstr ""

#: ../../../ReleaseNotes.rst:701
msgid ""
"Clang now emits ``unused argument`` warning when the -fmodule-output flag is "
"used with an input that is not of type c++-module."
msgstr ""

#: ../../../ReleaseNotes.rst:704
msgid ""
"Clang emits a ``-Wreturn-stack-address`` warning if a function returns a "
"pointer or reference to a struct literal. Fixes `#8678 <https://github.com/"
"llvm/llvm-project/issues/8678>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:707
msgid ""
"Clang emits a ``-Wunused-but-set-variable`` warning on C++ variables whose "
"declaration (with initializer) entirely consist the condition expression of "
"a if/while/for construct but are not actually used in the body of the if/"
"while/for construct. Fixes `#41447 <https://github.com/llvm/llvm-project/"
"issues/41447>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:711
msgid ""
"Clang emits a diagnostic when a tentative array definition is assumed to "
"have a single element, but that diagnostic was never given a diagnostic "
"group. Added the ``-Wtentative-definition-array`` warning group to cover "
"this. Fixes `#87766 <https://github.com/llvm/llvm-project/issues/87766>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:716
msgid ""
"Clang now uses the correct type-parameter-key (``class`` or ``typename``) "
"when printing template template parameter declarations."
msgstr ""

#: ../../../ReleaseNotes.rst:719
msgid ""
"Clang now diagnoses requires expressions with explicit object parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:721
msgid ""
"Clang now looks up members of the current instantiation in the template "
"definition context if the current instantiation has no dependent base "
"classes."
msgstr ""

#: ../../../ReleaseNotes.rst:733
msgid ""
"Clang emits a ``-Wparentheses`` warning for expressions with consecutive "
"comparisons like ``x < y < z``. Fixes `#20456 <https://github.com/llvm/llvm-"
"project/issues/20456>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:736
msgid ""
"Clang no longer emits a \"declared here\" note for a builtin function that "
"has no declaration in source. Fixes `#93369 <https://github.com/llvm/llvm-"
"project/issues/93369>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:739
msgid ""
"Clang now has an improved error message for captures that refer to a class "
"member. Fixes `#94764 <https://github.com/llvm/llvm-project/issues/94764>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:742
msgid ""
"Clang now diagnoses unsupported class declarations for ``std::"
"initializer_list<E>`` when they are used rather than when they are needed "
"for constant evaluation or when code is generated for them. The check is now "
"stricter to prevent crashes for some unsupported declarations (Fixes `#95495 "
"<https://github.com/llvm/llvm-project/issues/95495>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:746
msgid ""
"Clang now diagnoses dangling cases where a pointer is assigned to a "
"temporary that will be destroyed at the end of the full expression. Fixes "
"`#54492 <https://github.com/llvm/llvm-project/issues/54492>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:750
msgid ""
"Clang now shows implicit deduction guides when diagnosing overload "
"resolution failure. `#92393 <https://github.com/llvm/llvm-project/"
"issues/92393>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:752
msgid ""
"Clang no longer emits a \"no previous prototype\" warning for Win32 entry "
"points under ``-Wmissing-prototypes``. Fixes `#94366 <https://github.com/"
"llvm/llvm-project/issues/94366>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:755
msgid ""
"For the ARM target, calling an interrupt handler from another function is "
"now an error. `#95359 <https://github.com/llvm/llvm-project/issues/95359>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:757
msgid ""
"Clang now diagnoses integer constant expressions that are folded to a "
"constant value as an extension in more circumstances. Fixes `#59863 <https://"
"github.com/llvm/llvm-project/issues/59863>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:759
msgid ""
"Clang now diagnoses dangling assignments for pointer-like objects (annotated "
"with `[[gsl::Pointer]]`) under `-Wdangling-assignment-gsl` (off by default) "
"Fixes `#63310 <https://github.com/llvm/llvm-project/issues/63310>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:762
msgid ""
"Clang now diagnoses uses of alias templates with a deprecated attribute. "
"(Fixes `#18236 <https://github.com/llvm/llvm-project/issues/18236>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:775
msgid ""
"Clang now diagnoses undefined behavior in constant expressions more "
"consistently. This includes invalid shifts, and signed overflow in "
"arithmetic."
msgstr ""

#: ../../../ReleaseNotes.rst:777
msgid ""
"Clang now diagnoses dangling references to fields of temporary objects. "
"Fixes `#81589 <https://github.com/llvm/llvm-project/issues/81589>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:781
msgid "Improvements to Clang's time-trace"
msgstr ""

#: ../../../ReleaseNotes.rst:783
msgid ""
"Clang now specifies that using ``auto`` in a lambda parameter is a C++14 "
"extension when appropriate. (`#46059: <https://github.com/llvm/llvm-project/"
"issues/46059>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:786
msgid ""
"Clang now adds source file infomation for template instantiations as "
"``event[\"args\"][\"filename\"]``. This added behind an option ``-ftime-"
"trace-verbose``. This is expected to increase the size of trace by 2-3 times."
msgstr ""

#: ../../../ReleaseNotes.rst:790
msgid "Improvements to Coverage Mapping"
msgstr ""

#: ../../../ReleaseNotes.rst:792
msgid ""
"Macros defined in system headers are not expanded in coverage mapping. "
"Conditional expressions in system header macros are no longer taken into "
"account for branch coverage. They can be included with ``-mllvm -system-"
"headers-coverage``. (`#78920: <https://github.com/llvm/llvm-project/"
"issues/78920>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:797
msgid ""
"MC/DC Coverage has been improved. (`#82448: <https://github.com/llvm/llvm-"
"project/pull/82448>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:800
msgid ""
"The maximum number of conditions is no longer limited to 6. See `this "
"<SourceBasedCodeCoverage.html#mc-dc-instrumentation>` for more details."
msgstr ""

#: ../../../ReleaseNotes.rst:805
msgid "Bug Fixes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:806
msgid ""
"Clang's ``-Wundefined-func-template`` no longer warns on pure virtual "
"functions. (`#74016 <https://github.com/llvm/llvm-project/issues/74016>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:809
msgid ""
"Fixed missing warnings when comparing mismatched enumeration constants in C "
"(`#29217 <https://github.com/llvm/llvm-project/issues/29217>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:812
msgid ""
"Clang now accepts elaborated-type-specifiers that explicitly specialize a "
"member class template for an implicit instantiation of a class template."
msgstr ""

#: ../../../ReleaseNotes.rst:815
msgid ""
"Fixed missing warnings when doing bool-like conversions in C23 (`#79435 "
"<https://github.com/llvm/llvm-project/issues/79435>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:816
msgid ""
"Clang's ``-Wshadow`` no longer warns when an init-capture is named the same "
"as a class field unless the lambda can capture this. Fixes (`#71976 <https://"
"github.com/llvm/llvm-project/issues/71976>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:820
msgid ""
"Clang now accepts qualified partial/explicit specializations of variable "
"templates that are not nominable in the lookup context of the specialization."
msgstr ""

#: ../../../ReleaseNotes.rst:823
msgid ""
"Clang now doesn't produce false-positive warning `-Wconstant-logical-"
"operand` for logical operators in C23. Fixes (`#64356 <https://github.com/"
"llvm/llvm-project/issues/64356>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:827
msgid ""
"``__is_trivially_relocatable`` no longer returns ``false`` for volatile-"
"qualified types. Fixes (`#77091 <https://github.com/llvm/llvm-project/"
"issues/77091>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:830
msgid ""
"Clang no longer produces a false-positive `-Wunused-variable` warning for "
"variables created through copy initialization having side-effects in C++17 "
"and later. Fixes (`#64356 <https://github.com/llvm/llvm-project/"
"issues/64356>`_) (`#79518 <https://github.com/llvm/llvm-project/"
"issues/79518>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:834
msgid ""
"Fix value of predefined macro ``__FUNCTION__`` in MSVC compatibility mode. "
"Fixes (`#66114 <https://github.com/llvm/llvm-project/issues/66114>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:837
msgid ""
"Clang now emits errors for explicit specializations/instatiations of lambda "
"call operator. Fixes (`#83267 <https://github.com/llvm/llvm-project/"
"issues/83267>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:841
msgid ""
"Fix crash on ill-formed partial specialization with CRTP. Fixes (`#89374 "
"<https://github.com/llvm/llvm-project/issues/89374>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:844
msgid ""
"Clang now correctly generates overloads for bit-precise integer types for "
"builtin operators in C++. Fixes `#82998 <https://github.com/llvm/llvm-"
"project/issues/82998>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:847
msgid ""
"Fix crash when destructor definition is preceded with an equals sign. Fixes "
"(`#89544 <https://github.com/llvm/llvm-project/issues/89544>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:850
msgid ""
"When performing mixed arithmetic between ``_Complex`` floating-point types "
"and integers, Clang now correctly promotes the integer to its corresponding "
"real floating-point type only rather than to the complex type (e.g. "
"``_Complex float / int`` is now evaluated as ``_Complex float / float`` "
"rather than ``_Complex float / _Complex float``), as mandated by the C "
"standard. This significantly improves codegen of `*` and `/` especially. "
"Fixes `#31205 <https://github.com/llvm/llvm-project/issues/31205>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:857
msgid ""
"Fixes an assertion failure on invalid code when trying to define member "
"functions in lambdas."
msgstr ""

#: ../../../ReleaseNotes.rst:860
msgid ""
"Fixed a regression in CTAD that a friend declaration that befriends itself "
"may cause incorrect constraint substitution. (`#86769 <https://github.com/"
"llvm/llvm-project/issues/86769>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:863
msgid ""
"Fixed an assertion failure on invalid InitListExpr in C89 mode (`#88008 "
"<https://github.com/llvm/llvm-project/issues/88008>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:865
msgid ""
"Fixed missing destructor calls when we branch from middle of an expression. "
"This could happen through a branch in stmt-expr or in an expression "
"containing a coroutine suspension. Fixes (`#63818 <https://github.com/llvm/"
"llvm-project/issues/63818>`_) (`#88478 <https://github.com/llvm/llvm-project/"
"issues/88478>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:869
msgid ""
"Clang will no longer diagnose an erroneous non-dependent ``switch`` "
"condition during instantiation, and instead will only diagnose it once, "
"during checking of the function template."
msgstr ""

#: ../../../ReleaseNotes.rst:873
msgid ""
"Clang now allows the value of unroll count to be zero in ``#pragma GCC "
"unroll`` and ``#pragma unroll``. The values of 0 and 1 block any unrolling "
"of the loop. This keeps the same behavior with GCC. Fixes (`#88624 <https://"
"github.com/llvm/llvm-project/issues/88624>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:877
msgid ""
"Clang will no longer emit a duplicate -Wunused-value warning for an "
"expression `(A, B)` which evaluates to glvalue `B` that can be converted to "
"non ODR-use. (`#45783 <https://github.com/llvm/llvm-project/issues/45783>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:880
msgid ""
"Clang now correctly disallows VLA type compound literals, e.g. ``(int[size])"
"{}``, as the C standard mandates. (`#89835 <https://github.com/llvm/llvm-"
"project/issues/89835>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:883
msgid ""
"``__is_array`` and ``__is_bounded_array`` no longer return ``true`` for zero-"
"sized arrays. Fixes (`#54705 <https://github.com/llvm/llvm-project/"
"issues/54705>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:886
msgid ""
"Correctly reject declarations where a statement is required in C. Fixes "
"`#92775 <https://github.com/llvm/llvm-project/issues/92775>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:889
msgid ""
"Fixed `static_cast` to array of unknown bound. Fixes (`#62863 <https://"
"github.com/llvm/llvm-project/issues/62863>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:891
msgid ""
"Fixed Clang crashing when failing to perform some C++ Initialization "
"Sequences. (`#98102 <https://github.com/llvm/llvm-project/issues/98102>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:893
msgid ""
"``__is_trivially_equality_comparable`` no longer returns true for types "
"which have a constrained defaulted comparison operator (`#89293 <https://"
"github.com/llvm/llvm-project/issues/89293>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:896
msgid ""
"Fixed Clang from generating dangling StringRefs when deserializing Exprs & "
"Stmts (`#98667 <https://github.com/llvm/llvm-project/issues/98667>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:898
msgid ""
"``__has_unique_object_representations`` correctly handles arrays of unknown "
"bounds of types by ensuring they are complete and instantiating them if "
"needed. Fixes (`#95311 <https://github.com/llvm/llvm-project/"
"issues/95311>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:901
msgid ""
"``typeof_unqual`` now properly removes type qualifiers from arrays and their "
"element types. (`#92667 <https://github.com/llvm/llvm-project/"
"issues/92667>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:903
msgid ""
"Fixed an assertion failure when a template non-type parameter contains an "
"invalid expression."
msgstr ""

#: ../../../ReleaseNotes.rst:906
msgid ""
"Fixed the definition of ``ATOMIC_FLAG_INIT`` in ``<stdatomic.h>`` so it can "
"be used in C++."
msgstr ""

#: ../../../ReleaseNotes.rst:910
msgid "Bug Fixes to Compiler Builtins"
msgstr ""

#: ../../../ReleaseNotes.rst:912
msgid ""
"Fix crash when atomic builtins are called with pointer to zero-size struct "
"(`#90330 <https://github.com/llvm/llvm-project/issues/90330>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:914
msgid ""
"Clang now allows pointee types of atomic builtin arguments to be complete "
"template types that was not instantiated elsewhere."
msgstr ""

#: ../../../ReleaseNotes.rst:918
msgid "Bug Fixes to Attribute Support"
msgstr ""

#: ../../../ReleaseNotes.rst:921
msgid "Bug Fixes to C++ Support"
msgstr ""

#: ../../../ReleaseNotes.rst:923
msgid ""
"Fix crash when calling the constructor of an invalid class. (`#10518 "
"<https://github.com/llvm/llvm-project/issues/10518>`_) (`#67914 <https://"
"github.com/llvm/llvm-project/issues/67914>`_) (`#78388 <https://github.com/"
"llvm/llvm-project/issues/78388>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:925
msgid ""
"Fix crash when using lifetimebound attribute in function with trailing "
"return. (`#73619 <https://github.com/llvm/llvm-project/issues/73619>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:927
msgid ""
"Addressed an issue where constraints involving injected class types are "
"perceived distinct from its specialization types. (`#56482 <https://github."
"com/llvm/llvm-project/issues/56482>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:929
msgid ""
"Fixed a bug where variables referenced by requires-clauses inside nested "
"generic lambdas were not properly injected into the constraint scope. "
"(`#73418 <https://github.com/llvm/llvm-project/issues/73418>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:931
msgid ""
"Fixed a crash where substituting into a requires-expression that refers to "
"function parameters during the equivalence determination of two constraint "
"expressions. (`#74447 <https://github.com/llvm/llvm-project/issues/74447>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:934
msgid ""
"Fixed deducing auto& from const int in template parameters of partial "
"specializations. (`#77189 <https://github.com/llvm/llvm-project/"
"issues/77189>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:936
msgid ""
"Fix for crash when using a erroneous type in a return statement. (`#63244 "
"<https://github.com/llvm/llvm-project/issues/63244>`_) (`#79745 <https://"
"github.com/llvm/llvm-project/issues/79745>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:938
msgid ""
"Fixed an out-of-bounds error caused by building a recovery expression for "
"ill-formed function calls while substituting into constraints. (`#58548 "
"<https://github.com/llvm/llvm-project/issues/58548>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:940
msgid ""
"Fix incorrect code generation caused by the object argument of ``static "
"operator()`` and ``static operator[]`` calls not being evaluated. (`#67976 "
"<https://github.com/llvm/llvm-project/issues/67976>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:942
msgid ""
"Fix crash and diagnostic with const qualified member operator new. Fixes "
"(`#79748 <https://github.com/llvm/llvm-project/issues/79748>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:944
msgid ""
"Fixed a crash where substituting into a requires-expression that involves "
"parameter packs during the equivalence determination of two constraint "
"expressions. (`#72557 <https://github.com/llvm/llvm-project/issues/72557>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:946
msgid ""
"Fix a crash when specializing an out-of-line member function with a default "
"parameter where we did an incorrect specialization of the initialization of "
"the default parameter. (`#68490 <https://github.com/llvm/llvm-project/"
"issues/68490>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:949
msgid ""
"Fix a crash when trying to call a varargs function that also has an explicit "
"object parameter. Fixes (`#80971 <https://github.com/llvm/llvm-project/"
"issues/80971>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:951
msgid ""
"Reject explicit object parameters on `new` and `delete` operators. (`#82249 "
"<https://github.com/llvm/llvm-project/issues/82249>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:952
msgid ""
"Fix a crash when trying to call a varargs function that also has an explicit "
"object parameter. (`#80971 <https://github.com/llvm/llvm-project/"
"issues/80971>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:953
msgid ""
"Fixed a bug where abbreviated function templates would append their invented "
"template parameters to an empty template parameter lists."
msgstr ""

#: ../../../ReleaseNotes.rst:955
msgid ""
"Fix parsing of abominable function types inside type traits. Fixes `#77585 "
"<https://github.com/llvm/llvm-project/issues/77585>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:956
msgid ""
"Clang now classifies aggregate initialization in C++17 and newer as constant "
"or non-constant more accurately. Previously, only a subset of the "
"initializer elements were considered, misclassifying some initializers as "
"constant. Partially fixes `#80510 <https://github.com/llvm/llvm-project/"
"issues/80510>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:960
msgid ""
"Clang now ignores top-level cv-qualifiers on function parameters in template "
"partial orderings. (`#75404 <https://github.com/llvm/llvm-project/"
"issues/75404>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:961
msgid ""
"No longer reject valid use of the ``_Alignas`` specifier when declaring a "
"local variable, which is supported as a C11 extension in C++. Previously, it "
"was only accepted at namespace scope but not at local function scope."
msgstr ""

#: ../../../ReleaseNotes.rst:964
msgid ""
"Clang no longer tries to call consteval constructors at runtime when they "
"appear in a member initializer. (`#82154 <https://github.com/llvm/llvm-"
"project/issues/82154>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:965
msgid ""
"Fix crash when using an immediate-escalated function at global scope. "
"(`#82258 <https://github.com/llvm/llvm-project/issues/82258>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:966
msgid ""
"Correctly immediate-escalate lambda conversion functions. (`#82258 <https://"
"github.com/llvm/llvm-project/issues/82258>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:967
msgid ""
"Fixed an issue where template parameters of a nested abbreviated generic "
"lambda within a requires-clause lie at the same depth as those of the "
"surrounding lambda. This, in turn, results in the wrong template argument "
"substitution during constraint checking. (`#78524 <https://github.com/llvm/"
"llvm-project/issues/78524>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:971
msgid ""
"Clang no longer instantiates the exception specification of discarded "
"candidate function templates when determining the primary template of an "
"explicit specialization."
msgstr ""

#: ../../../ReleaseNotes.rst:973
msgid ""
"Fixed a crash in Microsoft compatibility mode where unqualified dependent "
"base class lookup searches the bases of an incomplete class."
msgstr ""

#: ../../../ReleaseNotes.rst:975
msgid ""
"Fix a crash when an unresolved overload set is encountered on the RHS of a "
"``.*`` operator. (`#53815 <https://github.com/llvm/llvm-project/"
"issues/53815>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:977
msgid ""
"In ``__restrict``-qualified member functions, attach ``__restrict`` to the "
"pointer type of ``this`` rather than the pointee type. Fixes (`#82941 "
"<https://github.com/llvm/llvm-project/issues/82941>`_), (`#42411 <https://"
"github.com/llvm/llvm-project/issues/42411>`_) and (`#18121 <https://github."
"com/llvm/llvm-project/issues/18121>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:980
msgid ""
"Clang now properly reports supported C++11 attributes when using "
"``__has_cpp_attribute`` and parses attributes with arguments in C++03 "
"(`#82995 <https://github.com/llvm/llvm-project/issues/82995>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:982
msgid ""
"Clang now properly diagnoses missing 'default' template arguments on a "
"variety of templates. Previously we were diagnosing on any non-function "
"template instead of only on class, alias, and variable templates, as last "
"updated by CWG2032. Fixes (`#83461 <https://github.com/llvm/llvm-project/"
"issues/83461>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:986
msgid ""
"Fixed an issue where an attribute on a declarator would cause the attribute "
"to be destructed prematurely. This fixes a pair of Chromium that were "
"brought to our attention by an attempt to fix in (`#77703 <https://github."
"com/llvm/llvm-project/issues/77703>`_). Fixes (`#83385 <https://github.com/"
"llvm/llvm-project/issues/83385>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:989
msgid ""
"Fix evaluation of some immediate calls in default arguments. Fixes (`#80630 "
"<https://github.com/llvm/llvm-project/issues/80630>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:991
msgid ""
"Fixed an issue where the ``RequiresExprBody`` was involved in the lambda "
"dependency calculation. (`#56556 <https://github.com/llvm/llvm-project/"
"issues/56556>`_), (`#82849 <https://github.com/llvm/llvm-project/"
"issues/82849>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:993
msgid ""
"Fix a bug where overload resolution falsely reported an ambiguity when it "
"was comparing a member-function against a non member function or a member-"
"function with an explicit object parameter against a member function with no "
"explicit object parameter when one of the function had more specialized "
"templates. Fixes `#82509 <https://github.com/llvm/llvm-project/"
"issues/82509>`_ and `#74494 <https://github.com/llvm/llvm-project/"
"issues/74494>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:997
msgid ""
"Clang now supports direct lambda calls inside of a type alias template "
"declarations. This addresses (`#70601 <https://github.com/llvm/llvm-project/"
"issues/70601>`_), (`#76674 <https://github.com/llvm/llvm-project/"
"issues/76674>`_), (`#79555 <https://github.com/llvm/llvm-project/"
"issues/79555>`_), (`#81145 <https://github.com/llvm/llvm-project/"
"issues/81145>`_) and (`#82104 <https://github.com/llvm/llvm-project/"
"issues/82104>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:999
msgid ""
"Allow access to a public template alias declaration that refers to friend's "
"private nested type. (`#25708 <https://github.com/llvm/llvm-project/"
"issues/25708>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1001
msgid ""
"Fixed a crash in constant evaluation when trying to access a captured "
"``this`` pointer in a lambda with an explicit object parameter. Fixes "
"(`#80997 <https://github.com/llvm/llvm-project/issues/80997>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1004
msgid ""
"Fix an issue where missing set friend declaration in template class "
"instantiation. Fixes (`#84368 <https://github.com/llvm/llvm-project/"
"issues/84368>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1006
msgid ""
"Fixed a crash while checking constraints of a trailing requires-expression "
"of a lambda, that the expression references to an entity declared outside of "
"the lambda. (`#64808 <https://github.com/llvm/llvm-project/issues/64808>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1008
msgid ""
"Clang's __builtin_bit_cast will now produce a constant value for records "
"with empty bases. See: (`#82383 <https://github.com/llvm/llvm-project/"
"issues/82383>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1010
msgid ""
"Fix a crash when instantiating a lambda that captures ``this`` outside of "
"its context. Fixes (`#85343 <https://github.com/llvm/llvm-project/"
"issues/85343>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1011
msgid ""
"Fix an issue where a namespace alias could be defined using a qualified name "
"(all name components following the first `::` were ignored)."
msgstr ""

#: ../../../ReleaseNotes.rst:1013
msgid ""
"Fix an out-of-bounds crash when checking the validity of template partial "
"specializations. (part of `#86757 <https://github.com/llvm/llvm-project/"
"issues/86757>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1014
msgid ""
"Fix an issue caused by not handling invalid cases when substituting into the "
"parameter mapping of a constraint. Fixes (`#86757 <https://github.com/llvm/"
"llvm-project/issues/86757>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1015
msgid ""
"Fixed a bug that prevented member function templates of class templates "
"declared with a deduced return type from being explicitly specialized for a "
"given implicit instantiation of the class template."
msgstr ""

#: ../../../ReleaseNotes.rst:1017
msgid ""
"Fixed a crash when ``this`` is used in a dependent class scope function "
"template specialization that instantiates to a static member function."
msgstr ""

#: ../../../ReleaseNotes.rst:1019
msgid ""
"Fix crash when inheriting from a cv-qualified type. Fixes `#35603 <https://"
"github.com/llvm/llvm-project/issues/35603>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1020
msgid ""
"Fix a crash when the using enum declaration uses an anonymous enumeration. "
"Fixes (`#86790 <https://github.com/llvm/llvm-project/issues/86790>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1021
msgid ""
"Handled an edge case in ``getFullyPackExpandedSize`` so that we now avoid a "
"false-positive diagnostic. (`#84220 <https://github.com/llvm/llvm-project/"
"issues/84220>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1022
msgid ""
"Clang now correctly tracks type dependence of by-value captures in lambdas "
"with an explicit object parameter. Fixes (`#70604 <https://github.com/llvm/"
"llvm-project/issues/70604>`_), (`#79754 <https://github.com/llvm/llvm-"
"project/issues/79754>`_), (`#84163 <https://github.com/llvm/llvm-project/"
"issues/84163>`_), (`#84425 <https://github.com/llvm/llvm-project/"
"issues/84425>`_), (`#86054 <https://github.com/llvm/llvm-project/"
"issues/86054>`_), (`#86398 <https://github.com/llvm/llvm-project/"
"issues/86398>`_), and (`#86399 <https://github.com/llvm/llvm-project/"
"issues/86399>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1025
msgid ""
"Fix a crash when deducing ``auto`` from an invalid dereference (`#88329 "
"<https://github.com/llvm/llvm-project/issues/88329>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1026
msgid ""
"Fix a crash in requires expression with templated base class member "
"function. Fixes (`#84020 <https://github.com/llvm/llvm-project/"
"issues/84020>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1027
msgid ""
"Fix a crash caused by defined struct in a type alias template when the "
"structure has fields with dependent type. Fixes (`#75221 <https://github.com/"
"llvm/llvm-project/issues/75221>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1029
msgid ""
"Fix the Itanium mangling of lambdas defined in a member of a local class "
"(`#88906 <https://github.com/llvm/llvm-project/issues/88906>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1030
msgid ""
"Fixed a crash when trying to evaluate a user-defined ``static_assert`` "
"message whose ``size()`` function returns a large or negative value. Fixes "
"(`#89407 <https://github.com/llvm/llvm-project/issues/89407>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1032
msgid ""
"Fixed a use-after-free bug in parsing of type constraints with default "
"arguments that involve lambdas. (`#67235 <https://github.com/llvm/llvm-"
"project/issues/67235>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1033
msgid ""
"Fixed bug in which the body of a consteval lambda within a template was not "
"parsed as within an immediate function context."
msgstr ""

#: ../../../ReleaseNotes.rst:1035
msgid ""
"Fix CTAD for ``std::initializer_list``. This allows ``std::"
"initializer_list{1, 2, 3}`` to be deduced as ``std::initializer_list<int>`` "
"as intended."
msgstr ""

#: ../../../ReleaseNotes.rst:1037
msgid ""
"Fix a bug on template partial specialization whose template parameter is "
"`decltype(auto)`."
msgstr ""

#: ../../../ReleaseNotes.rst:1038
msgid ""
"Fix a bug on template partial specialization with issue on deduction of "
"nontype template parameter whose type is `decltype(auto)`. Fixes (`#68885 "
"<https://github.com/llvm/llvm-project/issues/68885>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1040
msgid ""
"Clang now correctly treats the noexcept-specifier of a friend function to be "
"a complete-class context."
msgstr ""

#: ../../../ReleaseNotes.rst:1041
msgid ""
"Fix an assertion failure when parsing an invalid members of an anonymous "
"class. (`#85447 <https://github.com/llvm/llvm-project/issues/85447>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1042
msgid ""
"Fixed a misuse of ``UnresolvedLookupExpr`` for ill-formed templated "
"expressions. Fixes (`#48673 <https://github.com/llvm/llvm-project/"
"issues/48673>`_), (`#63243 <https://github.com/llvm/llvm-project/"
"issues/63243>`_) and (`#88832 <https://github.com/llvm/llvm-project/"
"issues/88832>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1044
msgid ""
"Clang now defers all substitution into the exception specification of a "
"function template specialization until the noexcept-specifier is "
"instantiated."
msgstr ""

#: ../../../ReleaseNotes.rst:1046
msgid ""
"Fix a crash when an implicitly declared ``operator==`` function with a "
"trailing requires-clause has its constraints compared to that of another "
"declaration."
msgstr ""

#: ../../../ReleaseNotes.rst:1048
msgid ""
"Fix a bug where explicit specializations of member functions/function "
"templates would have substitution performed incorrectly when checking "
"constraints. Fixes (`#90349 <https://github.com/llvm/llvm-project/"
"issues/90349>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1050
msgid ""
"Clang now allows constrained member functions to be explicitly specialized "
"for an implicit instantiation of a class template."
msgstr ""

#: ../../../ReleaseNotes.rst:1052
msgid ""
"Fix a C++23 bug in implementation of P2564R3 which evaluates immediate "
"invocations in place within initializers for variables that are usable in "
"constant expressions or are constant initialized, rather than evaluating "
"them as a part of the larger manifestly constant evaluated expression."
msgstr ""

#: ../../../ReleaseNotes.rst:1056
msgid ""
"Fix a bug in access control checking due to dealyed checking of friend "
"declaration. Fixes (`#12361 <https://github.com/llvm/llvm-project/"
"issues/12361>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1057
msgid ""
"Correctly treat the compound statement of an ``if consteval`` as an "
"immediate context. Fixes (`#91509 <https://github.com/llvm/llvm-project/"
"issues/91509>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1058
msgid ""
"When partial ordering alias templates against template template parameters, "
"allow pack expansions when the alias has a fixed-size parameter list. Fixes "
"(`#62529 <https://github.com/llvm/llvm-project/issues/62529>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1060
msgid ""
"Clang now ignores template parameters only used within the exception "
"specification of candidate function templates during partial ordering when "
"deducing template arguments from a function declaration or when taking the "
"address of a function template."
msgstr ""

#: ../../../ReleaseNotes.rst:1063
msgid ""
"Fix a bug with checking constrained non-type template parameters for "
"equivalence. Fixes (`#77377 <https://github.com/llvm/llvm-project/"
"issues/77377>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1064
msgid ""
"Fix a bug where the last argument was not considered when considering the "
"most viable function for explicit object argument member functions. Fixes "
"(`#92188 <https://github.com/llvm/llvm-project/issues/92188>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1066
msgid ""
"Fix a C++11 crash when a non-const non-static member function is defined out-"
"of-line with the ``constexpr`` specifier. Fixes (`#61004 <https://github.com/"
"llvm/llvm-project/issues/61004>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1068
msgid ""
"Clang no longer transforms dependent qualified names into implicit class "
"member access expressions until it can be determined whether the name is "
"that of a non-static member."
msgstr ""

#: ../../../ReleaseNotes.rst:1070
msgid ""
"Clang now correctly diagnoses when the current instantiation is used as an "
"incomplete base class."
msgstr ""

#: ../../../ReleaseNotes.rst:1071
msgid ""
"Clang no longer treats ``constexpr`` class scope function template "
"specializations of non-static members as implicitly ``const`` in language "
"modes after C++11."
msgstr ""

#: ../../../ReleaseNotes.rst:1073
msgid ""
"Fixed a crash when trying to emit captures in a lambda call operator with an "
"explicit object parameter that is called on a derived type of the lambda. "
"Fixes (`#87210 <https://github.com/llvm/llvm-project/issues/87210>`_), "
"(GH89541)."
msgstr ""

#: ../../../ReleaseNotes.rst:1076
msgid ""
"Clang no longer tries to check if an expression is immediate-escalating in "
"an unevaluated context. Fixes (`#91308 <https://github.com/llvm/llvm-project/"
"issues/91308>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1078
msgid ""
"Fix a crash caused by a regression in the handling of ``source_location`` in "
"dependent contexts. Fixes (`#92680 <https://github.com/llvm/llvm-project/"
"issues/92680>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1080
msgid ""
"Fixed a crash when diagnosing failed conversions involving template "
"parameter packs. (`#93076 <https://github.com/llvm/llvm-project/"
"issues/93076>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1082
msgid ""
"Fixed a regression introduced in Clang 18 causing a static function "
"overloading a non-static function with the same parameters not to be "
"diagnosed. (Fixes `#93456 <https://github.com/llvm/llvm-project/"
"issues/93456>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1084
msgid ""
"Clang now diagnoses unexpanded parameter packs in attributes. (Fixes `#93269 "
"<https://github.com/llvm/llvm-project/issues/93269>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1085
msgid ""
"Clang now allows ``@$``` in raw string literals. Fixes (`#93130 <https://"
"github.com/llvm/llvm-project/issues/93130>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1086
msgid ""
"Fix an assertion failure when checking invalid ``this`` usage in the wrong "
"context. (Fixes `#91536 <https://github.com/llvm/llvm-project/"
"issues/91536>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1087
msgid ""
"Clang no longer models dependent NTTP arguments as "
"``TemplateParamObjectDecl`` s. Fixes (`#84052 <https://github.com/llvm/llvm-"
"project/issues/84052>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1088
msgid ""
"Fix incorrect merging of modules which contain using declarations which "
"shadow other declarations. This could manifest as ODR checker false "
"positives. Fixes (`#80252 <https://github.com/llvm/llvm-project/"
"issues/80252>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1091
msgid ""
"Fix a regression introduced in Clang 18 causing incorrect overload "
"resolution in the presence of functions only differering by their "
"constraints when only one of these function was variadic."
msgstr ""

#: ../../../ReleaseNotes.rst:1093
msgid ""
"Fix a crash when a variable is captured by a block nested inside a lambda. "
"(Fixes `#93625 <https://github.com/llvm/llvm-project/issues/93625>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1094
msgid ""
"Fixed a type constraint substitution issue involving a generic lambda "
"expression. (`#93821 <https://github.com/llvm/llvm-project/issues/93821>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1095
msgid ""
"Fix a crash caused by improper use of ``__array_extent``. (`#80474 <https://"
"github.com/llvm/llvm-project/issues/80474>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1096
msgid ""
"Fixed several bugs in capturing variables within unevaluated contexts. "
"(`#63845 <https://github.com/llvm/llvm-project/issues/63845>`_), (`#67260 "
"<https://github.com/llvm/llvm-project/issues/67260>`_), (`#69307 <https://"
"github.com/llvm/llvm-project/issues/69307>`_), (`#88081 <https://github.com/"
"llvm/llvm-project/issues/88081>`_), (`#89496 <https://github.com/llvm/llvm-"
"project/issues/89496>`_), (`#90669 <https://github.com/llvm/llvm-project/"
"issues/90669>`_), (`#91633 <https://github.com/llvm/llvm-project/"
"issues/91633>`_) and (`#97453 <https://github.com/llvm/llvm-project/"
"issues/97453>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1098
msgid ""
"Fixed a crash in constraint instantiation under nested lambdas with "
"dependent parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:1099
msgid ""
"Fixed handling of brace ellison when building deduction guides. (`#64625 "
"<https://github.com/llvm/llvm-project/issues/64625>`_), (`#83368 <https://"
"github.com/llvm/llvm-project/issues/83368>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1100
msgid ""
"Fixed a failed assertion when attempting to convert an integer representing "
"the difference between the addresses of two labels (a GNU extension) to a "
"pointer within a constant expression. (`#95366 <https://github.com/llvm/llvm-"
"project/issues/95366>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1102
msgid ""
"Fix immediate escalation bugs in the presence of dependent call arguments. "
"(`#94935 <https://github.com/llvm/llvm-project/issues/94935>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1103
msgid ""
"Clang now diagnoses explicit specializations with storage class specifiers "
"in all contexts."
msgstr ""

#: ../../../ReleaseNotes.rst:1104
msgid ""
"Fix an assertion failure caused by parsing a lambda used as a default "
"argument for the value of a forward-declared class. (`#93512 <https://github."
"com/llvm/llvm-project/issues/93512>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1106
msgid ""
"Fixed a bug in access checking inside return-type-requirement of compound "
"requirements. (`#93788 <https://github.com/llvm/llvm-project/"
"issues/93788>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1107
msgid ""
"Fixed an assertion failure about invalid conversion when calling lambda. "
"(`#96205 <https://github.com/llvm/llvm-project/issues/96205>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1108
msgid ""
"Fixed a bug where the first operand of binary ``operator&`` would be "
"transformed as if it was the operand of the address of operator. (`#97483 "
"<https://github.com/llvm/llvm-project/issues/97483>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1110
msgid ""
"Fixed an assertion failure about a constant expression which is a known "
"integer but is not evaluated to an integer. (`#96670 <https://github.com/"
"llvm/llvm-project/issues/96670>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1112
msgid ""
"Fixed a bug where references to lambda capture inside a ``noexcept`` "
"specifier were not correctly instantiated. (`#95735 <https://github.com/llvm/"
"llvm-project/issues/95735>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1114
msgid ""
"Fixed a CTAD substitution bug involving type aliases that reference outer "
"template parameters. (`#94614 <https://github.com/llvm/llvm-project/"
"issues/94614>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1115
msgid ""
"Clang now correctly handles unexpanded packs in the template parameter list "
"of a generic lambda expression (`#48937 <https://github.com/llvm/llvm-"
"project/issues/48937>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1117
msgid ""
"Fix a crash when parsing an invalid type-requirement in a requires "
"expression. (`#51868 <https://github.com/llvm/llvm-project/issues/51868>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1118
msgid ""
"Fix parsing of built-in type-traits such as ``__is_pointer`` in libstdc++ "
"headers. (`#95598 <https://github.com/llvm/llvm-project/issues/95598>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1119
msgid ""
"Fixed failed assertion when resolving context of defaulted comparison method "
"outside of struct. (`#96043 <https://github.com/llvm/llvm-project/"
"issues/96043>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1120
msgid ""
"Clang now diagnoses explicit object parameters in member pointers and other "
"contexts where they should not appear. Fixes (`#85992 <https://github.com/"
"llvm/llvm-project/issues/85992>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1122
msgid ""
"Fixed a crash-on-invalid bug involving extraneous template parameter with "
"concept substitution. (`#73885 <https://github.com/llvm/llvm-project/"
"issues/73885>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1123
msgid ""
"Fixed assertion failure by skipping the analysis of an invalid field "
"declaration. (`#99868 <https://github.com/llvm/llvm-project/issues/99868>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1124
msgid ""
"Fix an issue with dependent source location expressions (`#106428 <https://"
"github.com/llvm/llvm-project/issues/106428>`_), (`#81155 <https://github.com/"
"llvm/llvm-project/issues/81155>`_), (`#80210 <https://github.com/llvm/llvm-"
"project/issues/80210>`_), (`#85373 <https://github.com/llvm/llvm-project/"
"issues/85373>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1125
msgid ""
"Fix handling of ``_`` as the name of a lambda's init capture variable. "
"(`#107024 <https://github.com/llvm/llvm-project/issues/107024>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1126
msgid ""
"Fixed recognition of ``std::initializer_list`` when it's surrounded with "
"``extern \"C++\"`` and exported out of a module (which is the case e.g. in "
"MSVC's implementation of ``std`` module). (`#118218 <https://github.com/llvm/"
"llvm-project/issues/118218>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1130
msgid "Bug Fixes to AST Handling"
msgstr ""

#: ../../../ReleaseNotes.rst:1131
msgid ""
"Clang now properly preserves ``FoundDecls`` within a ``ConceptReference``. "
"(`#82628 <https://github.com/llvm/llvm-project/issues/82628>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1132
msgid ""
"The presence of the ``typename`` keyword is now stored in "
"``TemplateTemplateParmDecl``."
msgstr ""

#: ../../../ReleaseNotes.rst:1133
msgid ""
"Fixed malformed AST generated for anonymous union access in templates. "
"(`#90842 <https://github.com/llvm/llvm-project/issues/90842>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1134
msgid ""
"Improved preservation of qualifiers and sugar in `TemplateNames`, including "
"template keyword."
msgstr ""

#: ../../../ReleaseNotes.rst:1138
msgid "Miscellaneous Bug Fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1140
msgid ""
"Fixed an infinite recursion in ASTImporter, on return type declared inside "
"body of C++11 lambda without trailing return (`#68775 <https://github.com/"
"llvm/llvm-project/issues/68775>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1142
msgid ""
"Fixed declaration name source location of instantiated function definitions "
"(GH71161)."
msgstr ""

#: ../../../ReleaseNotes.rst:1143
msgid ""
"Improve diagnostic output to print an expression instead of 'no argument` "
"when comparing Values as template arguments."
msgstr ""

#: ../../../ReleaseNotes.rst:1146
msgid "Miscellaneous Clang Crashes Fixed"
msgstr ""

#: ../../../ReleaseNotes.rst:1148
msgid ""
"Do not attempt to dump the layout of dependent types or invalid declarations "
"when ``-fdump-record-layouts-complete`` is passed. Fixes `#83684 <https://"
"github.com/llvm/llvm-project/issues/83684>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:1150
msgid ""
"Unhandled StructuralValues in the template differ (`#93068 <https://github."
"com/llvm/llvm-project/issues/93068>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:1153
msgid "OpenACC Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1156
msgid "Target Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1159
msgid "AMDGPU Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1162
msgid "X86 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1164
msgid "Remove knl/knm specific ISA supports: AVX512PF, AVX512ER, PREFETCHWT1"
msgstr ""

#: ../../../ReleaseNotes.rst:1165
msgid ""
"Support has been removed for the AMD \"3DNow!\" instruction-set. Neither "
"modern AMD CPUs, nor any Intel CPUs implement these instructions, and they "
"were never widely used."
msgstr ""

#: ../../../ReleaseNotes.rst:1169
msgid ""
"The options ``-m3dnow`` and ``-m3dnowa`` are no longer honored, and will "
"emit a warning if used."
msgstr ""

#: ../../../ReleaseNotes.rst:1170
msgid ""
"The macros ``__3dNOW__`` and ``__3dNOW_A__`` are no longer ever set by the "
"compiler."
msgstr ""

#: ../../../ReleaseNotes.rst:1171
msgid ""
"The header ``<mm3dnow.h>`` is deprecated, and emits a warning if included."
msgstr ""

#: ../../../ReleaseNotes.rst:1172
msgid ""
"The 3dNow intrinsic functions have been removed: ``_m_femms``, "
"``_m_pavgusb``, ``_m_pf2id``, ``_m_pfacc``, ``_m_pfadd``, ``_m_pfcmpeq``, "
"``_m_pfcmpge``, ``_m_pfcmpgt``, ``_m_pfmax``, ``_m_pfmin``, ``_m_pfmul``, "
"``_m_pfrcp``, ``_m_pfrcpit1``, ``_m_pfrcpit2``, ``_m_pfrsqrt``, "
"``_m_pfrsqrtit1``, ``_m_pfsub``, ``_m_pfsubr``, ``_m_pi2fd``, "
"``_m_pmulhrw``, ``_m_pf2iw``, ``_m_pfnacc``, ``_m_pfpnacc``, ``_m_pi2fw``, "
"``_m_pswapdsf``, ``_m_pswapdsi``."
msgstr ""

#: ../../../ReleaseNotes.rst:1180
msgid ""
"The compiler builtins corresponding to each of the above intrinsics have "
"also been removed  (``__builtin_ia32_femms``, and so on)."
msgstr ""

#: ../../../ReleaseNotes.rst:1182
msgid ""
"\"3DNow!\" instructions remain supported in assembly code, including inside "
"inline-assembly."
msgstr ""

#: ../../../ReleaseNotes.rst:1186
msgid "Arm and AArch64 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1188
msgid ""
"ARMv7+ targets now default to allowing unaligned access, except Armv6-M, and "
"Armv8-M without the Main Extension. Baremetal targets should check that the "
"new default will work with their system configurations, since it requires "
"that SCTLR.A is 0, SCTLR.U is 1, and that the memory in question is "
"configured as \"normal\" memory. This brings Clang in-line with the default "
"settings for GCC and Arm Compiler. Aside from making Clang align with other "
"compilers, changing the default brings major performance and code size "
"improvements for most targets. We have not changed the default behavior for "
"ARMv6, but may revisit that decision in the future. Users can restore the "
"old behavior with -m[no-]unaligned-access."
msgstr ""

#: ../../../ReleaseNotes.rst:1199
msgid ""
"An alias identifier (rdma) has been added for targeting the AArch64 "
"Architecture Extension which uses Rounding Doubling Multiply Accumulate "
"instructions (rdm). The identifier is available on the command line as a "
"feature modifier for -march and -mcpu as well as via target attributes like "
"``target_version`` or ``target_clones``."
msgstr ""

#: ../../../ReleaseNotes.rst:1214
msgid ""
"Support has been added for the following processors (-mcpu identifiers in "
"parenthesis):"
msgstr ""

#: ../../../ReleaseNotes.rst:1206
msgid "Arm Cortex-R52+ (cortex-r52plus)."
msgstr ""

#: ../../../ReleaseNotes.rst:1207
msgid "Arm Cortex-R82AE (cortex-r82ae)."
msgstr ""

#: ../../../ReleaseNotes.rst:1208
msgid "Arm Cortex-A78AE (cortex-a78ae)."
msgstr ""

#: ../../../ReleaseNotes.rst:1209
msgid "Arm Cortex-A520AE (cortex-a520ae)."
msgstr ""

#: ../../../ReleaseNotes.rst:1210
msgid "Arm Cortex-A720AE (cortex-a720ae)."
msgstr ""

#: ../../../ReleaseNotes.rst:1211
msgid "Arm Cortex-A725 (cortex-a725)."
msgstr ""

#: ../../../ReleaseNotes.rst:1212
msgid "Arm Cortex-X925 (cortex-x925)."
msgstr ""

#: ../../../ReleaseNotes.rst:1213
msgid "Arm Neoverse-N3 (neoverse-n3)."
msgstr ""

#: ../../../ReleaseNotes.rst:1214
msgid "Arm Neoverse-V3 (neoverse-v3)."
msgstr ""

#: ../../../ReleaseNotes.rst:1215
msgid "Arm Neoverse-V3AE (neoverse-v3ae)."
msgstr ""

#: ../../../ReleaseNotes.rst:1216
msgid ""
"``-mbranch-protection=gcs`` has been added which enables support for the "
"Guarded Control Stack extension, and ``-mbranch-protection=standard`` also "
"enables this. Enabling GCS causes the GCS GNU property bit to be set on "
"output objects. It doesn't cause any code generation changes, as the code "
"generated by clang is already compatible with GCS."
msgstr ""

#: ../../../ReleaseNotes.rst:1222
msgid ""
"Experimental support has been added for pointer authentication ABI for С/C++."
msgstr ""

#: ../../../ReleaseNotes.rst:1224
msgid ""
"Pointer authentication ABI could be enabled for AArch64 Linux via ``-"
"mabi=pauthtest`` option or via specifying ``pauthtest`` environment part of "
"target triple."
msgstr ""

#: ../../../ReleaseNotes.rst:1228
msgid ""
"The C23 ``_BitInt`` implementation has been brought into compliance with "
"AAPCS32 and AAPCS64."
msgstr ""

#: ../../../ReleaseNotes.rst:1232
msgid "Android Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1235
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1237
msgid ""
"The clang-cl ``/Ot`` compiler option (\"optimize for speed\", also implied "
"by ``/O2``) now maps to clang's ``-O3`` optimizataztion level instead of ``-"
"O2``. Users who prefer the old behavior can use ``clang-cl /Ot /clang:-O2 ..."
"``."
msgstr ""

#: ../../../ReleaseNotes.rst:1241
msgid ""
"Clang-cl now supports function targets with intrinsic headers. This allows "
"for runtime feature detection of intrinsics. Previously under clang-cl "
"``immintrin.h`` and similar intrinsic headers would only include the "
"intrinsics if building with that feature enabled at compile time, e.g. "
"``avxintrin.h`` would only be included if AVX was enabled at compile time. "
"This was done to work around include times from MSVC STL including ``intrin."
"h`` under clang-cl. Clang-cl now provides ``intrin0.h`` for MSVC STL and "
"therefore all intrinsic features without requiring enablement at compile "
"time. Fixes `#53520 <https://github.com/llvm/llvm-project/issues/53520>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1250
msgid ""
"Improved compile times with MSVC STL. MSVC provides ``intrin0.h`` which is a "
"header that only includes intrinsics that are used by MSVC STL to avoid the "
"use of ``intrin.h``. MSVC STL when compiled under clang uses ``intrin.h`` "
"instead. Clang-cl now provides ``intrin0.h`` for the same compiler "
"throughput purposes as MSVC. Clang-cl also provides ``yvals_core.h`` to "
"redefine ``_STL_INTRIN_HEADER`` to expand to ``intrin0.h`` instead of "
"``intrin.h``. This also means that if all intrinsic features are enabled at "
"compile time including STL headers will no longer slow down compile times "
"since ``intrin.h`` is not included from MSVC STL."
msgstr ""

#: ../../../ReleaseNotes.rst:1260
msgid ""
"When the target triple is `*-windows-msvc` strict aliasing is now disabled "
"by default to ensure compatibility with msvc. Previously strict aliasing was "
"only disabled if the driver mode was cl."
msgstr ""

#: ../../../ReleaseNotes.rst:1265
msgid "LoongArch Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1267
msgid ""
"``-march=la64v1.0`` and ``-march=la64v1.1`` have been added to select the "
"``la64v1.0`` and ``la64v1.1`` architecture respectively. And ``-"
"march=la664`` is added to support the ``la664`` micro-architecture."
msgstr ""

#: ../../../ReleaseNotes.rst:1270
msgid "The 128-bits SIMD extension (``LSX``) is enabled by default."
msgstr ""

#: ../../../ReleaseNotes.rst:1271
msgid ""
"``-msimd=`` has beend added to select the SIMD extension(s) to be enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:1272
msgid ""
"Predefined macros ``__loongarch_simd_width`` and ``__loongarch_frecipe`` are "
"added."
msgstr ""

#: ../../../ReleaseNotes.rst:1276
msgid "RISC-V Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1278
msgid ""
"``__attribute__((rvv_vector_bits(N)))`` is now supported for RVV vbool*_t "
"types."
msgstr ""

#: ../../../ReleaseNotes.rst:1279
msgid "Profile names in ``-march`` option are now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:1280
msgid ""
"Passing empty structs/unions as arguments in C++ is now handled correctly. "
"The behavior is similar to GCC's."
msgstr ""

#: ../../../ReleaseNotes.rst:1281
msgid ""
"``-m[no-]scalar-strict-align`` and ``-m[no-]vector-strict-align`` options "
"have been added to give separate control of whether scalar or vector "
"misaligned accesses may be created. ``-m[no-]strict-align`` applies to both "
"scalar and vector."
msgstr ""

#: ../../../ReleaseNotes.rst:1287
msgid "PowerPC Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1289
msgid "Clang now emits errors for impossible ``__attribute__((musttail))``."
msgstr ""

#: ../../../ReleaseNotes.rst:1290
msgid ""
"Added support for ``-mcpu=[pwr11 | power11]`` and ``-mtune=[pwr11 | "
"power11]``."
msgstr ""

#: ../../../ReleaseNotes.rst:1291
msgid ""
"Added support for ``builtin_cpu_supports`` on AIX, along with a subset of "
"features that can be queried."
msgstr ""

#: ../../../ReleaseNotes.rst:1295
msgid "CUDA/HIP Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1297
msgid ""
"PTX is no longer included by default when compiling for CUDA. Using ``--cuda-"
"include-ptx=all`` will return the old behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:1301
msgid "CUDA Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1302
msgid "Clang now supports CUDA SDK up to 12.5"
msgstr ""

#: ../../../ReleaseNotes.rst:1305
msgid "AIX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1307
msgid ""
"Introduced the ``-maix-small-local-dynamic-tls`` option to produce a faster "
"access sequence for local-dynamic TLS variables where the offset from the "
"TLS base is encoded as an immediate operand. This access sequence is not "
"used for TLS variables larger than 32KB, and is currently only supported on "
"64-bit mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1312
msgid ""
"Introduced the options ``-mtocdata/-mno-tocdata`` to enable/disable TOC data "
"transformations for the listed suitable variables."
msgstr ""

#: ../../../ReleaseNotes.rst:1314
msgid ""
"Introduced the ``-maix-shared-lib-tls-model-opt`` option to enable the "
"tuning of changing local-dynamic mode access(es) to initial-exec access(es) "
"at the function level on 64-bit mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1317
msgid "Clang now emits errors for ``-gdwarf-5``."
msgstr ""

#: ../../../ReleaseNotes.rst:1318
msgid ""
"Added the support of the OpenMP runtime libomp on AIX. OpenMP applications "
"can be compiled with ``-fopenmp`` and execute on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:1322
msgid "NetBSD Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1324
msgid "Removed support for building NetBSD/i386 6.x or older binaries."
msgstr ""

#: ../../../ReleaseNotes.rst:1327
msgid "WebAssembly Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1329
msgid ""
"The -mcpu=generic configuration now enables multivalue and reference-types. "
"These proposals are standardized and available in all major engines. "
"Enabling multivalue here only enables the language feature but does not turn "
"on the multivalue ABI (this enables non-ABI uses of multivalue, like exnref)."
msgstr ""

#: ../../../ReleaseNotes.rst:1335
msgid "AVR Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1338
msgid "DWARF Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1341
msgid "Floating Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1343
msgid "Add ``__builtin__fmaf16`` builtin for floating point types."
msgstr ""

#: ../../../ReleaseNotes.rst:1346
msgid "Fixed Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1348
msgid ""
"Support fixed point precision macros according to ``7.18a.3`` of `ISO/IEC TR "
"18037:2008 <https://standards.iso.org/ittf/PubliclyAvailableStandards/"
"c051126_ISO_IEC_TR_18037_2008.zip>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:1352
msgid "AST Matchers"
msgstr ""

#: ../../../ReleaseNotes.rst:1354
msgid ""
"Fixes a long-standing performance issue in parent map generation for "
"ancestry-based matchers such as ``hasParent`` and ``hasAncestor``, making "
"them significantly faster."
msgstr ""

#: ../../../ReleaseNotes.rst:1357
msgid ""
"``isInStdNamespace`` now supports Decl declared with ``extern \"C++\"``."
msgstr ""

#: ../../../ReleaseNotes.rst:1358
msgid "Add ``isExplicitObjectMemberFunction``."
msgstr ""

#: ../../../ReleaseNotes.rst:1359
msgid ""
"Fixed ``forEachArgumentWithParam`` and ``forEachArgumentWithParamType`` to "
"not skip the explicit object parameter for operator calls."
msgstr ""

#: ../../../ReleaseNotes.rst:1361
msgid ""
"Fixed captureVars assertion failure if not capturesVariables. (`#76425 "
"<https://github.com/llvm/llvm-project/issues/76425>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1362
msgid ""
"``forCallable`` now properly preserves binding on successful match. (`#89657 "
"<https://github.com/llvm/llvm-project/issues/89657>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1365
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:1367
msgid ""
"``AlwaysBreakTemplateDeclarations`` is deprecated and renamed to "
"``BreakTemplateDeclarations``."
msgstr ""

#: ../../../ReleaseNotes.rst:1369
msgid ""
"``AlwaysBreakAfterReturnType`` is deprecated and renamed to "
"``BreakAfterReturnType``."
msgstr ""

#: ../../../ReleaseNotes.rst:1371
msgid "Handles Java switch expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:1372
msgid "Adds ``AllowShortCaseExpressionOnASingleLine`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1373
msgid ""
"Adds ``AlignCaseArrows`` suboption to "
"``AlignConsecutiveShortCaseStatements``."
msgstr ""

#: ../../../ReleaseNotes.rst:1374
msgid "Adds ``LeftWithLastLine`` suboption to ``AlignEscapedNewlines``."
msgstr ""

#: ../../../ReleaseNotes.rst:1375
msgid ""
"Adds ``KeepEmptyLines`` option to deprecate ``KeepEmptyLinesAtEOF`` and "
"``KeepEmptyLinesAtTheStartOfBlocks``."
msgstr ""

#: ../../../ReleaseNotes.rst:1377
msgid ""
"Add ``ExceptDoubleParentheses`` sub-option for ``SpacesInParensOptions`` to "
"override addition of spaces between multiple, non-redundant parentheses "
"similar to the rules used for ``RemoveParentheses``."
msgstr ""

#: ../../../ReleaseNotes.rst:1382
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:1384
msgid ""
"``clang_getSpellingLocation`` now correctly resolves macro expansions; that "
"is, it returns the spelling location instead of the expansion location."
msgstr ""

#: ../../../ReleaseNotes.rst:1388
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:1391
msgid "New features"
msgstr ""

#: ../../../ReleaseNotes.rst:1393
msgid ""
"The attribute ``[[clang::suppress]]`` can now be applied to declarations. "
"(`#80371 <https://github.com/llvm/llvm-project/issues/80371>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1396
msgid ""
"Support C++23 static operator calls. (`#84972 <https://github.com/llvm/llvm-"
"project/issues/84972>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1399
msgid "Crash and bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1401
msgid ""
"Fixed crashing on loops if the loop variable was declared in switch blocks "
"but not under any case blocks if ``unroll-loops=true`` analyzer config is "
"set. (`#68819 <https://github.com/llvm/llvm-project/issues/68819>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1405
msgid ""
"Fixed a crash in ``security.cert.env.InvalidPtr`` checker when accidentally "
"matched user-defined ``strerror`` and similar library functions. (`#88181 "
"<https://github.com/llvm/llvm-project/issues/88181>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1408
msgid ""
"Fixed a crash when storing through an address that refers to the address of "
"a label. (`#89185 <https://github.com/llvm/llvm-project/issues/89185>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1411
msgid ""
"Fixed a crash when using ``__builtin_bitcast(type, array)`` as an array "
"subscript. (`#94496 <https://github.com/llvm/llvm-project/issues/94496>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1414
msgid ""
"Z3 crosschecking (aka. Z3 refutation) is now bounded, and can't consume more "
"total time than the eymbolic execution itself. (`#97298 <https://github.com/"
"llvm/llvm-project/issues/97298>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1417
msgid ""
"In clang-18, we regressed in terms of analysis time for projects having many "
"nested loops with buffer indexing or shifting or other binary operations. "
"For example, functions computing different hash values. Some of this "
"slowdown was attributed to taint analysis, which is fixed now. (`#105493 "
"<https://github.com/llvm/llvm-project/issues/105493>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1422
msgid ""
"``std::addressof``, ``std::as_const``, ``std::forward``, ``std::"
"forward_like``, ``std::move``, ``std::move_if_noexcept``, are now modeled "
"just like their builtin counterpart. (`#94193 <https://github.com/llvm/llvm-"
"project/issues/94193>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1427
msgid "Improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:1430
msgid "Moved checkers"
msgstr ""

#: ../../../ReleaseNotes.rst:1432
msgid ""
"Moved ``alpha.cplusplus.ArrayDelete`` out of the ``alpha`` package to "
"``cplusplus.ArrayDelete``. (`#83985 <https://github.com/llvm/llvm-project/"
"issues/83985>`_) `Documentation <https://clang.llvm.org/docs/analyzer/"
"checkers.html#cplusplus-arraydelete-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1436
msgid ""
"Moved ``alpha.unix.Stream`` out of the ``alpha`` package to ``unix.Stream``. "
"(`#89247 <https://github.com/llvm/llvm-project/issues/89247>`_) "
"`Documentation <https://clang.llvm.org/docs/analyzer/checkers.html#unix-"
"stream-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1440
msgid ""
"Moved ``alpha.unix.BlockInCriticalSection`` out of the ``alpha`` package to "
"``unix.BlockInCriticalSection``. (`#93815 <https://github.com/llvm/llvm-"
"project/issues/93815>`_) `Documentation <https://clang.llvm.org/docs/"
"analyzer/checkers.html#unix-blockincriticalsection-c-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1444
msgid ""
"Moved ``alpha.security.cert.pos.34c`` out of the ``alpha`` package to "
"``security.PutenvStackArray``. (`#92424 <https://github.com/llvm/llvm-"
"project/issues/92424>`_, `#93815 <https://github.com/llvm/llvm-project/"
"issues/93815>`_) `Documentation <https://clang.llvm.org/docs/analyzer/"
"checkers.html#security-putenvstackarray-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1448
msgid ""
"Moved ``alpha.core.SizeofPtr`` into ``clang-tidy`` ``bugprone-sizeof-"
"expression``. (`#95118 <https://github.com/llvm/llvm-project/"
"issues/95118>`_, `#94356 <https://github.com/llvm/llvm-project/"
"issues/94356>`_) `Documentation <https://clang.llvm.org/extra/clang-tidy/"
"checks/bugprone/sizeof-expression.html>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1455
msgid "Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:1457
msgid ""
"``-fsanitize=signed-integer-overflow`` now instruments signed arithmetic "
"even when ``-fwrapv`` is enabled. Previously, only division checks were "
"enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:1460
msgid ""
"Users with ``-fwrapv`` as well as a sanitizer group like ``-"
"fsanitize=undefined`` or ``-fsanitize=integer`` enabled may want to manually "
"disable potentially noisy signed integer overflow checks with ``-fno-"
"sanitize=signed-integer-overflow``"
msgstr ""

#: ../../../ReleaseNotes.rst:1465
msgid ""
"``-fsanitize=cfi -fsanitize-cfi-cross-dso`` (cross-DSO CFI instrumentation) "
"now generates the ``__cfi_check`` function with proper target-specific "
"attributes, for example allowing unwind table generation."
msgstr ""

#: ../../../ReleaseNotes.rst:1470
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1472
msgid "Exposed `CXRewriter` API as `class Rewriter`."
msgstr ""

#: ../../../ReleaseNotes.rst:1473
msgid ""
"Add some missing kinds from Index.h (CursorKind: 149-156, 272-320, 420-437. "
"TemplateArgumentKind: 5-9. TypeKind: 161-175 and 178)."
msgstr ""

#: ../../../ReleaseNotes.rst:1475
msgid ""
"Add support for retrieving binary operator information through Cursor."
"binary_operator()."
msgstr ""

#: ../../../ReleaseNotes.rst:1479
msgid "OpenMP Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1481
msgid "Added support for the `[[omp::assume]]` attribute."
msgstr ""

#: ../../../ReleaseNotes.rst:1482
msgid ""
"AIX added an include directory for ``omp.h`` at ``/opt/IBM/openxlCSDK/"
"include/openmp``."
msgstr ""

#: ../../../ReleaseNotes.rst:1485
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:1487
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Git version of the source code. "
"You can access versions of these documents specific to this release by going "
"into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:1494
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us on the `Discourse forums (Clang Frontend category) <https://"
"discourse.llvm.org/c/clang/6>`_."
msgstr ""
