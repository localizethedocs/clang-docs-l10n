# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangNVLinkWrapper.rst:3
msgid "Clang nvlink Wrapper"
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:11
msgid "Introduction"
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:13
msgid ""
"This tools works as a wrapper around the NVIDIA ``nvlink`` linker. The "
"purpose of this wrapper is to provide an interface similar to the ``ld.lld`` "
"linker while still relying on NVIDIA's proprietary linker to produce the "
"final output."
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:17
msgid ""
"``nvlink`` has a number of known quirks that make it difficult to use in a "
"unified offloading setting. For example, it does not accept ``.o`` files as "
"they must be named ``.cubin``. Static archives do not work, so passing a ``."
"a`` will provide a linker error. ``nvlink`` also does not support link time "
"optimization and ignores many standard linker arguments. This tool works "
"around these issues."
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:24
msgid "Usage"
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:26
msgid ""
"This tool can be used with the following options. Any arguments not intended "
"only for the linker wrapper will be forwarded to ``nvlink``."
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:66
msgid "Example"
msgstr ""

#: ../../../ClangNVLinkWrapper.rst:68
msgid ""
"This tool is intended to be invoked when targeting the NVPTX toolchain "
"directly as a cross-compiling target. This can be used to create standalone "
"GPU executables with normal linking semantics similar to standard "
"compilation."
msgstr ""
