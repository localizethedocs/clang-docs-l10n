# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangFormatStyleOptions.rst:3
msgid "Clang-Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5
msgid ""
":doc:`ClangFormatStyleOptions` describes configurable formatting style "
"options supported by :doc:`LibFormat` and :doc:`ClangFormat`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:8
msgid ""
"When using :program:`clang-format` command line utility or ``clang::format::"
"reformat(...)`` functions from code, one can either use one of the "
"predefined styles (LLVM, Google, Chromium, Mozilla, WebKit, Microsoft) or "
"create a custom style by configuring specific style options."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:15
msgid "Configuring Style with clang-format"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:17
msgid ""
":program:`clang-format` supports two ways to provide custom style options: "
"directly specify style configuration in the ``-style=`` command line option "
"or use ``-style=file`` and put style configuration in the ``.clang-format`` "
"or ``_clang-format`` file in the project directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:22
msgid ""
"When using ``-style=file``, :program:`clang-format` for each input file will "
"try to find the ``.clang-format`` file located in the closest parent "
"directory of the input file. When the standard input is used, the search is "
"started from the current directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:27
msgid "The ``.clang-format`` file uses YAML format:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:36
msgid ""
"The configuration file can consist of several sections each having different "
"``Language:`` parameter denoting the programming language this section of "
"the configuration is targeted at. See the description of the **Language** "
"option below for the list of supported languages. The first section may have "
"no language set, it will set the default style options for all languages. "
"Configuration sections for specific language will override options set in "
"the default section."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:44
msgid ""
"When :program:`clang-format` formats a file, it auto-detects the language "
"using the file name. When formatting standard input or a file that doesn't "
"have the extension corresponding to its language, ``-assume-filename=`` "
"option can be used to override the file name :program:`clang-format` uses to "
"detect the language."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:50
msgid "An example of a configuration file for multiple languages:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:77
msgid ""
"An easy way to get a valid ``.clang-format`` file containing all "
"configuration options of a certain predefined style is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:84
msgid ""
"When specifying configuration in the ``-style=`` option, the same "
"configuration is applied for all input files. The format of the "
"configuration is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:93
msgid "Disabling Formatting on a Piece of Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:95
msgid ""
"Clang-format understands also special comments that switch formatting in a "
"delimited range. The code between a comment ``// clang-format off`` or ``/* "
"clang-format off */`` up to a comment ``// clang-format on`` or ``/* clang-"
"format on */`` will not be formatted. The comments themselves will be "
"formatted (aligned) normally."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:111
msgid "Configuring Style in Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:113
msgid ""
"When using ``clang::format::reformat(...)`` functions, the format is "
"specified by supplying the `clang::format::FormatStyle <https://clang.llvm."
"org/doxygen/structclang_1_1format_1_1FormatStyle.html>`_ structure."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:120
msgid "Configurable Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:122
msgid ""
"This section lists the supported style options. Value type is specified for "
"each option. For enumeration types possible values are specified both as a C+"
"+ enumeration member (with a prefix, e.g. ``LS_Auto``), and as a value "
"usable in the configuration (without a prefix: ``Auto``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:165
msgid "**BasedOnStyle** (``string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:129
msgid ""
"The style used for all options not specifically set in the configuration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:131
msgid ""
"This option is supported only in the :program:`clang-format` configuration "
"(both within ``-style='{...}'`` and the ``.clang-format`` file)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:134
#: ../../../ClangFormatStyleOptions.rst:178
#: ../../../ClangFormatStyleOptions.rst:211
#: ../../../ClangFormatStyleOptions.rst:253
#: ../../../ClangFormatStyleOptions.rst:327
#: ../../../ClangFormatStyleOptions.rst:401
#: ../../../ClangFormatStyleOptions.rst:476
#: ../../../ClangFormatStyleOptions.rst:541
#: ../../../ClangFormatStyleOptions.rst:582
#: ../../../ClangFormatStyleOptions.rst:688
#: ../../../ClangFormatStyleOptions.rst:754
#: ../../../ClangFormatStyleOptions.rst:813
#: ../../../ClangFormatStyleOptions.rst:892
#: ../../../ClangFormatStyleOptions.rst:935
#: ../../../ClangFormatStyleOptions.rst:952
#: ../../../ClangFormatStyleOptions.rst:1050
#: ../../../ClangFormatStyleOptions.rst:1148
#: ../../../ClangFormatStyleOptions.rst:1231
#: ../../../ClangFormatStyleOptions.rst:1481
#: ../../../ClangFormatStyleOptions.rst:1530
#: ../../../ClangFormatStyleOptions.rst:2008
#: ../../../ClangFormatStyleOptions.rst:2043
#: ../../../ClangFormatStyleOptions.rst:2219
#: ../../../ClangFormatStyleOptions.rst:2270
#: ../../../ClangFormatStyleOptions.rst:2406
#: ../../../ClangFormatStyleOptions.rst:2595
#: ../../../ClangFormatStyleOptions.rst:2658
#: ../../../ClangFormatStyleOptions.rst:2760
#: ../../../ClangFormatStyleOptions.rst:2812
#: ../../../ClangFormatStyleOptions.rst:2877
#: ../../../ClangFormatStyleOptions.rst:2905
#: ../../../ClangFormatStyleOptions.rst:2990
#: ../../../ClangFormatStyleOptions.rst:3076
#: ../../../ClangFormatStyleOptions.rst:3179
#: ../../../ClangFormatStyleOptions.rst:3246
#: ../../../ClangFormatStyleOptions.rst:3319
#: ../../../ClangFormatStyleOptions.rst:3361
#: ../../../ClangFormatStyleOptions.rst:3427
#: ../../../ClangFormatStyleOptions.rst:3515
#: ../../../ClangFormatStyleOptions.rst:3645
#: ../../../ClangFormatStyleOptions.rst:3761
#: ../../../ClangFormatStyleOptions.rst:3843
msgid "Possible values:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:136
msgid ""
"``LLVM`` A style complying with the `LLVM coding standards <https://llvm.org/"
"docs/CodingStandards.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:139
msgid ""
"``Google`` A style complying with `Google's C++ style guide <https://google."
"github.io/styleguide/cppguide.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:142
msgid ""
"``Chromium`` A style complying with `Chromium's style guide <https://"
"chromium.googlesource.com/chromium/src/+/master/styleguide/styleguide.md>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:145
msgid ""
"``Mozilla`` A style complying with `Mozilla's style guide <https://developer."
"mozilla.org/en-US/docs/Developer_Guide/Coding_Style>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:148
msgid ""
"``WebKit`` A style complying with `WebKit's style guide <https://www.webkit."
"org/coding/coding-style.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:151
msgid ""
"``Microsoft`` A style complying with `Microsoft's style guide <https://docs."
"microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-"
"reference?view=vs-2017>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:154
msgid ""
"``GNU`` A style complying with the `GNU coding standards <https://www.gnu."
"org/prep/standards/standards.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:157
msgid ""
"``InheritParentConfig`` Not a real style, but allows to use the ``.clang-"
"format`` file from the parent directory (or its parent if there is none). If "
"there is no parent file found it falls back to the ``fallback`` style, and "
"applies the changes to that."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:163
msgid ""
"With this option you can overwrite some parts of your main style for your "
"subdirectories. This is also possible through the command line, e.g.: ``--"
"style={BasedOnStyle: InheritParentConfig, ColumnLimit: 20}``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:170
msgid "**AccessModifierOffset** (``int``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:170
msgid "The extra indent or outdent of access modifiers, e.g. ``public:``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:205
msgid "**AlignAfterOpenBracket** (``BracketAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:173
msgid "If ``true``, horizontally aligns arguments after an open bracket."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:175
msgid ""
"This applies to round brackets (parentheses), angle brackets and square "
"brackets."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:180
msgid ""
"``BAS_Align`` (in configuration: ``Align``) Align parameters on the open "
"bracket, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:188
msgid ""
"``BAS_DontAlign`` (in configuration: ``DontAlign``) Don't align, instead use "
"``ContinuationIndentWidth``, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:196
msgid ""
"``BAS_AlwaysBreak`` (in configuration: ``AlwaysBreak``) Always break after "
"an open bracket, if the parameters don't fit on a single line, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:240
msgid "**AlignArrayOfStructures** (``ArrayInitializerAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:208
msgid ""
"if not ``None``, when using initialization for an array of structs aligns "
"the fields into columns."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:213
msgid ""
"``AIAS_Left`` (in configuration: ``Left``) Align array column and left "
"justify the columns e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:225
msgid ""
"``AIAS_Right`` (in configuration: ``Right``) Align array column and right "
"justify the columns e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:237
msgid ""
"``AIAS_None`` (in configuration: ``None``) Don't align array initializer "
"columns."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:313
msgid "**AlignConsecutiveAssignments** (``AlignConsecutiveStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:243
msgid "Style of aligning consecutive assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:245
#: ../../../ClangFormatStyleOptions.rst:466
msgid "``Consecutive`` will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:256
#: ../../../ClangFormatStyleOptions.rst:330
#: ../../../ClangFormatStyleOptions.rst:404
#: ../../../ClangFormatStyleOptions.rst:479
msgid "``ACS_None`` (in configuration: ``None``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:256
msgid "Do not align assignments on consecutive lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:270
#: ../../../ClangFormatStyleOptions.rst:344
#: ../../../ClangFormatStyleOptions.rst:418
#: ../../../ClangFormatStyleOptions.rst:493
msgid "``ACS_Consecutive`` (in configuration: ``Consecutive``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:259
msgid ""
"Align assignments on consecutive lines. This will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:283
#: ../../../ClangFormatStyleOptions.rst:357
#: ../../../ClangFormatStyleOptions.rst:431
#: ../../../ClangFormatStyleOptions.rst:506
msgid "``ACS_AcrossEmptyLines`` (in configuration: ``AcrossEmptyLines``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:273
#: ../../../ClangFormatStyleOptions.rst:347
#: ../../../ClangFormatStyleOptions.rst:421
#: ../../../ClangFormatStyleOptions.rst:496
msgid "Same as ACS_Consecutive, but also spans over empty lines, e.g."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:297
#: ../../../ClangFormatStyleOptions.rst:371
#: ../../../ClangFormatStyleOptions.rst:445
#: ../../../ClangFormatStyleOptions.rst:520
msgid "``ACS_AcrossComments`` (in configuration: ``AcrossComments``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:286
#: ../../../ClangFormatStyleOptions.rst:360
#: ../../../ClangFormatStyleOptions.rst:434
#: ../../../ClangFormatStyleOptions.rst:509
msgid ""
"Same as ACS_Consecutive, but also spans over lines only containing comments, "
"e.g."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:299
#: ../../../ClangFormatStyleOptions.rst:373
#: ../../../ClangFormatStyleOptions.rst:447
#: ../../../ClangFormatStyleOptions.rst:522
msgid ""
"``ACS_AcrossEmptyLinesAndComments`` (in configuration: "
"``AcrossEmptyLinesAndComments``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:302
#: ../../../ClangFormatStyleOptions.rst:376
#: ../../../ClangFormatStyleOptions.rst:450
#: ../../../ClangFormatStyleOptions.rst:525
msgid ""
"Same as ACS_Consecutive, but also spans over lines only containing comments "
"and empty lines, e.g."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:387
msgid "**AlignConsecutiveBitFields** (``AlignConsecutiveStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:316
msgid "Style of aligning consecutive bit field."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:318
msgid ""
"``Consecutive`` will align the bitfield separators of consecutive lines. "
"This will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:330
msgid "Do not align bit fields on consecutive lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:333
msgid ""
"Align bit fields on consecutive lines. This will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:461
msgid "**AlignConsecutiveDeclarations** (``AlignConsecutiveStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:390
msgid "Style of aligning consecutive declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:392
msgid ""
"``Consecutive`` will align the declaration names of consecutive lines. This "
"will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:404
msgid "Do not align bit declarations on consecutive lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:407
msgid ""
"Align declarations on consecutive lines. This will result in formattings "
"like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:536
msgid "**AlignConsecutiveMacros** (``AlignConsecutiveStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:464
msgid "Style of aligning consecutive macro definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:479
msgid "Do not align macro definitions on consecutive lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:482
msgid ""
"Align macro definitions on consecutive lines. This will result in "
"formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:576
msgid "**AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:539
msgid "Options for aligning backslashes in escaped newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:543
msgid ""
"``ENAS_DontAlign`` (in configuration: ``DontAlign``) Don't align escaped "
"newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:553
msgid ""
"``ENAS_Left`` (in configuration: ``Left``) Align escaped newlines as far "
"left as possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:566
msgid ""
"``ENAS_Right`` (in configuration: ``Right``) Align escaped newlines in the "
"right-most column."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:620
msgid "**AlignOperands** (``OperandAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:579
msgid ""
"If ``true``, horizontally align operands of binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:584
msgid ""
"``OAS_DontAlign`` (in configuration: ``DontAlign``) Do not align operands of "
"binary and ternary expressions. The wrapped lines are indented "
"``ContinuationIndentWidth`` spaces from the start of the line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:589
msgid ""
"``OAS_Align`` (in configuration: ``Align``) Horizontally align operands of "
"binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:592
msgid ""
"Specifically, this aligns operands of a single expression that needs to be "
"split over multiple lines, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:600
msgid ""
"When ``BreakBeforeBinaryOperators`` is set, the wrapped operator is aligned "
"with the operand on the first line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:608
msgid ""
"``OAS_AlignAfterOperator`` (in configuration: ``AlignAfterOperator``) "
"Horizontally align operands of binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:611
msgid ""
"This is similar to ``AO_Align``, except when ``BreakBeforeBinaryOperators`` "
"is set, the operator is un-indented so that the wrapped operand is aligned "
"with the operand on the first line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:629
msgid "**AlignTrailingComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:623
msgid "If ``true``, aligns trailing comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:646
msgid "**AllowAllArgumentsOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:632
msgid ""
"If a function call or braced initializer list doesn't fit on a line, allow "
"putting all arguments onto the next line, even if ``BinPackArguments`` is "
"``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:664
msgid "**AllowAllConstructorInitializersOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:649
msgid ""
"If a constructor definition with a member initializer list doesn't fit on a "
"single line, allow putting all member initializers onto the next line, if "
"```ConstructorInitializerAllOnOneLineOrOnePerLine``` is true. Note that this "
"parameter has no effect if "
"```ConstructorInitializerAllOnOneLineOrOnePerLine``` is false."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:682
msgid "**AllowAllParametersOfDeclarationOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:667
msgid ""
"If the function declaration doesn't fit on a line, allow putting all "
"parameters of a function declaration onto the next line even if "
"``BinPackParameters`` is ``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:719
msgid "**AllowShortBlocksOnASingleLine** (``ShortBlockStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:685
msgid ""
"Dependent on the value, ``while (true) { continue; }`` can be put on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:690
msgid ""
"``SBS_Never`` (in configuration: ``Never``) Never merge blocks into a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:701
msgid "``SBS_Empty`` (in configuration: ``Empty``) Only merge empty blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:711
msgid ""
"``SBS_Always`` (in configuration: ``Always``) Always merge short blocks into "
"a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:733
msgid "**AllowShortCaseLabelsOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:722
msgid "If ``true``, short case labels will be contracted to a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:748
msgid "**AllowShortEnumsOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:736
msgid "Allow short enums on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:808
msgid "**AllowShortFunctionsOnASingleLine** (``ShortFunctionStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:751
msgid ""
"Dependent on the value, ``int f() { return 0; }`` can be put on a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:756
msgid ""
"``SFS_None`` (in configuration: ``None``) Never merge functions into a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:759
msgid ""
"``SFS_InlineOnly`` (in configuration: ``InlineOnly``) Only merge functions "
"defined inside a class. Same as \"inline\", except it does not implies "
"\"empty\": i.e. top level empty functions are not merged either."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:775
msgid "``SFS_Empty`` (in configuration: ``Empty``) Only merge empty functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:785
msgid ""
"``SFS_Inline`` (in configuration: ``Inline``) Only merge functions defined "
"inside a class. Implies \"empty\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:798
msgid ""
"``SFS_All`` (in configuration: ``All``) Merge all functions fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:886
msgid "**AllowShortIfStatementsOnASingleLine** (``ShortIfStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:811
msgid "Dependent on the value, ``if (a) return;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:815
msgid ""
"``SIS_Never`` (in configuration: ``Never``) Never put short ifs on the same "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:834
msgid ""
"``SIS_WithoutElse`` (in configuration: ``WithoutElse``) Put short ifs on the "
"same line only if there is no else statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:852
msgid ""
"``SIS_OnlyFirstIf`` (in configuration: ``OnlyFirstIf``) Put short ifs, but "
"not else ifs nor else statements, on the same line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:870
msgid ""
"``SIS_AllIfsAndElse`` (in configuration: ``AllIfsAndElse``) Always put short "
"ifs, else ifs and else statements on the same line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:925
msgid "**AllowShortLambdasOnASingleLine** (``ShortLambdaStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:889
msgid ""
"Dependent on the value, ``auto lambda []() { return 0; }`` can be put on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:894
msgid ""
"``SLS_None`` (in configuration: ``None``) Never merge lambdas into a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:897
msgid "``SLS_Empty`` (in configuration: ``Empty``) Only merge empty lambdas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:907
msgid ""
"``SLS_Inline`` (in configuration: ``Inline``) Merge lambda into a single "
"line if argument of a function."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:917
msgid ""
"``SLS_All`` (in configuration: ``All``) Merge all lambdas fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:929
msgid "**AllowShortLoopsOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:928
msgid "If ``true``, ``while (true) continue;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:947
msgid ""
"**AlwaysBreakAfterDefinitionReturnType** "
"(``DefinitionReturnTypeBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:932
msgid ""
"The function definition return type breaking style to use.  This option is "
"**deprecated** and is retained for backwards compatibility."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:937
msgid ""
"``DRTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:941
msgid ""
"``DRTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:944
msgid ""
"``DRTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1030
msgid "**AlwaysBreakAfterReturnType** (``ReturnTypeBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:950
msgid "The function declaration return type breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:954
msgid ""
"``RTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:966
msgid ""
"``RTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:984
msgid ""
"``RTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:999
msgid ""
"``RTBS_AllDefinitions`` (in configuration: ``AllDefinitions``) Always break "
"after the return type of function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1016
msgid ""
"``RTBS_TopLevelDefinitions`` (in configuration: ``TopLevelDefinitions``) "
"Always break after the return type of top-level definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1045
msgid "**AlwaysBreakBeforeMultilineStrings** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1033
msgid "If ``true``, always break before multiline string literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1035
msgid ""
"This flag is mean to make cases where there are multiple multiline strings "
"in a file look more consistent. Thus, it will only take effect if wrapping "
"the string at that point leads to it being indented "
"``ContinuationIndentWidth`` spaces from the start of the line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1090
msgid ""
"**AlwaysBreakTemplateDeclarations** (``BreakTemplateDeclarationsStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1048
msgid "The template declaration breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1052
msgid ""
"``BTDS_No`` (in configuration: ``No``) Do not force break before "
"declaration. ``PenaltyBreakTemplateDeclaration`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1064
msgid ""
"``BTDS_MultiLine`` (in configuration: ``MultiLine``) Force break after "
"template declaration only when the following declaration spans multiple "
"lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1077
msgid ""
"``BTDS_Yes`` (in configuration: ``Yes``) Always break after template "
"declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1109
msgid "**AttributeMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1093
msgid ""
"A vector of strings that should be interpreted as attributes/qualifiers "
"instead of identifiers. This can be useful for language extensions or static "
"analyzer annotations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1097
msgid "For example:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1105
#: ../../../ClangFormatStyleOptions.rst:2372
#: ../../../ClangFormatStyleOptions.rst:2393
#: ../../../ClangFormatStyleOptions.rst:3828
#: ../../../ClangFormatStyleOptions.rst:3875
msgid "In the .clang-format configuration file, this can be configured like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1128
msgid "**BinPackArguments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1112
msgid ""
"If ``false``, a function call's arguments will either be all on the same "
"line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1143
msgid "**BinPackParameters** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1131
msgid ""
"If ``false``, a function declaration's or function definition's parameters "
"will either all be on the same line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1180
msgid "**BitFieldColonSpacing** (``BitFieldColonSpacingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1146
msgid "The BitFieldColonSpacingStyle to use for bitfields."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1150
msgid ""
"``BFCS_Both`` (in configuration: ``Both``) Add one space on each side of the "
"``:``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1157
msgid ""
"``BFCS_None`` (in configuration: ``None``) Add no space around the ``:`` "
"(except when needed for ``AlignConsecutiveBitFields``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1165
msgid ""
"``BFCS_Before`` (in configuration: ``Before``) Add space before the ``:`` "
"only"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1172
msgid ""
"``BFCS_After`` (in configuration: ``After``) Add space after the ``:`` only "
"(space may be added before if needed for ``AlignConsecutiveBitFields``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1466
msgid "**BraceWrapping** (``BraceWrappingFlags``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1183
msgid "Control of individual brace wrapping cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1185
msgid ""
"If ``BreakBeforeBraces`` is set to ``BS_Custom``, use this to specify how "
"each individual brace case should be handled. Otherwise, this is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1197
#: ../../../ClangFormatStyleOptions.rst:3726
msgid "Nested configuration flags:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1200
msgid "``bool AfterCaseLabel`` Wrap case labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1217
msgid "``bool AfterClass`` Wrap class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1228
msgid ""
"``BraceWrappingAfterControlStatementStyle AfterControlStatement`` Wrap "
"control statements (``if``/``for``/``while``/``switch``/..)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1233
msgid ""
"``BWACS_Never`` (in configuration: ``Never``) Never wrap braces after a "
"control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1244
msgid ""
"``BWACS_MultiLine`` (in configuration: ``MultiLine``) Only wrap braces after "
"a multi-line control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1257
msgid ""
"``BWACS_Always`` (in configuration: ``Always``) Always wrap braces after a "
"control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1270
msgid "``bool AfterEnum`` Wrap enum definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1283
msgid "``bool AfterFunction`` Wrap function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1300
msgid "``bool AfterNamespace`` Wrap namespace definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1317
msgid ""
"``bool AfterObjCDeclaration`` Wrap ObjC definitions (interfaces, "
"implementations...). @autoreleasepool and @synchronized blocks are wrapped "
"according to `AfterControlStatement` flag."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1321
msgid "``bool AfterStruct`` Wrap struct definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1336
msgid "``bool AfterUnion`` Wrap union definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1351
msgid "``bool AfterExternBlock`` Wrap extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1366
msgid "``bool BeforeCatch`` Wrap before ``catch``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1383
msgid "``bool BeforeElse`` Wrap before ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1398
msgid "``bool BeforeLambdaBody`` Wrap lambda block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1416
msgid "``bool BeforeWhile`` Wrap before ``while``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1431
msgid "``bool IndentBraces`` Indent the wrapped braces themselves."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1433
msgid ""
"``bool SplitEmptyFunction`` If ``false``, empty function body can be put on "
"a single line. This option is used only if the opening brace of the function "
"has already been wrapped, i.e. the `AfterFunction` brace wrapping mode is "
"set, and the function could/should not be put on a single line (as per "
"`AllowShortFunctionsOnASingleLine` and constructor formatting options)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1445
msgid ""
"``bool SplitEmptyRecord`` If ``false``, empty record (e.g. class, struct or "
"union) body can be put on a single line. This option is used only if the "
"opening brace of the record has already been wrapped, i.e. the `AfterClass` "
"(for classes) brace wrapping mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1456
msgid ""
"``bool SplitEmptyNamespace`` If ``false``, empty namespace body can be put "
"on a single line. This option is used only if the opening brace of the "
"namespace has already been wrapped, i.e. the `AfterNamespace` brace wrapping "
"mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1476
msgid "**BreakAfterJavaFieldAnnotations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1469
msgid "Break after each annotation on a field in Java files."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1525
msgid "**BreakBeforeBinaryOperators** (``BinaryOperatorStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1479
msgid "The way to wrap binary operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1483
msgid "``BOS_None`` (in configuration: ``None``) Break after operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1497
msgid ""
"``BOS_NonAssignment`` (in configuration: ``NonAssignment``) Break before "
"operators that aren't assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1511
msgid "``BOS_All`` (in configuration: ``All``) Break before operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1976
msgid "**BreakBeforeBraces** (``BraceBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1528
msgid "The brace breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1532
msgid ""
"``BS_Attach`` (in configuration: ``Attach``) Always attach braces to "
"surrounding context."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1579
msgid ""
"``BS_Linux`` (in configuration: ``Linux``) Like ``Attach``, but break before "
"braces on function, namespace and class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1631
msgid ""
"``BS_Mozilla`` (in configuration: ``Mozilla``) Like ``Attach``, but break "
"before braces on enum, function, and record definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1683
msgid ""
"``BS_Stroustrup`` (in configuration: ``Stroustrup``) Like ``Attach``, but "
"break before function definitions, ``catch``, and ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1735
msgid ""
"``BS_Allman`` (in configuration: ``Allman``) Always break before braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1797
msgid ""
"``BS_Whitesmiths`` (in configuration: ``Whitesmiths``) Like ``Allman`` but "
"always indent braces and line up code with braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1859
msgid ""
"``BS_GNU`` (in configuration: ``GNU``) Always break before braces and add an "
"extra level of indentation to braces of control statements, not to those of "
"class, function or other definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1924
msgid ""
"``BS_WebKit`` (in configuration: ``WebKit``) Like ``Attach``, but break "
"before functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1973
msgid ""
"``BS_Custom`` (in configuration: ``Custom``) Configure each individual brace "
"in `BraceWrapping`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1988
msgid "**BreakBeforeConceptDeclarations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1979
msgid "If ``true``, concept will be placed on a new line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2003
msgid "**BreakBeforeTernaryOperators** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1991
msgid "If ``true``, ternary operators will be placed after line breaks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2038
msgid ""
"**BreakConstructorInitializers** (``BreakConstructorInitializersStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2006
msgid "The constructor initializers style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2010
msgid ""
"``BCIS_BeforeColon`` (in configuration: ``BeforeColon``) Break constructor "
"initializers before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2019
msgid ""
"``BCIS_BeforeComma`` (in configuration: ``BeforeComma``) Break constructor "
"initializers before the colon and commas, and align the commas with the "
"colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2029
msgid ""
"``BCIS_AfterColon`` (in configuration: ``AfterColon``) Break constructor "
"initializers after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2085
msgid "**BreakInheritanceList** (``BreakInheritanceListStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2041
msgid "The inheritance list style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2045
msgid ""
"``BILS_BeforeColon`` (in configuration: ``BeforeColon``) Break inheritance "
"list before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2055
msgid ""
"``BILS_BeforeComma`` (in configuration: ``BeforeComma``) Break inheritance "
"list before the colon and commas, and align the commas with the colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2066
msgid ""
"``BILS_AfterColon`` (in configuration: ``AfterColon``) Break inheritance "
"list after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2076
msgid ""
"``BILS_AfterComma`` (in configuration: ``AfterComma``) Break inheritance "
"list only after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2099
msgid "**BreakStringLiterals** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2088
msgid "Allow breaking string literals when formatting."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2106
msgid "**ColumnLimit** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2102
msgid "The column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2104
msgid ""
"A column limit of ``0`` means that there is no column limit. In this case, "
"clang-format will respect the input's line breaking decisions within "
"statements unless they contradict other rules."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2116
msgid "**CommentPragmas** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2109
msgid ""
"A regular expression that describes comments with special meaning, which "
"should not be split into lines or otherwise changed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2141
msgid "**CompactNamespaces** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2119
msgid ""
"If ``true``, consecutive namespace declarations will be on the same line. If "
"``false``, each namespace is declared on a new line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2134
msgid ""
"If it does not fit on a single line, the overflowing namespaces get wrapped:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2160
msgid "**ConstructorInitializerAllOnOneLineOrOnePerLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2144
msgid ""
"If the constructor initializers don't fit on a line, put each initializer on "
"its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2164
msgid "**ConstructorInitializerIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2163
msgid ""
"The number of characters to use for indentation of constructor initializer "
"lists as well as inheritance lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2175
msgid "**ContinuationIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2167
msgid "Indent width for line continuations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2198
msgid "**Cpp11BracedListStyle** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2178
msgid "If ``true``, format braced lists as best suited for C++11 braced lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2181
msgid ""
"Important differences: - No spaces inside the braced list. - No line break "
"before the closing brace. - Indentation with the continuation indent, not "
"with the block indent."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2186
msgid ""
"Fundamentally, C++11 braced lists are formatted exactly like function calls "
"would be formatted in their place. If the braced list follows a name (e.g. a "
"type or variable name), clang-format formats as if the ``{}`` were the "
"parentheses of a function call with that name. If there is no name, a zero-"
"length name is assumed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2202
msgid "**DeriveLineEnding** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2201
msgid ""
"Analyze the formatted file for the most used line ending (``\\r\\n`` or "
"``\\n``). ``UseCRLF`` is only used as a fallback if none can be derived."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2209
msgid "**DerivePointerAlignment** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2205
msgid ""
"If ``true``, analyze the formatted file for the most common alignment of "
"``&`` and ``*``. Pointer and reference alignment styles are going to be "
"updated according to the preferences found in the file. ``PointerAlignment`` "
"is then used only as fallback."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2212
msgid "**DisableFormat** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2212
msgid "Disables formatting completely."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2265
msgid ""
"**EmptyLineAfterAccessModifier** (``EmptyLineAfterAccessModifierStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2215
msgid ""
"Defines when to put an empty line after access modifiers. "
"``EmptyLineBeforeAccessModifier`` configuration handles the number of empty "
"lines between two access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2221
msgid ""
"``ELAAMS_Never`` (in configuration: ``Never``) Remove all empty lines after "
"access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2238
msgid ""
"``ELAAMS_Leave`` (in configuration: ``Leave``) Keep existing empty lines "
"after access modifiers. MaxEmptyLinesToKeep is applied instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2242
msgid ""
"``ELAAMS_Always`` (in configuration: ``Always``) Always add empty line after "
"access modifiers if there are none. MaxEmptyLinesToKeep is applied also."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2334
msgid ""
"**EmptyLineBeforeAccessModifier** (``EmptyLineBeforeAccessModifierStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2268
msgid "Defines in which cases to put empty line before access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2272
msgid ""
"``ELBAMS_Never`` (in configuration: ``Never``) Remove all empty lines before "
"access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2289
msgid ""
"``ELBAMS_Leave`` (in configuration: ``Leave``) Keep existing empty lines "
"before access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2292
msgid ""
"``ELBAMS_LogicalBlock`` (in configuration: ``LogicalBlock``) Add empty line "
"only when access modifier starts a new logical block. Logical block is a "
"group of one or more member fields or functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2312
msgid ""
"``ELBAMS_Always`` (in configuration: ``Always``) Always add empty line "
"before access modifiers unless access modifier is at the start of struct or "
"class definition."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2346
msgid "**ExperimentalAutoDetectBinPacking** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2337
msgid ""
"If ``true``, clang-format detects whether function calls and definitions are "
"formatted with one parameter per line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2340
msgid ""
"Each call can be bin-packed, one-per-line or inconclusive. If it is "
"inconclusive, e.g. completely on one line, but a decision needs to be made, "
"clang-format analyzes whether there are other bin-packed cases in the input "
"file and act accordingly."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2345
msgid ""
"NOTE: This is an experimental flag, that might go away or be renamed. Do not "
"use this in config files, etc. Use at your own risk."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2359
msgid "**FixNamespaceComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2349
msgid ""
"If ``true``, clang-format adds missing namespace end comments for short "
"namespaces and fixes invalid existing ones. Short ones are controlled by "
"\"ShortNamespaceLines\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2378
msgid "**ForEachMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2362
msgid ""
"A vector of macros that should be interpreted as foreach loops instead of as "
"function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2365
#: ../../../ClangFormatStyleOptions.rst:2384
#: ../../../ClangFormatStyleOptions.rst:3033
#: ../../../ClangFormatStyleOptions.rst:3822
#: ../../../ClangFormatStyleOptions.rst:3869
msgid "These are expected to be macros of the form:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2378
msgid "For example: BOOST_FOREACH."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2400
msgid "**IfMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2381
msgid ""
"A vector of macros that should be interpreted as conditionals instead of as "
"function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2399
msgid ""
"For example: `KJ_IF_MAYBE <https://github.com/capnproto/capnproto/blob/"
"master/kjdoc/tour.md#maybes>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2440
msgid "**IncludeBlocks** (``IncludeBlocksStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2403
msgid ""
"Dependent on the value, multiple ``#include`` blocks can be sorted as one "
"and divided based on category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2408
msgid ""
"``IBS_Preserve`` (in configuration: ``Preserve``) Sort each ``#include`` "
"block separately."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2418
msgid ""
"``IBS_Merge`` (in configuration: ``Merge``) Merge multiple ``#include`` "
"blocks together and sort as one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2428
msgid ""
"``IBS_Regroup`` (in configuration: ``Regroup``) Merge multiple ``#include`` "
"blocks together and sort as one. Then split into groups based on category "
"priority. See ``IncludeCategories``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2488
msgid "**IncludeCategories** (``std::vector<IncludeCategory>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2443
msgid ""
"Regular expressions denoting the different ``#include`` categories used for "
"ordering ``#includes``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2446
msgid ""
"`POSIX extended <https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/"
"V1_chap09.html>`_ regular expressions are supported."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2450
msgid ""
"These regular expressions are matched against the filename of an include "
"(including the <> or \"\") in order. The value belonging to the first "
"matching regular expression is assigned and ``#includes`` are sorted first "
"according to increasing category number and then alphabetically within each "
"category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2456
msgid ""
"If none of the regular expressions match, INT_MAX is assigned as category. "
"The main header for a source file automatically gets category 0. so that it "
"is generally kept at the beginning of the ``#includes`` (https://llvm.org/"
"docs/CodingStandards.html#include-style). However, you can also assign "
"negative priorities if you have certain headers that always need to be first."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2463
msgid ""
"There is a third and optional field ``SortPriority`` which can used while "
"``IncludeBlocks = IBS_Regroup`` to define the priority in which "
"``#includes`` should be ordered. The value of ``Priority`` defines the order "
"of ``#include blocks`` and also allows the grouping of ``#includes`` of "
"different priority. ``SortPriority`` is set to the value of ``Priority`` as "
"default if it is not assigned."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2470
msgid ""
"Each regular expression can be marked as case sensitive with the field "
"``CaseSensitive``, per default it is not."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2473
#: ../../../ClangFormatStyleOptions.rst:3223
msgid "To configure this in the .clang-format file, use:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2501
msgid "**IncludeIsMainRegex** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2491
msgid ""
"Specify a regular expression of suffixes that are allowed in the file-to-"
"main-include mapping."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2494
msgid ""
"When guessing whether a #include is the \"main\" include (to assign category "
"0, see above), use this regex of allowed suffixes to the header stem. A "
"partial match is done, so that: - \"\" means \"arbitrary suffix\" - \"$\" "
"means \"no suffix\""
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2500
msgid ""
"For example, if configured to \"(_test)?$\", then a header a.h would be seen "
"as the \"main\" include in both a.cc and a_test.cc."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2521
msgid "**IncludeIsMainSourceRegex** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2504
msgid ""
"Specify a regular expression for files being formatted that are allowed to "
"be considered \"main\" in the file-to-main-include mapping."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2508
msgid ""
"By default, clang-format considers files as \"main\" only when they end "
"with: ``.c``, ``.cc``, ``.cpp``, ``.c++``, ``.cxx``, ``.m`` or ``.mm`` "
"extensions. For these files a guessing of \"main\" include takes place (to "
"assign category 0, see above). This config option allows for additional "
"suffixes and extensions for files to be considered as \"main\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2515
msgid ""
"For example, if this option is configured to ``(Impl\\.hpp)$``, then a file "
"``ClassImpl.hpp`` is considered \"main\" (in addition to ``Class.c``, "
"``Class.cc``, ``Class.cpp`` and so on) and \"main include file\" logic will "
"be executed (with *IncludeIsMainRegex* setting also being respected in later "
"phase). Without this option set, ``ClassImpl.hpp`` would not have the main "
"include file put on top before any other include."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2548
msgid "**IndentAccessModifiers** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2524
msgid ""
"Specify whether access modifiers should have their own indentation level."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2526
msgid ""
"When ``false``, access modifiers are indented (or outdented) relative to the "
"record members, respecting the ``AccessModifierOffset``. Record members are "
"indented one level below the record. When ``true``, access modifiers get "
"their own indentation level. As a consequence, record members are always "
"indented 2 levels below the record, regardless of the access modifier "
"presence. Value of the ``AccessModifierOffset`` is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2571
msgid "**IndentCaseBlocks** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2551
msgid "Indent case label blocks one level from the case label."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2553
msgid ""
"When ``false``, the block following the case label uses the same indentation "
"level as for the case label, treating the case label the same as an if-"
"statement. When ``true``, the block gets indented as a scope block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2590
msgid "**IndentCaseLabels** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2574
msgid "Indent case labels one level from the switch statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2576
msgid ""
"When ``false``, use the same indentation level as for the switch statement. "
"Switch statement body is always indented one level more than case labels "
"(except the first block following the case label, which itself indents the "
"code - unless IndentCaseBlocks is enabled)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2636
msgid "**IndentExternBlock** (``IndentExternBlockStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2593
msgid "IndentExternBlockStyle is the type of indenting of extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2597
msgid ""
"``IEBS_AfterExternBlock`` (in configuration: ``AfterExternBlock``) Backwards "
"compatible with AfterExternBlock's indenting."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2618
msgid ""
"``IEBS_NoIndent`` (in configuration: ``NoIndent``) Does not indent extern "
"blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2627
msgid "``IEBS_Indent`` (in configuration: ``Indent``) Indents extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2653
msgid "**IndentGotoLabels** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2639
msgid "Indent goto labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2641
msgid "When ``false``, goto labels are flushed left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2693
msgid "**IndentPPDirectives** (``PPDirectiveIndentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2656
msgid "The preprocessor directive indenting style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2660
msgid ""
"``PPDIS_None`` (in configuration: ``None``) Does not indent any directives."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2671
msgid ""
"``PPDIS_AfterHash`` (in configuration: ``AfterHash``) Indents directives "
"after the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2682
msgid ""
"``PPDIS_BeforeHash`` (in configuration: ``BeforeHash``) Indents directives "
"before the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2712
msgid "**IndentRequires** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2696
msgid "Indent the requires clause in a template"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2726
msgid "**IndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2715
msgid "The number of columns to use for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2740
msgid "**IndentWrappedFunctionNames** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2729
msgid ""
"Indent if a function definition or declaration is wrapped after the type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2772
msgid "**InsertTrailingCommas** (``TrailingCommaStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2743
msgid ""
"If set to ``TCS_Wrapped`` will insert trailing commas in container literals "
"(arrays and objects) that wrap across multiple lines. It is currently only "
"available for JavaScript and disabled by default ``TCS_None``. "
"``InsertTrailingCommas`` cannot be used together with ``BinPackArguments`` "
"as inserting the comma disables bin-packing."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2762
msgid ""
"``TCS_None`` (in configuration: ``None``) Do not insert trailing commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2765
msgid ""
"``TCS_Wrapped`` (in configuration: ``Wrapped``) Insert trailing commas in "
"container literals that were wrapped over multiple lines. Note that this is "
"conceptually incompatible with bin-packing, because the trailing comma is "
"used as an indicator that a container should be formatted one-per-line (i.e. "
"not bin-packed). So inserting a trailing comma counteracts bin-packing."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2807
msgid "**JavaImportGroups** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2775
msgid "A vector of prefixes ordered by the desired groups for Java imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2777
msgid ""
"One group's prefix can be a subset of another - the longest prefix is always "
"matched. Within a group, the imports are ordered lexicographically. Static "
"imports are grouped separately and follow the same group rules. By default, "
"static imports are placed before non-static imports, but this behavior is "
"changed by another option, ``SortJavaStaticImport``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2784
msgid ""
"In the .clang-format configuration file, this can be configured like in the "
"following yaml example. This will result in imports being formatted as in "
"the Java example below."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2838
msgid "**JavaScriptQuotes** (``JavaScriptQuoteStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2810
msgid "The JavaScriptQuoteStyle to use for JavaScript strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2814
msgid ""
"``JSQS_Leave`` (in configuration: ``Leave``) Leave string quotes as they are."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2822
msgid ""
"``JSQS_Single`` (in configuration: ``Single``) Always use single quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2830
msgid ""
"``JSQS_Double`` (in configuration: ``Double``) Always use double quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2853
msgid "**JavaScriptWrapImports** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2841
msgid "Whether to wrap JavaScript import/export statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2864
msgid "**KeepEmptyLinesAtTheStartOfBlocks** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2856
msgid "If true, the empty line at the start of blocks is kept."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2900
msgid "**LambdaBodyIndentation** (``LambdaBodyIndentationKind``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2867
msgid ""
"The indentation style of lambda bodies. ``Signature`` (the default) causes "
"the lambda body to be indented one additional level relative to the "
"indentation level of the signature. ``OuterScope`` forces the lambda body to "
"be indented one additional level relative to the parent scope containing the "
"lambda signature. For callback-heavy code, it may improve readability to "
"have the signature indented two levels and to use ``OuterScope``. The KJ "
"style guide requires ``OuterScope``. `KJ style guide <https://github.com/"
"capnproto/capnproto/blob/master/kjdoc/style-guide.md>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2879
msgid ""
"``LBI_Signature`` (in configuration: ``Signature``) Align lambda body "
"relative to the lambda signature. This is the default."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2889
msgid ""
"``LBI_OuterScope`` (in configuration: ``OuterScope``) Align lambda body "
"relative to the indentation level of the outer scope the lambda signature "
"resides in."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2939
msgid "**Language** (``LanguageKind``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2903
msgid "Language, this format style is targeted at."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2907
msgid "``LK_None`` (in configuration: ``None``) Do not use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2910
msgid "``LK_Cpp`` (in configuration: ``Cpp``) Should be used for C, C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2913
msgid "``LK_CSharp`` (in configuration: ``CSharp``) Should be used for C#."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2916
msgid "``LK_Java`` (in configuration: ``Java``) Should be used for Java."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2919
msgid ""
"``LK_JavaScript`` (in configuration: ``JavaScript``) Should be used for "
"JavaScript."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2922
msgid "``LK_Json`` (in configuration: ``Json``) Should be used for JSON."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2925
msgid ""
"``LK_ObjC`` (in configuration: ``ObjC``) Should be used for Objective-C, "
"Objective-C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2928
msgid ""
"``LK_Proto`` (in configuration: ``Proto``) Should be used for Protocol "
"Buffers (https://developers.google.com/protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2932
msgid ""
"``LK_TableGen`` (in configuration: ``TableGen``) Should be used for TableGen "
"code."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2935
msgid ""
"``LK_TextProto`` (in configuration: ``TextProto``) Should be used for "
"Protocol Buffer messages in text format (https://developers.google.com/"
"protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2968
msgid "**MacroBlockBegin** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2942
msgid "A regular expression matching macros that start a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2971
msgid "**MacroBlockEnd** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2971
msgid "A regular expression matching macros that end a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2985
msgid "**MaxEmptyLinesToKeep** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2974
msgid "The maximum number of consecutive empty lines to keep."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3028
msgid "**NamespaceIndentation** (``NamespaceIndentationKind``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2988
msgid "The indentation used for namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2992
msgid "``NI_None`` (in configuration: ``None``) Don't indent in namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3004
msgid ""
"``NI_Inner`` (in configuration: ``Inner``) Indent only in inner namespaces "
"(nested in other namespaces)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3016
msgid "``NI_All`` (in configuration: ``All``) Indent in all namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3041
msgid "**NamespaceMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3031
msgid "A vector of macros which are used to open namespace blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3041
msgid "For example: TESTSUITE"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3087
msgid "**ObjCBinPackProtocolList** (``BinPackStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3044
msgid ""
"Controls bin-packing Objective-C protocol conformance list items into as few "
"lines as possible when they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3047
msgid ""
"If ``Auto`` (the default), delegates to the value in ``BinPackParameters``. "
"If that is ``true``, bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3052
msgid ""
"If ``Always``, always bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3056
msgid ""
"If ``Never``, lays out Objective-C protocol conformance list items onto "
"individual lines whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3078
msgid ""
"``BPS_Auto`` (in configuration: ``Auto``) Automatically determine parameter "
"bin-packing behavior."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3081
msgid ""
"``BPS_Always`` (in configuration: ``Always``) Always bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3084
msgid "``BPS_Never`` (in configuration: ``Never``) Never bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3098
msgid "**ObjCBlockIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3090
msgid "The number of characters to use for indentation of ObjC blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3122
msgid "**ObjCBreakBeforeNestedBlockParam** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3101
msgid ""
"Break parameters list into lines when there is nested block parameters in a "
"function call."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3126
msgid "**ObjCSpaceAfterProperty** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3125
msgid ""
"Add a space after ``@property`` in Objective-C, i.e. use ``@property "
"(readonly)`` instead of ``@property(readonly)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3130
msgid "**ObjCSpaceBeforeProtocolList** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3129
msgid ""
"Add a space in front of an Objective-C protocol list, i.e. use ``Foo "
"<Protocol>`` instead of ``Foo<Protocol>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3145
msgid "**PPIndentWidth** (``int``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3133
msgid ""
"The number of columns to use for indentation of preprocessor statements. "
"When set to -1 (default) ``IndentWidth`` is used also for preprocessor "
"statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3148
msgid "**PenaltyBreakAssignment** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3148
msgid "The penalty for breaking around an assignment operator."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3151
msgid "**PenaltyBreakBeforeFirstCallParameter** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3151
msgid "The penalty for breaking a function call after ``call(``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3154
msgid "**PenaltyBreakComment** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3154
msgid "The penalty for each line break introduced inside a comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3157
msgid "**PenaltyBreakFirstLessLess** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3157
msgid "The penalty for breaking before the first ``<<``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3160
msgid "**PenaltyBreakString** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3160
msgid "The penalty for each line break introduced inside a string literal."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3163
msgid "**PenaltyBreakTemplateDeclaration** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3163
msgid "The penalty for breaking after template declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3166
msgid "**PenaltyExcessCharacter** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3166
msgid "The penalty for each character outside of the column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3170
msgid "**PenaltyIndentedWhitespace** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3169
msgid ""
"Penalty for each character of whitespace indentation (counted relative to "
"leading non-whitespace column)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3174
msgid "**PenaltyReturnTypeOnItsOwnLine** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3173
msgid "Penalty for putting the return type of a function onto its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3202
msgid "**PointerAlignment** (``PointerAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3177
msgid "Pointer and reference alignment style."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3181
msgid "``PAS_Left`` (in configuration: ``Left``) Align pointer to the left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3188
msgid "``PAS_Right`` (in configuration: ``Right``) Align pointer to the right."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3195
msgid ""
"``PAS_Middle`` (in configuration: ``Middle``) Align pointer in the middle."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3240
msgid "**RawStringFormats** (``std::vector<RawStringFormat>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3205
msgid ""
"Defines hints for detecting supported languages code blocks in raw strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3208
msgid ""
"A raw string with a matching delimiter or a matching enclosing function name "
"will be reformatted assuming the specified language based on the style for "
"that language defined in the .clang-format file. If no style has been "
"defined in the .clang-format file for the specific language, a predefined "
"style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not found, the "
"formatting is based on llvm style. A matching delimiter takes precedence "
"over a matching enclosing function name for determining the language of the "
"raw string contents."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3217
msgid ""
"If a canonical delimiter is specified, occurrences of other delimiters for "
"the same language will be updated to the canonical if possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3220
msgid ""
"There should be at most one specification per language and each delimiter "
"and enclosing function should not occur in multiple specifications."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3272
msgid "**ReferenceAlignment** (``ReferenceAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3243
msgid ""
"Reference alignment style (overrides ``PointerAlignment`` for references)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3248
msgid ""
"``RAS_Pointer`` (in configuration: ``Pointer``) Align reference like "
"``PointerAlignment``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3251
msgid "``RAS_Left`` (in configuration: ``Left``) Align reference to the left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3258
msgid ""
"``RAS_Right`` (in configuration: ``Right``) Align reference to the right."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3265
msgid ""
"``RAS_Middle`` (in configuration: ``Middle``) Align reference in the middle."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3287
msgid "**ReflowComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3275
msgid "If ``true``, clang-format will attempt to re-flow comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3309
msgid "**ShortNamespaceLines** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3290
msgid ""
"The maximal number of unwrapped lines that a short namespace spans. Defaults "
"to 1."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3293
msgid ""
"This determines the maximum length of short namespaces by counting unwrapped "
"lines (i.e. containing neither opening nor closing namespace brace) and "
"makes \"FixNamespaceComments\" omit adding end comments for those."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3354
msgid "**SortIncludes** (``SortIncludesOptions``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3312
msgid ""
"Controls if and how clang-format will sort ``#includes``. If ``Never``, "
"includes are never sorted. If ``CaseInsensitive``, includes are sorted in an "
"ASCIIbetical or case insensitive fashion. If ``CaseSensitive``, includes are "
"sorted in an alphabetical or case sensitive fashion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3321
msgid "``SI_Never`` (in configuration: ``Never``) Includes are never sorted."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3332
msgid ""
"``SI_CaseSensitive`` (in configuration: ``CaseSensitive``) Includes are "
"sorted in an ASCIIbetical or case sensitive fashion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3343
msgid ""
"``SI_CaseInsensitive`` (in configuration: ``CaseInsensitive``) Includes are "
"sorted in an alphabetical or case insensitive fashion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3381
msgid "**SortJavaStaticImport** (``SortJavaStaticImportOptions``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3357
msgid ""
"When sorting Java imports, by default static imports are placed before non-"
"static imports. If ``JavaStaticImportAfterImport`` is ``After``, static "
"imports are placed after non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3363
msgid ""
"``SJSIO_Before`` (in configuration: ``Before``) Static imports are placed "
"before non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3372
msgid ""
"``SJSIO_After`` (in configuration: ``After``) Static imports are placed "
"after non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3398
msgid "**SortUsingDeclarations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3384
msgid "If ``true``, clang-format will sort using declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3386
msgid ""
"The order of using declarations is defined as follows: Split the strings by "
"\"::\" and discard any initial empty strings. The last element of each list "
"is a non-namespace name; all others are namespace names. Sort the lists of "
"names lexicographically, where the sort order of individual names is that "
"all non-namespace names come before all namespace names, and within those "
"groups, names are in case-insensitive lexicographic order."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3406
msgid "**SpaceAfterCStyleCast** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3401
msgid "If ``true``, a space is inserted after C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3414
msgid "**SpaceAfterLogicalNot** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3409
msgid ""
"If ``true``, a space is inserted after the logical not operator (``!``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3422
msgid "**SpaceAfterTemplateKeyword** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3417
msgid "If ``true``, a space will be inserted after the 'template' keyword."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3462
msgid ""
"**SpaceAroundPointerQualifiers** (``SpaceAroundPointerQualifiersStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3425
msgid ""
"Defines in which cases to put a space before or after pointer qualifiers"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3429
msgid ""
"``SAPQ_Default`` (in configuration: ``Default``) Don't ensure spaces around "
"pointer qualifiers and use PointerAlignment instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3438
msgid ""
"``SAPQ_Before`` (in configuration: ``Before``) Ensure that there is a space "
"before pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3446
msgid ""
"``SAPQ_After`` (in configuration: ``After``) Ensure that there is a space "
"after pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3454
msgid ""
"``SAPQ_Both`` (in configuration: ``Both``) Ensure that there is a space both "
"before and after pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3471
msgid "**SpaceBeforeAssignmentOperators** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3465
msgid "If ``false``, spaces will be removed before assignment operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3481
msgid "**SpaceBeforeCaseColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3474
msgid "If ``false``, spaces will be removed before case colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3493
msgid "**SpaceBeforeCpp11BracedList** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3484
msgid ""
"If ``true``, a space will be inserted before a C++11 braced list used to "
"initialize an object (after the preceding identifier or type)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3502
msgid "**SpaceBeforeCtorInitializerColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3496
msgid ""
"If ``false``, spaces will be removed before constructor initializer colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3510
msgid "**SpaceBeforeInheritanceColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3505
msgid "If ``false``, spaces will be removed before inheritance colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3582
msgid "**SpaceBeforeParens** (``SpaceBeforeParensOptions``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3513
msgid "Defines in which cases to put a space before opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3517
msgid ""
"``SBPO_Never`` (in configuration: ``Never``) Never put a space before "
"opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3528
msgid ""
"``SBPO_ControlStatements`` (in configuration: ``ControlStatements``) Put a "
"space before opening parentheses only after control statement keywords "
"(``for/if/while...``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3540
msgid ""
"``SBPO_ControlStatementsExceptControlMacros`` (in configuration: "
"``ControlStatementsExceptControlMacros``) Same as ``SBPO_ControlStatements`` "
"except this option doesn't apply to ForEach and If macros. This is useful in "
"projects where ForEach/If macros are treated as function calls instead of "
"control statements. ``SBPO_ControlStatementsExceptForEachMacros`` remains an "
"alias for backward compatability."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3555
msgid ""
"``SBPO_NonEmptyParentheses`` (in configuration: ``NonEmptyParentheses``) Put "
"a space before opening parentheses only if the parentheses are not empty i."
"e. '()'"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3568
msgid ""
"``SBPO_Always`` (in configuration: ``Always``) Always put a space before "
"opening parentheses, except when it's prohibited by the syntax rules (in "
"function-like macro definitions) or when determined by other style rules "
"(after unary operators, opening parentheses, etc.)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3591
msgid "**SpaceBeforeRangeBasedForLoopColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3585
msgid "If ``false``, spaces will be removed before range-based for loop colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3601
msgid "**SpaceBeforeSquareBrackets** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3594
msgid ""
"If ``true``, spaces will be before  ``[``. Lambdas will not be affected. "
"Only the first ``[`` will get a space added."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3610
msgid "**SpaceInEmptyBlock** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3604
msgid "If ``true``, spaces will be inserted into ``{}``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3623
msgid "**SpaceInEmptyParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3613
msgid "If ``true``, spaces may be inserted into ``()``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3640
msgid "**SpacesBeforeTrailingComments** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3626
msgid "The number of spaces before trailing line comments (``//`` - comments)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3629
msgid ""
"This does not affect trailing block comments (``/*`` - comments) as those "
"commonly have different usage patterns and a number of special cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3667
msgid "**SpacesInAngles** (``SpacesInAnglesStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3643
msgid "The SpacesInAnglesStyle to use for template argument lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3647
msgid ""
"``SIAS_Never`` (in configuration: ``Never``) Remove spaces after ``<`` and "
"before ``>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3655
msgid ""
"``SIAS_Always`` (in configuration: ``Always``) Add spaces after ``<`` and "
"before ``>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3663
msgid ""
"``SIAS_Leave`` (in configuration: ``Leave``) Keep a single space after ``<`` "
"and before ``>`` if any spaces were present. Option ``Standard: Cpp03`` "
"takes precedence."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3675
msgid "**SpacesInCStyleCastParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3670
msgid "If ``true``, spaces may be inserted into C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3685
msgid "**SpacesInConditionalStatement** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3678
msgid ""
"If ``true``, spaces will be inserted around if/for/switch/while conditions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3695
msgid "**SpacesInContainerLiterals** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3688
msgid ""
"If ``true``, spaces are inserted inside container literals (e.g. ObjC and "
"Javascript array and dict literals)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3732
msgid "**SpacesInLineCommentPrefix** (``SpacesInLineComment``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3698
msgid ""
"How many spaces are allowed at the start of a line comment. To disable the "
"maximum set it to ``-1``, apart from that the maximum takes precedence over "
"the minimum. Minimum = 1 Maximum = -1 // One space is forced"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3704
msgid "//  but more spaces are possible"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3706
msgid ""
"Minimum = 0 Maximum = 0 //Forces to start every comment directly after the "
"slashes"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3710
msgid ""
"Note that in line comment sections the relative indent of the subsequent "
"lines is kept, that means the following:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3715
msgid ""
"before:                                   after: Minimum: 1 //if (b) "
"{                                // if (b) { //  return "
"true;                          //   return "
"true; //}                                       // }"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3721
msgid ""
"Maximum: 0 /// List:                                 ///List: ///  - "
"Foo                                /// - Foo ///    - "
"Bar                              ///   - Bar"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3729
msgid ""
"``unsigned Minimum`` The minimum number of spaces at the start of the "
"comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3731
msgid ""
"``unsigned Maximum`` The maximum number of spaces at the start of the "
"comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3740
msgid "**SpacesInParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3735
msgid "If ``true``, spaces will be inserted after ``(`` and before ``)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3751
msgid "**SpacesInSquareBrackets** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3743
msgid ""
"If ``true``, spaces will be inserted after ``[`` and before ``]``. Lambdas "
"without arguments or unspecified size array declarations will not be "
"affected."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3786
msgid "**Standard** (``LanguageStandard``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3754
msgid "Parse and format C++ constructs compatible with this standard."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3763
msgid ""
"``LS_Cpp03`` (in configuration: ``c++03``) Parse and format as C++03. "
"``Cpp03`` is a deprecated alias for ``c++03``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3767
msgid "``LS_Cpp11`` (in configuration: ``c++11``) Parse and format as C++11."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3770
msgid "``LS_Cpp14`` (in configuration: ``c++14``) Parse and format as C++14."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3773
msgid "``LS_Cpp17`` (in configuration: ``c++17``) Parse and format as C++17."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3776
msgid "``LS_Cpp20`` (in configuration: ``c++20``) Parse and format as C++20."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3779
msgid ""
"``LS_Latest`` (in configuration: ``Latest``) Parse and format using the "
"latest supported language version. ``Cpp11`` is a deprecated alias for "
"``Latest``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3783
msgid ""
"``LS_Auto`` (in configuration: ``Auto``) Automatic detection based on the "
"input."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3803
msgid "**StatementAttributeLikeMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3789
msgid ""
"Macros which are ignored in front of a statement, as if they were an "
"attribute. So that they are not parsed as identifier, for example for Qts "
"emit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3813
msgid "**StatementMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3806
msgid "A vector of macros that should be interpreted as complete statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3809
msgid ""
"Typical macros are expressions, and require a semi-colon to be added; "
"sometimes this is not the case, and this allows to make clang-format aware "
"of such cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3813
msgid "For example: Q_UNUSED"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3816
msgid "**TabWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3816
msgid "The number of columns used for tab stops."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3834
msgid "**TypenameMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3819
msgid ""
"A vector of macros that should be interpreted as type declarations instead "
"of as function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3834
msgid "For example: OpenSSL STACK_OF, BSD LIST_ENTRY."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3838
msgid "**UseCRLF** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3837
msgid ""
"Use ``\\r\\n`` instead of ``\\n`` for line breaks. Also used as fallback if "
"``DeriveLineEnding`` is true."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3863
msgid "**UseTab** (``UseTabStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3841
msgid "The way to use tab characters in the resulting file."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3845
msgid "``UT_Never`` (in configuration: ``Never``) Never use tab."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3848
msgid ""
"``UT_ForIndentation`` (in configuration: ``ForIndentation``) Use tabs only "
"for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3851
msgid ""
"``UT_ForContinuationAndIndentation`` (in configuration: "
"``ForContinuationAndIndentation``) Fill all leading whitespace with tabs, "
"and use spaces for alignment that appears within a line (e.g. consecutive "
"assignments and declarations)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3855
msgid ""
"``UT_AlignWithSpaces`` (in configuration: ``AlignWithSpaces``) Use tabs for "
"line continuation and indentation, and spaces for alignment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3859
msgid ""
"``UT_Always`` (in configuration: ``Always``) Use tabs whenever we need to "
"fill whitespace that spans at least from one tab stop to the next one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3881
msgid "**WhitespaceSensitiveMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3866
msgid ""
"A vector of macros which are whitespace-sensitive and should not be touched."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3881
msgid "For example: BOOST_PP_STRINGIZE"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3886
msgid "Adding additional style options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3888
msgid ""
"Each additional style option adds costs to the clang-format project. Some of "
"these costs affect the clang-format development itself, as we need to make "
"sure that any given combination of options work and that new features don't "
"break any of the existing options in any way. There are also costs for end "
"users as options become less discoverable and people have to think about and "
"make a decision on options they don't really care about."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3895
msgid ""
"The goal of the clang-format project is more on the side of supporting a "
"limited set of styles really well as opposed to supporting every single "
"style used by a codebase somewhere in the wild. Of course, we do want to "
"support all major projects and thus have established the following bar for "
"adding style options. Each new style option must .."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3901
msgid "be used in a project of significant size (have dozens of contributors)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3902
msgid "have a publicly accessible style guide"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3903
msgid "have a person willing to contribute and maintain patches"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3906
msgid "Examples"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3908
msgid ""
"A style similar to the `Linux Kernel style <https://www.kernel.org/doc/"
"Documentation/CodingStyle>`_:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3920
msgid "The result is (imagine that tabs are used for indentation here):"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3949
msgid "A style similar to the default Visual Studio formatting style:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3960
msgid "The result is:"
msgstr ""
