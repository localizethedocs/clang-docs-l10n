# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/checkers.rst:3
msgid "Available Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:5
msgid ""
"The analyzer performs checks that are categorized into families or "
"\"checkers\"."
msgstr ""

#: ../../../analyzer/checkers.rst:7
msgid ""
"The default set of checkers covers a variety of checks targeted at finding "
"security and API usage bugs, dead code, and other logic errors. See the :ref:"
"`default-checkers` checkers list below."
msgstr ""

#: ../../../analyzer/checkers.rst:10
msgid ""
"In addition to these, the analyzer contains a number of :ref:`alpha-"
"checkers` (aka *alpha* checkers). These checkers are under development and "
"are switched off by default. They may crash or emit a higher number of false "
"positives."
msgstr ""

#: ../../../analyzer/checkers.rst:13
msgid ""
"The :ref:`debug-checkers` package contains checkers for analyzer developers "
"for debugging purposes."
msgstr ""

#: ../../../analyzer/checkers.rst:17
msgid "Table of Contents"
msgstr ""

#: ../../../analyzer/checkers.rst:22
msgid "Default Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:27
msgid "core"
msgstr ""

#: ../../../analyzer/checkers.rst:28
msgid ""
"Models core language features and contains general-purpose checkers such as "
"division by zero, null pointer dereference, usage of uninitialized values, "
"etc. *These checkers must be always switched on as other checker rely on "
"them.*"
msgstr ""

#: ../../../analyzer/checkers.rst:35
msgid "core.BitwiseShift (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:37
msgid ""
"Finds undefined behavior caused by the bitwise left- and right-shift "
"operator operating on integer types."
msgstr ""

#: ../../../analyzer/checkers.rst:40
msgid ""
"By default, this checker only reports situations when the right operand is "
"either negative or larger than the bit width of the type of the left "
"operand; these are logically unsound."
msgstr ""

#: ../../../analyzer/checkers.rst:44
msgid ""
"Moreover, if the pedantic mode is activated by ``-analyzer-config core."
"BitwiseShift:Pedantic=true``, then this checker also reports situations "
"where the _left_ operand of a shift operator is negative or overflow occurs "
"during the right shift of a signed value. (Most compilers handle these "
"predictably, but the C standard and the C++ standards before C++20 say that "
"they're undefined behavior. In the C++20 standard these constructs are well-"
"defined, so activating pedantic mode in C++20 has no effect.)"
msgstr ""

#: ../../../analyzer/checkers.rst:52
msgid "**Examples**"
msgstr ""

#: ../../../analyzer/checkers.rst:78
msgid "**Solution**"
msgstr ""

#: ../../../analyzer/checkers.rst:80
msgid "Ensure the shift operands are in proper range before shifting."
msgstr ""

#: ../../../analyzer/checkers.rst:85
msgid "core.CallAndMessage (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:86
msgid ""
"Check for logical errors for function calls and Objective-C message "
"expressions (e.g., uninitialized arguments, null function pointers)."
msgstr ""

#: ../../../analyzer/checkers.rst:94
msgid "core.DivideZero (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:95
msgid "Check for division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:103
msgid "core.NonNullParamChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:104
msgid ""
"Check for null pointers passed as arguments to a function whose arguments "
"are references or marked with the 'nonnull' attribute."
msgstr ""

#: ../../../analyzer/checkers.rst:118
msgid "core.NullDereference (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:119
msgid "Check for dereferences of null pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:121
msgid ""
"This checker specifically does not report null pointer dereferences for x86 "
"and x86-64 targets when the address space is 256 (x86 GS Segment), 257 (x86 "
"FS Segment), or 258 (x86 SS segment). See `X86/X86-64 Language Extensions "
"<https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-"
"specified-segments>`__ for reference."
msgstr ""

#: ../../../analyzer/checkers.rst:128
msgid ""
"The ``SuppressAddressSpaces`` option suppresses warnings for null "
"dereferences of all pointers with address spaces. You can disable this "
"behavior with the option ``-analyzer-config core.NullDereference:"
"SuppressAddressSpaces=false``. *Defaults to true*."
msgstr ""

#: ../../../analyzer/checkers.rst:176
msgid "core.StackAddressEscape (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:177
msgid "Check that addresses to stack memory do not escape the function."
msgstr ""

#: ../../../analyzer/checkers.rst:202
msgid "core.UndefinedBinaryOperatorResult (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:203
msgid "Check for undefined results of binary operators."
msgstr ""

#: ../../../analyzer/checkers.rst:215
msgid "core.VLASize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:216
msgid ""
"Check for declarations of Variable Length Arrays of undefined or zero size."
msgstr ""

#: ../../../analyzer/checkers.rst:218
msgid "Check for declarations of VLA of undefined or zero size."
msgstr ""

#: ../../../analyzer/checkers.rst:235
msgid "core.uninitialized.ArraySubscript (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:236
msgid "Check for uninitialized values used as array subscripts."
msgstr ""

#: ../../../analyzer/checkers.rst:248
msgid "core.uninitialized.Assign (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:249
msgid "Check for assigning uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:261
msgid "core.uninitialized.Branch (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:262
msgid "Check for uninitialized values used as branch conditions."
msgstr ""

#: ../../../analyzer/checkers.rst:275
msgid "core.uninitialized.CapturedBlockVariable (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:276
msgid "Check for blocks that capture uninitialized values."
msgstr ""

#: ../../../analyzer/checkers.rst:288
msgid "core.uninitialized.UndefReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:289
msgid "Check for uninitialized values being returned to the caller."
msgstr ""

#: ../../../analyzer/checkers.rst:301
msgid "core.uninitialized.NewArraySize (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:303
msgid "Check if the element count in new[] is garbage or undefined."
msgstr ""

#: ../../../analyzer/checkers.rst:318
msgid "cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:320
msgid "C++ Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:325
msgid "cplusplus.InnerPointer (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:326
msgid "Check for inner pointers of C++ containers used after re/deallocation."
msgstr ""

#: ../../../analyzer/checkers.rst:328
msgid ""
"Many container methods in the C++ standard library are known to invalidate "
"\"references\" (including actual references, iterators and raw pointers) to "
"elements of the container. Using such references after they are invalidated "
"causes undefined behavior, which is a common source of memory errors in C++ "
"that this checker is capable of finding."
msgstr ""

#: ../../../analyzer/checkers.rst:334
msgid ""
"The checker is currently limited to ``std::string`` objects and doesn't "
"recognize some of the more sophisticated approaches to passing unowned "
"pointers around, such as ``std::string_view``."
msgstr ""

#: ../../../analyzer/checkers.rst:356
msgid "cplusplus.NewDelete (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:357
msgid ""
"Check for double-free and use-after-free problems. Traces memory managed by "
"new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:365
msgid "cplusplus.NewDeleteLeaks (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:366
msgid "Check for memory leaks. Traces memory managed by new/delete."
msgstr ""

#: ../../../analyzer/checkers.rst:377
msgid "cplusplus.PlacementNew (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:378
msgid ""
"Check if default placement new is provided with pointers to sufficient "
"storage capacity."
msgstr ""

#: ../../../analyzer/checkers.rst:392
msgid "cplusplus.SelfAssignment (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:393
msgid "Checks C++ copy and move assignment operators for self assignment."
msgstr ""

#: ../../../analyzer/checkers.rst:398
msgid "cplusplus.StringChecker (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:399
msgid "Checks std::string operations."
msgstr ""

#: ../../../analyzer/checkers.rst:401
msgid ""
"Checks if the cstring pointer from which the ``std::string`` object is "
"constructed is ``NULL`` or not. If the checker cannot reason about the "
"nullness of the pointer it will assume that it was non-null to satisfy the "
"precondition of the constructor."
msgstr ""

#: ../../../analyzer/checkers.rst:406
msgid ""
"This checker is capable of checking the `SEI CERT C++ coding rule STR51-CPP. "
"Do not attempt to create a std::string from a null pointer <https://wiki.sei."
"cmu.edu/confluence/x/E3s-BQ>`__."
msgstr ""

#: ../../../analyzer/checkers.rst:423
msgid "deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:425
msgid "Dead Code Checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:430
msgid "deadcode.DeadStores (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:431
msgid "Check for values stored to variables that are never read afterwards."
msgstr ""

#: ../../../analyzer/checkers.rst:440
msgid ""
"The ``WarnForDeadNestedAssignments`` option enables the checker to emit "
"warnings for nested dead assignments. You can disable with the ``-analyzer-"
"config deadcode.DeadStores:WarnForDeadNestedAssignments=false``. *Defaults "
"to true*."
msgstr ""

#: ../../../analyzer/checkers.rst:445
msgid "Would warn for this e.g.: if ((y = make_int())) { }"
msgstr ""

#: ../../../analyzer/checkers.rst:452
msgid "nullability"
msgstr ""

#: ../../../analyzer/checkers.rst:454
msgid ""
"Objective C checkers that warn for null pointer passing and dereferencing "
"errors."
msgstr ""

#: ../../../analyzer/checkers.rst:459
msgid "nullability.NullPassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:460
msgid ""
"Warns when a null pointer is passed to a pointer which has a _Nonnull type."
msgstr ""

#: ../../../analyzer/checkers.rst:472
msgid "nullability.NullReturnedFromNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:473
msgid ""
"Warns when a null pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:490
msgid "nullability.NullableDereferenced (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:491
msgid "Warns when a nullable pointer is dereferenced."
msgstr ""

#: ../../../analyzer/checkers.rst:511
msgid "nullability.NullablePassedToNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:512
msgid ""
"Warns when a nullable pointer is passed to a pointer which has a _Nonnull "
"type."
msgstr ""

#: ../../../analyzer/checkers.rst:528
msgid "nullability.NullableReturnedFromNonnull (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:529
msgid ""
"Warns when a nullable pointer is returned from a function that has _Nonnull "
"return type."
msgstr ""

#: ../../../analyzer/checkers.rst:534
msgid "optin"
msgstr ""

#: ../../../analyzer/checkers.rst:536
msgid "Checkers for portability, performance or coding style specific rules."
msgstr ""

#: ../../../analyzer/checkers.rst:541
msgid "optin.core.EnumCastOutOfRange (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:542
msgid ""
"Check for integer to enumeration casts that would produce a value with no "
"corresponding enumerator. This is not necessarily undefined behavior, but "
"can lead to nasty surprises, so projects may decide to use a coding standard "
"that disallows these \"unusual\" conversions."
msgstr ""

#: ../../../analyzer/checkers.rst:547
msgid ""
"Note that no warnings are produced when the enum type (e.g. `std::byte`) has "
"no enumerators at all."
msgstr ""

#: ../../../analyzer/checkers.rst:560 ../../../analyzer/checkers.rst:1112
#: ../../../analyzer/checkers.rst:1288 ../../../analyzer/checkers.rst:2900
msgid "**Limitations**"
msgstr ""

#: ../../../analyzer/checkers.rst:562
msgid ""
"This checker does not accept the coding pattern where an enum type is used "
"to store combinations of flag values:"
msgstr ""

#: ../../../analyzer/checkers.rst:582
msgid "Projects that use this pattern should not enable this optin checker."
msgstr ""

#: ../../../analyzer/checkers.rst:587
msgid "optin.cplusplus.UninitializedObject (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:589
msgid ""
"This checker reports uninitialized fields in objects created after a "
"constructor call. It doesn't only find direct uninitialized fields, but "
"rather makes a deep inspection of the object, analyzing all of its fields' "
"subfields. The checker regards inherited fields as direct fields, so one "
"will receive warnings for uninitialized inherited data members as well."
msgstr ""

#: ../../../analyzer/checkers.rst:669
msgid "**Options**"
msgstr ""

#: ../../../analyzer/checkers.rst:671
msgid ""
"This checker has several options which can be set from command line (e.g. ``-"
"analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true``):"
msgstr ""

#: ../../../analyzer/checkers.rst:674
msgid ""
"``Pedantic`` (boolean). If to false, the checker won't emit warnings for "
"objects that don't have at least one initialized field. Defaults to false."
msgstr ""

#: ../../../analyzer/checkers.rst:677
msgid ""
"``NotesAsWarnings``  (boolean). If set to true, the checker will emit a "
"warning for each uninitialized field, as opposed to emitting one warning per "
"constructor call, and listing the uninitialized fields that belongs to it in "
"notes. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:682
msgid ""
"``CheckPointeeInitialization`` (boolean). If set to false, the checker will "
"not analyze the pointee of pointer/reference fields, and will only check "
"whether the object itself is initialized. *Defaults to false*."
msgstr ""

#: ../../../analyzer/checkers.rst:686
msgid ""
"``IgnoreRecordsWithField`` (string). If supplied, the checker will not "
"analyze structures that have a field with a name or type name that matches  "
"the given pattern. *Defaults to \"\"*."
msgstr ""

#: ../../../analyzer/checkers.rst:693
msgid "optin.cplusplus.VirtualCall (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:694
msgid "Check virtual function calls during construction or destruction."
msgstr ""

#: ../../../analyzer/checkers.rst:717
msgid "optin.mpi.MPI-Checker (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:718
msgid "Checks MPI code."
msgstr ""

#: ../../../analyzer/checkers.rst:748
msgid "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:749
msgid "Check that NSLocalizedString macros include a comment for context."
msgstr ""

#: ../../../analyzer/checkers.rst:763
msgid "optin.osx.cocoa.localizability.NonLocalizedStringChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:764
msgid ""
"Warns about uses of non-localized NSStrings passed to UI methods expecting "
"localized NSStrings."
msgstr ""

#: ../../../analyzer/checkers.rst:781
msgid "optin.performance.GCDAntipattern"
msgstr ""

#: ../../../analyzer/checkers.rst:782
msgid "Check for performance anti-patterns when using Grand Central Dispatch."
msgstr ""

#: ../../../analyzer/checkers.rst:787
msgid "optin.performance.Padding"
msgstr ""

#: ../../../analyzer/checkers.rst:788
msgid "Check for excessively padded structs."
msgstr ""

#: ../../../analyzer/checkers.rst:793
msgid "optin.portability.UnixAPI"
msgstr ""

#: ../../../analyzer/checkers.rst:794
msgid "Finds implementation-defined behavior in UNIX/Posix functions."
msgstr ""

#: ../../../analyzer/checkers.rst:800
msgid "security"
msgstr ""

#: ../../../analyzer/checkers.rst:802
msgid "Security related checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:807
msgid "security.cert.env.InvalidPtr"
msgstr ""

#: ../../../analyzer/checkers.rst:809
msgid ""
"Corresponds to SEI CERT Rules `ENV31-C <https://wiki.sei.cmu.edu/confluence/"
"display/c/ENV31-C."
"+Do+not+rely+on+an+environment+pointer+following+an+operation+that+may+invalidate+it>`_ "
"and `ENV34-C <https://wiki.sei.cmu.edu/confluence/display/c/ENV34-C."
"+Do+not+store+pointers+returned+by+certain+functions>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:811
msgid ""
"**ENV31-C**: Rule is about the possible problem with ``main`` function's "
"third argument, environment pointer, \"envp\". When environment array is "
"modified using some modification function such as ``putenv``, ``setenv`` or "
"others, It may happen that memory is reallocated, however \"envp\" is not "
"updated to reflect the changes and points to old memory region."
msgstr ""

#: ../../../analyzer/checkers.rst:818
msgid ""
"**ENV34-C**: Some functions return a pointer to a statically allocated "
"buffer. Consequently, subsequent call of these functions will invalidate "
"previous pointer. These functions include: ``getenv``, ``localeconv``, "
"``asctime``, ``setlocale``, ``strerror``"
msgstr ""

#: ../../../analyzer/checkers.rst:853
msgid ""
"The ``InvalidatingGetEnv`` option is available for treating ``getenv`` calls "
"as invalidating. When enabled, the checker issues a warning if ``getenv`` is "
"called multiple times and their results are used without first creating a "
"copy. This level of strictness might be considered overly pedantic for the "
"commonly used ``getenv`` implementations."
msgstr ""

#: ../../../analyzer/checkers.rst:859
msgid ""
"To enable this option, use: ``-analyzer-config security.cert.env.InvalidPtr:"
"InvalidatingGetEnv=true``."
msgstr ""

#: ../../../analyzer/checkers.rst:862
msgid "By default, this option is set to *false*."
msgstr ""

#: ../../../analyzer/checkers.rst:864
msgid ""
"When this option is enabled, warnings will be generated for scenarios like "
"the following:"
msgstr ""

#: ../../../analyzer/checkers.rst:876
msgid "security.FloatLoopCounter (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:877
msgid ""
"Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-"
"CPP)."
msgstr ""

#: ../../../analyzer/checkers.rst:888
msgid "security.insecureAPI.UncheckedReturn (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:889
msgid "Warn on uses of functions whose return values must be always checked."
msgstr ""

#: ../../../analyzer/checkers.rst:900
msgid "security.insecureAPI.bcmp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:901
msgid "Warn on uses of the 'bcmp' function."
msgstr ""

#: ../../../analyzer/checkers.rst:912
msgid "security.insecureAPI.bcopy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:913
msgid "Warn on uses of the 'bcopy' function."
msgstr ""

#: ../../../analyzer/checkers.rst:924
msgid "security.insecureAPI.bzero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:925
msgid "Warn on uses of the 'bzero' function."
msgstr ""

#: ../../../analyzer/checkers.rst:936
msgid "security.insecureAPI.getpw (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:937
msgid "Warn on uses of the 'getpw' function."
msgstr ""

#: ../../../analyzer/checkers.rst:949
msgid "security.insecureAPI.gets (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:950
msgid "Warn on uses of the 'gets' function."
msgstr ""

#: ../../../analyzer/checkers.rst:962
msgid "security.insecureAPI.mkstemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:963
msgid "Warn when 'mkstemp' is passed fewer than 6 X's in the format string."
msgstr ""

#: ../../../analyzer/checkers.rst:974
msgid "security.insecureAPI.mktemp (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:975
msgid "Warn on uses of the ``mktemp`` function."
msgstr ""

#: ../../../analyzer/checkers.rst:986
msgid "security.insecureAPI.rand (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:987
msgid ""
"Warn on uses of inferior random number generating functions (only if "
"arc4random function is available): ``drand48, erand48, jrand48, lcong48, "
"lrand48, mrand48, nrand48, random, rand_r``."
msgstr ""

#: ../../../analyzer/checkers.rst:999
msgid "security.insecureAPI.strcpy (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1000
msgid "Warn on uses of the ``strcpy`` and ``strcat`` functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1015
msgid "security.insecureAPI.vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1016
msgid "Warn on uses of the 'vfork' function."
msgstr ""

#: ../../../analyzer/checkers.rst:1027
msgid "security.insecureAPI.DeprecatedOrUnsafeBufferHandling (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1028
msgid ""
"Warn on occurrences of unsafe or deprecated buffer handling functions, which "
"now have a secure variant: ``sprintf, fprintf, vsprintf, scanf, wscanf, "
"fscanf, fwscanf, vscanf, vwscanf, vfscanf, vfwscanf, sscanf, swscanf, "
"vsscanf, vswscanf, swprintf, snprintf, vswprintf, vsnprintf, memcpy, "
"memmove, strncpy, strncat, memset``"
msgstr ""

#: ../../../analyzer/checkers.rst:1040
msgid "unix"
msgstr ""

#: ../../../analyzer/checkers.rst:1041
msgid "POSIX/Unix checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:1046
msgid "unix.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1047
msgid ""
"Check calls to various UNIX/Posix functions: ``open, pthread_once, calloc, "
"malloc, realloc, alloca``."
msgstr ""

#: ../../../analyzer/checkers.rst:1055
msgid "unix.Errno (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1057
msgid ""
"Check for improper use of ``errno``. This checker implements partially CERT "
"rule `ERR30-C. Set errno to zero before calling a library function known to "
"set errno, and check errno only after the function returns a value "
"indicating failure <https://wiki.sei.cmu.edu/confluence/pages/viewpage."
"action?pageId=87152351>`_. The checker can find the first read of ``errno`` "
"after successful standard function calls."
msgstr ""

#: ../../../analyzer/checkers.rst:1065
msgid ""
"The C and POSIX standards often do not define if a standard library function "
"may change value of ``errno`` if the call does not fail. Therefore, "
"``errno`` should only be used if it is known from the return value of a "
"function that the call has failed. There are exceptions to this rule (for "
"example ``strtol``) but the affected functions are not yet supported by the "
"checker. The return values for the failure cases are documented in the "
"standard Linux man pages of the functions and in the `POSIX standard "
"<https://pubs.opengroup.org/onlinepubs/9699919799/>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:1086
msgid ""
"The checker :ref:`unix-StdCLibraryFunctions` must be turned on to get the "
"warnings from this checker. The supported functions are the same as by :ref:"
"`unix-StdCLibraryFunctions`. The ``ModelPOSIX`` option of that checker "
"affects the set of checked functions."
msgstr ""

#: ../../../analyzer/checkers.rst:1091 ../../../analyzer/checkers.rst:1300
msgid "**Parameters**"
msgstr ""

#: ../../../analyzer/checkers.rst:1093
msgid ""
"The ``AllowErrnoReadOutsideConditionExpressions`` option allows read of the "
"errno value if the value is not used in a condition (in ``if`` statements, "
"loops, conditional expressions, ``switch`` statements). For example "
"``errno`` can be stored into a variable without getting a warning by the "
"checker."
msgstr ""

#: ../../../analyzer/checkers.rst:1109
msgid ""
"Default value of this option is ``true``. This allows save of the errno "
"value for possible later error handling."
msgstr ""

#: ../../../analyzer/checkers.rst:1114
msgid ""
"Only the very first usage of ``errno`` is checked after an affected function "
"call. Value of ``errno`` is not followed when it is stored into a variable "
"or returned from a function."
msgstr ""

#: ../../../analyzer/checkers.rst:1117
msgid ""
"Documentation of function ``lseek`` is not clear about what happens if the "
"function returns different value than the expected file position but not -1. "
"To avoid possible false-positives ``errno`` is allowed to be used in this "
"case."
msgstr ""

#: ../../../analyzer/checkers.rst:1125
msgid "unix.Malloc (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1126
msgid ""
"Check for memory leaks, double free, and use-after-free problems. Traces "
"memory managed by malloc()/free()."
msgstr ""

#: ../../../analyzer/checkers.rst:1134
msgid "unix.MallocSizeof (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1135
msgid "Check for dubious ``malloc`` arguments involving ``sizeof``."
msgstr ""

#: ../../../analyzer/checkers.rst:1149
msgid "unix.MismatchedDeallocator (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1150
msgid "Check for mismatched deallocators."
msgstr ""

#: ../../../analyzer/checkers.rst:1158
msgid "unix.Vfork (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1159
msgid "Check for proper usage of ``vfork``."
msgstr ""

#: ../../../analyzer/checkers.rst:1190
msgid "unix.cstring.BadSizeArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1191
msgid ""
"Check the size argument passed into C string functions for common erroneous "
"patterns. Use ``-Wno-strncat-size`` compiler option to mute other "
"``strncat``-related compiler warnings."
msgstr ""

#: ../../../analyzer/checkers.rst:1204
msgid "unix.cstring.NullArg (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1205
msgid ""
"Check for null pointers being passed as arguments to C string functions: "
"``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, "
"strcasecmp, strncasecmp, wcslen, wcsnlen``."
msgstr ""

#: ../../../analyzer/checkers.rst:1217
msgid "unix.StdCLibraryFunctions (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1218
msgid ""
"Check for calls of standard library functions that violate predefined "
"argument constraints. For example, according to the C standard the behavior "
"of function ``int isalnum(int ch)`` is undefined if the value of ``ch`` is "
"not representable as ``unsigned char`` and is not equal to ``EOF``."
msgstr ""

#: ../../../analyzer/checkers.rst:1223
msgid ""
"You can think of this checker as defining restrictions (pre- and "
"postconditions) on standard library functions. Preconditions are checked, "
"and when they are violated, a warning is emitted. Postconditions are added "
"to the analysis, e.g. that the return value of a function is not greater "
"than 255. Preconditions are added to the analysis too, in the case when the "
"affected values are not known before the call."
msgstr ""

#: ../../../analyzer/checkers.rst:1230
msgid ""
"For example, if an argument to a function must be in between 0 and 255, but "
"the value of the argument is unknown, the analyzer will assume that it is in "
"this interval. Similarly, if a function mustn't be called with a null "
"pointer and the analyzer cannot prove that it is null, then it will assume "
"that it is non-null."
msgstr ""

#: ../../../analyzer/checkers.rst:1247
msgid ""
"These are the possible checks on the values passed as function arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:1236
msgid ""
"The argument has an allowed range (or multiple ranges) of values. The "
"checker can detect if a passed value is outside of the allowed range and "
"show the actual and allowed values."
msgstr ""

#: ../../../analyzer/checkers.rst:1239
msgid ""
"The argument has pointer type and is not allowed to be null pointer. Many "
"(but not all) standard functions can produce undefined behavior if a null "
"pointer is passed, these cases can be detected by the checker."
msgstr ""

#: ../../../analyzer/checkers.rst:1242
msgid ""
"The argument is a pointer to a memory block and the minimal size of this "
"buffer is determined by another argument to the function, or by "
"multiplication of two arguments (like at function ``fread``), or is a fixed "
"value (for example ``asctime_r`` requires at least a buffer of size 26). The "
"checker can detect if the buffer size is too small and in optimal case show "
"the size of the buffer and the values of the corresponding arguments."
msgstr ""

#: ../../../analyzer/checkers.rst:1281
msgid ""
"Additionally to the argument and return value conditions, this checker also "
"adds state of the value ``errno`` if applicable to the analysis. Many system "
"functions set the ``errno`` value only if an error occurs (together with a "
"specific return value of the function), otherwise it becomes undefined. This "
"checker changes the analysis state to contain such information. This data is "
"used by other checkers, for example :ref:`unix-Errno`."
msgstr ""

#: ../../../analyzer/checkers.rst:1290
msgid ""
"The checker can not always provide notes about the values of the arguments. "
"Without this information it is hard to confirm if the constraint is indeed "
"violated. The argument values are shown if they are known constants or the "
"value is determined by previous (not too complicated) assumptions."
msgstr ""

#: ../../../analyzer/checkers.rst:1295
msgid ""
"The checker can produce false positives in cases such as if the program has "
"invariants not known to the analyzer engine or the bug report path contains "
"calls to unknown functions. In these cases the analyzer fails to detect the "
"real range of the argument."
msgstr ""

#: ../../../analyzer/checkers.rst:1302
msgid ""
"The checker models functions (and emits diagnostics) from the C standard by "
"default. The ``ModelPOSIX`` option enables modeling (and emit diagnostics) "
"of additional functions that are defined in the POSIX standard. This option "
"is disabled by default."
msgstr ""

#: ../../../analyzer/checkers.rst:1310
msgid "osx"
msgstr ""

#: ../../../analyzer/checkers.rst:1311
msgid "macOS checkers."
msgstr ""

#: ../../../analyzer/checkers.rst:1316
msgid "osx.API (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1317
msgid "Check for proper uses of various Apple APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1329
msgid "osx.NumberObjectConversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1330
msgid ""
"Check for erroneous conversions of objects representing numbers into numbers."
msgstr ""

#: ../../../analyzer/checkers.rst:1344
msgid "osx.ObjCProperty (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1345
msgid "Check for proper uses of Objective-C properties."
msgstr ""

#: ../../../analyzer/checkers.rst:1360
msgid "osx.SecKeychainAPI (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1361
msgid "Check for proper uses of Secure Keychain APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1369
msgid "osx.cocoa.AtSync (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1370
msgid "Check for nil pointers used as mutexes for @synchronized."
msgstr ""

#: ../../../analyzer/checkers.rst:1387
msgid "osx.cocoa.AutoreleaseWrite"
msgstr ""

#: ../../../analyzer/checkers.rst:1388
msgid ""
"Warn about potentially crashing writes to autoreleasing objects from "
"different autoreleasing pools in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:1393
msgid "osx.cocoa.ClassRelease (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1394
msgid ""
"Check for sending 'retain', 'release', or 'autorelease' directly to a Class."
msgstr ""

#: ../../../analyzer/checkers.rst:1408
msgid "osx.cocoa.Dealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1409
msgid ""
"Warn about Objective-C classes that lack a correct implementation of -dealloc"
msgstr ""

#: ../../../analyzer/checkers.rst:1417
msgid "osx.cocoa.IncompatibleMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1418
msgid "Warn about Objective-C method signatures with type incompatibilities."
msgstr ""

#: ../../../analyzer/checkers.rst:1441
msgid "osx.cocoa.Loops"
msgstr ""

#: ../../../analyzer/checkers.rst:1442
msgid "Improved modeling of loops using Cocoa collection types."
msgstr ""

#: ../../../analyzer/checkers.rst:1447
msgid "osx.cocoa.MissingSuperCall (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1448
msgid "Warn about Objective-C methods that lack a necessary call to super."
msgstr ""

#: ../../../analyzer/checkers.rst:1462
msgid "osx.cocoa.NSAutoreleasePool (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1463
msgid "Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode."
msgstr ""

#: ../../../analyzer/checkers.rst:1475
msgid "osx.cocoa.NSError (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1476
msgid "Check usage of NSError parameters."
msgstr ""

#: ../../../analyzer/checkers.rst:1505
msgid "osx.cocoa.NilArg (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1506
msgid "Check for prohibited nil arguments to ObjC method calls."
msgstr ""

#: ../../../analyzer/checkers.rst:1508
msgid "caseInsensitiveCompare:"
msgstr ""

#: ../../../analyzer/checkers.rst:1509
msgid "compare:"
msgstr ""

#: ../../../analyzer/checkers.rst:1510
msgid "compare:options:"
msgstr ""

#: ../../../analyzer/checkers.rst:1511
msgid "compare:options:range:"
msgstr ""

#: ../../../analyzer/checkers.rst:1512
msgid "compare:options:range:locale:"
msgstr ""

#: ../../../analyzer/checkers.rst:1513
msgid "componentsSeparatedByCharactersInSet:"
msgstr ""

#: ../../../analyzer/checkers.rst:1514
msgid "initWithFormat:"
msgstr ""

#: ../../../analyzer/checkers.rst:1529
msgid "osx.cocoa.NonNilReturnValue"
msgstr ""

#: ../../../analyzer/checkers.rst:1530
msgid "Models the APIs that are guaranteed to return a non-nil value."
msgstr ""

#: ../../../analyzer/checkers.rst:1535
msgid "osx.cocoa.ObjCGenerics (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1536
msgid "Check for type errors when using Objective-C generics."
msgstr ""

#: ../../../analyzer/checkers.rst:1550
msgid "osx.cocoa.RetainCount (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1551
msgid "Check for leaks and improper reference count management"
msgstr ""

#: ../../../analyzer/checkers.rst:1568
msgid "osx.cocoa.RunLoopAutoreleaseLeak"
msgstr ""

#: ../../../analyzer/checkers.rst:1569
msgid ""
"Check for leaked memory in autorelease pools that will never be drained."
msgstr ""

#: ../../../analyzer/checkers.rst:1574
msgid "osx.cocoa.SelfInit (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1575
msgid "Check that 'self' is properly initialized inside an initializer method."
msgstr ""

#: ../../../analyzer/checkers.rst:1608
msgid "osx.cocoa.SuperDealloc (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1609
msgid "Warn about improper use of '[super dealloc]' in Objective-C."
msgstr ""

#: ../../../analyzer/checkers.rst:1628
msgid "osx.cocoa.UnusedIvars (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1629
msgid "Warn about private ivars that are never used."
msgstr ""

#: ../../../analyzer/checkers.rst:1645
msgid "osx.cocoa.VariadicMethodTypes (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1646
msgid ""
"Check for passing non-Objective-C types to variadic collection "
"initialization methods that expect only Objective-C types."
msgstr ""

#: ../../../analyzer/checkers.rst:1659
msgid "osx.coreFoundation.CFError (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1660
msgid "Check usage of CFErrorRef* parameters"
msgstr ""

#: ../../../analyzer/checkers.rst:1677
msgid "osx.coreFoundation.CFNumber (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1678
msgid "Check for proper uses of CFNumber APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1690
msgid "osx.coreFoundation.CFRetainRelease (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1691
msgid "Check for null arguments to CFRetain/CFRelease/CFMakeCollectable."
msgstr ""

#: ../../../analyzer/checkers.rst:1710
msgid "osx.coreFoundation.containers.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1711
msgid "Checks for index out-of-bounds when using 'CFArray' API."
msgstr ""

#: ../../../analyzer/checkers.rst:1723
msgid "osx.coreFoundation.containers.PointerSizedValues (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1724
msgid ""
"Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-"
"size values."
msgstr ""

#: ../../../analyzer/checkers.rst:1735
msgid "Fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:1737
msgid ""
"Fuchsia is an open source capability-based operating system currently being "
"developed by Google. This section describes checkers that can find various "
"misuses of Fuchsia APIs."
msgstr ""

#: ../../../analyzer/checkers.rst:1744
msgid "fuchsia.HandleChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1745
msgid ""
"Handles identify resources. Similar to pointers they can be leaked, double "
"freed, or use after freed. This check attempts to find such problems."
msgstr ""

#: ../../../analyzer/checkers.rst:1760
msgid "WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:1762
msgid ""
"WebKit is an open-source web browser engine available for macOS, iOS and "
"Linux. This section describes checkers that can find issues in WebKit "
"codebase."
msgstr ""

#: ../../../analyzer/checkers.rst:1765
msgid ""
"Most of the checkers focus on memory management for which WebKit uses custom "
"implementation of reference counted smartpointers."
msgstr ""

#: ../../../analyzer/checkers.rst:1770
msgid "Checkers are formulated in terms related to ref-counting:"
msgstr ""

#: ../../../analyzer/checkers.rst:1768
msgid "*Ref-counted type* is either ``Ref<T>`` or ``RefPtr<T>``."
msgstr ""

#: ../../../analyzer/checkers.rst:1769
msgid ""
"*Ref-countable type* is any type that implements ``ref()`` and ``deref()`` "
"methods as ``RefPtr<>`` is a template (i. e. relies on duck typing)."
msgstr ""

#: ../../../analyzer/checkers.rst:1770
msgid "*Uncounted type* is ref-countable but not ref-counted type."
msgstr ""

#: ../../../analyzer/checkers.rst:1775
msgid "webkit.RefCntblBaseVirtualDtor"
msgstr ""

#: ../../../analyzer/checkers.rst:1776
msgid ""
"All uncounted types used as base classes must have a virtual destructor."
msgstr ""

#: ../../../analyzer/checkers.rst:1778
msgid ""
"Ref-counted types hold their ref-countable data by a raw pointer and allow "
"implicit upcasting from ref-counted pointer to derived type to ref-counted "
"pointer to base type. This might lead to an object of (dynamic) derived type "
"being deleted via pointer to the base class type which C++ standard defines "
"as UB in case the base class doesn't have virtual destructor ``[expr."
"delete]``."
msgstr ""

#: ../../../analyzer/checkers.rst:1792
msgid "webkit.NoUncountedMemberChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1793
msgid ""
"Raw pointers and references to uncounted types can't be used as class "
"members. Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:1811
msgid "webkit.UncountedLambdaCapturesChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:1812
msgid ""
"Raw pointers and references to uncounted types can't be captured in lambdas. "
"Only ref-counted types are allowed."
msgstr ""

#: ../../../analyzer/checkers.rst:1830
msgid "Experimental Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:1832
msgid ""
"*These are checkers with known issues or limitations that keep them from "
"being on by default. They are likely to have false positives. Bug reports "
"and especially patches are welcome.*"
msgstr ""

#: ../../../analyzer/checkers.rst:1835
msgid "alpha.clone"
msgstr ""

#: ../../../analyzer/checkers.rst:1840
msgid "alpha.clone.CloneChecker (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1841
msgid "Reports similar pieces of code."
msgstr ""

#: ../../../analyzer/checkers.rst:1862
msgid "alpha.core"
msgstr ""

#: ../../../analyzer/checkers.rst:1867
msgid "alpha.core.BoolAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1868
msgid "Warn about assigning non-{0,1} values to boolean variables."
msgstr ""

#: ../../../analyzer/checkers.rst:1879
msgid "alpha.core.C11Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:1880
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of ``mtx_t`` mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:1896
msgid "alpha.core.CallAndMessageUnInitRefArg (C,C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1897
msgid ""
"Check for logical errors for function calls and Objective-C message "
"expressions (e.g., uninitialized arguments, null function pointers, and "
"pointer to undefined variables)."
msgstr ""

#: ../../../analyzer/checkers.rst:1918
msgid "alpha.core.CastSize (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1919
msgid ""
"Check when casting a malloc'ed type ``T``, whether the size is a multiple of "
"the size of ``T``."
msgstr ""

#: ../../../analyzer/checkers.rst:1930
msgid "alpha.core.CastToStruct (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:1931
msgid "Check for cast from non-struct pointer to struct pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:1952
msgid "alpha.core.Conversion (C, C++, ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1953
msgid "Loss of sign/precision in implicit conversions."
msgstr ""

#: ../../../analyzer/checkers.rst:1976
msgid "alpha.core.DynamicTypeChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:1977
msgid ""
"Check for cases where the dynamic and the static type of an object are "
"unrelated."
msgstr ""

#: ../../../analyzer/checkers.rst:1992
msgid "alpha.core.FixedAddr (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:1993
msgid "Check for assignment of a fixed address to a pointer."
msgstr ""

#: ../../../analyzer/checkers.rst:2005
msgid "alpha.core.IdenticalExpr (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2006
msgid "Warn about unintended use of identical expressions in operators."
msgstr ""

#: ../../../analyzer/checkers.rst:2035
msgid "alpha.core.PointerArithm (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2036
msgid "Check for pointer arithmetic on locations other than array elements."
msgstr ""

#: ../../../analyzer/checkers.rst:2049
msgid "alpha.core.PointerSub (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2050
msgid ""
"Check for pointer subtractions on two pointers pointing to different memory "
"chunks."
msgstr ""

#: ../../../analyzer/checkers.rst:2062
msgid "alpha.core.SizeofPtr (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2063
msgid "Warn about unintended use of ``sizeof()`` on pointer expressions."
msgstr ""

#: ../../../analyzer/checkers.rst:2077
msgid "alpha.core.StackAddressAsyncEscape (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2078
msgid ""
"Check that addresses to stack memory do not escape the function that "
"involves dispatch_after or dispatch_async. This checker is a part of ``core."
"StackAddressEscape``, but is temporarily disabled until some false positives "
"are fixed."
msgstr ""

#: ../../../analyzer/checkers.rst:2101
msgid "alpha.core.StdVariant (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2102
msgid ""
"Check if a value of active type is retrieved from an ``std::variant`` "
"instance with ``std::get``. In case of bad variant type access (the accessed "
"type differs from the active type) a warning is emitted. Currently, this "
"checker does not take exception handling into account."
msgstr ""

#: ../../../analyzer/checkers.rst:2116
msgid "alpha.core.TestAfterDivZero (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2117
msgid ""
"Check for division by variable that is later compared against 0. Either the "
"comparison is useless or there is division by zero."
msgstr ""

#: ../../../analyzer/checkers.rst:2128
msgid "alpha.cplusplus"
msgstr ""

#: ../../../analyzer/checkers.rst:2133
msgid "alpha.cplusplus.ArrayDelete (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2134
msgid ""
"Reports destructions of arrays of polymorphic objects that are destructed as "
"their base class. This checker corresponds to the CERT rule `EXP51-CPP: Do "
"not delete an array through a pointer of the incorrect type <https://wiki."
"sei.cmu.edu/confluence/display/cplusplus/EXP51-CPP."
"+Do+not+delete+an+array+through+a+pointer+of+the+incorrect+type>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2157
msgid "alpha.cplusplus.DeleteWithNonVirtualDtor (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2158
msgid ""
"Reports destructions of polymorphic objects with a non-virtual destructor in "
"their base class."
msgstr ""

#: ../../../analyzer/checkers.rst:2180
msgid "alpha.cplusplus.InvalidatedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2181
msgid "Check for use of invalidated iterators."
msgstr ""

#: ../../../analyzer/checkers.rst:2196
msgid "alpha.cplusplus.IteratorRange (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2197
msgid "Check for iterators used outside their valid ranges."
msgstr ""

#: ../../../analyzer/checkers.rst:2209
msgid "alpha.cplusplus.MismatchedIterator (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2210
msgid ""
"Check for use of iterators of different containers where iterators of the "
"same container are expected."
msgstr ""

#: ../../../analyzer/checkers.rst:2233
msgid "alpha.cplusplus.MisusedMovedObject (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2234
msgid ""
"Method calls on a moved-from object and copying a moved-from object will be "
"reported."
msgstr ""

#: ../../../analyzer/checkers.rst:2252
msgid "alpha.cplusplus.SmartPtr (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2253
msgid "Check for dereference of null smart pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:2264
msgid "alpha.deadcode"
msgstr ""

#: ../../../analyzer/checkers.rst:2268
msgid "alpha.deadcode.UnreachableCode (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2269
msgid "Check unreachable code."
msgstr ""

#: ../../../analyzer/checkers.rst:2298
msgid "alpha.fuchsia"
msgstr ""

#: ../../../analyzer/checkers.rst:2303
msgid "alpha.fuchsia.Lock"
msgstr ""

#: ../../../analyzer/checkers.rst:2304
msgid ""
"Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks "
"for the locking/unlocking of fuchsia mutexes."
msgstr ""

#: ../../../analyzer/checkers.rst:2318
msgid "alpha.llvm"
msgstr ""

#: ../../../analyzer/checkers.rst:2323
msgid "alpha.llvm.Conventions"
msgstr ""

#: ../../../analyzer/checkers.rst:2325
msgid "Check code for LLVM codebase conventions:"
msgstr ""

#: ../../../analyzer/checkers.rst:2327
msgid ""
"A StringRef should not be bound to a temporary std::string whose lifetime is "
"shorter than the StringRef's."
msgstr ""

#: ../../../analyzer/checkers.rst:2328
msgid "Clang AST nodes should not have fields that can allocate memory."
msgstr ""

#: ../../../analyzer/checkers.rst:2332
msgid "alpha.osx"
msgstr ""

#: ../../../analyzer/checkers.rst:2337
msgid "alpha.osx.cocoa.DirectIvarAssignment (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2338
msgid "Check for direct assignments to instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:2357
msgid "alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2358
msgid ""
"Check for direct assignments to instance variables in the methods annotated "
"with ``objc_no_direct_instance_variable_assignment``."
msgstr ""

#: ../../../analyzer/checkers.rst:2383
msgid "alpha.osx.cocoa.InstanceVariableInvalidation (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2384
msgid ""
"Check that the invalidatable instance variables are invalidated in the "
"methods annotated with objc_instance_variable_invalidator."
msgstr ""

#: ../../../analyzer/checkers.rst:2411
msgid "alpha.osx.cocoa.MissingInvalidationMethod (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2412
msgid ""
"Check that the invalidation methods are present in classes that contain "
"invalidatable instance variables."
msgstr ""

#: ../../../analyzer/checkers.rst:2435
msgid "alpha.osx.cocoa.localizability.PluralMisuseChecker (ObjC)"
msgstr ""

#: ../../../analyzer/checkers.rst:2436
msgid ""
"Warns against using one vs. many plural pattern in code when generating "
"localized strings."
msgstr ""

#: ../../../analyzer/checkers.rst:2457
msgid "alpha.security"
msgstr ""

#: ../../../analyzer/checkers.rst:2462
msgid "alpha.security.ArrayBound (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2463
msgid "Warn about buffer overflows (older checker)."
msgstr ""

#: ../../../analyzer/checkers.rst:2500
msgid "alpha.security.ArrayBoundV2 (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2501
msgid "Warn about buffer overflows (newer checker)."
msgstr ""

#: ../../../analyzer/checkers.rst:2534
msgid "alpha.security.MallocOverflow (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2535
msgid ""
"Check for overflows in the arguments to ``malloc()``. It tries to catch "
"``malloc(n * c)`` patterns, where:"
msgstr ""

#: ../../../analyzer/checkers.rst:2538
msgid "``n``: a variable or member access of an object"
msgstr ""

#: ../../../analyzer/checkers.rst:2539
msgid "``c``: a constant foldable integral"
msgstr ""

#: ../../../analyzer/checkers.rst:2541
msgid ""
"This checker was designed for code audits, so expect false-positive reports. "
"One is supposed to silence this checker by ensuring proper bounds checking "
"on the variable in question using e.g. an ``assert()`` or a branch."
msgstr ""

#: ../../../analyzer/checkers.rst:2562 ../../../analyzer/checkers.rst:2641
#: ../../../analyzer/checkers.rst:3113
msgid "Limitations:"
msgstr ""

#: ../../../analyzer/checkers.rst:2564
msgid ""
"The checker won't warn for variables involved in explicit casts, since that "
"might limit the variable's domain. E.g.: ``(unsigned char)int x`` would "
"limit the domain to ``[0,255]``. The checker will miss the true-positive "
"cases when the explicit cast would not tighten the domain to prevent the "
"overflow in the subsequent multiplication operation."
msgstr ""

#: ../../../analyzer/checkers.rst:2571
msgid ""
"It is an AST-based checker, thus it does not make use of the path-sensitive "
"taint-analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:2577
msgid "alpha.security.MmapWriteExec (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2578
msgid "Warn on mmap() calls that are both writable and executable."
msgstr ""

#: ../../../analyzer/checkers.rst:2593
msgid "alpha.security.ReturnPtrRange (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2594
msgid "Check for an out-of-bound pointer being returned to callers."
msgstr ""

#: ../../../analyzer/checkers.rst:2612
msgid "alpha.security.cert"
msgstr ""

#: ../../../analyzer/checkers.rst:2614
msgid ""
"SEI CERT checkers which tries to find errors based on their `C coding rules "
"<https://wiki.sei.cmu.edu/confluence/display/c/2+Rules>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2619
msgid "alpha.security.cert.pos"
msgstr ""

#: ../../../analyzer/checkers.rst:2621
msgid ""
"SEI CERT checkers of `POSIX C coding rules <https://wiki.sei.cmu.edu/"
"confluence/pages/viewpage.action?pageId=87152405>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2626
msgid "alpha.security.cert.pos.34c"
msgstr ""

#: ../../../analyzer/checkers.rst:2627
msgid ""
"Finds calls to the ``putenv`` function which pass a pointer to an automatic "
"variable as the argument."
msgstr ""

#: ../../../analyzer/checkers.rst:2643
msgid ""
"Technically, one can pass automatic variables to ``putenv``, but one needs "
"to ensure that the given environment key stays alive until it's removed or "
"overwritten. Since the analyzer cannot keep track of which envvars get "
"overwritten and when, it needs to be slightly more aggressive and warn for "
"such cases too, leading in some cases to false-positive reports like this:"
msgstr ""

#: ../../../analyzer/checkers.rst:2661
msgid "alpha.security.cert.env"
msgstr ""

#: ../../../analyzer/checkers.rst:2663
msgid ""
"SEI CERT checkers of `Environment C coding rules <https://wiki.sei.cmu.edu/"
"confluence/x/JdcxBQ>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2666
msgid "alpha.security.taint"
msgstr ""

#: ../../../analyzer/checkers.rst:2668
msgid ""
"Checkers implementing `taint analysis <https://en.wikipedia.org/wiki/"
"Taint_checking>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:2674
msgid "alpha.security.taint.TaintPropagation (C, C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:2676
msgid ""
"Taint analysis identifies potential security vulnerabilities where the "
"attacker can inject malicious data to the program to execute an attack "
"(privilege escalation, command injection, SQL injection etc.)."
msgstr ""

#: ../../../analyzer/checkers.rst:2680
msgid ""
"The malicious data is injected at the taint source (e.g. ``getenv()`` call) "
"which is then propagated through function calls and being used as arguments "
"of sensitive operations, also called as taint sinks (e.g. ``system()`` call)."
msgstr ""

#: ../../../analyzer/checkers.rst:2684
msgid ""
"One can defend against this type of vulnerability by always checking and "
"sanitizing the potentially malicious, untrusted user input."
msgstr ""

#: ../../../analyzer/checkers.rst:2687
msgid ""
"The goal of the checker is to discover and show to the user these potential "
"taint source-sink pairs and the propagation call chain."
msgstr ""

#: ../../../analyzer/checkers.rst:2690
msgid "The most notable examples of taint sources are:"
msgstr ""

#: ../../../analyzer/checkers.rst:2692
msgid "data from network"
msgstr ""

#: ../../../analyzer/checkers.rst:2693
msgid "files or standard input"
msgstr ""

#: ../../../analyzer/checkers.rst:2694
msgid "environment variables"
msgstr ""

#: ../../../analyzer/checkers.rst:2695
msgid "data from databases"
msgstr ""

#: ../../../analyzer/checkers.rst:2697
msgid "Let us examine a practical example of a Command Injection attack."
msgstr ""

#: ../../../analyzer/checkers.rst:2711
msgid ""
"The program prints the content of any user specified file. Unfortunately the "
"attacker can execute arbitrary commands with shell escapes. For example with "
"the following input the `ls` command is also executed after the contents of "
"`/etc/shadow` is printed. `Input: /etc/shadow ; ls /`"
msgstr ""

#: ../../../analyzer/checkers.rst:2717
msgid "The analysis implemented in this checker points out this problem."
msgstr ""

#: ../../../analyzer/checkers.rst:2719
msgid ""
"One can protect against such attack by for example checking if the provided "
"input refers to a valid file and removing any invalid user input."
msgstr ""

#: ../../../analyzer/checkers.rst:2743
msgid ""
"Unfortunately, the checker cannot discover automatically that the programmer "
"have performed data sanitation, so it still emits the warning."
msgstr ""

#: ../../../analyzer/checkers.rst:2746
msgid ""
"One can get rid of this superfluous warning by telling by specifying the "
"sanitation functions in the taint configuration file (see :doc:`user-docs/"
"TaintAnalysisConfiguration`)."
msgstr ""

#: ../../../analyzer/checkers.rst:2756
msgid "The clang invocation to pass the configuration file location:"
msgstr ""

#: ../../../analyzer/checkers.rst:2762
msgid ""
"If you are validating your inputs instead of sanitizing them, or don't want "
"to mention each sanitizing function in our configuration, you can use a more "
"generic approach."
msgstr ""

#: ../../../analyzer/checkers.rst:2766
msgid ""
"Introduce a generic no-op `csa_mark_sanitized(..)` function to tell the "
"Clang Static Analyzer that the variable is safe to be used on that analysis "
"path."
msgstr ""

#: ../../../analyzer/checkers.rst:2796
msgid ""
"Similarly to the previous example, you need to define a `Filter` function in "
"a `YAML` configuration file and add the `csa_mark_sanitized` function."
msgstr ""

#: ../../../analyzer/checkers.rst:2806
msgid ""
"Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe "
"to be used after this point, because its contents are verified. It is the "
"responsibility of the programmer to ensure that this verification was indeed "
"correct. Please note that `csa_mark_sanitized` function is only declared and "
"used during Clang Static Analysis and skipped in (production) builds."
msgstr ""

#: ../../../analyzer/checkers.rst:2812
msgid "Further examples of injection vulnerabilities this checker can find."
msgstr ""

#: ../../../analyzer/checkers.rst:2838
msgid ""
"There are built-in sources, propagations and sinks even if no external taint "
"configuration is provided."
msgstr ""

#: ../../../analyzer/checkers.rst:2846
msgid "Default sources:"
msgstr ""

#: ../../../analyzer/checkers.rst:2842
msgid ""
"``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``, "
"``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``, "
"``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, "
"``getnameinfo``, ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, "
"``readlinkat``, ``scanf``, ``scanf_s``, ``socket``, ``wgetch``"
msgstr ""

#: ../../../analyzer/checkers.rst:2861
msgid "Default propagations rules:"
msgstr ""

#: ../../../analyzer/checkers.rst:2849
msgid ""
"``atoi``, ``atol``, ``atoll``, ``basename``, ``dirname``, ``fgetc``, "
"``fgetln``, ``fgets``, ``fnmatch``, ``fread``, ``fscanf``, ``fscanf_s``, "
"``index``, ``inflate``, ``isalnum``, ``isalpha``, ``isascii``, ``isblank``, "
"``iscntrl``, ``isdigit``, ``isgraph``, ``islower``, ``isprint``, "
"``ispunct``, ``isspace``, ``isupper``, ``isxdigit``, ``memchr``, "
"``memrchr``, ``sscanf``, ``getc``, ``getc_unlocked``, ``getdelim``, "
"``getline``, ``getw``, ``memcmp``, ``memcpy``, ``memmem``, ``memmove``, "
"``mbtowc``, ``pread``, ``qsort``, ``qsort_r``, ``rawmemchr``, ``read``, "
"``recv``, ``recvfrom``, ``rindex``, ``strcasestr``, ``strchr``, "
"``strchrnul``, ``strcasecmp``, ``strcmp``, ``strcspn``, ``strncasecmp``, "
"``strncmp``, ``strndup``, ``strndupa``, ``strpbrk``, ``strrchr``, "
"``strsep``, ``strspn``, ``strstr``, ``strtol``, ``strtoll``, ``strtoul``, "
"``strtoull``, ``tolower``, ``toupper``, ``ttyname``, ``ttyname_r``, "
"``wctomb``, ``wcwidth``"
msgstr ""

#: ../../../analyzer/checkers.rst:2867
msgid "Default sinks:"
msgstr ""

#: ../../../analyzer/checkers.rst:2864
msgid ""
"``printf``, ``setproctitle``, ``system``, ``popen``, ``execl``, ``execle``, "
"``execlp``, ``execv``, ``execvp``, ``execvP``, ``execve``, ``dlopen``, "
"``memcpy``, ``memmove``, ``strncpy``, ``strndup``, ``malloc``, ``calloc``, "
"``alloca``, ``memccpy``, ``realloc``, ``bcopy``"
msgstr ""

#: ../../../analyzer/checkers.rst:2869
msgid "Please note that there are no built-in filter functions."
msgstr ""

#: ../../../analyzer/checkers.rst:2871
msgid ""
"One can configure their own taint sources, sinks, and propagation rules by "
"providing a configuration file via checker option ``alpha.security.taint."
"TaintPropagation:Config``. The configuration file is in `YAML <http://llvm."
"org/docs/YamlIO.html#introduction-to-yaml>`_ format. The taint-related "
"options defined in the config file extend but do not override the built-in "
"sources, rules, sinks. The format of the external taint configuration file "
"is not stable, and could change without any notice even in a non-backward "
"compatible way."
msgstr ""

#: ../../../analyzer/checkers.rst:2880
msgid ""
"For a more detailed description of configuration options, please see the :"
"doc:`user-docs/TaintAnalysisConfiguration`. For an example see :ref:`clangsa-"
"taint-configuration-example`."
msgstr ""

#: ../../../analyzer/checkers.rst:2884
msgid "**Configuration**"
msgstr ""

#: ../../../analyzer/checkers.rst:2886
msgid ""
"`Config`  Specifies the name of the YAML configuration file. The user can "
"define their own taint sources and sinks."
msgstr ""

#: ../../../analyzer/checkers.rst:2889
msgid "**Related Guidelines**"
msgstr ""

#: ../../../analyzer/checkers.rst:2891
msgid ""
"`CWE Data Neutralization Issues <https://cwe.mitre.org/data/definitions/137."
"html>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2893
msgid ""
"`SEI Cert STR02-C. Sanitize data passed to complex subsystems <https://wiki."
"sei.cmu.edu/confluence/display/c/STR02-C."
"+Sanitize+data+passed+to+complex+subsystems>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2895
msgid ""
"`SEI Cert ENV33-C. Do not call system() <https://wiki.sei.cmu.edu/confluence/"
"pages/viewpage.action?pageId=87152177>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2897
msgid ""
"`ENV03-C. Sanitize the environment when invoking external programs <https://"
"wiki.sei.cmu.edu/confluence/display/c/ENV03-C."
"+Sanitize+the+environment+when+invoking+external+programs>`_"
msgstr ""

#: ../../../analyzer/checkers.rst:2902
msgid ""
"The taintedness property is not propagated through function calls which are "
"unknown (or too complex) to the analyzer, unless there is a specific "
"propagation rule built-in to the checker or given in the YAML configuration "
"file. This causes potential true positive findings to be lost."
msgstr ""

#: ../../../analyzer/checkers.rst:2908
msgid "alpha.unix"
msgstr ""

#: ../../../analyzer/checkers.rst:2913
msgid "alpha.unix.BlockInCriticalSection (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2914
msgid ""
"Check for calls to blocking functions inside a critical section. Applies to: "
"``lock, unlock, sleep, getc, fgets, read, recv, pthread_mutex_lock,`` `` "
"pthread_mutex_unlock, mtx_lock, mtx_timedlock, mtx_trylock, mtx_unlock, "
"lock_guard, unique_lock``"
msgstr ""

#: ../../../analyzer/checkers.rst:2931
msgid "alpha.unix.Chroot (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2932
msgid "Check improper use of chroot."
msgstr ""

#: ../../../analyzer/checkers.rst:2946
msgid "alpha.unix.PthreadLock (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2947
msgid ""
"Simple lock -> unlock checker. Applies to: ``pthread_mutex_lock, "
"pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, "
"lck_rw_lock_exclusive`` ``lck_rw_lock_shared, pthread_mutex_trylock, "
"pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock, "
"lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, "
"pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``."
msgstr ""

#: ../../../analyzer/checkers.rst:2986
msgid "alpha.unix.SimpleStream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:2987
msgid ""
"Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, "
"fclose`` (demo checker, the subject of the demo (`Slides <https://llvm.org/"
"devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ , `Video <https://youtu.be/"
"kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the `2012 LLVM "
"Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_)."
msgstr ""

#: ../../../analyzer/checkers.rst:3010
msgid "alpha.unix.Stream (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3011
msgid ""
"Check stream handling functions: ``fopen, tmpfile, fclose, fread, fwrite, "
"fseek, ftell, rewind, fgetpos,`` ``fsetpos, clearerr, feof, ferror, fileno``."
msgstr ""

#: ../../../analyzer/checkers.rst:3052
msgid "alpha.unix.cstring.BufferOverlap (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3053
msgid ""
"Checks for overlap in two buffer arguments. Applies to:  ``memcpy, mempcpy, "
"wmemcpy, wmempcpy``."
msgstr ""

#: ../../../analyzer/checkers.rst:3065
msgid "alpha.unix.cstring.NotNullTerminated (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3066
msgid ""
"Check for arguments which are not null-terminated strings; applies to: "
"``strlen, strnlen, strcpy, strncpy, strcat, strncat, wcslen, wcsnlen``."
msgstr ""

#: ../../../analyzer/checkers.rst:3077
msgid "alpha.unix.cstring.OutOfBounds (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3078
msgid ""
"Check for out-of-bounds access in string functions, such as: ``memcpy, "
"bcopy, strcpy, strncpy, strcat, strncat, memmove, memcmp, memset`` and more."
msgstr ""

#: ../../../analyzer/checkers.rst:3081
msgid ""
"This check also works with string literals, except there is a known bug in "
"that the analyzer cannot detect embedded NULL characters when determining "
"the string length."
msgstr ""

#: ../../../analyzer/checkers.rst:3101
msgid "alpha.unix.cstring.UninitializedRead (C)"
msgstr ""

#: ../../../analyzer/checkers.rst:3103
msgid ""
"Check for uninitialized reads from common memory copy/manipulation functions "
"such as:"
msgstr ""

#: ../../../analyzer/checkers.rst:3103
msgid ""
"``memcpy, mempcpy, memmove, memcmp, strcmp, strncmp, strcpy, strlen, "
"strsep`` and many more."
msgstr ""

#: ../../../analyzer/checkers.rst:3115
msgid ""
"Due to limitations of the memory modeling in the analyzer, one can likely "
"observe a lot of false-positive reports like this:"
msgstr ""

#: ../../../analyzer/checkers.rst:3129
msgid ""
"More details at the corresponding `GitHub issue <https://github.com/llvm/"
"llvm-project/issues/43459>`_."
msgstr ""

#: ../../../analyzer/checkers.rst:3134
msgid "alpha.nondeterminism.PointerIteration (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3135
msgid ""
"Check for non-determinism caused by iterating unordered containers of "
"pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:3150
msgid "alpha.nondeterminism.PointerSorting (C++)"
msgstr ""

#: ../../../analyzer/checkers.rst:3151
msgid "Check for non-determinism caused by sorting of pointers."
msgstr ""

#: ../../../analyzer/checkers.rst:3163
msgid "alpha.WebKit"
msgstr ""

#: ../../../analyzer/checkers.rst:3168
msgid "alpha.webkit.UncountedCallArgsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3169
msgid ""
"The goal of this rule is to make sure that lifetime of any dynamically "
"allocated ref-countable object passed as a call argument spans past the end "
"of the call. This applies to call to any function, method, lambda, function "
"pointer or functor. Ref-countable types aren't supposed to be allocated on "
"stack so we check arguments for parameters of raw pointers and references to "
"uncounted types."
msgstr ""

#: ../../../analyzer/checkers.rst:3171 ../../../analyzer/checkers.rst:3278
msgid ""
"Here are some examples of situations that we warn about as they *might* be "
"potentially unsafe. The logic is that either we're able to guarantee that an "
"argument is safe or it's considered if not a bug then bug-prone."
msgstr ""

#: ../../../analyzer/checkers.rst:3189
msgid ""
"Although we are enforcing member variables to be ref-counted by `webkit."
"NoUncountedMemberChecker` any method of the same class still has "
"unrestricted access to these. Since from a caller's perspective we can't "
"guarantee a particular member won't get modified by callee (directly or "
"indirectly) we don't consider values obtained from members safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3191
msgid ""
"Note: It's likely this heuristic could be made more precise with fewer false "
"positives - for example calls to free functions that don't have any "
"parameter other than the pointer should be safe as the callee won't be able "
"to tamper with the member unless it's a global variable."
msgstr ""

#: ../../../analyzer/checkers.rst:3203
msgid ""
"The implementation of this rule is a heuristic - we define a whitelist of "
"kinds of values that are considered safe to be passed as arguments. If we "
"can't prove an argument is safe it's considered an error."
msgstr ""

#: ../../../analyzer/checkers.rst:3205
msgid "Allowed kinds of arguments:"
msgstr ""

#: ../../../analyzer/checkers.rst:3207
msgid ""
"values obtained from ref-counted objects (including temporaries as those "
"survive the call too)"
msgstr ""

#: ../../../analyzer/checkers.rst:3220
msgid "forwarding uncounted arguments from caller to callee"
msgstr ""

#: ../../../analyzer/checkers.rst:3228
msgid "Caller of ``foo()`` is responsible for  ``a``'s lifetime."
msgstr ""

#: ../../../analyzer/checkers.rst:3230
msgid "``this`` pointer"
msgstr ""

#: ../../../analyzer/checkers.rst:3238
msgid ""
"Caller of ``foo()`` is responsible for keeping the memory pointed to by "
"``this`` pointer safe."
msgstr ""

#: ../../../analyzer/checkers.rst:3240
msgid "constants"
msgstr ""

#: ../../../analyzer/checkers.rst:3246
msgid ""
"We also define a set of safe transformations which if passed a safe value as "
"an input provide (usually it's the return value) a safe value (or an object "
"that provides safe values). This is also a heuristic."
msgstr ""

#: ../../../analyzer/checkers.rst:3248
msgid "constructors of ref-counted types (including factory methods)"
msgstr ""

#: ../../../analyzer/checkers.rst:3249
msgid "getters of ref-counted types"
msgstr ""

#: ../../../analyzer/checkers.rst:3250
msgid "member overloaded operators"
msgstr ""

#: ../../../analyzer/checkers.rst:3251
msgid "casts"
msgstr ""

#: ../../../analyzer/checkers.rst:3252
msgid "unary operators like ``&`` or ``*``"
msgstr ""

#: ../../../analyzer/checkers.rst:3255
msgid "alpha.webkit.UncountedLocalVarsChecker"
msgstr ""

#: ../../../analyzer/checkers.rst:3256
msgid ""
"The goal of this rule is to make sure that any uncounted local variable is "
"backed by a ref-counted object with lifetime that is strictly larger than "
"the scope of the uncounted local variable. To be on the safe side we require "
"the scope of an uncounted variable to be embedded in the scope of ref-"
"counted object that backs it."
msgstr ""

#: ../../../analyzer/checkers.rst:3258
msgid "These are examples of cases that we consider safe:"
msgstr ""

#: ../../../analyzer/checkers.rst:3297
msgid ""
"We don't warn about these cases - we don't consider them necessarily safe "
"but since they are very common and usually safe we'd introduce a lot of "
"false positives otherwise: - variable defined in condition part of an "
"```if``` statement - variable defined in init statement condition of a "
"```for``` statement"
msgstr ""

#: ../../../analyzer/checkers.rst:3301
msgid ""
"For the time being we also don't warn about uninitialized uncounted local "
"variables."
msgstr ""

#: ../../../analyzer/checkers.rst:3304
msgid "Debug Checkers"
msgstr ""

#: ../../../analyzer/checkers.rst:3310
msgid "debug"
msgstr ""

#: ../../../analyzer/checkers.rst:3312
msgid ""
"Checkers used for debugging the analyzer. :doc:`developer-docs/DebugChecks` "
"page contains a detailed description."
msgstr ""

#: ../../../analyzer/checkers.rst:3318
msgid "debug.AnalysisOrder"
msgstr ""

#: ../../../analyzer/checkers.rst:3319
msgid "Print callbacks that are called during analysis in order."
msgstr ""

#: ../../../analyzer/checkers.rst:3324
msgid "debug.ConfigDumper"
msgstr ""

#: ../../../analyzer/checkers.rst:3325
msgid "Dump config table."
msgstr ""

#: ../../../analyzer/checkers.rst:3330
msgid "debug.DumpCFG Display"
msgstr ""

#: ../../../analyzer/checkers.rst:3331
msgid "Control-Flow Graphs."
msgstr ""

#: ../../../analyzer/checkers.rst:3336
msgid "debug.DumpCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3337
msgid "Display Call Graph."
msgstr ""

#: ../../../analyzer/checkers.rst:3342
msgid "debug.DumpCalls"
msgstr ""

#: ../../../analyzer/checkers.rst:3343
msgid "Print calls as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3348
msgid "debug.DumpDominators"
msgstr ""

#: ../../../analyzer/checkers.rst:3349
msgid "Print the dominance tree for a given CFG."
msgstr ""

#: ../../../analyzer/checkers.rst:3354
msgid "debug.DumpLiveVars"
msgstr ""

#: ../../../analyzer/checkers.rst:3355
msgid "Print results of live variable analysis."
msgstr ""

#: ../../../analyzer/checkers.rst:3360
msgid "debug.DumpTraversal"
msgstr ""

#: ../../../analyzer/checkers.rst:3361
msgid "Print branch conditions as they are traversed by the engine."
msgstr ""

#: ../../../analyzer/checkers.rst:3366
msgid "debug.ExprInspection"
msgstr ""

#: ../../../analyzer/checkers.rst:3367
msgid "Check the analyzer's understanding of expressions."
msgstr ""

#: ../../../analyzer/checkers.rst:3372
msgid "debug.Stats"
msgstr ""

#: ../../../analyzer/checkers.rst:3373
msgid "Emit warnings with analyzer statistics."
msgstr ""

#: ../../../analyzer/checkers.rst:3378
msgid "debug.TaintTest"
msgstr ""

#: ../../../analyzer/checkers.rst:3379
msgid "Mark tainted symbols as such."
msgstr ""

#: ../../../analyzer/checkers.rst:3384
msgid "debug.ViewCFG"
msgstr ""

#: ../../../analyzer/checkers.rst:3385
msgid "View Control-Flow Graphs using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3390
msgid "debug.ViewCallGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3391
msgid "View Call Graph using GraphViz."
msgstr ""

#: ../../../analyzer/checkers.rst:3396
msgid "debug.ViewExplodedGraph"
msgstr ""

#: ../../../analyzer/checkers.rst:3397
msgid "View Exploded Graphs using GraphViz."
msgstr ""
