# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "Clang |release| |ReleaseNotesTitle|"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Written by the `LLVM Team <https://llvm.org/>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:14
msgid ""
"These are in-progress notes for the upcoming Clang |version| release. "
"Release notes for previous releases can be found on `the Releases Page "
"<https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:21
msgid ""
"This document contains the release notes for the Clang C/C++/Objective-C "
"frontend, part of the LLVM Compiler Infrastructure, release |release|. Here "
"we describe the status of Clang in some detail, including major improvements "
"from the previous release and new feature work. For the general LLVM release "
"notes, see `the LLVM documentation <https://llvm.org/docs/ReleaseNotes."
"html>`_. For the libc++ release notes, see `this page <https://libcxx.llvm."
"org/ReleaseNotes.html>`_. All LLVM releases may be downloaded from the `LLVM "
"releases web site <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"For more information about Clang or LLVM, including information about the "
"latest release, please see the `Clang Web Site <https://clang.llvm.org>`_ or "
"the `LLVM Web Site <https://llvm.org>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:35
msgid "Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"These changes are ones which we think may surprise users when upgrading to "
"Clang |release| because of the opportunity they pose for disruption to "
"existing code bases."
msgstr ""

#: ../../../ReleaseNotes.rst:40
msgid ""
"Fix a bug in reversed argument for templated operators. This breaks code in "
"C++20 which was previously accepted in C++17. Clang did not properly "
"diagnose such casese in C++20 before this change. Eg:"
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid ""
"To reduce such widespread breakages, as an extension, Clang accepts this "
"code with an existing warning ``-Wambiguous-reversed-operator`` warning. "
"Fixes `#53954 <https://github.com/llvm/llvm-project/issues/53954>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:63
msgid ""
"The CMake variable ``GCC_INSTALL_PREFIX`` (which sets the default ``--gcc-"
"toolchain=``) is deprecated and will be removed. Specify ``--gcc-install-"
"dir=`` or ``--gcc-triple=`` in a `configuration file <https://clang.llvm.org/"
"docs/UsersManual.html#configuration-files>`_ as a replacement. (`#77537 "
"<https://github.com/llvm/llvm-project/pull/77537>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:71
msgid "C/C++ Language Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid ""
"The default extension name for PCH generation (``-c -xc-header`` and ``-c -"
"xc++-header``) is now ``.pch`` instead of ``.gch``."
msgstr ""

#: ../../../ReleaseNotes.rst:75
msgid ""
"``-include a.h`` probing ``a.h.gch`` will now ignore ``a.h.gch`` if it is "
"not a clang pch file or a directory containing any clang pch file."
msgstr ""

#: ../../../ReleaseNotes.rst:77
msgid ""
"Fixed a bug that caused ``__has_cpp_attribute`` and ``__has_c_attribute`` "
"return incorrect values for some C++-11-style attributes. Below is a "
"complete list of behavior changes."
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "Test"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "Old value"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "New value"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(unused)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "201603"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "0"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(gnu::unused)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "1"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_c_attribute(unused)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "202106"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(clang::fallthrough)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(gnu::fallthrough)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_c_attribute(gnu::fallthrough)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "201910"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(warn_unused_result)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "201907"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(clang::warn_unused_result)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_cpp_attribute(gnu::warn_unused_result)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_c_attribute(warn_unused_result)``"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "202003"
msgstr ""

#: ../../../ReleaseNotes.rst:1
msgid "``__has_c_attribute(gnu::warn_unused_result)``"
msgstr ""

#: ../../../ReleaseNotes.rst:96
msgid ""
"Fixed a bug in finding matching `operator!=` while adding reversed "
"`operator==` as outlined in \"The Equality Operator You Are Looking "
"For\" (`P2468 <http://wg21.link/p2468r2>`_). Fixes (`#68901 <https://github."
"com/llvm/llvm-project/issues/68901>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:101
msgid "C++ Specific Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:102
msgid ""
"The name mangling rules for function templates has been changed to take into "
"account the possibility that functions could be overloaded on their template "
"parameter lists or requires-clauses. This causes mangled names to change for "
"function templates in the following cases:"
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid ""
"When a template parameter in a function template depends on a previous "
"template parameter, such as ``template<typename T, T V> void f()``."
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"When the function has any constraints, whether from constrained template"
msgstr ""

#: ../../../ReleaseNotes.rst:110
msgid "parameters or requires-clauses."
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid "When the template parameter list includes a deduced type -- either"
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid ""
"``auto``, ``decltype(auto)``, or a deduced class template specialization "
"type."
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid ""
"When a template template parameter is given a template template argument"
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid "that has a different template parameter list."
msgstr ""

#: ../../../ReleaseNotes.rst:117
msgid ""
"This fixes a number of issues where valid programs would be rejected due to "
"mangling collisions, or would in some cases be silently miscompiled. Clang "
"will use the old manglings if ``-fclang-abi-compat=17`` or lower is "
"specified. (`#48216 <https://github.com/llvm/llvm-project/issues/48216>`_), "
"(`#49884 <https://github.com/llvm/llvm-project/issues/49884>`_), and "
"(`#61273 <https://github.com/llvm/llvm-project/issues/61273>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid ""
"The `ClassScopeFunctionSpecializationDecl` AST node has been removed. "
"Dependent class scope explicit function template specializations now use "
"`DependentFunctionTemplateSpecializationInfo` to store candidate primary "
"templates and explicit template arguments. This should not impact users of "
"Clang as a compiler, but it may break assumptions in Clang-based tools "
"iterating over the AST."
msgstr ""

#: ../../../ReleaseNotes.rst:132
msgid ""
"The warning `-Wenum-constexpr-conversion` is now also enabled by default on "
"system headers and macros. It will be turned into a hard (non-downgradable) "
"error in the next Clang release."
msgstr ""

#: ../../../ReleaseNotes.rst:136
msgid ""
"The flag `-fdelayed-template-parsing` won't be enabled by default with C++20 "
"when targetting MSVC to match the behavior of MSVC. (`MSVC Docs <https://"
"learn.microsoft.com/en-us/cpp/build/reference/permissive-standards-"
"conformance?view=msvc-170>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:140
msgid ""
"Remove the hardcoded path to the imported modules for C++20 named modules. "
"Now we require all the dependent modules to specified from the command line. "
"See (`#62707 <https://github.com/llvm/llvm-project/issues/62707>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid ""
"Forbid `import XXX;` in C++ to find module `XXX` comes from explicit clang "
"modules. See (`#64755 <https://github.com/llvm/llvm-project/issues/64755>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid "ABI Changes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid ""
"Following the SystemV ABI for x86-64, ``__int128`` arguments will no longer "
"be split between a register and a stack slot."
msgstr ""

#: ../../../ReleaseNotes.rst:152
msgid ""
"Fixed Microsoft calling convention for returning certain classes with a "
"templated constructor. If a class has a templated constructor, it should be "
"returned indirectly even if it meets all the other requirements for "
"returning a class in a register. This affects some uses of std::pair. "
"(#GH86384)."
msgstr ""

#: ../../../ReleaseNotes.rst:159
msgid "AST Dumping Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"When dumping a sugared type, Clang will no longer print the desugared type "
"if its textual representation is the same as the sugared one. This applies "
"to both text dumps of the form ``'foo':'foo'`` which will now be dumped as "
"just ``'foo'``, and JSON dumps of the form:"
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid "which will now be dumped as just:"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "Clang Frontend Potentially Breaking Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:182
msgid ""
"Target OS macros extension A new Clang extension (see :ref:`here "
"<target_os_detail>`) is enabled for Darwin (Apple platform) targets. Clang "
"now defines ``TARGET_OS_*`` macros for these targets, which could break "
"existing code bases with improper checks for the ``TARGET_OS_`` macros. For "
"example, existing checks might fail to include the ``TargetConditionals.h`` "
"header from Apple SDKs and therefore leaving the macros undefined and "
"guarded code unexercised."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Affected code should be checked to see if it's still intended for the "
"specific target and fixed accordingly."
msgstr ""

#: ../../../ReleaseNotes.rst:193
msgid ""
"The extension can be turned off by the option ``-fno-define-target-os-"
"macros`` as a workaround."
msgstr ""

#: ../../../ReleaseNotes.rst:197
msgid "What's New in Clang |release|?"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid ""
"Some of the major new features and improvements to Clang are listed here. "
"Generic improvements to Clang as a whole or to its underlying infrastructure "
"are described first, followed by language-specific sections with "
"improvements to Clang's support for those languages."
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid "C++ Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid "C++20 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid ""
"Implemented `P1907R1 <https://wg21.link/P1907R1>`_ which extends allowed non-"
"type template argument kinds with e.g. floating point values and pointers "
"and references to subobjects. This feature is still experimental. "
"Accordingly, ``__cpp_nontype_template_args`` was not updated. However, its "
"support can be tested with ``__has_extension(cxx_generalized_nttp)``."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid ""
"Clang won't perform ODR checks for decls in the global module fragment any "
"more to ease the implementation and improve the user's using experience. "
"This follows the MSVC's behavior. Users interested in testing the more "
"strict behavior can use the flag '-Xclang -fno-skip-odr-check-in-gmf'. "
"(`#79240 <https://github.com/llvm/llvm-project/issues/79240>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid "C++23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid ""
"Implemented `P0847R7: Deducing this <https://wg21.link/P0847R7>`_. Some "
"related core issues were also implemented (`CWG2553 <https://wg21.link/"
"CWG2553>`_, `CWG2554 <https://wg21.link/CWG2554>`_, `CWG2653 <https://wg21."
"link/CWG2653>`_, `CWG2687 <https://wg21.link/CWG2687>`_). Because the "
"support for this feature is still experimental, the feature test macro "
"``__cpp_explicit_this_parameter`` was not set in this version. However, its "
"support can be tested with ``__has_extension(cxx_explicit_this_parameter)``."
msgstr ""

#: ../../../ReleaseNotes.rst:228
msgid ""
"Added a separate warning to warn the use of attributes on lambdas as a C++23 "
"extension in previous language versions: ``-Wc++23-lambda-attributes``."
msgstr ""

#: ../../../ReleaseNotes.rst:232
msgid "C++2c Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:234
msgid ""
"Implemented `P2169R4: A nice placeholder with no name <https://wg21.link/"
"P2169R4>`_. This allows using ``_`` as a variable name multiple times in the "
"same scope and is supported in all C++ language modes as an extension. An "
"extension warning is produced when multiple variables are introduced by "
"``_`` in the same scope. Unused warnings are no longer produced for "
"variables named ``_``. Currently, inspecting placeholders variables in a "
"debugger when more than one are declared in the same scope is not supported."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid ""
"Attributes now expect unevaluated strings in attributes parameters that are "
"string literals. This is applied to both C++ standard attributes, and other "
"attributes supported by Clang. This completes the implementation of `P2361R6 "
"Unevaluated Strings <https://wg21.link/P2361R6>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"Implemented `P2864R2 Remove Deprecated Arithmetic Conversion on Enumerations "
"From C++26 <https://wg21.link/P2864R2>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"Implemented `P2361R6 Template parameter initialization <https://wg21.link/"
"P2308R1>`_. This change is applied as a DR in all language modes."
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid "Resolutions to C++ Defect Reports"
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"Implemented `CWG2598 <https://wg21.link/CWG2598>`_ and `CWG2096 <https://"
"wg21.link/CWG2096>`_, making unions (that have either no members or at least "
"one literal member) literal types. (`#77924 <https://github.com/llvm/llvm-"
"project/issues/77924>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid "C Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"``structs``, ``unions``, and ``arrays`` that are const may now be used as "
"constant expressions.  This change is more consistent with the behavior of "
"GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid ""
"Enums will now be represented in TBAA metadata using their actual underlying "
"integer type. Previously they were treated as chars, which meant they could "
"alias with all other types."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid ""
"Clang now supports the C-only attribute ``counted_by``. When applied to a "
"struct's flexible array member, it points to the struct field that holds the "
"number of elements in the flexible array member. This information can "
"improve the results of the array bound sanitizer and the "
"``__builtin_dynamic_object_size`` builtin."
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid "C23 Feature Support"
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid ""
"Clang now accepts ``-std=c23`` and ``-std=gnu23`` as language standard "
"modes, and the ``__STDC_VERSION__`` macro now expands to ``202311L`` instead "
"of its previous placeholder value. Clang continues to accept ``-std=c2x`` "
"and ``-std=gnu2x`` as aliases for C23 and GNU C23, respectively."
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid "Clang now supports `requires c23` for module maps."
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "Clang now supports ``N3007 Type inference for object definitions``."
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid ""
"Clang now supports ``<stdckdint.h>`` which defines several macros for "
"performing checked integer arithmetic. It is also exposed in pre-C23 modes."
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"Completed the implementation of `N2508 <https://www.open-std.org/jtc1/sc22/"
"wg14/www/docs/n2508.pdf>`_. We previously implemented allowing a label at "
"the end of a compound statement, and now we've implemented allowing a label "
"to be followed by a declaration instead of a statement."
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"Implemented `N2940 <https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2940."
"pdf>`_ which removes support for trigraphs in C23 and later. In earlier "
"language modes, trigraphs remain enabled by default in conforming modes (e."
"g. ``-std=c17``) and disabled by default in GNU and Microsoft modes (e.g., "
"``-std=gnu17`` or ``-fms-compatibility``). If needed, you can enable "
"trigraphs by passing ``-ftrigraphs``."
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid ""
"Clang now has a ``__builtin_vectorelements()`` function that determines the "
"number of elements in a vector. For fixed-sized vectors, e.g., defined via "
"``__attribute__((vector_size(N)))`` or ARM NEON's vector types (e.g., "
"``uint16x8_t``), this returns the constant number of elements at compile-"
"time. For scalable vectors, e.g., SVE or RISC-V V, the number of elements is "
"not known at compile-time and is determined at runtime."
msgstr ""

#: ../../../ReleaseNotes.rst:318
msgid ""
"The ``__datasizeof`` keyword has been added. It is similar to ``sizeof`` "
"except that it returns the size of a type ignoring tail padding."
msgstr ""

#: ../../../ReleaseNotes.rst:320
msgid ""
"``__builtin_classify_type()`` now classifies ``_BitInt`` values as the "
"return value ``18`` and vector types as return value ``19``, to match GCC "
"14's behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid "The default value of `_MSC_VER` was raised from 1920 to 1933."
msgstr ""

#: ../../../ReleaseNotes.rst:323
msgid ""
"Since MSVC 19.33 added undocumented attribute ``[[msvc::constexpr]]``, this "
"release adds the attribute as well."
msgstr ""

#: ../../../ReleaseNotes.rst:325
msgid "Added ``#pragma clang fp reciprocal``."
msgstr ""

#: ../../../ReleaseNotes.rst:327
msgid ""
"The version of Unicode used by Clang (primarily to parse identifiers) has "
"been updated to 15.1."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid ""
"Clang now defines macro ``__LLVM_INSTR_PROFILE_GENERATE`` when compiling "
"with PGO instrumentation profile generation, and "
"``__LLVM_INSTR_PROFILE_USE`` when compiling with PGO profile use."
msgstr ""

#: ../../../ReleaseNotes.rst:334
msgid "New Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid ""
"``-fverify-intermediate-code`` and its complement ``-fno-verify-intermediate-"
"code``. Enables or disables verification of the generated LLVM IR. Users can "
"pass this to turn on extra verification to catch certain types of compiler "
"bugs at the cost of extra compile time. Since enabling the verifier adds a "
"non-trivial cost of a few percent impact on build times, it's disabled by "
"default, unless your LLVM distribution itself is compiled with runtime "
"checks enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid ""
"``-fkeep-system-includes`` modifies the behavior of the ``-E`` option, "
"preserving ``#include`` directives for \"system\" headers instead of copying "
"the preprocessed text to the output. This can greatly reduce the size of the "
"preprocessed output, which can be helpful when trying to reduce a test case."
msgstr ""

#: ../../../ReleaseNotes.rst:347
msgid ""
"``-fassume-nothrow-exception-dtor`` is added to assume that the destructor "
"of a thrown exception object will not throw. The generated code for catch "
"handlers will be smaller. A throw expression of a type with a potentially-"
"throwing destructor will lead to an error."
msgstr ""

#: ../../../ReleaseNotes.rst:352
msgid ""
"``-fopenacc`` was added as a part of the effort to support OpenACC in Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:354
msgid ""
"``-fcx-limited-range`` enables the naive mathematical formulas for complex "
"division and multiplication with no NaN checking of results. The default is "
"``-fno-cx-limited-range``, but this option is enabled by ``-ffast-math``."
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid ""
"``-fcx-fortran-rules`` enables the naive mathematical formulas for complex "
"multiplication and enables application of Smith's algorithm for complex "
"division. See SMITH, R. L. Algorithm 116: Complex division. Commun. ACM 5, 8 "
"(1962). The default is ``-fno-cx-fortran-rules``."
msgstr ""

#: ../../../ReleaseNotes.rst:363
msgid ""
"``-fvisibility-global-new-delete=<value>`` gives more freedom to users to "
"control how and if Clang forces a visibility for the replaceable new and "
"delete declarations. The option takes 4 values: ``force-hidden``, ``force-"
"protected``, ``force-default`` and ``source``; ``force-default`` is the "
"default. Option values with prefix ``force-`` assign such declarations an "
"implicit visibility attribute with the corresponding visibility. An option "
"value of ``source`` implies that no implicit attribute is added. Without the "
"attribute the replaceable global new and delete operators behave normally "
"(like other functions) with respect to visibility attributes, pragmas and "
"options (e.g ``--fvisibility=``)."
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"Full register names can be used when printing assembly via ``-mregnames``. "
"This option now matches the one used by GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid ""
"``-fdefine-target-os-macros`` and its complement ``-fno-define-target-os-"
"macros``. Enables or disables the Clang extension to provide built-in "
"definitions of a list of ``TARGET_OS_*`` macros based on the target triple."
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid ""
"The extension is enabled by default for Darwin (Apple platform) targets."
msgstr ""

#: ../../../ReleaseNotes.rst:386
msgid "Deprecated Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:389
msgid "Modified Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:391
msgid "``-Woverriding-t-option`` is renamed to ``-Woverriding-option``."
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid ""
"``-Winterrupt-service-routine`` is renamed to ``-Wexcessive-regsave`` as a "
"generalization"
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid ""
"``-frewrite-includes`` now guards the original #include directives with "
"``__CLANG_REWRITTEN_INCLUDES``, and ``__CLANG_REWRITTEN_SYSTEM_INCLUDES`` as "
"appropriate."
msgstr ""

#: ../../../ReleaseNotes.rst:396
msgid ""
"Introducing a new default calling convention for ``-fdefault-calling-conv``: "
"``rtdcall``. This new default CC only works for M68k and will use the new "
"``m68k_rtdcc`` CC on every functions that are not variadic. The ``-mrtd`` "
"driver/frontend flag has the same effect when targeting M68k."
msgstr ""

#: ../../../ReleaseNotes.rst:400
msgid ""
"``-fvisibility-global-new-delete-hidden`` is now a deprecated spelling of ``-"
"fvisibility-global-new-delete=force-hidden`` (``-fvisibility-global-new-"
"delete=`` is new in this release)."
msgstr ""

#: ../../../ReleaseNotes.rst:403
msgid "``-fprofile-update`` is enabled for ``-fprofile-generate``."
msgstr ""

#: ../../../ReleaseNotes.rst:406
msgid "Removed Compiler Flags"
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"``-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang`` "
"has been removed. It has not been needed to enable ``-ftrivial-auto-var-"
"init=zero`` since Clang 16."
msgstr ""

#: ../../../ReleaseNotes.rst:412
msgid "Attribute Changes in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:413
msgid ""
"On X86, a warning is now emitted if a function with "
"``__attribute__((no_caller_saved_registers))`` calls a function without "
"``__attribute__((no_caller_saved_registers))``, and is not compiled with ``-"
"mgeneral-regs-only``"
msgstr ""

#: ../../../ReleaseNotes.rst:416
msgid ""
"On X86, a function with ``__attribute__((interrupt))`` can now call a "
"function without ``__attribute__((no_caller_saved_registers))`` provided "
"that it is compiled with ``-mgeneral-regs-only``"
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid ""
"When a non-variadic function is decorated with the ``format`` attribute, "
"Clang now checks that the format string would match the function's "
"parameters' types after default argument promotion. As a result, it's no "
"longer an automatic diagnostic to use parameters of types that the format "
"style supports but that are never the result of default argument promotion, "
"such as ``float``. (`#59824 <https://github.com/llvm/llvm-project/"
"issues/59824>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:426
msgid ""
"Clang now supports ``[[clang::preferred_type(type-name)]]`` as an attribute "
"which can be applied to a bit-field. This attribute helps to map a bit-field "
"back to a particular type that may be better-suited to representing the bit- "
"field but cannot be used for other reasons and will impact the debug "
"information generated for the bit-field. This is most useful when mapping a "
"bit-field of basic integer type back to a ``bool`` or an enumeration type, e."
"g.,"
msgstr ""

#: ../../../ReleaseNotes.rst:441
msgid ""
"When viewing ``S::FruitKind`` in a debugger, it will behave as if the member "
"was declared as type ``E`` rather than ``unsigned``."
msgstr ""

#: ../../../ReleaseNotes.rst:444
msgid ""
"Clang now warns you that the ``_Alignas`` attribute on declaration "
"specifiers is ignored, changed from the former incorrect suggestion to move "
"it past declaration specifiers. (`#58637 <https://github.com/llvm/llvm-"
"project/issues/58637>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:448
msgid ""
"Clang now introduced ``[[clang::coro_only_destroy_when_complete]]`` "
"attribute to reduce the size of the destroy functions for coroutines which "
"are known to be destroyed after having reached the final suspend point."
msgstr ""

#: ../../../ReleaseNotes.rst:452
msgid ""
"Clang now introduced ``[[clang::coro_return_type]]`` and ``[[clang::"
"coro_wrapper]]`` attributes. A function returning a type marked with "
"``[[clang::coro_return_type]]`` should be a coroutine. A non-coroutine "
"function marked with ``[[clang::coro_wrapper]]`` is still allowed to return "
"the such a type. This is helpful for analyzers to recognize coroutines from "
"the function signatures."
msgstr ""

#: ../../../ReleaseNotes.rst:457
msgid ""
"Clang now supports ``[[clang::code_align(N)]]`` as an attribute which can be "
"applied to a loop and specifies the byte alignment for a loop. This "
"attribute accepts a positive integer constant initialization expression "
"indicating the number of bytes for the minimum alignment boundary. Its value "
"must be a power of 2, between 1 and 4096(inclusive)."
msgstr ""

#: ../../../ReleaseNotes.rst:474
msgid ""
"Clang now introduced ``[[clang::coro_lifetimebound]]`` attribute. All "
"parameters of a function are considered to be lifetime bound if the function "
"returns a type annotated with ``[[clang::coro_lifetimebound]]`` and "
"``[[clang::coro_return_type]]``. This analysis can be disabled for a "
"function by annotating the function with ``[[clang::"
"coro_disable_lifetimebound]]``."
msgstr ""

#: ../../../ReleaseNotes.rst:480
msgid "Improvements to Clang's diagnostics"
msgstr ""

#: ../../../ReleaseNotes.rst:481
msgid ""
"Clang constexpr evaluator now prints template arguments when displaying "
"template-specialization function calls."
msgstr ""

#: ../../../ReleaseNotes.rst:483
msgid ""
"Clang contexpr evaluator now displays notes as well as an error when a "
"constructor of a base class is not called in the constructor of its derived "
"class."
msgstr ""

#: ../../../ReleaseNotes.rst:485
msgid ""
"Clang no longer emits ``-Wmissing-variable-declarations`` for variables "
"declared with the ``register`` storage class."
msgstr ""

#: ../../../ReleaseNotes.rst:487
msgid ""
"Clang's ``-Wswitch-default`` flag now diagnoses whenever a ``switch`` "
"statement does not have a ``default`` label."
msgstr ""

#: ../../../ReleaseNotes.rst:489
msgid ""
"Clang's ``-Wtautological-negation-compare`` flag now diagnoses logical "
"tautologies like ``x && !x`` and ``!x || x`` in expressions. This also makes "
"``-Winfinite-recursion`` diagnose more cases. (`#56035 <https://github.com/"
"llvm/llvm-project/issues/56035>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:493
msgid ""
"Clang constexpr evaluator now diagnoses compound assignment operators "
"against uninitialized variables as a read of uninitialized object. (`#51536 "
"<https://github.com/llvm/llvm-project/issues/51536>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:496
msgid ""
"Clang's ``-Wformat-truncation`` now diagnoses ``snprintf`` call that is "
"known to result in string truncation. (`#64871 <https://github.com/llvm/llvm-"
"project/issues/64871>`_). Existing warnings that similarly warn about the "
"overflow in ``sprintf`` now falls under its own warning group ```-Wformat-"
"overflow`` so that it can be disabled separately from ``Wfortify-source``. "
"These two new warning groups have subgroups ``-Wformat-truncation-non-"
"kprintf`` and ``-Wformat-overflow-non-kprintf``, respectively. These "
"subgroups are used when the format string contains ``%p`` format specifier. "
"Because Linux kernel's codebase has format extensions for ``%p``, kernel "
"developers are encouraged to disable these two subgroups by setting ``-Wno-"
"format-truncation-non-kprintf`` and ``-Wno-format-overflow-non-kprintf`` in "
"order to avoid false positives on the kernel codebase. Also clang no longer "
"emits false positive warnings about the output length of ``%g`` format "
"specifier and about ``%o, %x, %X`` with ``#`` flag."
msgstr ""

#: ../../../ReleaseNotes.rst:511
msgid "Clang now emits ``-Wcast-qual`` for functional-style cast expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:512
msgid ""
"Clang no longer emits irrelevant notes about unsatisfied constraint "
"expressions on the left-hand side of ``||`` when the right-hand side "
"constraint is satisfied. (`#54678 <https://github.com/llvm/llvm-project/"
"issues/54678>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:515
msgid ""
"Clang now prints its 'note' diagnostic in cyan instead of black, to be more "
"compatible with terminals with dark background colors. This is also more "
"consistent with GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:517
msgid ""
"Clang now displays an improved diagnostic and a note when a defaulted "
"special member is marked ``constexpr`` in a class with a virtual base class "
"(`#64843 <https://github.com/llvm/llvm-project/issues/64843>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:520
msgid ""
"``-Wfixed-enum-extension`` and ``-Wmicrosoft-fixed-enum`` diagnostics are no "
"longer emitted when building as C23, since C23 standardizes support for "
"enums with a fixed underlying type."
msgstr ""

#: ../../../ReleaseNotes.rst:523
msgid ""
"When describing the failure of static assertion of `==` expression, clang "
"prints the integer representation of the value as well as its character "
"representation when the user-provided expression is of character type. If "
"the character is non-printable, clang now shows the escpaed character. Clang "
"also prints multi-byte characters if the user-provided expression is of "
"multi-byte character type."
msgstr ""

#: ../../../ReleaseNotes.rst:530 ../../../ReleaseNotes.rst:1288
msgid "*Example Code*:"
msgstr ""

#: ../../../ReleaseNotes.rst:536
msgid "*BEFORE*:"
msgstr ""

#: ../../../ReleaseNotes.rst:548
msgid "*AFTER*:"
msgstr ""

#: ../../../ReleaseNotes.rst:558
msgid ""
"Clang now always diagnoses when using non-standard layout types in "
"``offsetof`` . (`#64619 <https://github.com/llvm/llvm-project/"
"issues/64619>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:560
msgid ""
"Clang now diagnoses redefined defaulted constructor when redefined defaulted "
"constructor with different exception specs. (`#69094 <https://github.com/"
"llvm/llvm-project/issues/69094>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:563
msgid ""
"Clang now diagnoses use of variable-length arrays in C++ by default (and "
"under ``-Wall`` in GNU++ mode). This is an extension supported by Clang and "
"GCC, but is very easy to accidentally use without realizing it's a "
"nonportable construct that has different semantics from a constant-sized "
"array. (`#62836 <https://github.com/llvm/llvm-project/issues/62836>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:569
msgid ""
"Clang changed the order in which it displays candidate functions on "
"overloading failures. Previously, Clang used definition of ordering from the "
"C++ Standard. The order defined in the Standard is partial and is not suited "
"for sorting. Instead, Clang now uses a strict order that still attempts to "
"push more relevant functions to the top by comparing their corresponding "
"conversions. In some cases, this results in better order. E.g., for the "
"following code"
msgstr ""

#: ../../../ReleaseNotes.rst:585
msgid ""
"Clang now produces a list with two most relevant builtin operators at the "
"top, i.e. ``operator-(int, int)`` and ``operator-(const char*, const "
"char*)``. Previously ``operator-(const char*, const char*)`` was the first "
"element, but ``operator-(int, int)`` was only the 13th element in the "
"output. However, new implementation does not take into account some aspects "
"of C++ semantics, e.g. which function template is more specialized. This can "
"sometimes lead to worse ordering."
msgstr ""

#: ../../../ReleaseNotes.rst:594
msgid ""
"When describing a warning/error in a function-style type conversion Clang "
"underlines only until the end of the expression we convert from. Now Clang "
"underlines until the closing parenthesis."
msgstr ""

#: ../../../ReleaseNotes.rst:597 ../../../ReleaseNotes.rst:657
#: ../../../ReleaseNotes.rst:810
msgid "Before:"
msgstr ""

#: ../../../ReleaseNotes.rst:605 ../../../ReleaseNotes.rst:669
#: ../../../ReleaseNotes.rst:817
msgid "After:"
msgstr ""

#: ../../../ReleaseNotes.rst:613
msgid ""
"``-Wzero-as-null-pointer-constant`` diagnostic is no longer emitted when "
"using ``__null`` (or, more commonly, ``NULL`` when the platform defines it "
"as ``__null``) to be more consistent with GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:616
msgid ""
"Clang will warn on deprecated specializations used in system headers when "
"their instantiation is caused by user code."
msgstr ""

#: ../../../ReleaseNotes.rst:618
msgid ""
"Clang will now print ``static_assert`` failure details for arithmetic binary "
"operators. Example:"
msgstr ""

#: ../../../ReleaseNotes.rst:625
msgid "will now print:"
msgstr ""

#: ../../../ReleaseNotes.rst:636
msgid ""
"Clang now diagnoses definitions of friend function specializations, e.g. "
"``friend void f<>(int) {}``."
msgstr ""

#: ../../../ReleaseNotes.rst:637
msgid ""
"Clang now diagnoses narrowing conversions involving const references. "
"(`#63151 <https://github.com/llvm/llvm-project/issues/63151>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:639
msgid ""
"Clang now diagnoses unexpanded packs within the template argument lists of "
"function template specializations."
msgstr ""

#: ../../../ReleaseNotes.rst:640
msgid ""
"The warning `-Wnan-infinity-disabled` is now emitted when ``INFINITY`` or "
"``NAN`` are used in arithmetic operations or function arguments in floating-"
"point mode where ``INFINITY`` or ``NAN`` don't have the expected values."
msgstr ""

#: ../../../ReleaseNotes.rst:645
msgid ""
"Clang now diagnoses attempts to bind a bitfield to an NTTP of a reference "
"type as erroneous converted constant expression and not as a reference to "
"subobject."
msgstr ""

#: ../../../ReleaseNotes.rst:647
msgid ""
"Clang now diagnoses ``auto`` and ``decltype(auto)`` in declarations of "
"conversion function template (`CWG1878 <https://cplusplus.github.io/CWG/"
"issues/1878.html>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:649
msgid ""
"Clang now diagnoses the requirement that non-template friend declarations "
"with requires clauses and template friend declarations with a constraint "
"that depends on a template parameter from an enclosing template must be a "
"definition."
msgstr ""

#: ../../../ReleaseNotes.rst:652
msgid ""
"Clang now diagnoses incorrect usage of ``const`` and ``pure`` attributes, so "
"``-Wignored-attributes`` diagnoses more cases."
msgstr ""

#: ../../../ReleaseNotes.rst:653
msgid ""
"Clang now emits more descriptive diagnostics for 'unusual' expressions (e.g. "
"incomplete index expressions on matrix types or builtin functions without an "
"argument list) as placement-args to new-expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:677
msgid ""
"Clang now diagnoses import before module declarations but not in global "
"module fragment. (`#67627 <https://github.com/llvm/llvm-project/"
"issues/67627>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:681
msgid ""
"Clang now diagnoses include headers with angle in module purviews, which is "
"not usually intended. (`#68615 <https://github.com/llvm/llvm-project/"
"issues/68615>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:685
msgid ""
"Clang now won't mention invisible namespace when diagnose invisible "
"declarations inside namespace. The original diagnostic message is confusing. "
"(`#73893 <https://github.com/llvm/llvm-project/issues/73893>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:690
msgid "Improvements to Clang's time-trace"
msgstr ""

#: ../../../ReleaseNotes.rst:691
msgid ""
"Two time-trace scope variables are added. A time trace scope variable of "
"``ParseDeclarationOrFunctionDefinition`` with the function's source location "
"is added to record the time spent parsing the function's declaration or "
"definition. Another time trace scope variable of ``ParseFunctionDefinition`` "
"is also added to record the name of the defined function."
msgstr ""

#: ../../../ReleaseNotes.rst:698
msgid "Bug Fixes in This Version"
msgstr ""

#: ../../../ReleaseNotes.rst:699
msgid ""
"Fixed an issue where a class template specialization whose declaration is "
"instantiated in one module and whose definition is instantiated in another "
"module may end up with members associated with the wrong declaration of the "
"class, which can result in miscompiles in some cases."
msgstr ""

#: ../../../ReleaseNotes.rst:703
msgid ""
"Fix crash on use of a variadic overloaded operator. (`#42535 <https://github."
"com/llvm/llvm-project/issues/42535>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:705
msgid ""
"Fix a hang on valid C code passing a function type as an argument to "
"``typeof`` to form a function declaration. (`#64713 <https://github.com/llvm/"
"llvm-project/issues/64713>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:708
msgid ""
"Clang now reports missing-field-initializers warning for missing designated "
"initializers in C++. (`#56628 <https://github.com/llvm/llvm-project/"
"issues/56628>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:711
msgid ""
"Clang now respects ``-fwrapv`` and ``-ftrapv`` for ``__builtin_abs`` and "
"``abs`` builtins. (`#45129 <https://github.com/llvm/llvm-project/"
"issues/45129>`_, `#45794 <https://github.com/llvm/llvm-project/"
"issues/45794>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:715
msgid ""
"Fixed an issue where accesses to the local variables of a coroutine during "
"``await_suspend`` could be misoptimized, including accesses to the awaiter "
"object itself. (`#56301 <https://github.com/llvm/llvm-project/"
"issues/56301>`_) The current solution may bring performance regressions if "
"the awaiters have non-static data members. See `#64945 <https://github.com/"
"llvm/llvm-project/issues/64945>`_ for details."
msgstr ""

#: ../../../ReleaseNotes.rst:722
msgid ""
"Clang now prints unnamed members in diagnostic messages instead of giving an "
"empty ''. Fixes (`#63759 <https://github.com/llvm/llvm-project/"
"issues/63759>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:725
msgid ""
"Fix crash in __builtin_strncmp and related builtins when the size value "
"exceeded the maximum value representable by int64_t. Fixes (`#64876 <https://"
"github.com/llvm/llvm-project/issues/64876>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:728
msgid ""
"Fixed an assertion if a function has cleanups and fatal erors. (`#48974 "
"<https://github.com/llvm/llvm-project/issues/48974>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:730
msgid ""
"Clang now emits an error if it is not possible to deduce array size for a "
"variable with incomplete array type. (`#37257 <https://github.com/llvm/llvm-"
"project/issues/37257>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:733
msgid ""
"Clang's ``-Wunused-private-field`` no longer warns on fields whose type is "
"declared with ``[[maybe_unused]]``. (`#61334 <https://github.com/llvm/llvm-"
"project/issues/61334>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:736
msgid ""
"For function multi-versioning using the ``target``, ``target_clones``, or "
"``target_version`` attributes, remove comdat for internal linkage functions. "
"(`#65114 <https://github.com/llvm/llvm-project/issues/65114>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:739
msgid ""
"Clang now reports ``-Wformat`` for bool value and char specifier confusion "
"in scanf. Fixes (`#64987 <https://github.com/llvm/llvm-project/"
"issues/64987>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:742
msgid ""
"Support MSVC predefined macro expressions in constant expressions and in "
"local structs."
msgstr ""

#: ../../../ReleaseNotes.rst:744
msgid ""
"Correctly parse non-ascii identifiers that appear immediately after a line "
"splicing (`#65156 <https://github.com/llvm/llvm-project/issues/65156>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:746
msgid ""
"Clang no longer considers the loss of ``__unaligned`` qualifier from objects "
"as an invalid conversion during method function overload resolution."
msgstr ""

#: ../../../ReleaseNotes.rst:748
msgid ""
"Fix lack of comparison of declRefExpr in ASTStructuralEquivalence (`#66047 "
"<https://github.com/llvm/llvm-project/issues/66047>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:750
msgid ""
"Fix parser crash when dealing with ill-formed objective C++ header code. "
"Fixes (`#64836 <https://github.com/llvm/llvm-project/issues/64836>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:752
msgid ""
"Fix crash in implicit conversions from initialize list to arrays of unknown "
"bound for C++20. Fixes (`#62945 <https://github.com/llvm/llvm-project/"
"issues/62945>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:755
msgid ""
"Clang now allows an ``_Atomic`` qualified integer in a switch statement. "
"Fixes (`#65557 <https://github.com/llvm/llvm-project/issues/65557>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:757
msgid ""
"Fixes crash when trying to obtain the common sugared type of "
"`decltype(instantiation-dependent-expr)`. Fixes (`#67603 <https://github.com/"
"llvm/llvm-project/issues/67603>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:760
msgid ""
"Fixes a crash caused by a multidimensional array being captured by a lambda "
"(`#67722 <https://github.com/llvm/llvm-project/issues/67722>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:762
msgid ""
"Fixes a crash when instantiating a lambda with requires clause. (`#64462 "
"<https://github.com/llvm/llvm-project/issues/64462>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:764
msgid ""
"Fixes a regression where the ``UserDefinedLiteral`` was not properly "
"preserved while evaluating consteval functions. (`#63898 <https://github.com/"
"llvm/llvm-project/issues/63898>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:766
msgid ""
"Fix a crash when evaluating value-dependent structured binding variables at "
"compile time. Fixes (`#67690 <https://github.com/llvm/llvm-project/"
"issues/67690>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:769
msgid ""
"Fixes a ``clang-17`` regression where ``LLVM_UNREACHABLE_OPTIMIZE=OFF`` "
"cannot be used with ``Release`` mode builds. (`#68237 <https://github.com/"
"llvm/llvm-project/issues/68237>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:771
msgid ""
"Fix crash in evaluating ``constexpr`` value for invalid template function. "
"Fixes (`#68542 <https://github.com/llvm/llvm-project/issues/68542>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:773
msgid ""
"Clang will correctly evaluate ``noexcept`` expression for template functions "
"of template classes. Fixes (`#68543 <https://github.com/llvm/llvm-project/"
"issues/68543>`_, `#42496 <https://github.com/llvm/llvm-project/"
"issues/42496>`_, `#77071 <https://github.com/llvm/llvm-project/"
"issues/77071>`_, `#77411 <https://github.com/llvm/llvm-project/"
"issues/77411>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:779
msgid ""
"Fixed an issue when a shift count larger than ``__INT64_MAX__``, in a right "
"shift operation, could result in missing warnings about ``shift count >= "
"width of type`` or internal compiler error."
msgstr ""

#: ../../../ReleaseNotes.rst:782
msgid ""
"Fixed an issue with computing the common type for the LHS and RHS of a `?:` "
"operator in C. No longer issuing a confusing diagnostic along the lines of "
"\"incompatible operand types ('foo' and 'foo')\" with extensions such as "
"matrix types. Fixes (`#69008 <https://github.com/llvm/llvm-project/"
"issues/69008>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:786
msgid ""
"Clang no longer permits using the `_BitInt` types as an underlying type for "
"an enumeration as specified in the C23 Standard. Fixes (`#69619 <https://"
"github.com/llvm/llvm-project/issues/69619>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:789
msgid ""
"Fixed an issue when a shift count specified by a small constant "
"``_BitInt()``, in a left shift operation, could result in a faulty warnings "
"about ``shift count >= width of type``."
msgstr ""

#: ../../../ReleaseNotes.rst:792
msgid ""
"Clang now accepts anonymous members initialized with designated initializers "
"inside templates. Fixes (`#65143 <https://github.com/llvm/llvm-project/"
"issues/65143>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:795
msgid ""
"Fix crash in formatting the real/imaginary part of a complex lvalue. Fixes "
"(`#69218 <https://github.com/llvm/llvm-project/issues/69218>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:797
msgid ""
"No longer use C++ ``thread_local`` semantics in C23 when using "
"``thread_local`` instead of ``_Thread_local``. Fixes (`#70068 <https://"
"github.com/llvm/llvm-project/issues/70068>`_) and (`#69167 <https://github."
"com/llvm/llvm-project/issues/69167>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:801
msgid ""
"Fix crash in evaluating invalid lambda expression which forget capture this. "
"Fixes (`#67687 <https://github.com/llvm/llvm-project/issues/67687>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:803
msgid ""
"Fix crash from constexpr evaluator evaluating uninitialized arrays as "
"rvalue. Fixes (`#67317 <https://github.com/llvm/llvm-project/issues/67317>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:805
msgid ""
"Clang now properly diagnoses use of stand-alone OpenMP directives after a "
"label (including ``case`` or ``default`` labels)."
msgstr ""

#: ../../../ReleaseNotes.rst:807
msgid ""
"Fix compiler memory leak for enums with underlying type larger than 64 bits. "
"Fixes (`#78311 <https://github.com/llvm/llvm-project/pull/78311>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:824
msgid ""
"Fixed an issue that a benign assertion might hit when instantiating a pack "
"expansion inside a lambda. (`#61460 <https://github.com/llvm/llvm-project/"
"issues/61460>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:826
msgid ""
"Fix crash during instantiation of some class template specializations within "
"class templates. Fixes (`#70375 <https://github.com/llvm/llvm-project/"
"issues/70375>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:828
msgid ""
"Fix crash during code generation of C++ coroutine initial suspend when the "
"return type of await_resume is not trivially destructible. Fixes (`#63803 "
"<https://github.com/llvm/llvm-project/issues/63803>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:831
msgid ""
"``__is_trivially_relocatable`` no longer returns true for non-object types "
"such as references and functions. Fixes (`#67498 <https://github.com/llvm/"
"llvm-project/issues/67498>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:834
msgid ""
"Fix crash when the object used as a ``static_assert`` message has ``size`` "
"or ``data`` members which are not member functions."
msgstr ""

#: ../../../ReleaseNotes.rst:836
msgid "Support UDLs in ``static_assert`` message."
msgstr ""

#: ../../../ReleaseNotes.rst:837
msgid ""
"Fixed false positive error emitted by clang when performing qualified name "
"lookup and the current class instantiation has dependent bases. Fixes "
"(`#13826 <https://github.com/llvm/llvm-project/issues/13826>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:840
msgid ""
"Fix a ``clang-17`` regression where a templated friend with constraints is "
"not properly applied when its parameters reference an enclosing non-template "
"class. Fixes (`#71595 <https://github.com/llvm/llvm-project/issues/71595>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:843
msgid ""
"Fix the name of the ifunc symbol emitted for multiversion functions declared "
"with the ``target_clones`` attribute. This addresses a linker error that "
"would otherwise occur when these functions are referenced from other TUs."
msgstr ""

#: ../../../ReleaseNotes.rst:846
msgid ""
"Fixes compile error that double colon operator cannot resolve macro with "
"parentheses. Fixes (`#64467 <https://github.com/llvm/llvm-project/"
"issues/64467>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:848
msgid ""
"Clang's ``-Wchar-subscripts`` no longer warns on chars whose values are "
"known non-negative constants. Fixes (`#18763 <https://github.com/llvm/llvm-"
"project/issues/18763>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:850
msgid ""
"Fix crash due to incorrectly allowing conversion functions in copy elision. "
"Fixes (`#39319 <https://github.com/llvm/llvm-project/issues/39319>`_) and "
"(`#60182 <https://github.com/llvm/llvm-project/issues/60182>`_) and (`#62157 "
"<https://github.com/llvm/llvm-project/issues/62157>`_) and (`#64885 <https://"
"github.com/llvm/llvm-project/issues/64885>`_) and (`#65568 <https://github."
"com/llvm/llvm-project/issues/65568>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:856
msgid ""
"Fix an issue where clang doesn't respect detault template arguments that are "
"added in a later redeclaration for CTAD. Fixes (`#69987 <https://github.com/"
"llvm/llvm-project/issues/69987>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:859
msgid ""
"Fix an issue where CTAD fails for explicit type conversion. Fixes (`#64347 "
"<https://github.com/llvm/llvm-project/issues/64347>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:861
msgid ""
"Fix crash when using C++ only tokens like ``::`` in C compiler clang. Fixes "
"(`#73559 <https://github.com/llvm/llvm-project/issues/73559>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:863
msgid ""
"Clang now accepts recursive non-dependent calls to functions with deduced "
"return type. Fixes (`#71015 <https://github.com/llvm/llvm-project/"
"issues/71015>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:866
msgid ""
"Fix assertion failure when initializing union containing struct with "
"flexible array member using empty initializer list. Fixes (`#77085 <https://"
"github.com/llvm/llvm-project/issues/77085>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:869
msgid ""
"Fix assertion crash due to failed scope restoring caused by too-early "
"VarDecl invalidation by invalid initializer Expr. Fixes (`#30908 <https://"
"github.com/llvm/llvm-project/issues/30908>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:872
msgid ""
"Clang now emits correct source location for code-coverage regions in `if "
"constexpr` and `if consteval` branches. Untaken branches are now skipped. "
"Fixes (`#54419 <https://github.com/llvm/llvm-project/issues/54419>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:875
msgid ""
"Fix assertion failure when declaring a template friend function with a "
"constrained parameter in a template class that declares a class method or "
"lambda at different depth. Fixes (`#75426 <https://github.com/llvm/llvm-"
"project/issues/75426>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:879
msgid ""
"Fix an issue where clang cannot find conversion function with template "
"parameter when instantiation of template class. Fixes (`#77583 <https://"
"github.com/llvm/llvm-project/issues/77583>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:882
msgid ""
"Fix an issue where CTAD fails for function-type/array-type arguments. Fixes "
"(`#51710 <https://github.com/llvm/llvm-project/issues/51710>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:884
msgid ""
"Fix crashes when using the binding decl from an invalid structured binding. "
"Fixes (`#67495 <https://github.com/llvm/llvm-project/issues/67495>`_) and "
"(`#72198 <https://github.com/llvm/llvm-project/issues/72198>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:887
msgid ""
"Fix assertion failure when call noreturn-attribute function with musttail "
"attribute. Fixes (`#76631 <https://github.com/llvm/llvm-project/"
"issues/76631>`_) - The MS ``__noop`` builtin without an argument list is now "
"accepted in the placement-args of new-expressions, matching MSVC's behaviour."
msgstr ""

#: ../../../ReleaseNotes.rst:892
msgid ""
"Fix an issue that caused MS ``__decspec(property)`` accesses as well as "
"Objective-C++ property accesses to not be converted to a function call to "
"the getter in the placement-args of new-expressions. Fixes (`#65053 <https://"
"github.com/llvm/llvm-project/issues/65053>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:896
msgid ""
"Fix an issue with missing symbol definitions when the first coroutine "
"statement appears in a discarded ``if constexpr`` branch. Fixes (`#78290 "
"<https://github.com/llvm/llvm-project/issues/78290>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:899
msgid ""
"Fixed assertion failure with deleted overloaded unary operators. Fixes "
"(`#78314 <https://github.com/llvm/llvm-project/issues/78314>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:901
msgid ""
"The XCOFF object file format does not support aliases to symbols having "
"common linkage. Clang now diagnoses the use of an alias for a common symbol "
"when compiling for AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:905
msgid ""
"Clang now doesn't produce false-positive warning `-Wconstant-logical-"
"operand` for logical operators in C23. Fixes (`#64356 <https://github.com/"
"llvm/llvm-project/issues/64356>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:908
msgid ""
"Clang's ``-Wshadow`` no longer warns when an init-capture is named the same "
"as a class field unless the lambda can capture this. Fixes (`#71976 <https://"
"github.com/llvm/llvm-project/issues/71976>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:913
msgid "Bug Fixes to Compiler Builtins"
msgstr ""

#: ../../../ReleaseNotes.rst:916
msgid "Bug Fixes to Attribute Support"
msgstr ""

#: ../../../ReleaseNotes.rst:919
msgid "Bug Fixes to C++ Support"
msgstr ""

#: ../../../ReleaseNotes.rst:921
msgid ""
"Clang limits the size of arrays it will try to evaluate at compile time to "
"avoid memory exhaustion. This limit can be modified by `-fconstexpr-steps`. "
"(`#63562 <https://github.com/llvm/llvm-project/issues/63562>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:926
msgid ""
"Fix a crash caused by some named unicode escape sequences designating a "
"Unicode character whose name contains a ``-``. (Fixes `#64161 <https://"
"github.com/llvm/llvm-project/issues/64161>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:930
msgid ""
"Fix cases where we ignore ambiguous name lookup when looking up members. "
"(`#22413 <https://github.com/llvm/llvm-project/issues/22413>`_), (`#29942 "
"<https://github.com/llvm/llvm-project/issues/29942>`_), (`#35574 <https://"
"github.com/llvm/llvm-project/issues/35574>`_) and (`#27224 <https://github."
"com/llvm/llvm-project/issues/27224>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:936
msgid ""
"Clang emits an error on substitution failure within lambda body inside a "
"requires-expression. This fixes: (`#64138 <https://github.com/llvm/llvm-"
"project/issues/64138>`_) and (`#71684 <https://github.com/llvm/llvm-project/"
"issues/71684>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:941
msgid ""
"Update ``FunctionDeclBitfields.NumFunctionDeclBits``. This fixes: (`#64171 "
"<https://github.com/llvm/llvm-project/issues/64171>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:944
msgid ""
"Expressions producing ``nullptr`` are correctly evaluated by the constant "
"interpreter when appearing as the operand of a binary comparison. (`#64923 "
"<https://github.com/llvm/llvm-project/issues/64923>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:949
msgid ""
"Fix a crash when an immediate invocation is not a constant expression and "
"appear in an implicit cast. (`#64949 <https://github.com/llvm/llvm-project/"
"issues/64949>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:953
msgid ""
"Fix crash when parsing ill-formed lambda trailing return type. Fixes: "
"(`#64962 <https://github.com/llvm/llvm-project/issues/64962>`_) and (`#28679 "
"<https://github.com/llvm/llvm-project/issues/28679>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:957
msgid ""
"Fix a crash caused by substitution failure in expression requirements. "
"(`#64172 <https://github.com/llvm/llvm-project/issues/64172>`_) and (`#64723 "
"<https://github.com/llvm/llvm-project/issues/64723>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:961
msgid ""
"Fix crash when parsing the requires clause of some generic lambdas. (`#64689 "
"<https://github.com/llvm/llvm-project/issues/64689>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:964
msgid ""
"Fix crash when the trailing return type of a generic and dependent lambda "
"refers to an init-capture. (`#65067 <https://github.com/llvm/llvm-project/"
"issues/65067>`_ and `#63675 <https://github.com/llvm/llvm-project/"
"issues/63675>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:969
msgid ""
"Clang now properly handles out of line template specializations when there "
"is a non-template inner-class between the function and the class template. "
"(`#65810 <https://github.com/llvm/llvm-project/issues/65810>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:973
msgid ""
"Fix a crash when calling a non-constant immediate function in the "
"initializer of a static data member. (`#65985 <https://github.com/llvm/llvm-"
"project/issues/65985>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:976
msgid ""
"Clang now properly converts static lambda call operator to function pointers "
"on win32. (`#62594 <https://github.com/llvm/llvm-project/issues/62594>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:980
msgid ""
"Fixed some cases where the source location for an instantiated "
"specialization of a function template or a member function of a class "
"template was assigned the location of a non-defining declaration rather than "
"the location of the definition the specialization was instantiated from. "
"(`#26057 <https://github.com/llvm/llvm-project/issues/26057>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:986
msgid ""
"Fix a crash when a default member initializer of a base aggregate makes an "
"invalid call to an immediate function. (`#66324 <https://github.com/llvm/"
"llvm-project/issues/66324>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:990
msgid ""
"Fix crash for a lambda attribute with a statement expression that contains a "
"`return`. (`#48527 <https://github.com/llvm/llvm-project/issues/48527>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:994
msgid ""
"Clang now no longer asserts when an UnresolvedLookupExpr is used as an "
"expression requirement. (`#66612 <https://github.com/llvm/llvm-project/"
"issues/66612>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:997
msgid ""
"Clang now disambiguates NTTP types when printing diagnostics where the NTTP "
"types are compared with the 'diff' method. (`#66744 <https://github.com/llvm/"
"llvm-project/issues/66744>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1001
msgid ""
"Fix crash caused by a spaceship operator returning a comparision category by "
"reference. Fixes: (`#64162 <https://github.com/llvm/llvm-project/"
"issues/64162>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1004
msgid ""
"Fix a crash when calling a consteval function in an expression used as the "
"size of an array. (`#65520 <https://github.com/llvm/llvm-project/"
"issues/65520>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1008
msgid ""
"Clang no longer tries to capture non-odr-used variables that appear in the "
"enclosing expression of a lambda expression with a noexcept specifier. "
"(`#67492 <https://github.com/llvm/llvm-project/issues/67492>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1012
msgid ""
"Fix crash when fold expression was used in the initialization of default "
"argument. Fixes: (`#67395 <https://github.com/llvm/llvm-project/"
"issues/67395>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1016
msgid ""
"Fixed a bug causing destructors of constant-evaluated structured bindings "
"initialized by array elements to be called in the wrong evaluation context."
msgstr ""

#: ../../../ReleaseNotes.rst:1019
msgid ""
"Fix crash where ill-formed code was being treated as a deduction guide and "
"we now produce a diagnostic. Fixes: (`#65522 <https://github.com/llvm/llvm-"
"project/issues/65522>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1023
msgid ""
"Fixed a bug where clang incorrectly considered implicitly generated "
"deduction guides from a non-templated constructor and a templated "
"constructor as ambiguous, rather than prefer the non-templated constructor "
"as specified in [standard.group]p3."
msgstr ""

#: ../../../ReleaseNotes.rst:1028
msgid ""
"Fixed a crash caused by incorrect handling of dependence on variable "
"templates with non-type template parameters of reference type. Fixes: "
"(`#65153 <https://github.com/llvm/llvm-project/issues/65153>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1032
msgid ""
"Clang now properly compares constraints on an out of line class template "
"declaration definition. Fixes: (`#61763 <https://github.com/llvm/llvm-"
"project/issues/61763>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1036
msgid ""
"Fix a bug where implicit deduction guides are not correctly generated for "
"nested template classes. Fixes: (`#46200 <https://github.com/llvm/llvm-"
"project/issues/46200>`_) (`#57812 <https://github.com/llvm/llvm-project/"
"issues/57812>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1041
msgid ""
"Diagnose use of a variable-length array in a coroutine. The design of "
"coroutines is such that it is not possible to support VLA use. Fixes: "
"(`#65858 <https://github.com/llvm/llvm-project/issues/65858>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1045
msgid ""
"Fix bug where we were overriding zero-initialization of class members when "
"default initializing a base class in a constant expression context. Fixes: "
"(`#69890 <https://github.com/llvm/llvm-project/issues/69890>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1049
msgid ""
"Fix crash when template class static member imported to other translation "
"unit. Fixes: (`#68769 <https://github.com/llvm/llvm-project/issues/68769>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1053
msgid ""
"Clang now rejects incomplete types for ``__builtin_dump_struct``. Fixes: "
"(`#63506 <https://github.com/llvm/llvm-project/issues/63506>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1056
msgid ""
"Fixed a crash for C++98/03 while checking an ill-formed ``_Static_assert`` "
"expression. Fixes: (`#72025 <https://github.com/llvm/llvm-project/"
"issues/72025>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1059
msgid ""
"Clang now defers the instantiation of explicit specifier until constraint "
"checking completes (except deduction guides). Fixes: (`#59827 <https://"
"github.com/llvm/llvm-project/issues/59827>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1063
msgid ""
"Fix crash when parsing nested requirement. Fixes: (`#73112 <https://github."
"com/llvm/llvm-project/issues/73112>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1066
msgid ""
"Fixed a crash caused by using return type requirement in a lambda. Fixes: "
"(`#63808 <https://github.com/llvm/llvm-project/issues/63808>`_) (`#64607 "
"<https://github.com/llvm/llvm-project/issues/64607>`_) (`#64086 <https://"
"github.com/llvm/llvm-project/issues/64086>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1071
msgid ""
"Fixed a crash where we lost uninstantiated constraints on placeholder NTTP "
"packs. Fixes: (`#63837 <https://github.com/llvm/llvm-project/issues/63837>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1074
msgid ""
"Fixed a regression where clang forgets how to substitute into constraints on "
"template-template parameters. Fixes: (`#57410 <https://github.com/llvm/llvm-"
"project/issues/57410>`_) and (`#76604 <https://github.com/llvm/llvm-project/"
"issues/57410>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1079
msgid ""
"Fix a bug where clang would produce inconsistent values when ``std::"
"source_location::current()`` was used in a function template. Fixes (`#78128 "
"<https://github.com/llvm/llvm-project/issues/78128>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1083
msgid ""
"Clang now allows parenthesized initialization of arrays in `operator new[]`. "
"Fixes: (`#68198 <https://github.com/llvm/llvm-project/issues/68198>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1086
msgid ""
"Fixes CTAD for aggregates on nested template classes. Fixes: (`#77599 "
"<https://github.com/llvm/llvm-project/issues/77599>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1089
msgid ""
"Fix crash when importing the same module with an dynamic initializer twice "
"in different visibility. Fixes (`#67893 <https://github.com/llvm/llvm-"
"project/issues/67893>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1093
msgid ""
"Remove recorded `#pragma once` state for headers included in named modules. "
"Fixes (`#77995 <https://github.com/llvm/llvm-project/issues/77995>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1096
msgid "Set the ``__cpp_auto_cast`` feature test macro in C++23 mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1098
msgid ""
"Fix crash for inconsistent deducing state of function return types in "
"importing modules. Fixes (`#78830 <https://github.com/llvm/llvm-project/"
"issues/78830>`_) Fixes (`#60085 <https://github.com/llvm/llvm-project/"
"issues/60085>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1104
msgid ""
"Fixed a bug where variables referenced by requires-clauses inside nested "
"generic lambdas were not properly injected into the constraint scope. "
"(`#73418 <https://github.com/llvm/llvm-project/issues/73418>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1108
msgid ""
"Fix incorrect code generation caused by the object argument of ``static "
"operator()`` and ``static operator[]`` calls not being evaluated. Fixes "
"(`#67976 <https://github.com/llvm/llvm-project/issues/67976>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1111
msgid ""
"Fix crash when using an immediate-escalated function at global scope. "
"(`#82258 <https://github.com/llvm/llvm-project/issues/82258>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1113
msgid ""
"Correctly immediate-escalate lambda conversion functions. (`#82258 <https://"
"github.com/llvm/llvm-project/issues/82258>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1115
msgid ""
"Fix a crash when an unresolved overload set is encountered on the RHS of a "
"``.*`` operator. (`#53815 <https://github.com/llvm/llvm-project/"
"issues/53815>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1118
msgid ""
"Fixed a regression in CTAD that a friend declaration that befriends itself "
"may cause incorrect constraint substitution. (`#86769 <https://github.com/"
"llvm/llvm-project/issues/86769>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1123
msgid "Bug Fixes to AST Handling"
msgstr ""

#: ../../../ReleaseNotes.rst:1124
msgid ""
"Fixed an import failure of recursive friend class template. `Issue 64169 "
"<https://github.com/llvm/llvm-project/issues/64169>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1126
msgid ""
"Remove unnecessary RecordLayout computation when importing UnaryOperator. "
"The computed RecordLayout is incorrect if fields are not completely imported "
"and should not be cached. `Issue 64170 <https://github.com/llvm/llvm-project/"
"issues/64170>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1130
msgid ""
"Fixed ``hasAnyBase`` not binding nodes in its submatcher. (`#65421 <https://"
"github.com/llvm/llvm-project/issues/65421>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1132
msgid ""
"Fixed a bug where RecursiveASTVisitor fails to visit the initializer of a "
"bitfield. `Issue 64916 <https://github.com/llvm/llvm-project/issues/64916>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1135
msgid ""
"Fixed a bug where range-loop-analysis checks for trivial copyability, rather "
"than trivial copy-constructibility `Issue 47355 <https://github.com/llvm/"
"llvm-project/issues/47355>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1138
msgid ""
"Fixed a bug where Template Instantiation failed to handle Lambda Expressions "
"with certain types of Attributes. (`#76521 <https://github.com/llvm/llvm-"
"project/issues/76521>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1143
msgid "Miscellaneous Bug Fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1146
msgid "Miscellaneous Clang Crashes Fixed"
msgstr ""

#: ../../../ReleaseNotes.rst:1147
msgid ""
"Fixed a crash when parsing top-level ObjC blocks that aren't properly "
"terminated. Clang should now also recover better when an @end is missing "
"between blocks. `Issue 64065 <https://github.com/llvm/llvm-project/"
"issues/64065>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1151
msgid ""
"Fixed a crash when check array access on zero-length element. `Issue 64564 "
"<https://github.com/llvm/llvm-project/issues/64564>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1153
msgid ""
"Fixed a crash when an ObjC ivar has an invalid type. See (`#68001 <https://"
"github.com/llvm/llvm-project/pull/68001>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1155
msgid ""
"Fixed a crash in C when redefined struct is another nested redefinition. "
"`Issue 41302 <https://github.com/llvm/llvm-project/issues/41302>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1157
msgid ""
"Fixed a crash when ``-ast-dump=json`` was used for code using class template "
"deduction guides."
msgstr ""

#: ../../../ReleaseNotes.rst:1159
msgid ""
"Fixed a crash when a lambda marked as ``static`` referenced a captured "
"variable in an expression. `Issue 74608 <https://github.com/llvm/llvm-"
"project/issues/74608>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1162
msgid ""
"Fixed a crash with modules and a ``constexpr`` destructor. `Issue 68702 "
"<https://github.com/llvm/llvm-project/issues/68702>`_"
msgstr ""

#: ../../../ReleaseNotes.rst:1167
msgid "OpenACC Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1168
msgid ""
"OpenACC Implementation effort is beginning with semantic analysis and "
"parsing of OpenACC pragmas. The ``-fopenacc`` flag was added to enable these "
"new, albeit incomplete changes. The ``_OPENACC`` macro is currently defined "
"to ``1``, as support is too incomplete to update to a standards-required "
"value."
msgstr ""

#: ../../../ReleaseNotes.rst:1172
msgid ""
"Added ``-fexperimental-openacc-macro-override``, a command line option to "
"permit overriding the ``_OPENACC`` macro to be any digit-only value "
"specified by the user, which permits testing the compiler against existing "
"OpenACC workloads in order to evaluate implementation progress."
msgstr ""

#: ../../../ReleaseNotes.rst:1178
msgid "Target Specific Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1181
msgid "AMDGPU Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1182
msgid ""
"Use pass-by-reference (byref) in stead of pass-by-value (byval) for struct "
"arguments in C ABI. Callee is responsible for allocating stack memory and "
"copying the value of the struct if modified. Note that AMDGPU backend still "
"supports byval for struct arguments."
msgstr ""

#: ../../../ReleaseNotes.rst:1186
msgid ""
"The default value for ``-mcode-object-version`` is now 5. See `AMDHSA Code "
"Object V5 Metadata <https://llvm.org/docs/AMDGPUUsage.html#code-object-v5-"
"metadata>`_ for more details."
msgstr ""

#: ../../../ReleaseNotes.rst:1191
msgid "X86 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1193
msgid ""
"Added option ``-m[no-]evex512`` to disable ZMM and 64-bit mask instructions "
"for AVX512 features."
msgstr ""

#: ../../../ReleaseNotes.rst:1195
msgid ""
"Support ISA of ``USER_MSR``. * Support intrinsic of ``_urdmsr``. * Support "
"intrinsic of ``_uwrmsr``."
msgstr ""

#: ../../../ReleaseNotes.rst:1198
msgid "Support ISA of ``AVX10.1``."
msgstr ""

#: ../../../ReleaseNotes.rst:1199
msgid ""
"``-march=pantherlake`` and ``-march=clearwaterforest`` are now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:1200
msgid "Added ABI handling for ``__float128`` to match with GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:1201
msgid ""
"Emit warnings for options to enable knl/knm specific ISAs: AVX512PF, "
"AVX512ER and PREFETCHWT1. From next version (LLVM 19), these ISAs' intrinsic "
"supports will be deprecated: * intrinsic series of *_exp2a23_* * intrinsic "
"series of *_rsqrt28_* * intrinsic series of *_rcp28_* * intrinsic series of "
"*_prefetch_i[3|6][2|4]gather_* * intrinsic series of *_prefetch_i[3|6][2|"
"4]scatter_*"
msgstr ""

#: ../../../ReleaseNotes.rst:1211
msgid "Arm and AArch64 Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1213
msgid ""
"C++ function name mangling has been changed to align with the specification "
"(https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst). This "
"affects C++ functions with SVE ACLE parameters. Clang will use the old "
"manglings if ``-fclang-abi-compat=17`` or lower is  specified."
msgstr ""

#: ../../../ReleaseNotes.rst:1218
msgid ""
"New AArch64 asm constraints have been added for r8-r11(Uci) and r12-r15(Ucj)."
msgstr ""

#: ../../../ReleaseNotes.rst:1220
msgid ""
"Support has been added for the following processors (-mcpu identifiers in "
"parenthesis):"
msgstr ""

#: ../../../ReleaseNotes.rst:1222
msgid "For Arm:"
msgstr ""

#: ../../../ReleaseNotes.rst:1224
msgid "Cortex-M52 (cortex-m52)."
msgstr ""

#: ../../../ReleaseNotes.rst:1226
msgid "For AArch64:"
msgstr ""

#: ../../../ReleaseNotes.rst:1228
msgid "Cortex-A520 (cortex-a520)."
msgstr ""

#: ../../../ReleaseNotes.rst:1229
msgid "Cortex-A720 (cortex-a720)."
msgstr ""

#: ../../../ReleaseNotes.rst:1230
msgid "Cortex-X4 (cortex-x4)."
msgstr ""

#: ../../../ReleaseNotes.rst:1232
msgid "Alpha support has been added for SVE2.1 intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:1234
msgid ""
"Support has been added for `-fstack-clash-protection` and `-mstack-probe-"
"size` command line options."
msgstr ""

#: ../../../ReleaseNotes.rst:1237
msgid ""
"Function Multi Versioning has been extended to support Load-Acquire RCpc "
"instructions v3 (rcpc3) as well as Memory Copy and Memory Set Acceleration "
"instructions (mops) when targeting AArch64. The feature identifiers (in "
"parenthesis) can be used with either of the ``target_version`` and "
"``target_clones`` attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:1244
msgid "Android Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1246
msgid ""
"Android target triples are usually suffixed with a version. Clang searches "
"for target-specific runtime and standard libraries in directories named "
"after the target (e.g. if you're building with ``--target=aarch64-none-linux-"
"android21``, Clang will look for ``lib/aarch64-none-linux-android21`` under "
"its resource directory to find runtime libraries). If an exact match isn't "
"found, Clang would previously fall back to a directory without any version "
"(which would be ``lib/aarch64-none-linux-android`` in our example). Clang "
"will now look for directories for lower versions and use the newest version "
"it finds instead, e.g. if you have ``lib/aarch64-none-linux-android21`` and "
"``lib/aarch64-none-linux-android29``, ``-target aarch64-none-linux-"
"android23`` will use the former and ``-target aarch64-none-linux-android30`` "
"will use the latter. Falling back to a versionless directory will now emit a "
"warning, and the fallback will be removed in Clang 19."
msgstr ""

#: ../../../ReleaseNotes.rst:1261
msgid "Windows Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1262
msgid ""
"Fixed an assertion failure that occurred due to a failure to propagate "
"``MSInheritanceAttr`` attributes to class template instantiations created "
"for explicit template instantiation declarations."
msgstr ""

#: ../../../ReleaseNotes.rst:1266
msgid ""
"The ``-fno-auto-import`` option was added for MinGW targets. The option both "
"affects code generation (inhibiting generating indirection via ``.refptr`` "
"stubs for potentially auto imported symbols, generating smaller and more "
"efficient code) and linking (making the linker error out on such cases). If "
"the option only is used during code generation but not when linking, linking "
"may succeed but the resulting executables may expose issues at runtime."
msgstr ""

#: ../../../ReleaseNotes.rst:1274
msgid ""
"Clang now passes relevant LTO options to the linker (LLD) in MinGW mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1277
msgid "LoongArch Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1278
msgid ""
"Added builtins support for all LSX (128-bits SIMD) and LASX (256-bits SIMD) "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:1280
msgid ""
"Added builtins support for approximate calculation instructions that were "
"introduced in LoongArch Reference Manual V1.10."
msgstr ""

#: ../../../ReleaseNotes.rst:1282
msgid ""
"Made ``-mcmodel=`` compatible with LoongArch gcc that accepted ``normal``, "
"``medium`` and ``extreme``."
msgstr ""

#: ../../../ReleaseNotes.rst:1284
msgid ""
"The ``model`` attribute was now supported for overriding the default code "
"model used to access global variables. The following values were supported: "
"``normal``, ``medium`` and ``extreme``."
msgstr ""

#: ../../../ReleaseNotes.rst:1294
msgid "Default to ``-fno-direct-access-external-data`` for non-PIC."
msgstr ""

#: ../../../ReleaseNotes.rst:1295
msgid ""
"An ABI mismatch with gcc/g++ about empty structs/unions passing was fixed."
msgstr ""

#: ../../../ReleaseNotes.rst:1296
msgid "``_mcount`` was generated instead of ``mcount``."
msgstr ""

#: ../../../ReleaseNotes.rst:1299
msgid "RISC-V Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1300
msgid ""
"Unaligned memory accesses can be toggled by ``-m[no-]unaligned-access`` or "
"the aliases ``-m[no-]strict-align``."
msgstr ""

#: ../../../ReleaseNotes.rst:1302
msgid "CodeGen of RV32E/RV64E was supported experimentally."
msgstr ""

#: ../../../ReleaseNotes.rst:1303
msgid "CodeGen of ilp32e/lp64e was supported experimentally."
msgstr ""

#: ../../../ReleaseNotes.rst:1305
msgid ""
"Default ABI with F but without D was changed to ilp32f for RV32 and to lp64f "
"for RV64."
msgstr ""

#: ../../../ReleaseNotes.rst:1308
msgid ""
"``__attribute__((rvv_vector_bits(N)))`` is now supported for RVV vbool*_t "
"types."
msgstr ""

#: ../../../ReleaseNotes.rst:1309
msgid ""
"``-mtls-dialect=desc`` is now supported to enable TLS descriptors (TLSDESC)."
msgstr ""

#: ../../../ReleaseNotes.rst:1312
msgid "CUDA/HIP Language Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1315
msgid "CUDA Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1317
msgid "Clang now supports CUDA SDK up to 12.3"
msgstr ""

#: ../../../ReleaseNotes.rst:1318
msgid "Added support for sm_90a"
msgstr ""

#: ../../../ReleaseNotes.rst:1321
msgid "PowerPC Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1323
msgid "Added ``nmmintrin.h`` to intrinsics headers."
msgstr ""

#: ../../../ReleaseNotes.rst:1324
msgid ""
"Added ``__builtin_ppc_fence`` as barrier of code motion, and "
"``__builtin_ppc_mffsl`` for corresponding instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:1326
msgid "Supported ``__attribute__((target(\"tune=cpu\")))``."
msgstr ""

#: ../../../ReleaseNotes.rst:1327
msgid ""
"Emit ``float-abi`` module flag on 64-bit ELFv2 PowerPC targets if ``long "
"double`` type is used in current module."
msgstr ""

#: ../../../ReleaseNotes.rst:1331
msgid "AIX Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1333
msgid ""
"Introduced the ``-maix-small-local-exec-tls`` option to produce a faster "
"access sequence for local-exec TLS variables where the offset from the TLS "
"base is encoded as an immediate operand. This access sequence is not used "
"for TLS variables larger than 32KB, and is currently only supported on 64-"
"bit mode."
msgstr ""

#: ../../../ReleaseNotes.rst:1338
msgid "Inline assembler supports VSR register in pure digits."
msgstr ""

#: ../../../ReleaseNotes.rst:1339
msgid ""
"Enabled ThinLTO support. Requires AIX 7.2 TL5 SP7 or newer, or AIX 7.3 TL2 "
"or newer. Similar to the LTO support on AIX, ThinLTO is implemented with the "
"libLTO.so plugin."
msgstr ""

#: ../../../ReleaseNotes.rst:1344
msgid "SystemZ Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1345
msgid ""
"Properly support 16 byte atomic int/fp types and ops. Atomic __int128 (and "
"long double) variables are now aligned to 16 bytes by default (like gcc 14)."
msgstr ""

#: ../../../ReleaseNotes.rst:1349
msgid "WebAssembly Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1352
msgid "AVR Support"
msgstr ""

#: ../../../ReleaseNotes.rst:1355
msgid "DWARF Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1358
msgid "Floating Point Support in Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:1359
msgid ""
"Add ``__builtin_elementwise_log`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1360
msgid ""
"Add ``__builtin_elementwise_log10`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1361
msgid ""
"Add ``__builtin_elementwise_log2`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1362
msgid ""
"Add ``__builtin_elementwise_exp`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1363
msgid ""
"Add ``__builtin_elementwise_exp2`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1364
msgid ""
"Add ``__builtin_set_flt_rounds`` builtin for X86, x86_64, Arm and AArch64 "
"only."
msgstr ""

#: ../../../ReleaseNotes.rst:1365
msgid ""
"Add ``__builtin_elementwise_pow`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1366
msgid ""
"Add ``__builtin_elementwise_bitreverse`` builtin for integer types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1367
msgid ""
"Add ``__builtin_elementwise_sqrt`` builtin for floating point types only."
msgstr ""

#: ../../../ReleaseNotes.rst:1368
msgid "``__builtin_isfpclass`` builtin now supports vector types."
msgstr ""

#: ../../../ReleaseNotes.rst:1369
msgid ""
"``#pragma float_control(precise,on)`` enables precise floating-point "
"semantics. If ``math-errno`` is disabled in the current TU, clang will re-"
"enable ``math-errno`` in the presense of ``#pragma float_control(precise,"
"on)``."
msgstr ""

#: ../../../ReleaseNotes.rst:1373
msgid ""
"Add ``__builtin_exp10``, ``__builtin_exp10f``, ``__builtin_exp10f16``, "
"``__builtin_exp10l`` and ``__builtin_exp10f128`` builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:1376
msgid ""
"Add ``__builtin_iszero``, ``__builtin_issignaling`` and "
"``__builtin_issubnormal``."
msgstr ""

#: ../../../ReleaseNotes.rst:1378
msgid ""
"Add support for C99's ``#pragma STDC CX_LIMITED_RANGE`` feature.  This "
"enables the naive mathematical formulas for complex multiplication and "
"division, which are faster but do not correctly handle overflow and "
"infinities."
msgstr ""

#: ../../../ReleaseNotes.rst:1383
msgid "AST Matchers"
msgstr ""

#: ../../../ReleaseNotes.rst:1384
msgid "Add ``convertVectorExpr``."
msgstr ""

#: ../../../ReleaseNotes.rst:1385
msgid "Add ``dependentSizedExtVectorType``."
msgstr ""

#: ../../../ReleaseNotes.rst:1386
msgid "Add ``macroQualifiedType``."
msgstr ""

#: ../../../ReleaseNotes.rst:1387
msgid ""
"Add ``CXXFoldExpr`` related matchers: ``cxxFoldExpr``, ``callee``, "
"``hasInit``, ``hasPattern``, ``isRightFold``, ``isLeftFold``, "
"``isUnaryFold``, ``isBinaryFold``, ``hasOperator``, ``hasLHS``, ``hasRHS``, "
"``hasEitherOperand``."
msgstr ""

#: ../../../ReleaseNotes.rst:1392
msgid "clang-format"
msgstr ""

#: ../../../ReleaseNotes.rst:1393
msgid "Add ``AllowBreakBeforeNoexceptSpecifier`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1394
msgid "Add ``AllowShortCompoundRequirementOnASingleLine`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1395
msgid ""
"Change ``BreakAfterAttributes`` from ``Never`` to ``Leave`` in LLVM style."
msgstr ""

#: ../../../ReleaseNotes.rst:1396
msgid "Add ``BreakAdjacentStringLiterals`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1397
msgid ""
"Add ``ObjCPropertyAttributeOrder`` which can be used to sort ObjC property "
"attributes (like ``nonatomic, strong, nullable``)."
msgstr ""

#: ../../../ReleaseNotes.rst:1399
msgid "Add ``PenaltyBreakScopeResolution`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1400
msgid "Add ``.clang-format-ignore`` files."
msgstr ""

#: ../../../ReleaseNotes.rst:1401
msgid ""
"Add ``AlignFunctionPointers`` sub-option for "
"``AlignConsecutiveDeclarations``."
msgstr ""

#: ../../../ReleaseNotes.rst:1402
msgid "Add ``SkipMacroDefinitionBody`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:1405
msgid "libclang"
msgstr ""

#: ../../../ReleaseNotes.rst:1407
msgid "Exposed arguments of ``clang::annotate``."
msgstr ""

#: ../../../ReleaseNotes.rst:1408
msgid ""
"``clang::getCursorKindForDecl`` now recognizes linkage specifications such "
"as ``extern \"C\"`` and reports them as ``CXCursor_LinkageSpec``."
msgstr ""

#: ../../../ReleaseNotes.rst:1410
msgid ""
"Changed the libclang library on AIX to export only the necessary symbols to "
"prevent issues of resolving to the wrong duplicate symbol."
msgstr ""

#: ../../../ReleaseNotes.rst:1414
msgid "Static Analyzer"
msgstr ""

#: ../../../ReleaseNotes.rst:1417
msgid "New features"
msgstr ""

#: ../../../ReleaseNotes.rst:1419
msgid ""
"Implemented the ``[[clang::suppress]]`` attribute for suppressing "
"diagnostics of static analysis tools, such as the Clang Static Analyzer. "
"`Documentation <https://clang.llvm.org/docs/AttributeReference."
"html#suppress>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1423
msgid ""
"Support \"Deducing this\" (P0847R7). (Worked out of the box) (`af4751738db8 "
"<https://github.com/llvm/llvm-project/commit/"
"af4751738db89a142a8880c782d12d4201b222a8>`__)"
msgstr ""

#: ../../../ReleaseNotes.rst:1426
msgid ""
"Added a new checker ``core.BitwiseShift`` which reports situations where "
"bitwise shift operators produce undefined behavior (because some operand is "
"negative or too large). `Documentation <https://clang.llvm.org/docs/analyzer/"
"checkers.html#core-bitwiseshift-c-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1431
msgid ""
"Added a new experimental checker ``alpha.core.StdVariant`` to detect variant "
"accesses via wrong alternatives. `Documentation <https://clang.llvm.org/docs/"
"analyzer/checkers.html#alpha-core-stdvariant-c>`__. (`#66481 <https://github."
"com/llvm/llvm-project/pull/66481>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1436
msgid ""
"Added a new experimental checker ``alpha.cplusplus.ArrayDelete`` to detect "
"destructions of arrays of polymorphic objects that are destructed as their "
"base class (`CERT EXP51-CPP <https://wiki.sei.cmu.edu/confluence/display/"
"cplusplus/EXP51-CPP."
"+Do+not+delete+an+array+through+a+pointer+of+the+incorrect+type>`_). "
"`Documentation <https://clang.llvm.org/docs/analyzer/checkers.html#alpha-"
"cplusplus-arraydelete-c>`__. (`0e246bb67573 <https://github.com/llvm/llvm-"
"project/commit/0e246bb67573799409d0085b89902a330998ddcc>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1442
msgid ""
"Added a new checker configuration option ``InvalidatingGetEnv=[true,false]`` "
"to ``security.cert.env.InvalidPtr``. It's not set by default. If set, "
"``getenv`` calls won't invalidate previously returned pointers. "
"`Documentation <https://clang.llvm.org/docs/analyzer/checkers.html#security-"
"cert-env-invalidptr>`__. (`#67663 <https://github.com/llvm/llvm-project/"
"pull/67663>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1449
msgid "Crash and bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:1451
msgid ""
"Fixed a crash caused by ``builtin_bit_cast``. (`#69922 <https://github.com/"
"llvm/llvm-project/issues/69922>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1454
msgid ""
"Fixed a ``core.StackAddressEscape`` crash on temporary object fields. "
"(`#66221 <https://github.com/llvm/llvm-project/issues/66221>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1457
msgid ""
"A few crashes have been found and fixed using randomized testing related to "
"the use of ``_BitInt()`` in tidy checks and in clang analysis. (`#67212 "
"<https://github.com/llvm/llvm-project/pull/67212>`_, `#66782 <https://github."
"com/llvm/llvm-project/pull/66782>`_, `#65889 <https://github.com/llvm/llvm-"
"project/pull/65889>`_, `#65888 <https://github.com/llvm/llvm-project/"
"pull/65888>`_, `#65887 <https://github.com/llvm/llvm-project/pull/65887>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1465
msgid ""
"Fixed note links of the HTML output. (`#64054 <https://github.com/llvm/llvm-"
"project/issues/64054>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1468
msgid ""
"Allow widening rage-based for loops. (`#70190 <https://github.com/llvm/llvm-"
"project/pull/70190>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1471
msgid ""
"Fixed uninitialized base class with initializer list when ctor is not "
"declared in the base class. (`#70464 <https://github.com/llvm/llvm-project/"
"issues/70464>`_, `#59493 <https://github.com/llvm/llvm-project/"
"issues/59493>`_, `#54533 <https://github.com/llvm/llvm-project/"
"issues/54533>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1477
msgid ""
"Fixed an ``alpha.unix.cstring`` crash on variadic functions. (`#74269 "
"<https://github.com/llvm/llvm-project/issues/74269>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1480
msgid ""
"Fix false positive in mutation check when using pointer to member function. "
"(`#66204 <https://github.com/llvm/llvm-project/issues/66204>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1483
msgid ""
"Fixed a crash in ``security.cert.env.InvalidPtr`` checker when accidentally "
"matched user-defined ``strerror`` and similar library functions. (`#88181 "
"<https://github.com/llvm/llvm-project/issues/88181>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1488
msgid "Improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:1490
msgid ""
"Improved the ``unix.StdCLibraryFunctions`` checker by modeling more "
"functions like ``send``, ``recv``, ``readlink``, ``fflush``, ``mkdtemp``, "
"``getcwd`` and ``errno`` behavior. (`52ac71f92d38 <https://github.com/llvm/"
"llvm-project/commit/52ac71f92d38f75df5cb88e9c090ac5fd5a71548>`_, `#77040 "
"<https://github.com/llvm/llvm-project/pull/77040>`_, `#76671 <https://github."
"com/llvm/llvm-project/pull/76671>`_, `#71373 <https://github.com/llvm/llvm-"
"project/pull/71373>`_, `#76557 <https://github.com/llvm/llvm-project/"
"pull/76557>`_, `#71392 <https://github.com/llvm/llvm-project/pull/71392>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1500
msgid ""
"Fixed a false negative for when accessing a nonnull property (ObjC). "
"(`1dceba3a3684 <https://github.com/llvm/llvm-project/"
"commit/1dceba3a3684d12394731e09a6cf3efcebf07a3a>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1503
msgid ""
"``security.insecureAPI.DeprecatedOrUnsafeBufferHandling`` now considers "
"``fprintf`` calls unsafe. `Documentation <https://clang.llvm.org/docs/"
"analyzer/checkers.html#security-insecureapi-deprecatedorunsafebufferhandling-"
"c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1507
msgid ""
"Improved the diagnostics of the ``optin.core.EnumCastOutOfRange`` checker. "
"It will display the name and the declaration of the enumeration along with "
"the concrete value being cast to the enum. (`#74503 <https://github.com/llvm/"
"llvm-project/pull/74503>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1512
msgid ""
"Improved the ``alpha.security.ArrayBoundV2`` checker for detecting buffer "
"accesses prior the buffer; and also reworked the diagnostic messages. "
"(`3e014038b373 <https://github.com/llvm/llvm-project/"
"commit/3e014038b373e5a4a96d89d46cea17e4d2456a04>`_, `#70056 <https://github."
"com/llvm/llvm-project/pull/70056>`_, `#72107 <https://github.com/llvm/llvm-"
"project/pull/72107>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1518
msgid ""
"Improved the ``alpha.unix.cstring.OutOfBounds`` checking both ends of the "
"buffers in more cases. (`c3a87ddad62a <https://github.com/llvm/llvm-project/"
"commit/c3a87ddad62a6cc01acaccc76592bc6730c8ac3c>`_, `0954dc3fb921 <https://"
"github.com/llvm/llvm-project/"
"commit/0954dc3fb9214b994623f5306473de075f8e3593>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1523
msgid ""
"Improved the ``alpha.unix.Stream`` checker by modeling more functions "
"``fputs``, ``fputc``, ``fgets``, ``fgetc``, ``fdopen``, ``ungetc``, "
"``fflush``, ``getdelim``, ``getline`` and no not recognize alternative "
"``fopen`` and ``tmpfile`` implementations. (`#78693 <https://github.com/llvm/"
"llvm-project/pull/78693>`_, `#76776 <https://github.com/llvm/llvm-project/"
"pull/76776>`_, `#74296 <https://github.com/llvm/llvm-project/pull/74296>`_, "
"`#73335 <https://github.com/llvm/llvm-project/pull/73335>`_, `#72627 "
"<https://github.com/llvm/llvm-project/pull/72627>`_, `#71518 <https://github."
"com/llvm/llvm-project/pull/71518>`_, `#72016 <https://github.com/llvm/llvm-"
"project/pull/72016>`_, `#70540 <https://github.com/llvm/llvm-project/"
"pull/70540>`_, `#73638 <https://github.com/llvm/llvm-project/pull/73638>`_, "
"`#77331 <https://github.com/llvm/llvm-project/pull/77331>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1538
msgid ""
"The ``alpha.security.taint.TaintPropagation`` checker no longer propagates "
"taint on ``strlen`` and ``strnlen`` calls, unless these are marked "
"explicitly propagators in the user-provided taint configuration file. This "
"removal empirically reduces the number of false positive reports. Read the "
"PR for the details. (`#66086 <https://github.com/llvm/llvm-project/"
"pull/66086>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1545
msgid ""
"Other taint-related improvements. (`#66358 <https://github.com/llvm/llvm-"
"project/pull/66358>`_, `#66074 <https://github.com/llvm/llvm-project/"
"pull/66074>`_, `#66358 <https://github.com/llvm/llvm-project/pull/66358>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1550
msgid ""
"Checkers can query constraint bounds to improve diagnostic messages. "
"(`#74141 <https://github.com/llvm/llvm-project/pull/74141>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1553
msgid ""
"Improved the generated initializers for modules. Now the calls to initialize "
"functions from imported module units can be omitted if the initialize "
"function is known to be empty. (`#56794 <https://github.com/llvm/llvm-"
"project/issues/56794>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1558
msgid ""
"Clang now allow to export declarations within linkage-specification. "
"(`#71347 <https://github.com/llvm/llvm-project/issues/71347>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:1562
msgid "Moved checkers"
msgstr ""

#: ../../../ReleaseNotes.rst:1564
msgid ""
"Move checker ``alpha.unix.Errno`` out of the ``alpha`` package to ``unix."
"Errno``. `Documentation <https://clang.llvm.org/docs/analyzer/checkers."
"html#unix-errno-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1568
msgid ""
"Move checker ``alpha.unix.StdCLibraryFunctions`` out of the ``alpha`` "
"package to ``unix.StdCLibraryFunctions``. `Documentation <https://clang.llvm."
"org/docs/analyzer/checkers.html#unix-stdclibraryfunctions-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1572
msgid ""
"Move checker ``alpha.security.cert.env.InvalidPtr`` out of the ``alpha`` "
"package to ``security.cert.env.InvalidPtr``. `Documentation <https://clang."
"llvm.org/docs/analyzer/checkers.html#security-cert-env-invalidptr>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1576
msgid ""
"Move checker ``alpha.cplusplus.EnumCastOutOfRange`` out of the ``alpha`` "
"package to ``optin.core.EnumCastOutOfRange``. `Documentation <https://clang."
"llvm.org/docs/analyzer/checkers.html#optin-core-enumcastoutofrange-c-c>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:1583
msgid "Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:1585
msgid ""
"``-fsanitize=signed-integer-overflow`` now instruments ``__builtin_abs`` and "
"``abs`` builtins."
msgstr ""

#: ../../../ReleaseNotes.rst:1589
msgid "Python Binding Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:1592
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:1594
msgid ""
"A wide variety of additional information is available on the `Clang web page "
"<https://clang.llvm.org/>`_. The web page contains versions of the API "
"documentation which are up-to-date with the Git version of the source code. "
"You can access versions of these documents specific to this release by going "
"into the \"``clang/docs/``\" directory in the Clang tree."
msgstr ""

#: ../../../ReleaseNotes.rst:1601
msgid ""
"If you have any questions or comments about Clang, please feel free to "
"contact us on the `Discourse forums (Clang Frontend category) <https://"
"discourse.llvm.org/c/clang/6>`_."
msgstr ""
