# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangFormatStyleOptions.rst:7
msgid ""
"<style type=\"text/css\">\n"
"  .versionbadge { background-color: #1c913d; height: 20px; display: inline-"
"block; min-width: 120px; text-align: center; border-radius: 5px; color: "
"#FFFFFF; font-family: \"Verdana,Geneva,DejaVu Sans,sans-serif\"; }\n"
"</style>"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:17
msgid "Clang-Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:19
msgid ""
":doc:`ClangFormatStyleOptions` describes configurable formatting style "
"options supported by :doc:`LibFormat` and :doc:`ClangFormat`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:22
msgid ""
"When using :program:`clang-format` command line utility or ``clang::format::"
"reformat(...)`` functions from code, one can either use one of the "
"predefined styles (LLVM, Google, Chromium, Mozilla, WebKit, Microsoft) or "
"create a custom style by configuring specific style options."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:29
msgid "Configuring Style with clang-format"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:31
msgid ""
":program:`clang-format` supports two ways to provide custom style options: "
"directly specify style configuration in the ``-style=`` command line option "
"or use ``-style=file`` and put style configuration in the ``.clang-format`` "
"or ``_clang-format`` file in the project directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:36
msgid ""
"When using ``-style=file``, :program:`clang-format` for each input file will "
"try to find the ``.clang-format`` file located in the closest parent "
"directory of the input file. When the standard input is used, the search is "
"started from the current directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:41
msgid ""
"When using ``-style=file:<format_file_path>``, :program:`clang-format` for "
"each input file will use the format file located at `<format_file_path>`. "
"The path may be absolute or relative to the working directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:45
msgid "The ``.clang-format`` file uses YAML format:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:54
msgid ""
"The configuration file can consist of several sections each having different "
"``Language:`` parameter denoting the programming language this section of "
"the configuration is targeted at. See the description of the **Language** "
"option below for the list of supported languages. The first section may have "
"no language set, it will set the default style options for all languages. "
"Configuration sections for specific language will override options set in "
"the default section."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:62
msgid ""
"When :program:`clang-format` formats a file, it auto-detects the language "
"using the file name. When formatting standard input or a file that doesn't "
"have the extension corresponding to its language, ``-assume-filename=`` "
"option can be used to override the file name :program:`clang-format` uses to "
"detect the language."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:68
msgid "An example of a configuration file for multiple languages:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:95
msgid ""
"An easy way to get a valid ``.clang-format`` file containing all "
"configuration options of a certain predefined style is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:102
msgid ""
"When specifying configuration in the ``-style=`` option, the same "
"configuration is applied for all input files. The format of the "
"configuration is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:111
msgid "Disabling Formatting on a Piece of Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:113
msgid ""
"Clang-format understands also special comments that switch formatting in a "
"delimited range. The code between a comment ``// clang-format off`` or ``/* "
"clang-format off */`` up to a comment ``// clang-format on`` or ``/* clang-"
"format on */`` will not be formatted. The comments themselves will be "
"formatted (aligned) normally. Also, a colon (``:``) and additional text may "
"follow ``// clang-format off`` or ``// clang-format on`` to explain why "
"clang-format is turned off or back on."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:131
msgid "Configuring Style in Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:133
msgid ""
"When using ``clang::format::reformat(...)`` functions, the format is "
"specified by supplying the `clang::format::FormatStyle <https://clang.llvm."
"org/doxygen/structclang_1_1format_1_1FormatStyle.html>`_ structure."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:140
msgid "Configurable Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:142
msgid ""
"This section lists the supported style options. Value type is specified for "
"each option. For enumeration types possible values are specified both as a C+"
"+ enumeration member (with a prefix, e.g. ``LS_Auto``), and as a value "
"usable in the configuration (without a prefix: ``Auto``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:186
msgid "**BasedOnStyle** (``String``) :ref:`Â¶ <BasedOnStyle>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:150
msgid ""
"The style used for all options not specifically set in the configuration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:152
msgid ""
"This option is supported only in the :program:`clang-format` configuration "
"(both within ``-style='{...}'`` and the ``.clang-format`` file)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:155
#: ../../../ClangFormatStyleOptions.rst:203
#: ../../../ClangFormatStyleOptions.rst:261
#: ../../../ClangFormatStyleOptions.rst:963
#: ../../../ClangFormatStyleOptions.rst:1006
#: ../../../ClangFormatStyleOptions.rst:1076
#: ../../../ClangFormatStyleOptions.rst:1188
#: ../../../ClangFormatStyleOptions.rst:1237
#: ../../../ClangFormatStyleOptions.rst:1329
#: ../../../ClangFormatStyleOptions.rst:1390
#: ../../../ClangFormatStyleOptions.rst:1471
#: ../../../ClangFormatStyleOptions.rst:1518
#: ../../../ClangFormatStyleOptions.rst:1537
#: ../../../ClangFormatStyleOptions.rst:1639
#: ../../../ClangFormatStyleOptions.rst:1745
#: ../../../ClangFormatStyleOptions.rst:1838
#: ../../../ClangFormatStyleOptions.rst:2140
#: ../../../ClangFormatStyleOptions.rst:2265
#: ../../../ClangFormatStyleOptions.rst:2316
#: ../../../ClangFormatStyleOptions.rst:2769
#: ../../../ClangFormatStyleOptions.rst:2799
#: ../../../ClangFormatStyleOptions.rst:2852
#: ../../../ClangFormatStyleOptions.rst:2889
#: ../../../ClangFormatStyleOptions.rst:3104
#: ../../../ClangFormatStyleOptions.rst:3157
#: ../../../ClangFormatStyleOptions.rst:3309
#: ../../../ClangFormatStyleOptions.rst:3512
#: ../../../ClangFormatStyleOptions.rst:3579
#: ../../../ClangFormatStyleOptions.rst:3732
#: ../../../ClangFormatStyleOptions.rst:3871
#: ../../../ClangFormatStyleOptions.rst:3943
#: ../../../ClangFormatStyleOptions.rst:3978
#: ../../../ClangFormatStyleOptions.rst:4024
#: ../../../ClangFormatStyleOptions.rst:4140
#: ../../../ClangFormatStyleOptions.rst:4230
#: ../../../ClangFormatStyleOptions.rst:4342
#: ../../../ClangFormatStyleOptions.rst:4471
#: ../../../ClangFormatStyleOptions.rst:4509
#: ../../../ClangFormatStyleOptions.rst:4628
#: ../../../ClangFormatStyleOptions.rst:4745
#: ../../../ClangFormatStyleOptions.rst:4801
#: ../../../ClangFormatStyleOptions.rst:4889
#: ../../../ClangFormatStyleOptions.rst:4965
#: ../../../ClangFormatStyleOptions.rst:5012
#: ../../../ClangFormatStyleOptions.rst:5056
#: ../../../ClangFormatStyleOptions.rst:5083
#: ../../../ClangFormatStyleOptions.rst:5164
#: ../../../ClangFormatStyleOptions.rst:5277
#: ../../../ClangFormatStyleOptions.rst:5530
#: ../../../ClangFormatStyleOptions.rst:5634
#: ../../../ClangFormatStyleOptions.rst:5750
#: ../../../ClangFormatStyleOptions.rst:5853
msgid "Possible values:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:157
msgid ""
"``LLVM`` A style complying with the `LLVM coding standards <https://llvm.org/"
"docs/CodingStandards.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:160
msgid ""
"``Google`` A style complying with `Google's C++ style guide <https://google."
"github.io/styleguide/cppguide.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:163
msgid ""
"``Chromium`` A style complying with `Chromium's style guide <https://"
"chromium.googlesource.com/chromium/src/+/refs/heads/main/styleguide/"
"styleguide.md>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:166
msgid ""
"``Mozilla`` A style complying with `Mozilla's style guide <https://firefox-"
"source-docs.mozilla.org/code-quality/coding-style/index.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:169
msgid ""
"``WebKit`` A style complying with `WebKit's style guide <https://www.webkit."
"org/coding/coding-style.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:172
msgid ""
"``Microsoft`` A style complying with `Microsoft's style guide <https://docs."
"microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-"
"reference>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:175
msgid ""
"``GNU`` A style complying with the `GNU coding standards <https://www.gnu."
"org/prep/standards/standards.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:178
msgid ""
"``InheritParentConfig`` Not a real style, but allows to use the ``.clang-"
"format`` file from the parent directory (or its parent if there is none). If "
"there is no parent file found it falls back to the ``fallback`` style, and "
"applies the changes to that."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:184
msgid ""
"With this option you can overwrite some parts of your main style for your "
"subdirectories. This is also possible through the command line, e.g.: ``--"
"style={BasedOnStyle: InheritParentConfig, ColumnLimit: 20}``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:193
msgid ""
"**AccessModifierOffset** (``Integer``) :versionbadge:`clang-format 3.3` :ref:"
"`Â¶ <AccessModifierOffset>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:193
msgid "The extra indent or outdent of access modifiers, e.g. ``public:``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:247
msgid ""
"**AlignAfterOpenBracket** (``BracketAlignmentStyle``) :versionbadge:`clang-"
"format 3.8` :ref:`Â¶ <AlignAfterOpenBracket>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:198
msgid "If ``true``, horizontally aligns arguments after an open bracket."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:200
msgid ""
"This applies to round brackets (parentheses), angle brackets and square "
"brackets."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:205
msgid ""
"``BAS_Align`` (in configuration: ``Align``) Align parameters on the open "
"bracket, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:213
msgid ""
"``BAS_DontAlign`` (in configuration: ``DontAlign``) Don't align, instead use "
"``ContinuationIndentWidth``, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:221
msgid ""
"``BAS_AlwaysBreak`` (in configuration: ``AlwaysBreak``) Always break after "
"an open bracket, if the parameters don't fit on a single line, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:230
msgid ""
"``BAS_BlockIndent`` (in configuration: ``BlockIndent``) Always break after "
"an open bracket, if the parameters don't fit on a single line. Closing "
"brackets will be placed on a new line. E.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:244
msgid ""
"This currently only applies to braced initializer lists (when "
"``Cpp11BracedListStyle`` is ``true``) and parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:290
msgid ""
"**AlignArrayOfStructures** (``ArrayInitializerAlignmentStyle``) :"
"versionbadge:`clang-format 13` :ref:`Â¶ <AlignArrayOfStructures>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:252
msgid ""
"if not ``None``, when using initialization for an array of structs aligns "
"the fields into columns."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:258
msgid ""
"As of clang-format 15 this option only applied to arrays with equal number "
"of columns per row."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:263
msgid ""
"``AIAS_Left`` (in configuration: ``Left``) Align array column and left "
"justify the columns e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:275
msgid ""
"``AIAS_Right`` (in configuration: ``Right``) Align array column and right "
"justify the columns e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:287
msgid ""
"``AIAS_None`` (in configuration: ``None``) Don't align array initializer "
"columns."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:431
msgid ""
"**AlignConsecutiveAssignments** (``AlignConsecutiveStyle``) :versionbadge:"
"`clang-format 3.8` :ref:`Â¶ <AlignConsecutiveAssignments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:295
msgid "Style of aligning consecutive assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:297
#: ../../../ClangFormatStyleOptions.rst:722
msgid "``Consecutive`` will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:305
#: ../../../ClangFormatStyleOptions.rst:447
#: ../../../ClangFormatStyleOptions.rst:589
#: ../../../ClangFormatStyleOptions.rst:732
#: ../../../ClangFormatStyleOptions.rst:876
#: ../../../ClangFormatStyleOptions.rst:1069
#: ../../../ClangFormatStyleOptions.rst:1796
#: ../../../ClangFormatStyleOptions.rst:3752
#: ../../../ClangFormatStyleOptions.rst:5361
#: ../../../ClangFormatStyleOptions.rst:5619
#: ../../../ClangFormatStyleOptions.rst:5670
msgid "Nested configuration flags:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:307
#: ../../../ClangFormatStyleOptions.rst:449
#: ../../../ClangFormatStyleOptions.rst:591
#: ../../../ClangFormatStyleOptions.rst:734
#: ../../../ClangFormatStyleOptions.rst:878
msgid "Alignment options."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:309
#: ../../../ClangFormatStyleOptions.rst:451
#: ../../../ClangFormatStyleOptions.rst:593
#: ../../../ClangFormatStyleOptions.rst:736
msgid ""
"They can also be read as a whole for compatibility. The choices are: - None "
"- Consecutive - AcrossEmptyLines - AcrossComments - "
"AcrossEmptyLinesAndComments"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:316
#: ../../../ClangFormatStyleOptions.rst:458
#: ../../../ClangFormatStyleOptions.rst:600
#: ../../../ClangFormatStyleOptions.rst:743
msgid ""
"For example, to align across empty lines and not across comments, either of "
"these work."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:328
#: ../../../ClangFormatStyleOptions.rst:470
#: ../../../ClangFormatStyleOptions.rst:612
#: ../../../ClangFormatStyleOptions.rst:755
#: ../../../ClangFormatStyleOptions.rst:880
msgid "``bool Enabled`` Whether aligning is enabled."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:350
#: ../../../ClangFormatStyleOptions.rst:492
#: ../../../ClangFormatStyleOptions.rst:634
#: ../../../ClangFormatStyleOptions.rst:777
#: ../../../ClangFormatStyleOptions.rst:898
msgid "``bool AcrossEmptyLines`` Whether to align across empty lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:368
#: ../../../ClangFormatStyleOptions.rst:510
#: ../../../ClangFormatStyleOptions.rst:652
#: ../../../ClangFormatStyleOptions.rst:795
#: ../../../ClangFormatStyleOptions.rst:918
msgid "``bool AcrossComments`` Whether to align across comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:382
#: ../../../ClangFormatStyleOptions.rst:524
#: ../../../ClangFormatStyleOptions.rst:666
#: ../../../ClangFormatStyleOptions.rst:809
msgid ""
"``bool AlignCompound`` Only for ``AlignConsecutiveAssignments``.  Whether "
"compound assignments like ``+=`` are aligned along with ``=``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:395
#: ../../../ClangFormatStyleOptions.rst:537
#: ../../../ClangFormatStyleOptions.rst:679
#: ../../../ClangFormatStyleOptions.rst:822
msgid ""
"``bool AlignFunctionPointers`` Only for ``AlignConsecutiveDeclarations``. "
"Whether function pointers are aligned."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:412
#: ../../../ClangFormatStyleOptions.rst:554
#: ../../../ClangFormatStyleOptions.rst:696
#: ../../../ClangFormatStyleOptions.rst:839
msgid ""
"``bool PadOperators`` Only for ``AlignConsecutiveAssignments``.  Whether "
"short assignment operators are left-padded to the same length as long ones "
"in order to put all assignment operators to the right of the left hand side."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:573
msgid ""
"**AlignConsecutiveBitFields** (``AlignConsecutiveStyle``) :versionbadge:"
"`clang-format 11` :ref:`Â¶ <AlignConsecutiveBitFields>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:436
msgid "Style of aligning consecutive bit fields."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:438
msgid ""
"``Consecutive`` will align the bitfield separators of consecutive lines. "
"This will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:715
msgid ""
"**AlignConsecutiveDeclarations** (``AlignConsecutiveStyle``) :versionbadge:"
"`clang-format 3.8` :ref:`Â¶ <AlignConsecutiveDeclarations>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:578
msgid "Style of aligning consecutive declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:580
msgid ""
"``Consecutive`` will align the declaration names of consecutive lines. This "
"will result in formattings like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:858
msgid ""
"**AlignConsecutiveMacros** (``AlignConsecutiveStyle``) :versionbadge:`clang-"
"format 9` :ref:`Â¶ <AlignConsecutiveMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:720
msgid "Style of aligning consecutive macro definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:956
msgid ""
"**AlignConsecutiveShortCaseStatements** "
"(``ShortCaseStatementsAlignmentStyle``) :versionbadge:`clang-format 17` :ref:"
"`Â¶ <AlignConsecutiveShortCaseStatements>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:863
msgid ""
"Style of aligning consecutive short case labels. Only applies if "
"``AllowShortCaseLabelsOnASingleLine`` is ``true``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:938
msgid ""
"``bool AlignCaseColons`` Whether aligned case labels are aligned on the "
"colon, or on the , or on the tokens after the colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:998
msgid ""
"**AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``) :versionbadge:"
"`clang-format 5` :ref:`Â¶ <AlignEscapedNewlines>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:961
msgid "Options for aligning backslashes in escaped newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:965
msgid ""
"``ENAS_DontAlign`` (in configuration: ``DontAlign``) Don't align escaped "
"newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:975
msgid ""
"``ENAS_Left`` (in configuration: ``Left``) Align escaped newlines as far "
"left as possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:988
msgid ""
"``ENAS_Right`` (in configuration: ``Right``) Align escaped newlines in the "
"right-most column."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1044
msgid ""
"**AlignOperands** (``OperandAlignmentStyle``) :versionbadge:`clang-format "
"3.5` :ref:`Â¶ <AlignOperands>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1003
msgid ""
"If ``true``, horizontally align operands of binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1008
msgid ""
"``OAS_DontAlign`` (in configuration: ``DontAlign``) Do not align operands of "
"binary and ternary expressions. The wrapped lines are indented "
"``ContinuationIndentWidth`` spaces from the start of the line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1013
msgid ""
"``OAS_Align`` (in configuration: ``Align``) Horizontally align operands of "
"binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1016
msgid ""
"Specifically, this aligns operands of a single expression that needs to be "
"split over multiple lines, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1024
msgid ""
"When ``BreakBeforeBinaryOperators`` is set, the wrapped operator is aligned "
"with the operand on the first line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1032
msgid ""
"``OAS_AlignAfterOperator`` (in configuration: ``AlignAfterOperator``) "
"Horizontally align operands of binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1035
msgid ""
"This is similar to ``AO_Align``, except when ``BreakBeforeBinaryOperators`` "
"is set, the operator is un-indented so that the wrapped operand is aligned "
"with the operand on the first line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1136
msgid ""
"**AlignTrailingComments** (``TrailingCommentsAlignmentStyle``) :versionbadge:"
"`clang-format 3.7` :ref:`Â¶ <AlignTrailingComments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1049
msgid "Control of trailing comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1051
msgid ""
"The alignment stops at closing braces after a line break, and only followed "
"by other closing braces, a (``do-``) ``while``, a lambda call, or a "
"semicolon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1058
msgid ""
"As of clang-format 16 this option is not a bool but can be set to the "
"options. Conventional bool options still can be parsed as before."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1071
msgid "Alignment options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1073
msgid ""
"``TrailingCommentsAlignmentKinds Kind`` Specifies the way to align trailing "
"comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1078
msgid ""
"``TCAS_Leave`` (in configuration: ``Leave``) Leave trailing comments as they "
"are."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1089
msgid "``TCAS_Always`` (in configuration: ``Always``) Align trailing comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1100
msgid ""
"``TCAS_Never`` (in configuration: ``Never``) Don't align trailing comments "
"but other formatter applies."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1112
msgid ""
"``unsigned OverEmptyLines`` How many empty lines to apply alignment. When "
"both ``MaxEmptyLinesToKeep`` and ``OverEmptyLines`` are set to 2, it formats "
"like below."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1125
msgid ""
"When ``MaxEmptyLinesToKeep`` is set to 2 and ``OverEmptyLines`` is set to 1, "
"it formats like below."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1155
msgid ""
"**AllowAllArgumentsOnNextLine** (``Boolean``) :versionbadge:`clang-format "
"9` :ref:`Â¶ <AllowAllArgumentsOnNextLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1141
msgid ""
"If a function call or braced initializer list doesn't fit on a line, allow "
"putting all arguments onto the next line, even if ``BinPackArguments`` is "
"``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1161
msgid ""
"**AllowAllConstructorInitializersOnNextLine** (``Boolean``) :versionbadge:"
"`clang-format 9` :ref:`Â¶ <AllowAllConstructorInitializersOnNextLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1160
msgid ""
"This option is **deprecated**. See ``NextLine`` of "
"``PackConstructorInitializers``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1181
msgid ""
"**AllowAllParametersOfDeclarationOnNextLine** (``Boolean``) :versionbadge:"
"`clang-format 3.3` :ref:`Â¶ <AllowAllParametersOfDeclarationOnNextLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1166
msgid ""
"If the function declaration doesn't fit on a line, allow putting all "
"parameters of a function declaration onto the next line even if "
"``BinPackParameters`` is ``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1229
msgid ""
"**AllowBreakBeforeNoexceptSpecifier** "
"(``BreakBeforeNoexceptSpecifierStyle``) :versionbadge:`clang-format 18` :ref:"
"`Â¶ <AllowBreakBeforeNoexceptSpecifier>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1186
msgid ""
"Controls if there could be a line break before a ``noexcept`` specifier."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1190
msgid "``BBNSS_Never`` (in configuration: ``Never``) No line break allowed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1202
msgid ""
"``BBNSS_OnlyWithParen`` (in configuration: ``OnlyWithParen``) For a simple "
"``noexcept`` there is no line break allowed, but when we have a condition it "
"is."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1215
msgid ""
"``BBNSS_Always`` (in configuration: ``Always``) Line breaks are allowed. But "
"note that because of the associated penalties ``clang-format`` often prefers "
"not to break before the ``noexcept``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1268
msgid ""
"**AllowShortBlocksOnASingleLine** (``ShortBlockStyle``) :versionbadge:`clang-"
"format 3.5` :ref:`Â¶ <AllowShortBlocksOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1234
msgid ""
"Dependent on the value, ``while (true) { continue; }`` can be put on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1239
msgid ""
"``SBS_Never`` (in configuration: ``Never``) Never merge blocks into a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1250
msgid "``SBS_Empty`` (in configuration: ``Empty``) Only merge empty blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1260
msgid ""
"``SBS_Always`` (in configuration: ``Always``) Always merge short blocks into "
"a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1284
msgid ""
"**AllowShortCaseLabelsOnASingleLine** (``Boolean``) :versionbadge:`clang-"
"format 3.6` :ref:`Â¶ <AllowShortCaseLabelsOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1273
msgid "If ``true``, short case labels will be contracted to a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1305
msgid ""
"**AllowShortCompoundRequirementOnASingleLine** (``Boolean``) :versionbadge:"
"`clang-format 18` :ref:`Â¶ <AllowShortCompoundRequirementOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1289
msgid "Allow short compound requirement on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1321
msgid ""
"**AllowShortEnumsOnASingleLine** (``Boolean``) :versionbadge:`clang-format "
"11` :ref:`Â¶ <AllowShortEnumsOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1310
msgid "Allow short enums on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1383
msgid ""
"**AllowShortFunctionsOnASingleLine** (``ShortFunctionStyle``) :versionbadge:"
"`clang-format 3.5` :ref:`Â¶ <AllowShortFunctionsOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1326
msgid ""
"Dependent on the value, ``int f() { return 0; }`` can be put on a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1331
msgid ""
"``SFS_None`` (in configuration: ``None``) Never merge functions into a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1334
msgid ""
"``SFS_InlineOnly`` (in configuration: ``InlineOnly``) Only merge functions "
"defined inside a class. Same as \"inline\", except it does not implies "
"\"empty\": i.e. top level empty functions are not merged either."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1350
msgid "``SFS_Empty`` (in configuration: ``Empty``) Only merge empty functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1360
msgid ""
"``SFS_Inline`` (in configuration: ``Inline``) Only merge functions defined "
"inside a class. Implies \"empty\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1373
msgid ""
"``SFS_All`` (in configuration: ``All``) Merge all functions fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1463
msgid ""
"**AllowShortIfStatementsOnASingleLine** (``ShortIfStyle``) :versionbadge:"
"`clang-format 3.3` :ref:`Â¶ <AllowShortIfStatementsOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1388
msgid "Dependent on the value, ``if (a) return;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1392
msgid ""
"``SIS_Never`` (in configuration: ``Never``) Never put short ifs on the same "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1411
msgid ""
"``SIS_WithoutElse`` (in configuration: ``WithoutElse``) Put short ifs on the "
"same line only if there is no else statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1429
msgid ""
"``SIS_OnlyFirstIf`` (in configuration: ``OnlyFirstIf``) Put short ifs, but "
"not else ifs nor else statements, on the same line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1447
msgid ""
"``SIS_AllIfsAndElse`` (in configuration: ``AllIfsAndElse``) Always put short "
"ifs, else ifs and else statements on the same line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1504
msgid ""
"**AllowShortLambdasOnASingleLine** (``ShortLambdaStyle``) :versionbadge:"
"`clang-format 9` :ref:`Â¶ <AllowShortLambdasOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1468
msgid ""
"Dependent on the value, ``auto lambda []() { return 0; }`` can be put on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1473
msgid ""
"``SLS_None`` (in configuration: ``None``) Never merge lambdas into a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1476
msgid "``SLS_Empty`` (in configuration: ``Empty``) Only merge empty lambdas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1486
msgid ""
"``SLS_Inline`` (in configuration: ``Inline``) Merge lambda into a single "
"line if the lambda is argument of a function."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1496
msgid ""
"``SLS_All`` (in configuration: ``All``) Merge all lambdas fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1510
msgid ""
"**AllowShortLoopsOnASingleLine** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <AllowShortLoopsOnASingleLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1509
msgid "If ``true``, ``while (true) continue;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1530
msgid ""
"**AlwaysBreakAfterDefinitionReturnType** "
"(``DefinitionReturnTypeBreakingStyle``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <AlwaysBreakAfterDefinitionReturnType>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1515
msgid ""
"The function definition return type breaking style to use.  This option is "
"**deprecated** and is retained for backwards compatibility."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1520
msgid ""
"``DRTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1524
msgid ""
"``DRTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1527
msgid ""
"``DRTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1615
msgid ""
"**AlwaysBreakAfterReturnType** (``ReturnTypeBreakingStyle``) :versionbadge:"
"`clang-format 3.8` :ref:`Â¶ <AlwaysBreakAfterReturnType>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1535
msgid "The function declaration return type breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1539
msgid ""
"``RTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1551
msgid ""
"``RTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1569
msgid ""
"``RTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1584
msgid ""
"``RTBS_AllDefinitions`` (in configuration: ``AllDefinitions``) Always break "
"after the return type of function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1601
msgid ""
"``RTBS_TopLevelDefinitions`` (in configuration: ``TopLevelDefinitions``) "
"Always break after the return type of top-level definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1632
msgid ""
"**AlwaysBreakBeforeMultilineStrings** (``Boolean``) :versionbadge:`clang-"
"format 3.4` :ref:`Â¶ <AlwaysBreakBeforeMultilineStrings>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1620
msgid "If ``true``, always break before multiline string literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1622
msgid ""
"This flag is mean to make cases where there are multiple multiline strings "
"in a file look more consistent. Thus, it will only take effect if wrapping "
"the string at that point leads to it being indented "
"``ContinuationIndentWidth`` spaces from the start of the line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1679
msgid ""
"**AlwaysBreakTemplateDeclarations** (``BreakTemplateDeclarationsStyle``) :"
"versionbadge:`clang-format 3.4` :ref:`Â¶ <AlwaysBreakTemplateDeclarations>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1637
msgid "The template declaration breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1641
msgid ""
"``BTDS_No`` (in configuration: ``No``) Do not force break before "
"declaration. ``PenaltyBreakTemplateDeclaration`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1653
msgid ""
"``BTDS_MultiLine`` (in configuration: ``MultiLine``) Force break after "
"template declaration only when the following declaration spans multiple "
"lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1666
msgid ""
"``BTDS_Yes`` (in configuration: ``Yes``) Always break after template "
"declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1700
msgid ""
"**AttributeMacros** (``List of Strings``) :versionbadge:`clang-format 12` :"
"ref:`Â¶ <AttributeMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1684
msgid ""
"A vector of strings that should be interpreted as attributes/qualifiers "
"instead of identifiers. This can be useful for language extensions or static "
"analyzer annotations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1688
msgid "For example:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1696
#: ../../../ClangFormatStyleOptions.rst:3271
#: ../../../ClangFormatStyleOptions.rst:3294
#: ../../../ClangFormatStyleOptions.rst:5835
#: ../../../ClangFormatStyleOptions.rst:5903
msgid "In the .clang-format configuration file, this can be configured like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1721
msgid ""
"**BinPackArguments** (``Boolean``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<BinPackArguments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1705
msgid ""
"If ``false``, a function call's arguments will either be all on the same "
"line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1738
msgid ""
"**BinPackParameters** (``Boolean``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<BinPackParameters>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1726
msgid ""
"If ``false``, a function declaration's or function definition's parameters "
"will either all be on the same line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1777
msgid ""
"**BitFieldColonSpacing** (``BitFieldColonSpacingStyle``) :versionbadge:"
"`clang-format 12` :ref:`Â¶ <BitFieldColonSpacing>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1743
msgid "The BitFieldColonSpacingStyle to use for bitfields."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1747
msgid ""
"``BFCS_Both`` (in configuration: ``Both``) Add one space on each side of the "
"``:``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1754
msgid ""
"``BFCS_None`` (in configuration: ``None``) Add no space around the ``:`` "
"(except when needed for ``AlignConsecutiveBitFields``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1762
msgid ""
"``BFCS_Before`` (in configuration: ``Before``) Add space before the ``:`` "
"only"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1769
msgid ""
"``BFCS_After`` (in configuration: ``After``) Add space after the ``:`` only "
"(space may be added before if needed for ``AlignConsecutiveBitFields``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2080
msgid ""
"**BraceWrapping** (``BraceWrappingFlags``) :versionbadge:`clang-format 3.8` :"
"ref:`Â¶ <BraceWrapping>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1782
msgid "Control of individual brace wrapping cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1784
msgid ""
"If ``BreakBeforeBraces`` is set to ``BS_Custom``, use this to specify how "
"each individual brace case should be handled. Otherwise, this is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1798
msgid "Precise control over the wrapping of braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1807
msgid "``bool AfterCaseLabel`` Wrap case labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1824
msgid "``bool AfterClass`` Wrap class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1835
msgid ""
"``BraceWrappingAfterControlStatementStyle AfterControlStatement`` Wrap "
"control statements (``if``/``for``/``while``/``switch``/..)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1840
msgid ""
"``BWACS_Never`` (in configuration: ``Never``) Never wrap braces after a "
"control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1851
msgid ""
"``BWACS_MultiLine`` (in configuration: ``MultiLine``) Only wrap braces after "
"a multi-line control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1864
msgid ""
"``BWACS_Always`` (in configuration: ``Always``) Always wrap braces after a "
"control statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1877
msgid "``bool AfterEnum`` Wrap enum definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1890
msgid "``bool AfterFunction`` Wrap function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1907
msgid "``bool AfterNamespace`` Wrap namespace definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1924
msgid ""
"``bool AfterObjCDeclaration`` Wrap ObjC definitions (interfaces, "
"implementations...)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1928
msgid ""
"@autoreleasepool and @synchronized blocks are wrapped according to "
"``AfterControlStatement`` flag."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1931
msgid "``bool AfterStruct`` Wrap struct definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1946
msgid "``bool AfterUnion`` Wrap union definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1961
msgid "``bool AfterExternBlock`` Wrap extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1976
msgid "``bool BeforeCatch`` Wrap before ``catch``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1993
msgid "``bool BeforeElse`` Wrap before ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2008
msgid "``bool BeforeLambdaBody`` Wrap lambda block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2026
msgid "``bool BeforeWhile`` Wrap before ``while``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2041
msgid "``bool IndentBraces`` Indent the wrapped braces themselves."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2043
msgid ""
"``bool SplitEmptyFunction`` If ``false``, empty function body can be put on "
"a single line. This option is used only if the opening brace of the function "
"has already been wrapped, i.e. the ``AfterFunction`` brace wrapping mode is "
"set, and the function could/should not be put on a single line (as per "
"``AllowShortFunctionsOnASingleLine`` and constructor formatting options)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2057
msgid ""
"``bool SplitEmptyRecord`` If ``false``, empty record (e.g. class, struct or "
"union) body can be put on a single line. This option is used only if the "
"opening brace of the record has already been wrapped, i.e. the "
"``AfterClass`` (for classes) brace wrapping mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2069
msgid ""
"``bool SplitEmptyNamespace`` If ``false``, empty namespace body can be put "
"on a single line. This option is used only if the opening brace of the "
"namespace has already been wrapped, i.e. the ``AfterNamespace`` brace "
"wrapping mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2115
msgid ""
"**BracedInitializerIndentWidth** (``Unsigned``) :versionbadge:`clang-format "
"17` :ref:`Â¶ <BracedInitializerIndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2085
msgid ""
"The number of columns to use to indent the contents of braced init lists. If "
"unset, ``ContinuationIndentWidth`` is used."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2130
msgid ""
"**BreakAdjacentStringLiterals** (``Boolean``) :versionbadge:`clang-format "
"18` :ref:`Â¶ <BreakAdjacentStringLiterals>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2120
msgid "Break between adjacent string literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2224
msgid ""
"**BreakAfterAttributes** (``AttributeBreakingStyle``) :versionbadge:`clang-"
"format 16` :ref:`Â¶ <BreakAfterAttributes>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2135
msgid ""
"Break after a group of C++11 attributes before variable or function "
"(including constructor/destructor) declaration/definition names or before "
"control statements, i.e. ``if``, ``switch`` (including ``case`` and "
"``default`` labels), ``for``, and ``while`` statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2142
msgid ""
"``ABS_Always`` (in configuration: ``Always``) Always break after attributes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2173
msgid ""
"``ABS_Leave`` (in configuration: ``Leave``) Leave the line breaking after "
"attributes as is."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2200
msgid ""
"``ABS_Never`` (in configuration: ``Never``) Never break after attributes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2236
msgid ""
"**BreakAfterJavaFieldAnnotations** (``Boolean``) :versionbadge:`clang-format "
"3.8` :ref:`Â¶ <BreakAfterJavaFieldAnnotations>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2229
msgid "Break after each annotation on a field in Java files."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2258
msgid ""
"**BreakArrays** (``Boolean``) :versionbadge:`clang-format 16` :ref:`Â¶ "
"<BreakArrays>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2241
msgid ""
"If ``true``, clang-format will always break after a Json array ``[`` "
"otherwise it will scan until the closing ``]`` to determine if it should add "
"newlines between elements (prettier compatible)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2248
msgid "This is currently only for formatting JSON."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2309
msgid ""
"**BreakBeforeBinaryOperators** (``BinaryOperatorStyle``) :versionbadge:"
"`clang-format 3.6` :ref:`Â¶ <BreakBeforeBinaryOperators>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2263
msgid "The way to wrap binary operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2267
msgid "``BOS_None`` (in configuration: ``None``) Break after operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2281
msgid ""
"``BOS_NonAssignment`` (in configuration: ``NonAssignment``) Break before "
"operators that aren't assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2295
msgid "``BOS_All`` (in configuration: ``All``) Break before operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2762
msgid ""
"**BreakBeforeBraces** (``BraceBreakingStyle``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <BreakBeforeBraces>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2314
msgid "The brace breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2318
msgid ""
"``BS_Attach`` (in configuration: ``Attach``) Always attach braces to "
"surrounding context."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2365
msgid ""
"``BS_Linux`` (in configuration: ``Linux``) Like ``Attach``, but break before "
"braces on function, namespace and class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2417
msgid ""
"``BS_Mozilla`` (in configuration: ``Mozilla``) Like ``Attach``, but break "
"before braces on enum, function, and record definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2469
msgid ""
"``BS_Stroustrup`` (in configuration: ``Stroustrup``) Like ``Attach``, but "
"break before function definitions, ``catch``, and ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2521
msgid ""
"``BS_Allman`` (in configuration: ``Allman``) Always break before braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2583
msgid ""
"``BS_Whitesmiths`` (in configuration: ``Whitesmiths``) Like ``Allman`` but "
"always indent braces and line up code with braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2645
msgid ""
"``BS_GNU`` (in configuration: ``GNU``) Always break before braces and add an "
"extra level of indentation to braces of control statements, not to those of "
"class, function or other definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2710
msgid ""
"``BS_WebKit`` (in configuration: ``WebKit``) Like ``Attach``, but break "
"before functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2759
msgid ""
"``BS_Custom`` (in configuration: ``Custom``) Configure each individual brace "
"in ``BraceWrapping``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2792
msgid ""
"**BreakBeforeConceptDeclarations** "
"(``BreakBeforeConceptDeclarationsStyle``) :versionbadge:`clang-format 12` :"
"ref:`Â¶ <BreakBeforeConceptDeclarations>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2767
msgid "The concept declaration style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2771
msgid ""
"``BBCDS_Never`` (in configuration: ``Never``) Keep the template declaration "
"line together with ``concept``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2778
msgid ""
"``BBCDS_Allowed`` (in configuration: ``Allowed``) Breaking between template "
"declaration and ``concept`` is allowed. The actual behavior depends on the "
"content and line breaking rules and penalties."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2783
msgid ""
"``BBCDS_Always`` (in configuration: ``Always``) Always break before "
"``concept``, putting it in the line after the template declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2828
msgid ""
"**BreakBeforeInlineASMColon** (``BreakBeforeInlineASMColonStyle``) :"
"versionbadge:`clang-format 16` :ref:`Â¶ <BreakBeforeInlineASMColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2797
msgid "The inline ASM colon style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2801
msgid ""
"``BBIAS_Never`` (in configuration: ``Never``) No break before inline ASM "
"colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2808
msgid ""
"``BBIAS_OnlyMultiline`` (in configuration: ``OnlyMultiline``) Break before "
"inline ASM colon if the line length is longer than column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2819
msgid ""
"``BBIAS_Always`` (in configuration: ``Always``) Always break before inline "
"ASM colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2845
msgid ""
"**BreakBeforeTernaryOperators** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <BreakBeforeTernaryOperators>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2833
msgid "If ``true``, ternary operators will be placed after line breaks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2882
msgid ""
"**BreakConstructorInitializers** (``BreakConstructorInitializersStyle``) :"
"versionbadge:`clang-format 5` :ref:`Â¶ <BreakConstructorInitializers>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2850
msgid "The break constructor initializers style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2854
msgid ""
"``BCIS_BeforeColon`` (in configuration: ``BeforeColon``) Break constructor "
"initializers before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2863
msgid ""
"``BCIS_BeforeComma`` (in configuration: ``BeforeComma``) Break constructor "
"initializers before the colon and commas, and align the commas with the "
"colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2873
msgid ""
"``BCIS_AfterColon`` (in configuration: ``AfterColon``) Break constructor "
"initializers after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2931
msgid ""
"**BreakInheritanceList** (``BreakInheritanceListStyle``) :versionbadge:"
"`clang-format 7` :ref:`Â¶ <BreakInheritanceList>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2887
msgid "The inheritance list style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2891
msgid ""
"``BILS_BeforeColon`` (in configuration: ``BeforeColon``) Break inheritance "
"list before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2901
msgid ""
"``BILS_BeforeComma`` (in configuration: ``BeforeComma``) Break inheritance "
"list before the colon and commas, and align the commas with the colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2912
msgid ""
"``BILS_AfterColon`` (in configuration: ``AfterColon``) Break inheritance "
"list after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2922
msgid ""
"``BILS_AfterComma`` (in configuration: ``AfterComma``) Break inheritance "
"list only after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2977
msgid ""
"**BreakStringLiterals** (``Boolean``) :versionbadge:`clang-format 3.9` :ref:"
"`Â¶ <BreakStringLiterals>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2936
msgid "Allow breaking string literals when formatting."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2938
msgid "In C, C++, and Objective-C:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2951
msgid "In C# and Java:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2964
msgid "C# interpolated strings are not broken."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2966
msgid "In Verilog:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2986
msgid ""
"**ColumnLimit** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<ColumnLimit>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2982
msgid "The column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2984
msgid ""
"A column limit of ``0`` means that there is no column limit. In this case, "
"clang-format will respect the input's line breaking decisions within "
"statements unless they contradict other rules."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2998
msgid ""
"**CommentPragmas** (``String``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<CommentPragmas>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2991
msgid ""
"A regular expression that describes comments with special meaning, which "
"should not be split into lines or otherwise changed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3025
msgid ""
"**CompactNamespaces** (``Boolean``) :versionbadge:`clang-format 5` :ref:`Â¶ "
"<CompactNamespaces>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3003
msgid ""
"If ``true``, consecutive namespace declarations will be on the same line. If "
"``false``, each namespace is declared on a new line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3018
msgid ""
"If it does not fit on a single line, the overflowing namespaces get wrapped:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3031
msgid ""
"**ConstructorInitializerAllOnOneLineOrOnePerLine** (``Boolean``) :"
"versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<ConstructorInitializerAllOnOneLineOrOnePerLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3030
msgid ""
"This option is **deprecated**. See ``CurrentLine`` of "
"``PackConstructorInitializers``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3037
msgid ""
"**ConstructorInitializerIndentWidth** (``Unsigned``) :versionbadge:`clang-"
"format 3.7` :ref:`Â¶ <ConstructorInitializerIndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3036
msgid ""
"The number of characters to use for indentation of constructor initializer "
"lists as well as inheritance lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3050
msgid ""
"**ContinuationIndentWidth** (``Unsigned``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <ContinuationIndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3042
msgid "Indent width for line continuations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3075
msgid ""
"**Cpp11BracedListStyle** (``Boolean``) :versionbadge:`clang-format 3.4` :ref:"
"`Â¶ <Cpp11BracedListStyle>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3055
msgid "If ``true``, format braced lists as best suited for C++11 braced lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3058
msgid ""
"Important differences: - No spaces inside the braced list. - No line break "
"before the closing brace. - Indentation with the continuation indent, not "
"with the block indent."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3063
msgid ""
"Fundamentally, C++11 braced lists are formatted exactly like function calls "
"would be formatted in their place. If the braced list follows a name (e.g. a "
"type or variable name), clang-format formats as if the ``{}`` were the "
"parentheses of a function call with that name. If there is no name, a zero-"
"length name is assumed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3081
msgid ""
"**DeriveLineEnding** (``Boolean``) :versionbadge:`clang-format 10` :ref:`Â¶ "
"<DeriveLineEnding>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3080
msgid ""
"This option is **deprecated**. See ``DeriveLF`` and ``DeriveCRLF`` of "
"``LineEnding``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3090
msgid ""
"**DerivePointerAlignment** (``Boolean``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <DerivePointerAlignment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3086
msgid ""
"If ``true``, analyze the formatted file for the most common alignment of "
"``&`` and ``*``. Pointer and reference alignment styles are going to be "
"updated according to the preferences found in the file. ``PointerAlignment`` "
"is then used only as fallback."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3095
msgid ""
"**DisableFormat** (``Boolean``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<DisableFormat>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3095
msgid "Disables formatting completely."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3150
msgid ""
"**EmptyLineAfterAccessModifier** (``EmptyLineAfterAccessModifierStyle``) :"
"versionbadge:`clang-format 13` :ref:`Â¶ <EmptyLineAfterAccessModifier>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3100
msgid ""
"Defines when to put an empty line after access modifiers. "
"``EmptyLineBeforeAccessModifier`` configuration handles the number of empty "
"lines between two access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3106
msgid ""
"``ELAAMS_Never`` (in configuration: ``Never``) Remove all empty lines after "
"access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3123
msgid ""
"``ELAAMS_Leave`` (in configuration: ``Leave``) Keep existing empty lines "
"after access modifiers. MaxEmptyLinesToKeep is applied instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3127
msgid ""
"``ELAAMS_Always`` (in configuration: ``Always``) Always add empty line after "
"access modifiers if there are none. MaxEmptyLinesToKeep is applied also."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3221
msgid ""
"**EmptyLineBeforeAccessModifier** (``EmptyLineBeforeAccessModifierStyle``) :"
"versionbadge:`clang-format 12` :ref:`Â¶ <EmptyLineBeforeAccessModifier>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3155
msgid "Defines in which cases to put empty line before access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3159
msgid ""
"``ELBAMS_Never`` (in configuration: ``Never``) Remove all empty lines before "
"access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3176
msgid ""
"``ELBAMS_Leave`` (in configuration: ``Leave``) Keep existing empty lines "
"before access modifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3179
msgid ""
"``ELBAMS_LogicalBlock`` (in configuration: ``LogicalBlock``) Add empty line "
"only when access modifier starts a new logical block. Logical block is a "
"group of one or more member fields or functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3199
msgid ""
"``ELBAMS_Always`` (in configuration: ``Always``) Always add empty line "
"before access modifiers unless access modifier is at the start of struct or "
"class definition."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3238
msgid ""
"**ExperimentalAutoDetectBinPacking** (``Boolean``) :versionbadge:`clang-"
"format 3.7` :ref:`Â¶ <ExperimentalAutoDetectBinPacking>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3226
msgid ""
"If ``true``, clang-format detects whether function calls and definitions are "
"formatted with one parameter per line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3229
msgid ""
"Each call can be bin-packed, one-per-line or inconclusive. If it is "
"inconclusive, e.g. completely on one line, but a decision needs to be made, "
"clang-format analyzes whether there are other bin-packed cases in the input "
"file and act accordingly."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3237
msgid ""
"This is an experimental flag, that might go away or be renamed. Do not use "
"this in config files, etc. Use at your own risk."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3256
msgid ""
"**FixNamespaceComments** (``Boolean``) :versionbadge:`clang-format 5` :ref:"
"`Â¶ <FixNamespaceComments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3243
msgid ""
"If ``true``, clang-format adds missing namespace end comments for namespaces "
"and fixes invalid existing ones. This doesn't affect short namespaces, which "
"are controlled by ``ShortNamespaceLines``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3277
msgid ""
"**ForEachMacros** (``List of Strings``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <ForEachMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3261
msgid ""
"A vector of macros that should be interpreted as foreach loops instead of as "
"function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3264
#: ../../../ClangFormatStyleOptions.rst:3285
#: ../../../ClangFormatStyleOptions.rst:4185
#: ../../../ClangFormatStyleOptions.rst:5829
#: ../../../ClangFormatStyleOptions.rst:5897
msgid "These are expected to be macros of the form:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3277
msgid "For example: BOOST_FOREACH."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3301
msgid ""
"**IfMacros** (``List of Strings``) :versionbadge:`clang-format 13` :ref:`Â¶ "
"<IfMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3282
msgid ""
"A vector of macros that should be interpreted as conditionals instead of as "
"function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3300
msgid ""
"For example: `KJ_IF_MAYBE <https://github.com/capnproto/capnproto/blob/"
"master/kjdoc/tour.md#maybes>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3343
msgid ""
"**IncludeBlocks** (``IncludeBlocksStyle``) :versionbadge:`clang-format 6` :"
"ref:`Â¶ <IncludeBlocks>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3306
msgid ""
"Dependent on the value, multiple ``#include`` blocks can be sorted as one "
"and divided based on category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3311
msgid ""
"``IBS_Preserve`` (in configuration: ``Preserve``) Sort each ``#include`` "
"block separately."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3321
msgid ""
"``IBS_Merge`` (in configuration: ``Merge``) Merge multiple ``#include`` "
"blocks together and sort as one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3331
msgid ""
"``IBS_Regroup`` (in configuration: ``Regroup``) Merge multiple ``#include`` "
"blocks together and sort as one. Then split into groups based on category "
"priority. See ``IncludeCategories``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3393
msgid ""
"**IncludeCategories** (``List of IncludeCategories``) :versionbadge:`clang-"
"format 3.8` :ref:`Â¶ <IncludeCategories>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3348
msgid ""
"Regular expressions denoting the different ``#include`` categories used for "
"ordering ``#includes``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3351
msgid ""
"`POSIX extended <https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/"
"V1_chap09.html>`_ regular expressions are supported."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3355
msgid ""
"These regular expressions are matched against the filename of an include "
"(including the <> or \"\") in order. The value belonging to the first "
"matching regular expression is assigned and ``#includes`` are sorted first "
"according to increasing category number and then alphabetically within each "
"category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3361
msgid ""
"If none of the regular expressions match, INT_MAX is assigned as category. "
"The main header for a source file automatically gets category 0. so that it "
"is generally kept at the beginning of the ``#includes`` (https://llvm.org/"
"docs/CodingStandards.html#include-style). However, you can also assign "
"negative priorities if you have certain headers that always need to be first."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3368
msgid ""
"There is a third and optional field ``SortPriority`` which can used while "
"``IncludeBlocks = IBS_Regroup`` to define the priority in which "
"``#includes`` should be ordered. The value of ``Priority`` defines the order "
"of ``#include blocks`` and also allows the grouping of ``#includes`` of "
"different priority. ``SortPriority`` is set to the value of ``Priority`` as "
"default if it is not assigned."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3375
msgid ""
"Each regular expression can be marked as case sensitive with the field "
"``CaseSensitive``, per default it is not."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3378
#: ../../../ClangFormatStyleOptions.rst:4603
msgid "To configure this in the .clang-format file, use:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3408
msgid ""
"**IncludeIsMainRegex** (``String``) :versionbadge:`clang-format 3.9` :ref:`Â¶ "
"<IncludeIsMainRegex>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3398
msgid ""
"Specify a regular expression of suffixes that are allowed in the file-to-"
"main-include mapping."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3401
msgid ""
"When guessing whether a #include is the \"main\" include (to assign category "
"0, see above), use this regex of allowed suffixes to the header stem. A "
"partial match is done, so that: - \"\" means \"arbitrary suffix\" - \"$\" "
"means \"no suffix\""
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3407
msgid ""
"For example, if configured to \"(_test)?$\", then a header a.h would be seen "
"as the \"main\" include in both a.cc and a_test.cc."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3430
msgid ""
"**IncludeIsMainSourceRegex** (``String``) :versionbadge:`clang-format 10` :"
"ref:`Â¶ <IncludeIsMainSourceRegex>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3413
msgid ""
"Specify a regular expression for files being formatted that are allowed to "
"be considered \"main\" in the file-to-main-include mapping."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3417
msgid ""
"By default, clang-format considers files as \"main\" only when they end "
"with: ``.c``, ``.cc``, ``.cpp``, ``.c++``, ``.cxx``, ``.m`` or ``.mm`` "
"extensions. For these files a guessing of \"main\" include takes place (to "
"assign category 0, see above). This config option allows for additional "
"suffixes and extensions for files to be considered as \"main\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3424
msgid ""
"For example, if this option is configured to ``(Impl\\.hpp)$``, then a file "
"``ClassImpl.hpp`` is considered \"main\" (in addition to ``Class.c``, "
"``Class.cc``, ``Class.cpp`` and so on) and \"main include file\" logic will "
"be executed (with *IncludeIsMainRegex* setting also being respected in later "
"phase). Without this option set, ``ClassImpl.hpp`` would not have the main "
"include file put on top before any other include."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3459
msgid ""
"**IndentAccessModifiers** (``Boolean``) :versionbadge:`clang-format 13` :ref:"
"`Â¶ <IndentAccessModifiers>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3435
msgid ""
"Specify whether access modifiers should have their own indentation level."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3437
msgid ""
"When ``false``, access modifiers are indented (or outdented) relative to the "
"record members, respecting the ``AccessModifierOffset``. Record members are "
"indented one level below the record. When ``true``, access modifiers get "
"their own indentation level. As a consequence, record members are always "
"indented 2 levels below the record, regardless of the access modifier "
"presence. Value of the ``AccessModifierOffset`` is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3484
msgid ""
"**IndentCaseBlocks** (``Boolean``) :versionbadge:`clang-format 11` :ref:`Â¶ "
"<IndentCaseBlocks>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3464
msgid "Indent case label blocks one level from the case label."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3466
msgid ""
"When ``false``, the block following the case label uses the same indentation "
"level as for the case label, treating the case label the same as an if-"
"statement. When ``true``, the block gets indented as a scope block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3505
msgid ""
"**IndentCaseLabels** (``Boolean``) :versionbadge:`clang-format 3.3` :ref:`Â¶ "
"<IndentCaseLabels>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3489
msgid "Indent case labels one level from the switch statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3491
msgid ""
"When ``false``, use the same indentation level as for the switch statement. "
"Switch statement body is always indented one level more than case labels "
"(except the first block following the case label, which itself indents the "
"code - unless IndentCaseBlocks is enabled)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3553
msgid ""
"**IndentExternBlock** (``IndentExternBlockStyle``) :versionbadge:`clang-"
"format 11` :ref:`Â¶ <IndentExternBlock>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3510
msgid "IndentExternBlockStyle is the type of indenting of extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3514
msgid ""
"``IEBS_AfterExternBlock`` (in configuration: ``AfterExternBlock``) Backwards "
"compatible with AfterExternBlock's indenting."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3535
msgid ""
"``IEBS_NoIndent`` (in configuration: ``NoIndent``) Does not indent extern "
"blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3544
msgid "``IEBS_Indent`` (in configuration: ``Indent``) Indents extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3572
msgid ""
"**IndentGotoLabels** (``Boolean``) :versionbadge:`clang-format 10` :ref:`Â¶ "
"<IndentGotoLabels>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3558
msgid "Indent goto labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3560
msgid "When ``false``, goto labels are flushed left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3614
msgid ""
"**IndentPPDirectives** (``PPDirectiveIndentStyle``) :versionbadge:`clang-"
"format 6` :ref:`Â¶ <IndentPPDirectives>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3577
msgid "The preprocessor directive indenting style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3581
msgid ""
"``PPDIS_None`` (in configuration: ``None``) Does not indent any directives."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3592
msgid ""
"``PPDIS_AfterHash`` (in configuration: ``AfterHash``) Indents directives "
"after the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3603
msgid ""
"``PPDIS_BeforeHash`` (in configuration: ``BeforeHash``) Indents directives "
"before the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3638
msgid ""
"**IndentRequiresClause** (``Boolean``) :versionbadge:`clang-format 15` :ref:"
"`Â¶ <IndentRequiresClause>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3619
msgid ""
"Indent the requires clause in a template. This only applies when "
"``RequiresClausePosition`` is ``OwnLine``, or ``WithFollowing``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3622
msgid "In clang-format 12, 13 and 14 it was named ``IndentRequires``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3654
msgid ""
"**IndentWidth** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<IndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3643
msgid "The number of columns to use for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3670
msgid ""
"**IndentWrappedFunctionNames** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <IndentWrappedFunctionNames>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3659
msgid ""
"Indent if a function definition or declaration is wrapped after the type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3705
msgid ""
"**InsertBraces** (``Boolean``) :versionbadge:`clang-format 15` :ref:`Â¶ "
"<InsertBraces>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3675
msgid ""
"Insert braces after control statements (``if``, ``else``, ``for``, ``do``, "
"and ``while``) in C++ unless the control statements are inside macro "
"definitions or the braces would enclose preprocessor directives."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3681
#: ../../../ClangFormatStyleOptions.rst:4687
#: ../../../ClangFormatStyleOptions.rst:4784
msgid ""
"Setting this option to ``true`` could lead to incorrect code formatting due "
"to clang-format's lack of complete semantic information. As such, extra care "
"should be taken to review code changes made by this option."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3710
msgid ""
"**InsertNewlineAtEOF** (``Boolean``) :versionbadge:`clang-format 16` :ref:`Â¶ "
"<InsertNewlineAtEOF>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3710
msgid "Insert a newline at end of file if missing."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3744
msgid ""
"**InsertTrailingCommas** (``TrailingCommaStyle``) :versionbadge:`clang-"
"format 11` :ref:`Â¶ <InsertTrailingCommas>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3715
msgid ""
"If set to ``TCS_Wrapped`` will insert trailing commas in container literals "
"(arrays and objects) that wrap across multiple lines. It is currently only "
"available for JavaScript and disabled by default ``TCS_None``. "
"``InsertTrailingCommas`` cannot be used together with ``BinPackArguments`` "
"as inserting the comma disables bin-packing."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3734
msgid ""
"``TCS_None`` (in configuration: ``None``) Do not insert trailing commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3737
msgid ""
"``TCS_Wrapped`` (in configuration: ``Wrapped``) Insert trailing commas in "
"container literals that were wrapped over multiple lines. Note that this is "
"conceptually incompatible with bin-packing, because the trailing comma is "
"used as an indicator that a container should be formatted one-per-line (i.e. "
"not bin-packed). So inserting a trailing comma counteracts bin-packing."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3827
msgid ""
"**IntegerLiteralSeparator** (``IntegerLiteralSeparatorStyle``) :versionbadge:"
"`clang-format 16` :ref:`Â¶ <IntegerLiteralSeparator>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3749
msgid ""
"Format integer literal separators (``'`` for C++ and ``_`` for C#, Java, and "
"JavaScript)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3754
msgid "Separator format of integer literals of different bases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3756
msgid ""
"If negative, remove separators. If  ``0``, leave the literal as is. If "
"positive, insert separators between digits starting from the rightmost digit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3760
msgid ""
"For example, the config below will leave separators in binary literals "
"alone, insert separators in decimal literals to separate the digits into "
"groups of 3, and remove separators in hexadecimal literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3771
msgid ""
"You can also specify a minimum number of digits (``BinaryMinDigits``, "
"``DecimalMinDigits``, and ``HexMinDigits``) the integer literal must have in "
"order for the separators to be inserted."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3775
msgid "``int8_t Binary`` Format separators in binary literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3784
msgid ""
"``int8_t BinaryMinDigits`` Format separators in binary literals with a "
"minimum number of digits."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3793
msgid "``int8_t Decimal`` Format separators in decimal literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3801
msgid ""
"``int8_t DecimalMinDigits`` Format separators in decimal literals with a "
"minimum number of digits."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3810
msgid "``int8_t Hex`` Format separators in hexadecimal literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3818
msgid ""
"``int8_t HexMinDigits`` Format separators in hexadecimal literals with a "
"minimum number of digits."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3864
msgid ""
"**JavaImportGroups** (``List of Strings``) :versionbadge:`clang-format 8` :"
"ref:`Â¶ <JavaImportGroups>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3832
msgid "A vector of prefixes ordered by the desired groups for Java imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3834
msgid ""
"One group's prefix can be a subset of another - the longest prefix is always "
"matched. Within a group, the imports are ordered lexicographically. Static "
"imports are grouped separately and follow the same group rules. By default, "
"static imports are placed before non-static imports, but this behavior is "
"changed by another option, ``SortJavaStaticImport``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3841
msgid ""
"In the .clang-format configuration file, this can be configured like in the "
"following yaml example. This will result in imports being formatted as in "
"the Java example below."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3897
msgid ""
"**JavaScriptQuotes** (``JavaScriptQuoteStyle``) :versionbadge:`clang-format "
"3.9` :ref:`Â¶ <JavaScriptQuotes>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3869
msgid "The JavaScriptQuoteStyle to use for JavaScript strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3873
msgid ""
"``JSQS_Leave`` (in configuration: ``Leave``) Leave string quotes as they are."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3881
msgid ""
"``JSQS_Single`` (in configuration: ``Single``) Always use single quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3889
msgid ""
"``JSQS_Double`` (in configuration: ``Double``) Always use double quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3914
msgid ""
"**JavaScriptWrapImports** (``Boolean``) :versionbadge:`clang-format 3.9` :"
"ref:`Â¶ <JavaScriptWrapImports>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3902
msgid "Whether to wrap JavaScript import/export statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3919
msgid ""
"**KeepEmptyLinesAtEOF** (``Boolean``) :versionbadge:`clang-format 17` :ref:"
"`Â¶ <KeepEmptyLinesAtEOF>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3919
msgid "Keep empty lines (up to ``MaxEmptyLinesToKeep``) at end of file."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3932
msgid ""
"**KeepEmptyLinesAtTheStartOfBlocks** (``Boolean``) :versionbadge:`clang-"
"format 3.7` :ref:`Â¶ <KeepEmptyLinesAtTheStartOfBlocks>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3924
msgid "If true, the empty line at the start of blocks is kept."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3971
msgid ""
"**LambdaBodyIndentation** (``LambdaBodyIndentationKind``) :versionbadge:"
"`clang-format 13` :ref:`Â¶ <LambdaBodyIndentation>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3937
msgid ""
"The indentation style of lambda bodies. ``Signature`` (the default) causes "
"the lambda body to be indented one additional level relative to the "
"indentation level of the signature. ``OuterScope`` forces the lambda body to "
"be indented one additional level relative to the parent scope containing the "
"lambda signature."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3945
msgid ""
"``LBI_Signature`` (in configuration: ``Signature``) Align lambda body "
"relative to the lambda signature. This is the default."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3955
msgid ""
"``LBI_OuterScope`` (in configuration: ``OuterScope``) For statements within "
"block scope, align lambda body relative to the indentation level of the "
"outer scope the lambda signature resides in."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4017
msgid ""
"**Language** (``LanguageKind``) :versionbadge:`clang-format 3.5` :ref:`Â¶ "
"<Language>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3976
msgid "Language, this format style is targeted at."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3980
msgid "``LK_None`` (in configuration: ``None``) Do not use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3983
msgid "``LK_Cpp`` (in configuration: ``Cpp``) Should be used for C, C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3986
msgid "``LK_CSharp`` (in configuration: ``CSharp``) Should be used for C#."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3989
msgid "``LK_Java`` (in configuration: ``Java``) Should be used for Java."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3992
msgid ""
"``LK_JavaScript`` (in configuration: ``JavaScript``) Should be used for "
"JavaScript."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3995
msgid "``LK_Json`` (in configuration: ``Json``) Should be used for JSON."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:3998
msgid ""
"``LK_ObjC`` (in configuration: ``ObjC``) Should be used for Objective-C, "
"Objective-C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4001
msgid ""
"``LK_Proto`` (in configuration: ``Proto``) Should be used for Protocol "
"Buffers (https://developers.google.com/protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4005
msgid ""
"``LK_TableGen`` (in configuration: ``TableGen``) Should be used for TableGen "
"code."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4008
msgid ""
"``LK_TextProto`` (in configuration: ``TextProto``) Should be used for "
"Protocol Buffer messages in text format (https://developers.google.com/"
"protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4012
msgid ""
"``LK_Verilog`` (in configuration: ``Verilog``) Should be used for Verilog "
"and SystemVerilog. https://standards.ieee.org/ieee/1800/6700/ https://sci-"
"hub.st/10.1109/IEEESTD.2018.8299595"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4038
msgid ""
"**LineEnding** (``LineEndingStyle``) :versionbadge:`clang-format 16` :ref:`Â¶ "
"<LineEnding>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4022
msgid "Line ending style (``\\n`` or ``\\r\\n``) to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4026
msgid "``LE_LF`` (in configuration: ``LF``) Use ``\\n``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4029
msgid "``LE_CRLF`` (in configuration: ``CRLF``) Use ``\\r\\n``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4032
msgid ""
"``LE_DeriveLF`` (in configuration: ``DeriveLF``) Use ``\\n`` unless the "
"input has more lines ending in ``\\r\\n``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4035
msgid ""
"``LE_DeriveCRLF`` (in configuration: ``DeriveCRLF``) Use ``\\r\\n`` unless "
"the input has more lines ending in ``\\n``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4069
msgid ""
"**MacroBlockBegin** (``String``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<MacroBlockBegin>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4043
msgid "A regular expression matching macros that start a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4074
msgid ""
"**MacroBlockEnd** (``String``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<MacroBlockEnd>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4074
msgid "A regular expression matching macros that end a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4117
msgid ""
"**Macros** (``List of Strings``) :versionbadge:`clang-format 17` :ref:`Â¶ "
"<Macros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4079
msgid "A list of macros of the form ``<definition>=<expansion>`` ."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4081
msgid ""
"Code will be parsed with macros expanded, in order to determine how to "
"interpret and format the macro arguments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4084
msgid "For example, the code:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4090
msgid ""
"will usually be interpreted as a call to a function A, and the "
"multiplication expression will be formatted as ``a * b``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4093
msgid "If we specify the macro definition:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4100
msgid ""
"the code will now be parsed as a declaration of the variable b of type a*, "
"and formatted as ``a* b`` (depending on pointer-binding rules)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4110
msgid "Features and restrictions:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4104
msgid "Both function-like macros and object-like macros are supported."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4105
msgid "Macro arguments must be used exactly once in the expansion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4106
msgid ""
"No recursive expansion; macros referencing other macros will be ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4108
msgid ""
"Overloading by arity is supported: for example, given the macro definitions "
"A=x, A()=y, A(a)=a"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4133
msgid ""
"**MaxEmptyLinesToKeep** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:"
"`Â¶ <MaxEmptyLinesToKeep>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4122
msgid "The maximum number of consecutive empty lines to keep."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4178
msgid ""
"**NamespaceIndentation** (``NamespaceIndentationKind``) :versionbadge:`clang-"
"format 3.7` :ref:`Â¶ <NamespaceIndentation>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4138
msgid "The indentation used for namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4142
msgid "``NI_None`` (in configuration: ``None``) Don't indent in namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4154
msgid ""
"``NI_Inner`` (in configuration: ``Inner``) Indent only in inner namespaces "
"(nested in other namespaces)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4166
msgid "``NI_All`` (in configuration: ``All``) Indent in all namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4193
msgid ""
"**NamespaceMacros** (``List of Strings``) :versionbadge:`clang-format 9` :"
"ref:`Â¶ <NamespaceMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4183
msgid "A vector of macros which are used to open namespace blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4193
msgid "For example: TESTSUITE"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4241
msgid ""
"**ObjCBinPackProtocolList** (``BinPackStyle``) :versionbadge:`clang-format "
"7` :ref:`Â¶ <ObjCBinPackProtocolList>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4198
msgid ""
"Controls bin-packing Objective-C protocol conformance list items into as few "
"lines as possible when they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4201
msgid ""
"If ``Auto`` (the default), delegates to the value in ``BinPackParameters``. "
"If that is ``true``, bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4206
msgid ""
"If ``Always``, always bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4210
msgid ""
"If ``Never``, lays out Objective-C protocol conformance list items onto "
"individual lines whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4232
msgid ""
"``BPS_Auto`` (in configuration: ``Auto``) Automatically determine parameter "
"bin-packing behavior."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4235
msgid ""
"``BPS_Always`` (in configuration: ``Always``) Always bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4238
msgid "``BPS_Never`` (in configuration: ``Never``) Never bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4254
msgid ""
"**ObjCBlockIndentWidth** (``Unsigned``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <ObjCBlockIndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4246
msgid "The number of characters to use for indentation of ObjC blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4280
msgid ""
"**ObjCBreakBeforeNestedBlockParam** (``Boolean``) :versionbadge:`clang-"
"format 11` :ref:`Â¶ <ObjCBreakBeforeNestedBlockParam>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4259
msgid ""
"Break parameters list into lines when there is nested block parameters in a "
"function call."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4306
msgid ""
"**ObjCPropertyAttributeOrder** (``List of Strings``) :versionbadge:`clang-"
"format 18` :ref:`Â¶ <ObjCPropertyAttributeOrder>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4285
msgid "The order in which ObjC property attributes should appear."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4287
msgid ""
"Attributes in code will be sorted in the order specified. Any attributes "
"encountered that are not mentioned in this array will be sorted last, in "
"stable order. Comments between attributes will leave the attributes "
"untouched."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4294
msgid ""
"Using this option could lead to incorrect code formatting due to clang-"
"format's lack of complete semantic information. As such, extra care should "
"be taken to review code changes made by this option."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4312
msgid ""
"**ObjCSpaceAfterProperty** (``Boolean``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <ObjCSpaceAfterProperty>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4311
msgid ""
"Add a space after ``@property`` in Objective-C, i.e. use ``@property "
"(readonly)`` instead of ``@property(readonly)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4318
msgid ""
"**ObjCSpaceBeforeProtocolList** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <ObjCSpaceBeforeProtocolList>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4317
msgid ""
"Add a space in front of an Objective-C protocol list, i.e. use ``Foo "
"<Protocol>`` instead of ``Foo<Protocol>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4335
msgid ""
"**PPIndentWidth** (``Integer``) :versionbadge:`clang-format 13` :ref:`Â¶ "
"<PPIndentWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4323
msgid ""
"The number of columns to use for indentation of preprocessor statements. "
"When set to -1 (default) ``IndentWidth`` is used also for preprocessor "
"statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4408
msgid ""
"**PackConstructorInitializers** (``PackConstructorInitializersStyle``) :"
"versionbadge:`clang-format 14` :ref:`Â¶ <PackConstructorInitializers>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4340
msgid "The pack constructor initializers style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4344
msgid ""
"``PCIS_Never`` (in configuration: ``Never``) Always put each constructor "
"initializer on its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4353
msgid ""
"``PCIS_BinPack`` (in configuration: ``BinPack``) Bin-pack constructor "
"initializers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4362
msgid ""
"``PCIS_CurrentLine`` (in configuration: ``CurrentLine``) Put all constructor "
"initializers on the current line if they fit. Otherwise, put each one on its "
"own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4375
msgid ""
"``PCIS_NextLine`` (in configuration: ``NextLine``) Same as "
"``PCIS_CurrentLine`` except that if all constructor initializers do not fit "
"on the current line, try to fit them on the next line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4391
msgid ""
"``PCIS_NextLineOnly`` (in configuration: ``NextLineOnly``) Put all "
"constructor initializers on the next line if they fit. Otherwise, put each "
"one on its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4413
msgid ""
"**PenaltyBreakAssignment** (``Unsigned``) :versionbadge:`clang-format 5` :"
"ref:`Â¶ <PenaltyBreakAssignment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4413
msgid "The penalty for breaking around an assignment operator."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4418
msgid ""
"**PenaltyBreakBeforeFirstCallParameter** (``Unsigned``) :versionbadge:`clang-"
"format 3.7` :ref:`Â¶ <PenaltyBreakBeforeFirstCallParameter>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4418
msgid "The penalty for breaking a function call after ``call(``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4423
msgid ""
"**PenaltyBreakComment** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:"
"`Â¶ <PenaltyBreakComment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4423
msgid "The penalty for each line break introduced inside a comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4428
msgid ""
"**PenaltyBreakFirstLessLess** (``Unsigned``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <PenaltyBreakFirstLessLess>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4428
msgid "The penalty for breaking before the first ``<<``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4433
msgid ""
"**PenaltyBreakOpenParenthesis** (``Unsigned``) :versionbadge:`clang-format "
"14` :ref:`Â¶ <PenaltyBreakOpenParenthesis>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4433
msgid "The penalty for breaking after ``(``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4438
msgid ""
"**PenaltyBreakScopeResolution** (``Unsigned``) :versionbadge:`clang-format "
"18` :ref:`Â¶ <PenaltyBreakScopeResolution>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4438
msgid "The penalty for breaking after ``::``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4443
msgid ""
"**PenaltyBreakString** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:"
"`Â¶ <PenaltyBreakString>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4443
msgid "The penalty for each line break introduced inside a string literal."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4448
msgid ""
"**PenaltyBreakTemplateDeclaration** (``Unsigned``) :versionbadge:`clang-"
"format 7` :ref:`Â¶ <PenaltyBreakTemplateDeclaration>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4448
msgid "The penalty for breaking after template declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4453
msgid ""
"**PenaltyExcessCharacter** (``Unsigned``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <PenaltyExcessCharacter>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4453
msgid "The penalty for each character outside of the column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4459
msgid ""
"**PenaltyIndentedWhitespace** (``Unsigned``) :versionbadge:`clang-format "
"12` :ref:`Â¶ <PenaltyIndentedWhitespace>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4458
msgid ""
"Penalty for each character of whitespace indentation (counted relative to "
"leading non-whitespace column)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4464
msgid ""
"**PenaltyReturnTypeOnItsOwnLine** (``Unsigned``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <PenaltyReturnTypeOnItsOwnLine>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4464
msgid "Penalty for putting the return type of a function onto its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4494
msgid ""
"**PointerAlignment** (``PointerAlignmentStyle``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <PointerAlignment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4469
msgid "Pointer and reference alignment style."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4473
msgid "``PAS_Left`` (in configuration: ``Left``) Align pointer to the left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4480
msgid "``PAS_Right`` (in configuration: ``Right``) Align pointer to the right."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4487
msgid ""
"``PAS_Middle`` (in configuration: ``Middle``) Align pointer in the middle."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4551
msgid ""
"**QualifierAlignment** (``QualifierAlignmentStyle``) :versionbadge:`clang-"
"format 14` :ref:`Â¶ <QualifierAlignment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4499
msgid ""
"Different ways to arrange specifiers and qualifiers (e.g. const/volatile)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4503
msgid ""
"Setting ``QualifierAlignment``  to something other than ``Leave``, COULD "
"lead to incorrect code formatting due to incorrect decisions made due to "
"clang-formats lack of complete semantic information. As such extra care "
"should be taken to review code changes made by the use of this option."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4511
msgid ""
"``QAS_Leave`` (in configuration: ``Leave``) Don't change specifiers/"
"qualifiers to either Left or Right alignment (default)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4520
msgid ""
"``QAS_Left`` (in configuration: ``Left``) Change specifiers/qualifiers to be "
"left-aligned."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4528
msgid ""
"``QAS_Right`` (in configuration: ``Right``) Change specifiers/qualifiers to "
"be right-aligned."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4536
msgid ""
"``QAS_Custom`` (in configuration: ``Custom``) Change specifiers/qualifiers "
"to be aligned based on ``QualifierOrder``. With:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4580
msgid ""
"**QualifierOrder** (``List of Strings``) :versionbadge:`clang-format 14` :"
"ref:`Â¶ <QualifierOrder>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4556
msgid ""
"The order in which the qualifiers appear. Order is an array that can contain "
"any of the following:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4559
msgid "const"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4560
msgid "inline"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4561
msgid "static"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4562
msgid "friend"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4563
msgid "constexpr"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4564
msgid "volatile"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4565
msgid "restrict"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4566
msgid "type"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4571
msgid "it MUST contain 'type'."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4573
msgid ""
"Items to the left of 'type' will be placed to the left of the type and "
"aligned in the order supplied. Items to the right of 'type' will be placed "
"to the right of the type and aligned in the order supplied."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4620
msgid ""
"**RawStringFormats** (``List of RawStringFormats``) :versionbadge:`clang-"
"format 6` :ref:`Â¶ <RawStringFormats>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4585
msgid ""
"Defines hints for detecting supported languages code blocks in raw strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4588
msgid ""
"A raw string with a matching delimiter or a matching enclosing function name "
"will be reformatted assuming the specified language based on the style for "
"that language defined in the .clang-format file. If no style has been "
"defined in the .clang-format file for the specific language, a predefined "
"style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not found, the "
"formatting is based on llvm style. A matching delimiter takes precedence "
"over a matching enclosing function name for determining the language of the "
"raw string contents."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4597
msgid ""
"If a canonical delimiter is specified, occurrences of other delimiters for "
"the same language will be updated to the canonical if possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4600
msgid ""
"There should be at most one specification per language and each delimiter "
"and enclosing function should not occur in multiple specifications."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4654
msgid ""
"**ReferenceAlignment** (``ReferenceAlignmentStyle``) :versionbadge:`clang-"
"format 13` :ref:`Â¶ <ReferenceAlignment>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4625
msgid ""
"Reference alignment style (overrides ``PointerAlignment`` for references)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4630
msgid ""
"``RAS_Pointer`` (in configuration: ``Pointer``) Align reference like "
"``PointerAlignment``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4633
msgid "``RAS_Left`` (in configuration: ``Left``) Align reference to the left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4640
msgid ""
"``RAS_Right`` (in configuration: ``Right``) Align reference to the right."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4647
msgid ""
"``RAS_Middle`` (in configuration: ``Middle``) Align reference in the middle."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4673
msgid ""
"**ReflowComments** (``Boolean``) :versionbadge:`clang-format 3.8` :ref:`Â¶ "
"<ReflowComments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4659
msgid ""
"If ``true``, clang-format will attempt to re-flow comments. That is it will "
"touch a comment and *reflow* long comments into new lines, trying to obey "
"the ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4731
msgid ""
"**RemoveBracesLLVM** (``Boolean``) :versionbadge:`clang-format 14` :ref:`Â¶ "
"<RemoveBracesLLVM>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4678
msgid ""
"Remove optional braces of control statements (``if``, ``else``, ``for``, and "
"``while``) in C++ according to the LLVM coding style."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4683
msgid "This option will be renamed and expanded to support other styles."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4775
msgid ""
"**RemoveParentheses** (``RemoveParenthesesStyle``) :versionbadge:`clang-"
"format 17` :ref:`Â¶ <RemoveParentheses>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4736
msgid "Remove redundant parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4740
msgid ""
"Setting this option to any value other than ``Leave`` could lead to "
"incorrect code formatting due to clang-format's lack of complete semantic "
"information. As such, extra care should be taken to review code changes made "
"by this option."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4747
msgid "``RPS_Leave`` (in configuration: ``Leave``) Do not remove parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4756
msgid ""
"``RPS_MultipleParentheses`` (in configuration: ``MultipleParentheses``) "
"Replace multiple parentheses with single parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4765
msgid ""
"``RPS_ReturnStatement`` (in configuration: ``ReturnStatement``) Also remove "
"parentheses enclosing the expression in a ``return``/``co_return`` statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4794
msgid ""
"**RemoveSemicolon** (``Boolean``) :versionbadge:`clang-format 16` :ref:`Â¶ "
"<RemoveSemicolon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4780
msgid "Remove semicolons after the closing brace of a non-empty function."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4882
msgid ""
"**RequiresClausePosition** (``RequiresClausePositionStyle``) :versionbadge:"
"`clang-format 15` :ref:`Â¶ <RequiresClausePosition>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4799
msgid "The position of the ``requires`` clause."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4803
msgid ""
"``RCPS_OwnLine`` (in configuration: ``OwnLine``) Always put the ``requires`` "
"clause on its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4821
msgid ""
"``RCPS_WithPreceding`` (in configuration: ``WithPreceding``) Try to put the "
"clause together with the preceding part of a declaration. For class "
"templates: stick to the template declaration. For function templates: stick "
"to the template declaration. For function declaration followed by a requires "
"clause: stick to the parameter list."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4840
msgid ""
"``RCPS_WithFollowing`` (in configuration: ``WithFollowing``) Try to put the "
"``requires`` clause together with the class or function declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4856
msgid ""
"``RCPS_SingleLine`` (in configuration: ``SingleLine``) Try to put everything "
"in the same line if possible. Otherwise normal line breaking rules take over."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4913
msgid ""
"**RequiresExpressionIndentation** (``RequiresExpressionIndentationKind``) :"
"versionbadge:`clang-format 16` :ref:`Â¶ <RequiresExpressionIndentation>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4887
msgid "The indentation used for requires expression bodies."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4891
msgid ""
"``REI_OuterScope`` (in configuration: ``OuterScope``) Align requires "
"expression body relative to the indentation level of the outer scope the "
"requires expression resides in. This is the default."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4903
msgid ""
"``REI_Keyword`` (in configuration: ``Keyword``) Align requires expression "
"body relative to the ``requires`` keyword."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4976
msgid ""
"**SeparateDefinitionBlocks** (``SeparateDefinitionStyle``) :versionbadge:"
"`clang-format 14` :ref:`Â¶ <SeparateDefinitionBlocks>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4918
msgid ""
"Specifies the use of empty lines to separate definition blocks, including "
"classes, structs, enums, and functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4967
msgid ""
"``SDS_Leave`` (in configuration: ``Leave``) Leave definition blocks as they "
"are."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4970
msgid ""
"``SDS_Always`` (in configuration: ``Always``) Insert an empty line between "
"definition blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4973
msgid ""
"``SDS_Never`` (in configuration: ``Never``) Remove any empty line between "
"definition blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5000
msgid ""
"**ShortNamespaceLines** (``Unsigned``) :versionbadge:`clang-format 13` :ref:"
"`Â¶ <ShortNamespaceLines>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4981
msgid ""
"The maximal number of unwrapped lines that a short namespace spans. Defaults "
"to 1."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:4984
msgid ""
"This determines the maximum length of short namespaces by counting unwrapped "
"lines (i.e. containing neither opening nor closing namespace brace) and "
"makes \"FixNamespaceComments\" omit adding end comments for those."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5005
msgid ""
"**SkipMacroDefinitionBody** (``Boolean``) :versionbadge:`clang-format 18` :"
"ref:`Â¶ <SkipMacroDefinitionBody>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5005
msgid "Do not format macro definition body."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5047
msgid ""
"**SortIncludes** (``SortIncludesOptions``) :versionbadge:`clang-format 3.8` :"
"ref:`Â¶ <SortIncludes>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5010
msgid "Controls if and how clang-format will sort ``#includes``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5014
msgid "``SI_Never`` (in configuration: ``Never``) Includes are never sorted."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5025
msgid ""
"``SI_CaseSensitive`` (in configuration: ``CaseSensitive``) Includes are "
"sorted in an ASCIIbetical or case sensitive fashion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5036
msgid ""
"``SI_CaseInsensitive`` (in configuration: ``CaseInsensitive``) Includes are "
"sorted in an alphabetical or case insensitive fashion."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5076
msgid ""
"**SortJavaStaticImport** (``SortJavaStaticImportOptions``) :versionbadge:"
"`clang-format 12` :ref:`Â¶ <SortJavaStaticImport>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5052
msgid ""
"When sorting Java imports, by default static imports are placed before non-"
"static imports. If ``JavaStaticImportAfterImport`` is ``After``, static "
"imports are placed after non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5058
msgid ""
"``SJSIO_Before`` (in configuration: ``Before``) Static imports are placed "
"before non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5067
msgid ""
"``SJSIO_After`` (in configuration: ``After``) Static imports are placed "
"after non-static imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5127
msgid ""
"**SortUsingDeclarations** (``SortUsingDeclarationsOptions``) :versionbadge:"
"`clang-format 5` :ref:`Â¶ <SortUsingDeclarations>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5081
msgid "Controls if and how clang-format will sort using declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5085
msgid ""
"``SUD_Never`` (in configuration: ``Never``) Using declarations are never "
"sorted."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5096
msgid ""
"``SUD_Lexicographic`` (in configuration: ``Lexicographic``) Using "
"declarations are sorted in the order defined as follows: Split the strings "
"by \"::\" and discard any initial empty strings. Sort the lists of names "
"lexicographically, and within those groups, names are in case-insensitive "
"lexicographic order."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5110
msgid ""
"``SUD_LexicographicNumeric`` (in configuration: ``LexicographicNumeric``) "
"Using declarations are sorted in the order defined as follows: Split the "
"strings by \"::\" and discard any initial empty strings. The last element of "
"each list is a non-namespace name; all others are namespace names. Sort the "
"lists of names lexicographically, where the sort order of individual names "
"is that all non-namespace names come before all namespace names, and within "
"those groups, names are in case-insensitive lexicographic order."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5137
msgid ""
"**SpaceAfterCStyleCast** (``Boolean``) :versionbadge:`clang-format 3.5` :ref:"
"`Â¶ <SpaceAfterCStyleCast>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5132
msgid "If ``true``, a space is inserted after C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5147
msgid ""
"**SpaceAfterLogicalNot** (``Boolean``) :versionbadge:`clang-format 9` :ref:"
"`Â¶ <SpaceAfterLogicalNot>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5142
msgid ""
"If ``true``, a space is inserted after the logical not operator (``!``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5157
msgid ""
"**SpaceAfterTemplateKeyword** (``Boolean``) :versionbadge:`clang-format 4` :"
"ref:`Â¶ <SpaceAfterTemplateKeyword>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5152
msgid "If ``true``, a space will be inserted after the 'template' keyword."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5199
msgid ""
"**SpaceAroundPointerQualifiers** (``SpaceAroundPointerQualifiersStyle``) :"
"versionbadge:`clang-format 12` :ref:`Â¶ <SpaceAroundPointerQualifiers>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5162
msgid ""
"Defines in which cases to put a space before or after pointer qualifiers"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5166
msgid ""
"``SAPQ_Default`` (in configuration: ``Default``) Don't ensure spaces around "
"pointer qualifiers and use PointerAlignment instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5175
msgid ""
"``SAPQ_Before`` (in configuration: ``Before``) Ensure that there is a space "
"before pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5183
msgid ""
"``SAPQ_After`` (in configuration: ``After``) Ensure that there is a space "
"after pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5191
msgid ""
"``SAPQ_Both`` (in configuration: ``Both``) Ensure that there is a space both "
"before and after pointer qualifiers."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5210
msgid ""
"**SpaceBeforeAssignmentOperators** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <SpaceBeforeAssignmentOperators>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5204
msgid "If ``false``, spaces will be removed before assignment operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5222
msgid ""
"**SpaceBeforeCaseColon** (``Boolean``) :versionbadge:`clang-format 12` :ref:"
"`Â¶ <SpaceBeforeCaseColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5215
msgid "If ``false``, spaces will be removed before case colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5236
msgid ""
"**SpaceBeforeCpp11BracedList** (``Boolean``) :versionbadge:`clang-format 7` :"
"ref:`Â¶ <SpaceBeforeCpp11BracedList>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5227
msgid ""
"If ``true``, a space will be inserted before a C++11 braced list used to "
"initialize an object (after the preceding identifier or type)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5247
msgid ""
"**SpaceBeforeCtorInitializerColon** (``Boolean``) :versionbadge:`clang-"
"format 7` :ref:`Â¶ <SpaceBeforeCtorInitializerColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5241
msgid ""
"If ``false``, spaces will be removed before constructor initializer colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5257
msgid ""
"**SpaceBeforeInheritanceColon** (``Boolean``) :versionbadge:`clang-format "
"7` :ref:`Â¶ <SpaceBeforeInheritanceColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5252
msgid "If ``false``, spaces will be removed before inheritance colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5270
msgid ""
"**SpaceBeforeJsonColon** (``Boolean``) :versionbadge:`clang-format 17` :ref:"
"`Â¶ <SpaceBeforeJsonColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5262
msgid ""
"If ``true``, a space will be added before a JSON colon. For other languages, "
"e.g. JavaScript, use ``SpacesInContainerLiterals`` instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5342
msgid ""
"**SpaceBeforeParens** (``SpaceBeforeParensStyle``) :versionbadge:`clang-"
"format 3.5` :ref:`Â¶ <SpaceBeforeParens>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5275
msgid "Defines in which cases to put a space before opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5279
msgid ""
"``SBPO_Never`` (in configuration: ``Never``) This is **deprecated** and "
"replaced by ``Custom`` below, with all ``SpaceBeforeParensOptions`` but "
"``AfterPlacementOperator`` set to ``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5284
msgid ""
"``SBPO_ControlStatements`` (in configuration: ``ControlStatements``) Put a "
"space before opening parentheses only after control statement keywords "
"(``for/if/while...``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5296
msgid ""
"``SBPO_ControlStatementsExceptControlMacros`` (in configuration: "
"``ControlStatementsExceptControlMacros``) Same as ``SBPO_ControlStatements`` "
"except this option doesn't apply to ForEach and If macros. This is useful in "
"projects where ForEach/If macros are treated as function calls instead of "
"control statements. ``SBPO_ControlStatementsExceptForEachMacros`` remains an "
"alias for backward compatibility."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5311
msgid ""
"``SBPO_NonEmptyParentheses`` (in configuration: ``NonEmptyParentheses``) Put "
"a space before opening parentheses only if the parentheses are not empty i."
"e. '()'"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5324
msgid ""
"``SBPO_Always`` (in configuration: ``Always``) Always put a space before "
"opening parentheses, except when it's prohibited by the syntax rules (in "
"function-like macro definitions) or when determined by other style rules "
"(after unary operators, opening parentheses, etc.)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5338
msgid ""
"``SBPO_Custom`` (in configuration: ``Custom``) Configure each individual "
"space before parentheses in ``SpaceBeforeParensOptions``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5460
msgid ""
"**SpaceBeforeParensOptions** (``SpaceBeforeParensCustom``) :versionbadge:"
"`clang-format 14` :ref:`Â¶ <SpaceBeforeParensOptions>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5347
msgid "Control of individual space before parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5349
msgid ""
"If ``SpaceBeforeParens`` is set to ``Custom``, use this to specify how each "
"individual space before parentheses case should be handled. Otherwise, this "
"is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5363
msgid "Precise control over the spacing before parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5373
msgid ""
"``bool AfterControlStatements`` If ``true``, put space between control "
"statement keywords (for/if/while...) and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5381
msgid ""
"``bool AfterForeachMacros`` If ``true``, put space between foreach macros "
"and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5389
msgid ""
"``bool AfterFunctionDeclarationName`` If ``true``, put a space between "
"function declaration name and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5397
msgid ""
"``bool AfterFunctionDefinitionName`` If ``true``, put a space between "
"function definition name and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5405
msgid ""
"``bool AfterIfMacros`` If ``true``, put space between if macros and opening "
"parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5413
msgid ""
"``bool AfterOverloadedOperator`` If ``true``, put a space between operator "
"overloading and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5422
msgid ""
"``bool AfterPlacementOperator`` If ``true``, put a space between operator "
"``new``/``delete`` and opening parenthesis."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5431
msgid ""
"``bool AfterRequiresInClause`` If ``true``, put space between requires "
"keyword in a requires clause and opening parentheses, if there is one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5441
msgid ""
"``bool AfterRequiresInExpression`` If ``true``, put space between requires "
"keyword in a requires expression and opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5452
msgid ""
"``bool BeforeNonEmptyParentheses`` If ``true``, put a space before opening "
"parentheses only if the parentheses are not empty."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5471
msgid ""
"**SpaceBeforeRangeBasedForLoopColon** (``Boolean``) :versionbadge:`clang-"
"format 7` :ref:`Â¶ <SpaceBeforeRangeBasedForLoopColon>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5465
msgid "If ``false``, spaces will be removed before range-based for loop colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5483
msgid ""
"**SpaceBeforeSquareBrackets** (``Boolean``) :versionbadge:`clang-format 10` :"
"ref:`Â¶ <SpaceBeforeSquareBrackets>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5476
msgid ""
"If ``true``, spaces will be before  ``[``. Lambdas will not be affected. "
"Only the first ``[`` will get a space added."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5494
msgid ""
"**SpaceInEmptyBlock** (``Boolean``) :versionbadge:`clang-format 10` :ref:`Â¶ "
"<SpaceInEmptyBlock>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5488
msgid "If ``true``, spaces will be inserted into ``{}``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5501
msgid ""
"**SpaceInEmptyParentheses** (``Boolean``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <SpaceInEmptyParentheses>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5499
msgid ""
"If ``true``, spaces may be inserted into ``()``. This option is "
"**deprecated**. See ``InEmptyParentheses`` of ``SpacesInParensOptions``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5523
msgid ""
"**SpacesBeforeTrailingComments** (``Unsigned``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <SpacesBeforeTrailingComments>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5506
msgid "The number of spaces before trailing line comments (``//`` - comments)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5509
msgid ""
"This does not affect trailing block comments (``/*`` - comments) as those "
"commonly have different usage patterns and a number of special cases.  In "
"the case of Verilog, it doesn't affect a comment right after the opening "
"parenthesis in the port or parameter list in a module header, because it is "
"probably for the port on the following line instead of the parenthesis it "
"follows."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5552
msgid ""
"**SpacesInAngles** (``SpacesInAnglesStyle``) :versionbadge:`clang-format "
"3.4` :ref:`Â¶ <SpacesInAngles>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5528
msgid "The SpacesInAnglesStyle to use for template argument lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5532
msgid ""
"``SIAS_Never`` (in configuration: ``Never``) Remove spaces after ``<`` and "
"before ``>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5540
msgid ""
"``SIAS_Always`` (in configuration: ``Always``) Add spaces after ``<`` and "
"before ``>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5548
msgid ""
"``SIAS_Leave`` (in configuration: ``Leave``) Keep a single space after ``<`` "
"and before ``>`` if any spaces were present. Option ``Standard: Cpp03`` "
"takes precedence."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5559
msgid ""
"**SpacesInCStyleCastParentheses** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <SpacesInCStyleCastParentheses>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5557
msgid ""
"If ``true``, spaces may be inserted into C style casts. This option is "
"**deprecated**. See ``InCStyleCasts`` of ``SpacesInParensOptions``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5567
msgid ""
"**SpacesInConditionalStatement** (``Boolean``) :versionbadge:`clang-format "
"10` :ref:`Â¶ <SpacesInConditionalStatement>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5564
msgid ""
"If ``true``, spaces will be inserted around if/for/switch/while conditions. "
"This option is **deprecated**. See ``InConditionalStatements`` of "
"``SpacesInParensOptions``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5580
msgid ""
"**SpacesInContainerLiterals** (``Boolean``) :versionbadge:`clang-format "
"3.7` :ref:`Â¶ <SpacesInContainerLiterals>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5572
msgid ""
"If ``true``, spaces are inserted inside container literals (e.g.  ObjC and "
"Javascript array and dict literals). For JSON, use ``SpaceBeforeJsonColon`` "
"instead."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5626
msgid ""
"**SpacesInLineCommentPrefix** (``SpacesInLineComment``) :versionbadge:`clang-"
"format 13` :ref:`Â¶ <SpacesInLineCommentPrefix>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5585
msgid ""
"How many spaces are allowed at the start of a line comment. To disable the "
"maximum set it to ``-1``, apart from that the maximum takes precedence over "
"the minimum."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5601
msgid ""
"Note that in line comment sections the relative indent of the subsequent "
"lines is kept, that means the following:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5617
msgid "This option has only effect if ``ReflowComments`` is set to ``true``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5621
msgid "Control of spaces within a single line comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5623
msgid ""
"``unsigned Minimum`` The minimum number of spaces at the start of the "
"comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5625
msgid ""
"``unsigned Maximum`` The maximum number of spaces at the start of the "
"comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5651
msgid ""
"**SpacesInParens** (``SpacesInParensStyle``) :versionbadge:`clang-format "
"17` :ref:`Â¶ <SpacesInParens>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5631
msgid ""
"Defines in which cases spaces will be inserted after ``(`` and before ``)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5636
msgid ""
"``SIPO_Never`` (in configuration: ``Never``) Never put a space in "
"parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5647
msgid ""
"``SIPO_Custom`` (in configuration: ``Custom``) Configure each individual "
"space in parentheses in `SpacesInParensOptions`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5716
msgid ""
"**SpacesInParensOptions** (``SpacesInParensCustom``) :versionbadge:`clang-"
"format 17` :ref:`Â¶ <SpacesInParensOptions>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5656
msgid "Control of individual spaces in parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5658
msgid ""
"If ``SpacesInParens`` is set to ``Custom``, use this to specify how each "
"individual space in parentheses case should be handled. Otherwise, this is "
"ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5672
msgid "Precise control over the spacing in parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5682
msgid ""
"``bool InConditionalStatements`` Put a space in parentheses only inside "
"conditional statements (``for/if/while/switch...``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5691
msgid "``bool InCStyleCasts`` Put a space in C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5698
msgid ""
"``bool InEmptyParentheses`` Put a space in parentheses only if the "
"parentheses are empty i.e. '()'"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5710
msgid ""
"``bool Other`` Put a space in parentheses not covered by preceding options."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5725
msgid ""
"**SpacesInParentheses** (``Boolean``) :versionbadge:`clang-format 3.7` :ref:"
"`Â¶ <SpacesInParentheses>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5721
msgid ""
"If ``true``, spaces will be inserted after ``(`` and before ``)``. This "
"option is **deprecated**. The previous behavior is preserved by using "
"``SpacesInParens`` with ``Custom`` and by setting all "
"``SpacesInParensOptions`` to ``true`` except for ``InCStyleCasts`` and "
"``InEmptyParentheses``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5738
msgid ""
"**SpacesInSquareBrackets** (``Boolean``) :versionbadge:`clang-format 3.7` :"
"ref:`Â¶ <SpacesInSquareBrackets>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5730
msgid ""
"If ``true``, spaces will be inserted after ``[`` and before ``]``. Lambdas "
"without arguments or unspecified size array declarations will not be "
"affected."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5775
msgid ""
"**Standard** (``LanguageStandard``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<Standard>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5743
msgid "Parse and format C++ constructs compatible with this standard."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5752
msgid ""
"``LS_Cpp03`` (in configuration: ``c++03``) Parse and format as C++03. "
"``Cpp03`` is a deprecated alias for ``c++03``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5756
msgid "``LS_Cpp11`` (in configuration: ``c++11``) Parse and format as C++11."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5759
msgid "``LS_Cpp14`` (in configuration: ``c++14``) Parse and format as C++14."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5762
msgid "``LS_Cpp17`` (in configuration: ``c++17``) Parse and format as C++17."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5765
msgid "``LS_Cpp20`` (in configuration: ``c++20``) Parse and format as C++20."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5768
msgid ""
"``LS_Latest`` (in configuration: ``Latest``) Parse and format using the "
"latest supported language version. ``Cpp11`` is a deprecated alias for "
"``Latest``"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5772
msgid ""
"``LS_Auto`` (in configuration: ``Auto``) Automatic detection based on the "
"input."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5794
msgid ""
"**StatementAttributeLikeMacros** (``List of Strings``) :versionbadge:`clang-"
"format 12` :ref:`Â¶ <StatementAttributeLikeMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5780
msgid ""
"Macros which are ignored in front of a statement, as if they were an "
"attribute. So that they are not parsed as identifier, for example for Qts "
"emit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5806
msgid ""
"**StatementMacros** (``List of Strings``) :versionbadge:`clang-format 8` :"
"ref:`Â¶ <StatementMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5799
msgid "A vector of macros that should be interpreted as complete statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5802
msgid ""
"Typical macros are expressions, and require a semi-colon to be added; "
"sometimes this is not the case, and this allows to make clang-format aware "
"of such cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5806
msgid "For example: Q_UNUSED"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5811
msgid ""
"**TabWidth** (``Unsigned``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<TabWidth>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5811
msgid "The number of columns used for tab stops."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5821
msgid ""
"**TypeNames** (``List of Strings``) :versionbadge:`clang-format 17` :ref:`Â¶ "
"<TypeNames>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5816
msgid ""
"A vector of non-keyword identifiers that should be interpreted as type names."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5819
msgid ""
"A ``*``, ``&``, or ``&&`` between a type name and another non-keyword "
"identifier is annotated as a pointer or reference token instead of a binary "
"operator."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5841
msgid ""
"**TypenameMacros** (``List of Strings``) :versionbadge:`clang-format 9` :ref:"
"`Â¶ <TypenameMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5826
msgid ""
"A vector of macros that should be interpreted as type declarations instead "
"of as function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5841
msgid "For example: OpenSSL STACK_OF, BSD LIST_ENTRY."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5846
msgid ""
"**UseCRLF** (``Boolean``) :versionbadge:`clang-format 10` :ref:`Â¶ <UseCRLF>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5846
msgid ""
"This option is **deprecated**. See ``LF`` and ``CRLF`` of ``LineEnding``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5873
msgid ""
"**UseTab** (``UseTabStyle``) :versionbadge:`clang-format 3.7` :ref:`Â¶ "
"<UseTab>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5851
msgid "The way to use tab characters in the resulting file."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5855
msgid "``UT_Never`` (in configuration: ``Never``) Never use tab."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5858
msgid ""
"``UT_ForIndentation`` (in configuration: ``ForIndentation``) Use tabs only "
"for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5861
msgid ""
"``UT_ForContinuationAndIndentation`` (in configuration: "
"``ForContinuationAndIndentation``) Fill all leading whitespace with tabs, "
"and use spaces for alignment that appears within a line (e.g. consecutive "
"assignments and declarations)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5865
msgid ""
"``UT_AlignWithSpaces`` (in configuration: ``AlignWithSpaces``) Use tabs for "
"line continuation and indentation, and spaces for alignment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5869
msgid ""
"``UT_Always`` (in configuration: ``Always``) Use tabs whenever we need to "
"fill whitespace that spans at least from one tab stop to the next one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5889
msgid ""
"**VerilogBreakBetweenInstancePorts** (``Boolean``) :versionbadge:`clang-"
"format 17` :ref:`Â¶ <VerilogBreakBetweenInstancePorts>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5878
msgid "For Verilog, put each port on its own line in module instantiations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5909
msgid ""
"**WhitespaceSensitiveMacros** (``List of Strings``) :versionbadge:`clang-"
"format 11` :ref:`Â¶ <WhitespaceSensitiveMacros>`"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5894
msgid ""
"A vector of macros which are whitespace-sensitive and should not be touched."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5909
msgid "For example: BOOST_PP_STRINGIZE"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5914
msgid "Adding additional style options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5916
msgid ""
"Each additional style option adds costs to the clang-format project. Some of "
"these costs affect the clang-format development itself, as we need to make "
"sure that any given combination of options work and that new features don't "
"break any of the existing options in any way. There are also costs for end "
"users as options become less discoverable and people have to think about and "
"make a decision on options they don't really care about."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5923
msgid ""
"The goal of the clang-format project is more on the side of supporting a "
"limited set of styles really well as opposed to supporting every single "
"style used by a codebase somewhere in the wild. Of course, we do want to "
"support all major projects and thus have established the following bar for "
"adding style options. Each new style option must .."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5929
msgid "be used in a project of significant size (have dozens of contributors)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5930
msgid "have a publicly accessible style guide"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5931
msgid "have a person willing to contribute and maintain patches"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5934
msgid "Examples"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5936
msgid ""
"A style similar to the `Linux Kernel style <https://www.kernel.org/doc/html/"
"latest/process/coding-style.html>`_:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5948
msgid "The result is (imagine that tabs are used for indentation here):"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5977
msgid "A style similar to the default Visual Studio formatting style:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5988
msgid "The result is:"
msgstr ""
