# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/clang.rst:2
msgid "clang - the Clang C, C++, and Objective-C compiler"
msgstr ""

#: ../../../CommandGuide/clang.rst:5
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/clang.rst:7
msgid ":program:`clang` [*options*] *filename ...*"
msgstr ""

#: ../../../CommandGuide/clang.rst:10
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/clang.rst:12
msgid ""
":program:`clang` is a C, C++, and Objective-C compiler which encompasses "
"preprocessing, parsing, optimization, code generation, assembly, and "
"linking. Depending on which high-level mode setting is passed, Clang will "
"stop before doing a full link.  While Clang is highly integrated, it is "
"important to understand the stages of compilation, to understand how to "
"invoke it.  These stages are:"
msgstr ""

#: ../../../CommandGuide/clang.rst:23
msgid "Driver"
msgstr ""

#: ../../../CommandGuide/clang.rst:20
msgid ""
"The clang executable is actually a small driver which controls the overall "
"execution of other tools such as the compiler, assembler and linker. "
"Typically you do not need to interact with the driver, but you transparently "
"use it to run the other tools."
msgstr ""

#: ../../../CommandGuide/clang.rst:29
msgid "Preprocessing"
msgstr ""

#: ../../../CommandGuide/clang.rst:26
msgid ""
"This stage handles tokenization of the input source file, macro expansion, "
"#include expansion and handling of other preprocessor directives.  The "
"output of this stage is typically called a \".i\" (for C), \".ii\" (for C+"
"+), \".mi\" (for Objective-C), or \".mii\" (for Objective-C++) file."
msgstr ""

#: ../../../CommandGuide/clang.rst:37
msgid "Parsing and Semantic Analysis"
msgstr ""

#: ../../../CommandGuide/clang.rst:32
msgid ""
"This stage parses the input file, translating preprocessor tokens into a "
"parse tree.  Once in the form of a parse tree, it applies semantic analysis "
"to compute types for expressions as well and determine whether the code is "
"well formed. This stage is responsible for generating most of the compiler "
"warnings as well as parse errors. The output of this stage is an \"Abstract "
"Syntax Tree\" (AST)."
msgstr ""

#: ../../../CommandGuide/clang.rst:47
msgid "Code Generation and Optimization"
msgstr ""

#: ../../../CommandGuide/clang.rst:40
msgid ""
"This stage translates an AST into low-level intermediate code (known as "
"\"LLVM IR\") and ultimately to machine code.  This phase is responsible for "
"optimizing the generated code and handling target-specific code generation. "
"The output of this stage is typically called a \".s\" file or \"assembly\" "
"file."
msgstr ""

#: ../../../CommandGuide/clang.rst:45
msgid ""
"Clang also supports the use of an integrated assembler, in which the code "
"generator produces object files directly. This avoids the overhead of "
"generating the \".s\" file and of calling the target assembler."
msgstr ""

#: ../../../CommandGuide/clang.rst:52
msgid "Assembler"
msgstr ""

#: ../../../CommandGuide/clang.rst:50
msgid ""
"This stage runs the target assembler to translate the output of the compiler "
"into a target object file. The output of this stage is typically called a \"."
"o\" file or \"object\" file."
msgstr ""

#: ../../../CommandGuide/clang.rst:57
msgid "Linker"
msgstr ""

#: ../../../CommandGuide/clang.rst:55
msgid ""
"This stage runs the target linker to merge multiple object files into an "
"executable or dynamic library. The output of this stage is typically called "
"an \"a.out\", \".dylib\" or \".so\" file."
msgstr ""

#: ../../../CommandGuide/clang.rst:59
msgid ":program:`Clang Static Analyzer`"
msgstr ""

#: ../../../CommandGuide/clang.rst:61
msgid ""
"The Clang Static Analyzer is a tool that scans source code to try to find "
"bugs through code analysis.  This tool uses many parts of Clang and is built "
"into the same driver.  Please see <http://clang-analyzer.llvm.org> for more "
"details on how to use the static analyzer."
msgstr ""

#: ../../../CommandGuide/clang.rst:67
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/clang.rst:70
msgid "Stage Selection Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:74
msgid "Run the preprocessor stage."
msgstr ""

#: ../../../CommandGuide/clang.rst:78
msgid "Run the preprocessor, parser and type checking stages."
msgstr ""

#: ../../../CommandGuide/clang.rst:82
msgid ""
"Run the previous stages as well as LLVM generation and optimization stages "
"and target-specific code generation, producing an assembly file."
msgstr ""

#: ../../../CommandGuide/clang.rst:87
msgid ""
"Run all of the above, plus the assembler, generating a target \".o\" object "
"file."
msgstr ""

#: ../../../CommandGuide/clang.rst:91
msgid ""
"If no stage selection option is specified, all stages above are run, and the "
"linker is run to combine the results into an executable or shared library."
msgstr ""

#: ../../../CommandGuide/clang.rst:95
msgid "Language Selection and Mode Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:99
msgid "Treat subsequent input files as having type language."
msgstr ""

#: ../../../CommandGuide/clang.rst:103
msgid "Specify the language standard to compile for."
msgstr ""

#: ../../../CommandGuide/clang.rst:107
msgid ""
"Specify the C++ standard library to use; supported options are libstdc++ and "
"libc++."
msgstr ""

#: ../../../CommandGuide/clang.rst:112
msgid "Same as -std=c89."
msgstr ""

#: ../../../CommandGuide/clang.rst:116
msgid ""
"Treat source input files as Objective-C and Object-C++ inputs respectively."
msgstr ""

#: ../../../CommandGuide/clang.rst:120
msgid "Enable trigraphs."
msgstr ""

#: ../../../CommandGuide/clang.rst:124
msgid ""
"Indicate that the file should be compiled for a freestanding, not a hosted, "
"environment."
msgstr ""

#: ../../../CommandGuide/clang.rst:129
msgid ""
"Disable special handling and optimizations of builtin functions like :c:func:"
"`strlen` and :c:func:`malloc`."
msgstr ""

#: ../../../CommandGuide/clang.rst:134
msgid ""
"Indicate that math functions should be treated as updating :c:data:`errno`."
msgstr ""

#: ../../../CommandGuide/clang.rst:138
msgid "Enable support for Pascal-style strings with \"\\\\pfoo\"."
msgstr ""

#: ../../../CommandGuide/clang.rst:142
msgid "Enable support for Microsoft extensions."
msgstr ""

#: ../../../CommandGuide/clang.rst:146
msgid "Set _MSC_VER. Defaults to 1300 on Windows. Not set otherwise."
msgstr ""

#: ../../../CommandGuide/clang.rst:150
msgid "Enable support for Borland extensions."
msgstr ""

#: ../../../CommandGuide/clang.rst:154
msgid ""
"Make all string literals default to writable.  This disables uniquing of "
"strings and other optimizations."
msgstr ""

#: ../../../CommandGuide/clang.rst:159
msgid "Allow loose type checking rules for implicit vector conversions."
msgstr ""

#: ../../../CommandGuide/clang.rst:163
msgid "Enable the \"Blocks\" language feature."
msgstr ""

#: ../../../CommandGuide/clang.rst:167
msgid ""
"Indicate that Objective-C code should be compiled in GC-only mode, which "
"only works when Objective-C Garbage Collection is enabled."
msgstr ""

#: ../../../CommandGuide/clang.rst:172
msgid ""
"Indicate that Objective-C code should be compiled in hybrid-GC mode, which "
"works with both GC and non-GC mode."
msgstr ""

#: ../../../CommandGuide/clang.rst:177
msgid ""
"Select the Objective-C ABI version to use. Available versions are 1 (legacy "
"\"fragile\" ABI), 2 (non-fragile ABI 1), and 3 (non-fragile ABI 2)."
msgstr ""

#: ../../../CommandGuide/clang.rst:182
msgid ""
"Select the Objective-C non-fragile ABI version to use by default. This will "
"only be used as the Objective-C ABI when the non-fragile ABI is enabled "
"(either via :option:`-fobjc-nonfragile-abi`, or because it is the platform "
"default)."
msgstr ""

#: ../../../CommandGuide/clang.rst:189
msgid ""
"Enable use of the Objective-C non-fragile ABI. On platforms for which this "
"is the default ABI, it can be disabled with :option:`-fno-objc-nonfragile-"
"abi`."
msgstr ""

#: ../../../CommandGuide/clang.rst:193
msgid "Target Selection Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:195
msgid ""
"Clang fully supports cross compilation as an inherent part of its design. "
"Depending on how your version of Clang is configured, it may have support "
"for a number of cross compilers, or may only support a native target."
msgstr ""

#: ../../../CommandGuide/clang.rst:201
msgid "Specify the architecture to build for."
msgstr ""

#: ../../../CommandGuide/clang.rst:205
msgid ""
"When building for Mac OS X, specify the minimum version supported by your "
"application."
msgstr ""

#: ../../../CommandGuide/clang.rst:210
msgid ""
"When building for iPhone OS, specify the minimum version supported by your "
"application."
msgstr ""

#: ../../../CommandGuide/clang.rst:215
msgid ""
"Specify that Clang should generate code for a specific processor family "
"member and later.  For example, if you specify -march=i486, the compiler is "
"allowed to generate instructions that are valid on i486 and later "
"processors, but which may not exist on earlier ones."
msgstr ""

#: ../../../CommandGuide/clang.rst:222
msgid "Code Generation Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:226
msgid "Specify which optimization level to use:"
msgstr ""

#: ../../../CommandGuide/clang.rst:228
msgid ""
":option:`-O0` Means \"no optimization\": this level compiles the fastest and "
"generates the most debuggable code."
msgstr ""

#: ../../../CommandGuide/clang.rst:231
msgid ":option:`-O1` Somewhere between :option:`-O0` and :option:`-O2`."
msgstr ""

#: ../../../CommandGuide/clang.rst:233
msgid ""
":option:`-O2` Moderate level of optimization which enables most "
"optimizations."
msgstr ""

#: ../../../CommandGuide/clang.rst:236
msgid ""
":option:`-O3` Like :option:`-O2`, except that it enables optimizations that "
"take longer to perform or that may generate larger code (in an attempt to "
"make the program run faster)."
msgstr ""

#: ../../../CommandGuide/clang.rst:240
msgid ""
":option:`-Ofast` Enables all the optimizations from :option:`-O3` along with "
"other aggressive optimizations that may violate strict compliance with "
"language standards."
msgstr ""

#: ../../../CommandGuide/clang.rst:244
msgid ""
":option:`-Os` Like :option:`-O2` with extra optimizations to reduce code "
"size."
msgstr ""

#: ../../../CommandGuide/clang.rst:247
msgid ""
":option:`-Oz` Like :option:`-Os` (and thus :option:`-O2`), but reduces code "
"size further."
msgstr ""

#: ../../../CommandGuide/clang.rst:250
msgid ":option:`-O` Equivalent to :option:`-O2`."
msgstr ""

#: ../../../CommandGuide/clang.rst:252
msgid ":option:`-O4` and higher"
msgstr ""

#: ../../../CommandGuide/clang.rst:254
msgid "Currently equivalent to :option:`-O3`"
msgstr ""

#: ../../../CommandGuide/clang.rst:258
msgid ""
"Control debug information output.  Note that Clang debug information works "
"best at :option:`-O0`.  When more than one option starting with `-g` is "
"specified, the last one wins:"
msgstr ""

#: ../../../CommandGuide/clang.rst:262
msgid ":option:`-g` Generate debug information."
msgstr ""

#: ../../../CommandGuide/clang.rst:264
msgid ""
":option:`-gline-tables-only` Generate only line table debug information. "
"This allows for symbolicated backtraces with inlining information, but does "
"not include any information about variables, their locations or types."
msgstr ""

#: ../../../CommandGuide/clang.rst:268
msgid ""
":option:`-gmodules` Generate debug information that contains external "
"references to types defined in Clang modules or precompiled headers instead "
"of emitting redundant debug type information into every object file.  This "
"option transparently switches the Clang module format to object file "
"containers that hold the Clang module together with the debug information. "
"When compiling a program that uses Clang modules or precompiled headers, "
"this option produces complete debug information with faster compile times "
"and much smaller object files."
msgstr ""

#: ../../../CommandGuide/clang.rst:277
msgid ""
"This option should not be used when building static libraries for "
"distribution to other machines because the debug info will contain "
"references to the module cache on the machine the object files in the "
"library were built on."
msgstr ""

#: ../../../CommandGuide/clang.rst:284
msgid ""
"Clang supports a number of optimizations to reduce the size of debug "
"information in the binary. They work based on the assumption that the debug "
"type information can be spread out over multiple compilation units. For "
"instance, Clang will not emit type definitions for types that are not needed "
"by a module and could be replaced with a forward declaration. Further, Clang "
"will only emit type info for a dynamic C++ class in the module that contains "
"the vtable for the class."
msgstr ""

#: ../../../CommandGuide/clang.rst:292
msgid ""
"The :option:`-fstandalone-debug` option turns off these optimizations. This "
"is useful when working with 3rd-party libraries that don't come with debug "
"information.  This is the default on Darwin.  Note that Clang will never "
"emit type information for types that are not referenced at all by the "
"program."
msgstr ""

#: ../../../CommandGuide/clang.rst:300
msgid ""
"Enable generation of unwind information. This allows exceptions to be thrown "
"through Clang compiled stack frames.  This is on by default in x86-64."
msgstr ""

#: ../../../CommandGuide/clang.rst:305
msgid ""
"Generate code to catch integer overflow errors.  Signed integer overflow is "
"undefined in C. With this flag, extra code is generated to detect this and "
"abort when it happens."
msgstr ""

#: ../../../CommandGuide/clang.rst:311
msgid "This flag sets the default visibility level."
msgstr ""

#: ../../../CommandGuide/clang.rst:315
msgid ""
"This flag specifies that variables without initializers get common linkage. "
"It can be disabled with :option:`-fno-common`."
msgstr ""

#: ../../../CommandGuide/clang.rst:320
msgid ""
"Set the default thread-local storage (TLS) model to use for thread-local "
"variables. Valid values are: \"global-dynamic\", \"local-dynamic\", "
"\"initial-exec\" and \"local-exec\". The default is \"global-dynamic\". The "
"default model can be overridden with the tls_model attribute. The compiler "
"will try to choose a more efficient model if possible."
msgstr ""

#: ../../../CommandGuide/clang.rst:328
msgid ""
"Generate output files in LLVM formats, suitable for link time optimization. "
"When used with :option:`-S` this generates LLVM intermediate language "
"assembly files, otherwise this generates LLVM bitcode format object files "
"(which may be passed to the linker depending on the stage selection options)."
msgstr ""

#: ../../../CommandGuide/clang.rst:334
msgid "Driver Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:338
msgid "Print (but do not run) the commands to run for this compilation."
msgstr ""

#: ../../../CommandGuide/clang.rst:342
msgid "Display available options."
msgstr ""

#: ../../../CommandGuide/clang.rst:346
msgid "Do not emit any warnings for unused driver arguments."
msgstr ""

#: ../../../CommandGuide/clang.rst:350
msgid "Pass the comma separated arguments in args to the assembler."
msgstr ""

#: ../../../CommandGuide/clang.rst:354
msgid "Pass the comma separated arguments in args to the linker."
msgstr ""

#: ../../../CommandGuide/clang.rst:358
msgid "Pass the comma separated arguments in args to the preprocessor."
msgstr ""

#: ../../../CommandGuide/clang.rst:362
msgid "Pass arg to the static analyzer."
msgstr ""

#: ../../../CommandGuide/clang.rst:366
msgid "Pass arg to the assembler."
msgstr ""

#: ../../../CommandGuide/clang.rst:370
msgid "Pass arg to the linker."
msgstr ""

#: ../../../CommandGuide/clang.rst:374
msgid "Pass arg to the preprocessor."
msgstr ""

#: ../../../CommandGuide/clang.rst:378
msgid "Write output to file."
msgstr ""

#: ../../../CommandGuide/clang.rst:382
msgid "Print the full library path of file."
msgstr ""

#: ../../../CommandGuide/clang.rst:386
msgid "Print the library path for \"libgcc.a\"."
msgstr ""

#: ../../../CommandGuide/clang.rst:390
msgid "Print the full program path of name."
msgstr ""

#: ../../../CommandGuide/clang.rst:394
msgid "Print the paths used for finding libraries and programs."
msgstr ""

#: ../../../CommandGuide/clang.rst:398
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../CommandGuide/clang.rst:402
msgid ""
"Used to enable and disable, respectively, the use of the integrated "
"assembler. Whether the integrated assembler is on by default is target "
"dependent."
msgstr ""

#: ../../../CommandGuide/clang.rst:408
msgid "Time individual commands."
msgstr ""

#: ../../../CommandGuide/clang.rst:412
msgid "Print timing summary of each stage of compilation."
msgstr ""

#: ../../../CommandGuide/clang.rst:416
msgid "Show commands to run and use verbose output."
msgstr ""

#: ../../../CommandGuide/clang.rst:420
msgid "Diagnostics Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:424
msgid ""
"These options control how Clang prints out information about diagnostics "
"(errors and warnings). Please see the Clang User's Manual for more "
"information."
msgstr ""

#: ../../../CommandGuide/clang.rst:428
msgid "Preprocessor Options"
msgstr ""

#: ../../../CommandGuide/clang.rst:432
msgid ""
"Adds an implicit #define into the predefines buffer which is read before the "
"source file is preprocessed."
msgstr ""

#: ../../../CommandGuide/clang.rst:437
msgid ""
"Adds an implicit #undef into the predefines buffer which is read before the "
"source file is preprocessed."
msgstr ""

#: ../../../CommandGuide/clang.rst:442
msgid ""
"Adds an implicit #include into the predefines buffer which is read before "
"the source file is preprocessed."
msgstr ""

#: ../../../CommandGuide/clang.rst:447
msgid "Add the specified directory to the search path for include files."
msgstr ""

#: ../../../CommandGuide/clang.rst:451
msgid ""
"Add the specified directory to the search path for framework include files."
msgstr ""

#: ../../../CommandGuide/clang.rst:455
msgid ""
"Do not search the standard system directories or compiler builtin "
"directories for include files."
msgstr ""

#: ../../../CommandGuide/clang.rst:460
msgid ""
"Do not search the standard system directories for include files, but do "
"search compiler builtin include directories."
msgstr ""

#: ../../../CommandGuide/clang.rst:465
msgid "Do not search clang's builtin directory for include files."
msgstr ""

#: ../../../CommandGuide/clang.rst:469
msgid "ENVIRONMENT"
msgstr ""

#: ../../../CommandGuide/clang.rst:473
msgid ""
"These environment variables are checked, in order, for the location to write "
"temporary files used during the compilation process."
msgstr ""

#: ../../../CommandGuide/clang.rst:478
msgid ""
"If this environment variable is present, it is treated as a delimited list "
"of paths to be added to the default system include path list. The delimiter "
"is the platform dependent delimiter, as used in the PATH environment "
"variable."
msgstr ""

#: ../../../CommandGuide/clang.rst:482
msgid "Empty components in the environment variable are ignored."
msgstr ""

#: ../../../CommandGuide/clang.rst:486
msgid ""
"These environment variables specify additional paths, as for :envvar:"
"`CPATH`, which are only used when processing the appropriate language."
msgstr ""

#: ../../../CommandGuide/clang.rst:491
msgid ""
"If :option:`-mmacosx-version-min` is unspecified, the default deployment "
"target is read from this environment variable. This option only affects "
"Darwin targets."
msgstr ""

#: ../../../CommandGuide/clang.rst:496
msgid "BUGS"
msgstr ""

#: ../../../CommandGuide/clang.rst:498
msgid ""
"To report bugs, please visit <http://llvm.org/bugs/>.  Most bug reports "
"should include preprocessed source files (use the :option:`-E` option) and "
"the full output of the compiler, along with information to reproduce."
msgstr ""

#: ../../../CommandGuide/clang.rst:503
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/clang.rst:505
msgid ":manpage:`as(1)`, :manpage:`ld(1)`"
msgstr ""
