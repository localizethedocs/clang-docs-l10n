# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/user-docs/FAQ.rst:2
msgid "FAQ and How to Deal with Common False Positives"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:8
msgid "Custom Assertions"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:10
msgid ""
"Q: How do I tell the analyzer that I do not want the bug being reported here "
"since my custom error handler will safely end the execution before the bug "
"is reached?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:14
msgid ""
"You can tell the analyzer that this path is unreachable by teaching it about "
"your `custom assertion handlers <Annotations.html#custom-assertion-"
"handlers>`__. For example, you can modify the code segment as following:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:26
msgid "Null Pointer Dereference"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:28
msgid ""
"Q: The analyzer reports a null dereference, but I know that the pointer is "
"never null. How can I tell the analyzer that a pointer can never be null?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:32
msgid ""
"The reason the analyzer often thinks that a pointer can be null is because "
"the preceding code checked compared it against null. If you are absolutely "
"sure that it cannot be null, remove the preceding check and, preferably, add "
"an assertion as well. For example:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:43
msgid "Dead Store"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:45
msgid ""
"Q: How do I tell the static analyzer that I don't care about a specific dead "
"store?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:47
msgid ""
"When the analyzer sees that a value stored into a variable is never used, "
"it's going to produce a message similar to this one:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:53
msgid ""
"You can use the ``(void)x;`` idiom to acknowledge that there is a dead store "
"in your code but you do not want it to be reported in the future."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:56
msgid "Unused Instance Variable"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:58
msgid ""
"Q: How do I tell the static analyzer that I don't care about a specific "
"unused instance variable in Objective-C?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:60
msgid ""
"When the analyzer sees that a value stored into a variable is never used, it "
"is going to produce a message similar to this one:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:66
msgid ""
"You can add ``__attribute__((unused))`` to the instance variable declaration "
"to suppress the warning."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:69
msgid "Unlocalized String"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:71
msgid ""
"Q: How do I tell the static analyzer that I don't care about a specific "
"unlocalized string?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:73
msgid ""
"When the analyzer sees that an unlocalized string is passed to a method that "
"will present that string to the user, it is going to produce a message "
"similar to this one:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:79
msgid ""
"If your project deliberately uses unlocalized user-facing strings (for "
"example, in a debugging UI that is never shown to users), you can suppress "
"the analyzer warnings (and document your intent) with a function that just "
"returns its input but is annotated to return a localized string:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:88
msgid "You can then call this function when creating your debugging UI:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:94
msgid ""
"Some projects may also find it useful to use NSLocalizedString but add "
"\"DNL\" or \"Do Not Localize\" to the string contents as a convention:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:103
msgid "Dealloc in Manual Retain/Release"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:105
msgid ""
"Q: How do I tell the analyzer that my instance variable does not need to be "
"released in -dealloc under Manual Retain/Release?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:107
msgid ""
"If your class only uses an instance variable for part of its lifetime, it "
"may maintain an invariant guaranteeing that the instance variable is always "
"released before -dealloc. In this case, you can silence a warning about a "
"missing release by either adding ``assert(_ivar == nil)`` or an explicit "
"release ``[_ivar release]`` (which will be a no-op when the variable is nil) "
"in -dealloc."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:110
msgid "Deciding Nullability"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:112
msgid ""
"Q: How do I decide whether a method's return type should be _Nullable or "
"_Nonnull?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:114
msgid ""
"Depending on the implementation of the method, this puts you in one of five "
"situations:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:116
msgid "You actually never return nil."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:117
msgid ""
"You do return nil sometimes, and callers are supposed to handle that. This "
"includes cases where your method is documented to return nil given certain "
"inputs."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:118
msgid ""
"You return nil based on some external condition (such as an out-of-memory "
"error), but the client can't do anything about it either."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:119
msgid ""
"You return nil only when the caller passes input documented to be invalid. "
"That means it's the client's fault."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:120
msgid "You return nil in some totally undocumented case."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:122
msgid ""
"In (1) you should annotate the method as returning a ``_Nonnull`` object."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:124
msgid "In (2) the method should be marked ``_Nullable``."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:126
msgid ""
"In (3) you should probably annotate the method ``_Nonnull``. Why? Because no "
"callers will actually check for nil, given that they can't do anything about "
"the situation and don't know what went wrong. At this point things have gone "
"so poorly that there's basically no way to recover."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:128
msgid ""
"The least happy case is (4) because the resulting program will almost "
"certainly either crash or just silently do the wrong thing. If this is a new "
"method or you control the callers, you can use ``NSParameterAssert()`` (or "
"the equivalent) to check the precondition and remove the nil return. But if "
"you don't control the callers and they rely on this behavior, you should "
"return mark the method ``_Nonnull`` and return nil cast to _Nonnull anyway."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:130
msgid ""
"If you're in (5), document it, then figure out if you're now in (2), (3), or "
"(4)."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:133
msgid "Intentional Nullability Violation"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:135
msgid ""
"Q: How do I tell the analyzer that I am intentionally violating nullability?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:137
msgid ""
"In some cases, it may make sense for methods to intentionally violate "
"nullability. For example, your method may — for reasons of backward "
"compatibility — chose to return nil and log an error message in a method "
"with a non-null return type when the client violated a documented "
"precondition rather than check the precondition with ``NSAssert()``. In "
"these cases, you can suppress the analyzer warning with a cast:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:143
msgid "Note that this cast does not affect code generation."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:146
msgid "Ensuring Loop Body Execution"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:148
msgid ""
"Q: The analyzer assumes that a loop body is never entered. How can I tell it "
"that the loop body will be entered at least once?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:152
msgid ""
"In cases where you know that a loop will always be entered at least once, "
"you can use assertions to inform the analyzer. For example:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:164
msgid ""
"By adding ``assert(length > 0)`` in the beginning of the function, you tell "
"the analyzer that your code is never expecting a zero or a negative value, "
"so it won't need to test the correctness of those paths."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:167
msgid "Suppressing Specific Warnings"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:169
msgid "Q: How can I suppress a specific analyzer warning?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:171
msgid ""
"When you encounter an analyzer bug/false positive, check if it's one of the "
"issues discussed above or if the analyzer `annotations <Annotations."
"html#custom-assertion-handlers>`__ can resolve the issue by helping the "
"static analyzer understand the code better. Second, please `report it "
"<FilingBugs.html>`_ to help us improve user experience."
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:173
msgid ""
"Sometimes there's really no \"good\" way to eliminate the issue. In such "
"cases you can \"silence\" it directly by annotating the problematic line of "
"code with the help of Clang attribute 'suppress':"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:204
msgid "Excluding Code from Analysis"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:206
msgid "Q: How can I selectively exclude code the analyzer examines?"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:208
msgid ""
"When the static analyzer is using clang to parse source files, it implicitly "
"defines the preprocessor macro ``__clang_analyzer__``. One can use this "
"macro to selectively exclude code the analyzer examines. Here is an example:"
msgstr ""

#: ../../../analyzer/user-docs/FAQ.rst:216
msgid ""
"This usage is discouraged because it makes the code dead to the analyzer "
"from now on. Instead, we prefer that users file bugs against the analyzer "
"when it flags false positives."
msgstr ""
