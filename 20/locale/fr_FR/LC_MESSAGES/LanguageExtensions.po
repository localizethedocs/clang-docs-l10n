# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../LanguageExtensions.rst:3
msgid "Clang Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:20
msgid "Introduction"
msgstr ""

#: ../../../LanguageExtensions.rst:22
msgid ""
"This document describes the language extensions provided by Clang.  In "
"addition to the language extensions listed here, Clang aims to support a "
"broad range of GCC extensions.  Please see the `GCC manual <https://gcc.gnu."
"org/onlinedocs/gcc/C-Extensions.html>`_ for more information on these "
"extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:31
msgid "Feature Checking Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:33
msgid ""
"Language extensions can be very useful, but only if you know you can depend "
"on them.  In order to allow fine-grain features checks, we support three "
"builtin function-like macros.  This allows you to directly test for a "
"feature in your code without having to resort to something like autoconf or "
"fragile \"compiler version checks\"."
msgstr ""

#: ../../../LanguageExtensions.rst:40
msgid "``__has_builtin``"
msgstr ""

#: ../../../LanguageExtensions.rst:42
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of a builtin function, a builtin pseudo-function (taking one or more type "
"arguments), or a builtin template. It evaluates to 1 if the builtin is "
"supported or 0 if not. It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:64
msgid ""
"Prior to Clang 10, ``__has_builtin`` could not be used to detect most "
"builtin pseudo-functions."
msgstr ""

#: ../../../LanguageExtensions.rst:67
msgid ""
"``__has_builtin`` should not be used to detect support for a builtin macro; "
"use ``#ifdef`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:71
msgid "``__has_constexpr_builtin``"
msgstr ""

#: ../../../LanguageExtensions.rst:73
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of a builtin function, a builtin pseudo-function (taking one or more type "
"arguments), or a builtin template. It evaluates to 1 if the builtin is "
"supported and can be constant evaluated or 0 if not. It can be used for "
"writing conditionally constexpr code like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:94
msgid ""
"For example, ``__has_constexpr_builtin`` is used in libcxx's implementation "
"of the ``<cmath>`` header file to conditionally make a function constexpr "
"whenever the constant evaluation of the corresponding builtin (for example, "
"``std::fmax`` calls ``__builtin_fmax``) is supported in Clang."
msgstr ""

#: ../../../LanguageExtensions.rst:102
msgid "``__has_feature`` and ``__has_extension``"
msgstr ""

#: ../../../LanguageExtensions.rst:104
msgid ""
"These function-like macros take a single identifier argument that is the "
"name of a feature.  ``__has_feature`` evaluates to 1 if the feature is both "
"supported by Clang and standardized in the current language standard or 0 if "
"not (but see :ref:`below <langext-has-feature-back-compat>`), while "
"``__has_extension`` evaluates to 1 if the feature is supported by Clang in "
"the current language (either as a language extension or a standard language "
"feature) or 0 if not.  They can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:135
msgid ""
"For backward compatibility, ``__has_feature`` can also be used to test for "
"support for non-standardized features, i.e. features not prefixed ``c_``, "
"``cxx_`` or ``objc_``."
msgstr ""

#: ../../../LanguageExtensions.rst:139
msgid ""
"Another use of ``__has_feature`` is to check for compiler features not "
"related to the language standard, such as e.g. :doc:`AddressSanitizer "
"<AddressSanitizer>`."
msgstr ""

#: ../../../LanguageExtensions.rst:143
msgid ""
"If the ``-pedantic-errors`` option is given, ``__has_extension`` is "
"equivalent to ``__has_feature``."
msgstr ""

#: ../../../LanguageExtensions.rst:146
msgid "The feature tag is described along with the language feature below."
msgstr ""

#: ../../../LanguageExtensions.rst:148
msgid ""
"The feature name or extension name can also be specified with a preceding "
"and following ``__`` (double underscore) to avoid interference from a macro "
"with the same name.  For instance, ``__cxx_rvalue_references__`` can be used "
"instead of ``cxx_rvalue_references``."
msgstr ""

#: ../../../LanguageExtensions.rst:154
msgid "``__has_cpp_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:156
msgid ""
"This function-like macro is available in C++20 by default, and is provided "
"as an extension in earlier language standards. It takes a single argument "
"that is the name of a double-square-bracket-style attribute. The argument "
"can either be a single identifier or a scoped identifier. If the attribute "
"is supported, a nonzero value is returned. If the attribute is a standards-"
"based attribute, this macro returns a nonzero value based on the year and "
"month in which the attribute was voted into the working draft. See `WG21 "
"SD-6 <https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-"
"recommendations>`_ for the list of values returned for standards-based "
"attributes. If the attribute is not supported by the current compilation "
"target, this macro evaluates to 0. It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:182 ../../../LanguageExtensions.rst:211
msgid ""
"The attribute scope tokens ``clang`` and ``_Clang`` are interchangeable, as "
"are the attribute scope tokens ``gnu`` and ``__gnu__``. Attribute tokens in "
"either of these namespaces can be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name. For instance, ``gnu::__const__`` can be used instead of ``gnu::const``."
msgstr ""

#: ../../../LanguageExtensions.rst:189
msgid "``__has_c_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:191
msgid ""
"This function-like macro takes a single argument that is the name of an "
"attribute exposed with the double square-bracket syntax in C mode. The "
"argument can either be a single identifier or a scoped identifier. If the "
"attribute is supported, a nonzero value is returned. If the attribute is not "
"supported by the current compilation target, this macro evaluates to 0. It "
"can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:218
msgid "``__has_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:220
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of a GNU-style attribute.  It evaluates to 1 if the attribute is supported "
"by the current compilation target, or 0 if not.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:238
msgid ""
"The attribute name can also be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name.  For instance, ``__always_inline__`` can be used instead of "
"``always_inline``."
msgstr ""

#: ../../../LanguageExtensions.rst:244
msgid "``__has_declspec_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:246
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of an attribute implemented as a Microsoft-style ``__declspec`` attribute.  "
"It evaluates to 1 if the attribute is supported by the current compilation "
"target, or 0 if not.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:265
msgid ""
"The attribute name can also be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name.  For instance, ``__dllexport__`` can be used instead of ``dllexport``."
msgstr ""

#: ../../../LanguageExtensions.rst:270
msgid "``__is_identifier``"
msgstr ""

#: ../../../LanguageExtensions.rst:272
msgid ""
"This function-like macro takes a single identifier argument that might be "
"either a reserved word or a regular identifier. It evaluates to 1 if the "
"argument is just a regular identifier and not a reserved word, in the sense "
"that it can then be used as the name of a user-defined function or variable. "
"Otherwise it evaluates to 0.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:291
msgid "Include File Checking Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:293
msgid ""
"Not all developments systems have the same include files.  The :ref:`langext-"
"__has_include` and :ref:`langext-__has_include_next` macros allow you to "
"check for the existence of an include file before doing a possibly failing "
"``#include`` directive.  Include file checking macros must be used as "
"expressions in ``#if`` or ``#elif`` preprocessing directives."
msgstr ""

#: ../../../LanguageExtensions.rst:302
msgid "``__has_include``"
msgstr ""

#: ../../../LanguageExtensions.rst:304
msgid ""
"This function-like macro takes a single file name string argument that is "
"the name of an include file.  It evaluates to 1 if the file can be found "
"using the include paths, or 0 otherwise:"
msgstr ""

#: ../../../LanguageExtensions.rst:315
msgid "To test for this feature, use ``#if defined(__has_include)``:"
msgstr ""

#: ../../../LanguageExtensions.rst:329
msgid "``__has_include_next``"
msgstr ""

#: ../../../LanguageExtensions.rst:331
msgid ""
"This function-like macro takes a single file name string argument that is "
"the name of an include file.  It is like ``__has_include`` except that it "
"looks for the second instance of the given file found in the include paths.  "
"It evaluates to 1 if the second instance of the file can be found using the "
"include paths, or 0 otherwise:"
msgstr ""

#: ../../../LanguageExtensions.rst:351
msgid ""
"Note that ``__has_include_next``, like the GNU extension ``#include_next`` "
"directive, is intended for use in headers only, and will issue a warning if "
"used in the top-level compilation file.  A warning will also be issued if an "
"absolute path is used in the file argument."
msgstr ""

#: ../../../LanguageExtensions.rst:357
msgid "``__has_warning``"
msgstr ""

#: ../../../LanguageExtensions.rst:359
msgid ""
"This function-like macro takes a string literal that represents a command "
"line option for a warning and returns true if that is a valid warning option."
msgstr ""

#: ../../../LanguageExtensions.rst:371
msgid "Builtin Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:375
msgid "``__BASE_FILE__``"
msgstr ""

#: ../../../LanguageExtensions.rst:374
msgid ""
"Defined to a string that contains the name of the main input file passed to "
"Clang."
msgstr ""

#: ../../../LanguageExtensions.rst:380
msgid "``__FILE_NAME__``"
msgstr ""

#: ../../../LanguageExtensions.rst:378
msgid ""
"Clang-specific extension that functions similar to ``__FILE__`` but only "
"renders the last path component (the filename) instead of an invocation "
"dependent full path to that file."
msgstr ""

#: ../../../LanguageExtensions.rst:384
msgid "``__COUNTER__``"
msgstr ""

#: ../../../LanguageExtensions.rst:383
msgid ""
"Defined to an integer value that starts at zero and is incremented each time "
"the ``__COUNTER__`` macro is expanded."
msgstr ""

#: ../../../LanguageExtensions.rst:388
msgid "``__INCLUDE_LEVEL__``"
msgstr ""

#: ../../../LanguageExtensions.rst:387
msgid ""
"Defined to an integral value that is the include depth of the file currently "
"being translated.  For the main file, this value is zero."
msgstr ""

#: ../../../LanguageExtensions.rst:392
msgid "``__TIMESTAMP__``"
msgstr ""

#: ../../../LanguageExtensions.rst:391
msgid ""
"Defined to the date and time of the last modification of the current source "
"file."
msgstr ""

#: ../../../LanguageExtensions.rst:395
msgid "``__clang__``"
msgstr ""

#: ../../../LanguageExtensions.rst:395
msgid "Defined when compiling with Clang"
msgstr ""

#: ../../../LanguageExtensions.rst:401
msgid "``__clang_major__``"
msgstr ""

#: ../../../LanguageExtensions.rst:398
msgid ""
"Defined to the major marketing version number of Clang (e.g., the 2 in "
"2.0.1).  Note that marketing version numbers should not be used to check for "
"language features, as different vendors use different numbering schemes. "
"Instead, use the :ref:`langext-feature_check`."
msgstr ""

#: ../../../LanguageExtensions.rst:407
msgid "``__clang_minor__``"
msgstr ""

#: ../../../LanguageExtensions.rst:404
msgid ""
"Defined to the minor version number of Clang (e.g., the 0 in 2.0.1).  Note "
"that marketing version numbers should not be used to check for language "
"features, as different vendors use different numbering schemes.  Instead, "
"use the :ref:`langext-feature_check`."
msgstr ""

#: ../../../LanguageExtensions.rst:410
msgid "``__clang_patchlevel__``"
msgstr ""

#: ../../../LanguageExtensions.rst:410
msgid "Defined to the marketing patch level of Clang (e.g., the 1 in 2.0.1)."
msgstr ""

#: ../../../LanguageExtensions.rst:414
msgid "``__clang_version__``"
msgstr ""

#: ../../../LanguageExtensions.rst:413
msgid ""
"Defined to a string that captures the Clang marketing version, including the "
"Subversion tag or revision number, e.g., \"``1.5 (trunk 102332)``\"."
msgstr ""

#: ../../../LanguageExtensions.rst:420
msgid "``__clang_literal_encoding__``"
msgstr ""

#: ../../../LanguageExtensions.rst:417
msgid ""
"Defined to a narrow string literal that represents the current encoding of "
"narrow string literals, e.g., ``\"hello\"``. This macro typically expands to "
"\"UTF-8\" (but may change in the future if the ``-fexec-charset=\"Encoding-"
"Name\"`` option is implemented.)"
msgstr ""

#: ../../../LanguageExtensions.rst:426
msgid "``__clang_wide_literal_encoding__``"
msgstr ""

#: ../../../LanguageExtensions.rst:423
msgid ""
"Defined to a narrow string literal that represents the current encoding of "
"wide string literals, e.g., ``L\"hello\"``. This macro typically expands to "
"\"UTF-16\" or \"UTF-32\" (but may change in the future if the ``-fwide-exec-"
"charset=\"Encoding-Name\"`` option is implemented.)"
msgstr ""

#: ../../../LanguageExtensions.rst:429
msgid "Implementation-defined keywords"
msgstr ""

#: ../../../LanguageExtensions.rst:432
msgid "__datasizeof"
msgstr ""

#: ../../../LanguageExtensions.rst:434
msgid ""
"``__datasizeof`` behaves like ``sizeof``, except that it returns the size of "
"the type ignoring tail padding."
msgstr ""

#: ../../../LanguageExtensions.rst:438
msgid "_BitInt, _ExtInt"
msgstr ""

#: ../../../LanguageExtensions.rst:440
msgid ""
"Clang supports the C23 ``_BitInt(N)`` feature as an extension in older C "
"modes and in C++. This type was previously implemented in Clang with the "
"same semantics, but spelled ``_ExtInt(N)``. This spelling has been "
"deprecated in favor of the standard type."
msgstr ""

#: ../../../LanguageExtensions.rst:445
msgid ""
"Note: the ABI for ``_BitInt(N)`` is still in the process of being "
"stabilized, so this type should not yet be used in interfaces that require "
"ABI stability."
msgstr ""

#: ../../../LanguageExtensions.rst:449
msgid "C keywords supported in all language modes"
msgstr ""

#: ../../../LanguageExtensions.rst:451
msgid ""
"Clang supports ``_Alignas``, ``_Alignof``, ``_Atomic``, ``_Complex``, "
"``_Generic``, ``_Imaginary``, ``_Noreturn``, ``_Static_assert``, "
"``_Thread_local``, and ``_Float16`` in all language modes with the C "
"semantics."
msgstr ""

#: ../../../LanguageExtensions.rst:456
msgid "__alignof, __alignof__"
msgstr ""

#: ../../../LanguageExtensions.rst:458
msgid ""
"``__alignof`` and ``__alignof__`` return, in contrast to ``_Alignof`` and "
"``alignof``, the preferred alignment of a type. This may be larger than the "
"required alignment for improved performance."
msgstr ""

#: ../../../LanguageExtensions.rst:463
msgid "__extension__"
msgstr ""

#: ../../../LanguageExtensions.rst:465
msgid ""
"``__extension__`` suppresses extension diagnostics in the statement it is "
"prepended to."
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "__auto_type"
msgstr ""

#: ../../../LanguageExtensions.rst:471
msgid ""
"``__auto_type`` behaves the same as ``auto`` in C++11 but is available in "
"all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:475
msgid "__imag, __imag__"
msgstr ""

#: ../../../LanguageExtensions.rst:477
msgid ""
"``__imag`` and ``__imag__`` can be used to get the imaginary part of a "
"complex value."
msgstr ""

#: ../../../LanguageExtensions.rst:481
msgid "__real, __real__"
msgstr ""

#: ../../../LanguageExtensions.rst:483
msgid ""
"``__real`` and ``__real__`` can be used to get the real part of a complex "
"value."
msgstr ""

#: ../../../LanguageExtensions.rst:486
msgid "__asm, __asm__"
msgstr ""

#: ../../../LanguageExtensions.rst:488
msgid ""
"``__asm`` and ``__asm__`` are alternate spellings for ``asm``, but available "
"in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:492
msgid "__complex, __complex__"
msgstr ""

#: ../../../LanguageExtensions.rst:494
msgid ""
"``__complex`` and ``__complex__`` are alternate spellings for ``_Complex``."
msgstr ""

#: ../../../LanguageExtensions.rst:497
msgid "__const, __const__, __volatile, __volatile__, __restrict, __restrict__"
msgstr ""

#: ../../../LanguageExtensions.rst:499
msgid ""
"These are alternate spellings for their non-underscore counterparts, but are "
"available in all langauge modes."
msgstr ""

#: ../../../LanguageExtensions.rst:503
msgid "__decltype"
msgstr ""

#: ../../../LanguageExtensions.rst:505
msgid ""
"``__decltype`` is an alternate spelling for ``decltype``, but is also "
"available in C++ modes before C++11."
msgstr ""

#: ../../../LanguageExtensions.rst:509
msgid "__inline, __inline__"
msgstr ""

#: ../../../LanguageExtensions.rst:511
msgid ""
"``__inline`` and ``__inline__`` are alternate spellings for ``inline``, but "
"are available in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:515
msgid "__nullptr"
msgstr ""

#: ../../../LanguageExtensions.rst:517
msgid ""
"``__nullptr`` is an alternate spelling for ``nullptr``. It is available in "
"all C and C++ language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:520
msgid "__signed, __signed__"
msgstr ""

#: ../../../LanguageExtensions.rst:522
msgid ""
"``__signed`` and ``__signed__`` are alternate spellings for ``signed``. "
"``__unsigned`` and ``__unsigned__`` are **not** supported."
msgstr ""

#: ../../../LanguageExtensions.rst:526
msgid "__typeof, __typeof__, __typeof_unqual, __typeof_unqual__"
msgstr ""

#: ../../../LanguageExtensions.rst:528
msgid ""
"``__typeof`` and ``__typeof__`` are alternate spellings for ``typeof``, but "
"are available in all langauge modes. These spellings result in the operand, "
"retaining all qualifiers."
msgstr ""

#: ../../../LanguageExtensions.rst:532
msgid ""
"``__typeof_unqual`` and ``__typeof_unqual__`` are alternate spellings for "
"the C23 ``typeof_unqual`` type specifier, but are available in all language "
"modes. These spellings result in the type of the operand, stripping all "
"qualifiers."
msgstr ""

#: ../../../LanguageExtensions.rst:537
msgid "__char16_t, __char32_t"
msgstr ""

#: ../../../LanguageExtensions.rst:539
msgid ""
"``__char16_t`` and ``__char32_t`` are alternate spellings for ``char16_t`` "
"and ``char32_t`` respectively, but are also available in C++ modes before C+"
"+11. They are only supported in C++. ``__char8_t`` is not available."
msgstr ""

#: ../../../LanguageExtensions.rst:549
msgid "Vectors and Extended Vectors"
msgstr ""

#: ../../../LanguageExtensions.rst:551
msgid "Supports the GCC, OpenCL, AltiVec, NEON and SVE vector extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:553
msgid ""
"OpenCL vector types are created using the ``ext_vector_type`` attribute.  It "
"supports the ``V.xyzw`` syntax and other tidbits as seen in OpenCL.  An "
"example is:"
msgstr ""

#: ../../../LanguageExtensions.rst:569
msgid "Query for this feature with ``__has_attribute(ext_vector_type)``."
msgstr ""

#: ../../../LanguageExtensions.rst:571
msgid ""
"Giving ``-maltivec`` option to clang enables support for AltiVec vector "
"syntax and functions.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:582
msgid ""
"NEON vector types are created using ``neon_vector_type`` and "
"``neon_polyvector_type`` attributes.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:596
msgid ""
"GCC vector types are created using the ``vector_size(N)`` attribute.  The "
"argument ``N`` specifies the number of bytes that will be allocated for an "
"object of this type.  The size has to be multiple of the size of the vector "
"element type. For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:617
msgid "Boolean Vectors"
msgstr ""

#: ../../../LanguageExtensions.rst:619
msgid ""
"Clang also supports the ext_vector_type attribute with boolean element types "
"in C and C++.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:634
msgid ""
"Boolean vectors are a Clang extension of the ext vector type.  Boolean "
"vectors are intended, though not guaranteed, to map to vector mask "
"registers.  The size parameter of a boolean vector type is the number of "
"bits in the vector.  The boolean vector is dense and each bit in the boolean "
"vector is one vector element."
msgstr ""

#: ../../../LanguageExtensions.rst:640
msgid ""
"The semantics of boolean vectors borrows from C bit-fields with the "
"following differences:"
msgstr ""

#: ../../../LanguageExtensions.rst:643
msgid ""
"Distinct boolean vectors are always distinct memory objects (there is no "
"packing)."
msgstr ""

#: ../../../LanguageExtensions.rst:645
msgid ""
"Only the operators `?:`, `!`, `~`, `|`, `&`, `^` and comparison are allowed "
"on boolean vectors."
msgstr ""

#: ../../../LanguageExtensions.rst:647
msgid ""
"Casting a scalar bool value to a boolean vector type means broadcasting the "
"scalar value onto all lanes (same as general ext_vector_type)."
msgstr ""

#: ../../../LanguageExtensions.rst:649
msgid ""
"It is not possible to access or swizzle elements of a boolean vector "
"(different than general ext_vector_type)."
msgstr ""

#: ../../../LanguageExtensions.rst:652
msgid ""
"The size and alignment are both the number of bits rounded up to the next "
"power of two, but the alignment is at most the maximum vector alignment of "
"the target."
msgstr ""

#: ../../../LanguageExtensions.rst:658
msgid "Vector Literals"
msgstr ""

#: ../../../LanguageExtensions.rst:660
msgid ""
"Vector literals can be used to create vectors from a set of scalars, or "
"vectors.  Either parentheses or braces form can be used.  In the parentheses "
"form the number of literal values specified must be one, i.e. referring to a "
"scalar value, or must match the size of the vector type being created.  If a "
"single scalar literal value is specified, the scalar literal value will be "
"replicated to all the components of the vector type.  In the brackets form "
"any number of literals can be specified.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:684
msgid "Vector Operations"
msgstr ""

#: ../../../LanguageExtensions.rst:686
msgid ""
"The table below shows the support for each operation by vector extension.  A "
"dash indicates that an operation is not accepted according to a "
"corresponding specification."
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "Operator"
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "OpenCL"
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "AltiVec"
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "GCC"
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "NEON"
msgstr ""

#: ../../../LanguageExtensions.rst:691
msgid "SVE"
msgstr ""

#: ../../../LanguageExtensions.rst:693
msgid "[]"
msgstr ""

#: ../../../LanguageExtensions.rst:693 ../../../LanguageExtensions.rst:694
#: ../../../LanguageExtensions.rst:695 ../../../LanguageExtensions.rst:696
#: ../../../LanguageExtensions.rst:697 ../../../LanguageExtensions.rst:698
#: ../../../LanguageExtensions.rst:699 ../../../LanguageExtensions.rst:700
#: ../../../LanguageExtensions.rst:701 ../../../LanguageExtensions.rst:702
#: ../../../LanguageExtensions.rst:703 ../../../LanguageExtensions.rst:704
#: ../../../LanguageExtensions.rst:705 ../../../LanguageExtensions.rst:706
msgid "yes"
msgstr ""

#: ../../../LanguageExtensions.rst:694
msgid "unary operators +, --"
msgstr ""

#: ../../../LanguageExtensions.rst:695
msgid "++, -- --"
msgstr ""

#: ../../../LanguageExtensions.rst:695 ../../../LanguageExtensions.rst:704
#: ../../../LanguageExtensions.rst:705 ../../../LanguageExtensions.rst:706
#: ../../../LanguageExtensions.rst:707 ../../../LanguageExtensions.rst:708
msgid "no"
msgstr ""

#: ../../../LanguageExtensions.rst:696
msgid "+,--,*,/,%"
msgstr ""

#: ../../../LanguageExtensions.rst:697
msgid "bitwise operators &,|,^,~"
msgstr ""

#: ../../../LanguageExtensions.rst:698
msgid ">>,<<"
msgstr ""

#: ../../../LanguageExtensions.rst:699
msgid "!, &&, ||"
msgstr ""

#: ../../../LanguageExtensions.rst:699 ../../../LanguageExtensions.rst:702
msgid "--"
msgstr ""

#: ../../../LanguageExtensions.rst:700
msgid "==, !=, >, <, >=, <="
msgstr ""

#: ../../../LanguageExtensions.rst:701
msgid "="
msgstr ""

#: ../../../LanguageExtensions.rst:702
msgid "?: [#]_"
msgstr ""

#: ../../../LanguageExtensions.rst:703
msgid "sizeof"
msgstr ""

#: ../../../LanguageExtensions.rst:703
msgid "yes [#]_"
msgstr ""

#: ../../../LanguageExtensions.rst:704
msgid "C-style cast"
msgstr ""

#: ../../../LanguageExtensions.rst:705
msgid "reinterpret_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:706
msgid "static_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:707
msgid "const_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:708
msgid "address &v[i]"
msgstr ""

#: ../../../LanguageExtensions.rst:708
msgid "no [#]_"
msgstr ""

#: ../../../LanguageExtensions.rst:711
msgid ""
"See also :ref:`langext-__builtin_shufflevector`, :ref:`langext-"
"__builtin_convertvector`."
msgstr ""

#: ../../../LanguageExtensions.rst:713
msgid ""
"ternary operator(?:) has different behaviors depending on condition "
"operand's vector type. If the condition is a GNU vector (i.e. "
"__vector_size__), a NEON vector or an SVE vector, it's only available in C++ "
"and uses normal bool conversions (that is, != 0). If it's an extension "
"(OpenCL) vector, it's only available in C and OpenCL C. And it selects base "
"on signedness of the condition operands (OpenCL v1.1 s6.3.9)."
msgstr ""

#: ../../../LanguageExtensions.rst:719
msgid "sizeof can only be used on vector length specific SVE types."
msgstr ""

#: ../../../LanguageExtensions.rst:720
msgid ""
"Clang does not allow the address of an element to be taken while GCC allows "
"this. This is intentional for vectors with a boolean element type and not "
"implemented otherwise."
msgstr ""

#: ../../../LanguageExtensions.rst:725
msgid "Vector Builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:727
msgid ""
"**Note: The implementation of vector builtins is work-in-progress and "
"incomplete.**"
msgstr ""

#: ../../../LanguageExtensions.rst:729
msgid ""
"In addition to the operators mentioned above, Clang provides a set of "
"builtins to perform additional operations on certain scalar and vector types."
msgstr ""

#: ../../../LanguageExtensions.rst:732
msgid "Let ``T`` be one of the following types:"
msgstr ""

#: ../../../LanguageExtensions.rst:734
msgid ""
"an integer type (as in C23 6.2.5p22), but excluding enumerated types and "
"``bool``"
msgstr ""

#: ../../../LanguageExtensions.rst:735
msgid "the standard floating types float or double"
msgstr ""

#: ../../../LanguageExtensions.rst:736
msgid "a half-precision floating point type, if one is supported on the target"
msgstr ""

#: ../../../LanguageExtensions.rst:737
msgid "a vector type."
msgstr ""

#: ../../../LanguageExtensions.rst:739
msgid ""
"For scalar types, consider the operation applied to a vector with a single "
"element."
msgstr ""

#: ../../../LanguageExtensions.rst:741
msgid ""
"*Vector Size* To determine the number of elements in a vector, use "
"``__builtin_vectorelements()``. For fixed-sized vectors, e.g., defined via "
"``__attribute__((vector_size(N)))`` or ARM NEON's vector types (e.g., "
"``uint16x8_t``), this returns the constant number of elements at compile-"
"time. For scalable vectors, e.g., SVE or RISC-V V, the number of elements is "
"not known at compile-time and is determined at runtime. This builtin can be "
"used, e.g., to increment the loop-counter in vector-type agnostic loops."
msgstr ""

#: ../../../LanguageExtensions.rst:749
msgid "*Elementwise Builtins*"
msgstr ""

#: ../../../LanguageExtensions.rst:751
msgid ""
"Each builtin returns a vector equivalent to applying the specified operation "
"elementwise to the input."
msgstr ""

#: ../../../LanguageExtensions.rst:754
msgid ""
"Unless specified otherwise operation(±0) = ±0 and operation(±infinity) = "
"±infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:756
msgid ""
"The integer elementwise intrinsics, including "
"``__builtin_elementwise_popcount``, ``__builtin_elementwise_bitreverse``, "
"``__builtin_elementwise_add_sat``, ``__builtin_elementwise_sub_sat`` can be "
"called in a ``constexpr`` context."
msgstr ""

#: ../../../LanguageExtensions.rst:761 ../../../LanguageExtensions.rst:861
msgid "Name"
msgstr ""

#: ../../../LanguageExtensions.rst:761 ../../../LanguageExtensions.rst:861
msgid "Operation"
msgstr ""

#: ../../../LanguageExtensions.rst:761 ../../../LanguageExtensions.rst:861
msgid "Supported element types"
msgstr ""

#: ../../../LanguageExtensions.rst:763
msgid "T __builtin_elementwise_abs(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:763
msgid ""
"return the absolute value of a number x; the absolute value of the most "
"negative integer remains the most negative integer"
msgstr ""

#: ../../../LanguageExtensions.rst:763
msgid "signed integer and floating point types"
msgstr ""

#: ../../../LanguageExtensions.rst:765
msgid "T __builtin_elementwise_fma(T x, T y, T z)"
msgstr ""

#: ../../../LanguageExtensions.rst:765
msgid "fused multiply add, (x * y) +  z."
msgstr ""

#: ../../../LanguageExtensions.rst:765 ../../../LanguageExtensions.rst:766
#: ../../../LanguageExtensions.rst:767 ../../../LanguageExtensions.rst:768
#: ../../../LanguageExtensions.rst:769 ../../../LanguageExtensions.rst:770
#: ../../../LanguageExtensions.rst:771 ../../../LanguageExtensions.rst:772
#: ../../../LanguageExtensions.rst:773 ../../../LanguageExtensions.rst:774
#: ../../../LanguageExtensions.rst:775 ../../../LanguageExtensions.rst:776
#: ../../../LanguageExtensions.rst:777 ../../../LanguageExtensions.rst:778
#: ../../../LanguageExtensions.rst:779 ../../../LanguageExtensions.rst:780
#: ../../../LanguageExtensions.rst:782 ../../../LanguageExtensions.rst:784
#: ../../../LanguageExtensions.rst:785 ../../../LanguageExtensions.rst:787
#: ../../../LanguageExtensions.rst:788 ../../../LanguageExtensions.rst:792
#: ../../../LanguageExtensions.rst:796 ../../../LanguageExtensions.rst:799
#: ../../../LanguageExtensions.rst:805 ../../../LanguageExtensions.rst:811
#: ../../../LanguageExtensions.rst:813 ../../../LanguageExtensions.rst:814
#: ../../../LanguageExtensions.rst:822 ../../../LanguageExtensions.rst:826
#: ../../../LanguageExtensions.rst:872 ../../../LanguageExtensions.rst:876
msgid "floating point types"
msgstr ""

#: ../../../LanguageExtensions.rst:766
msgid "T __builtin_elementwise_ceil(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:766
msgid "return the smallest integral value greater than or equal to x"
msgstr ""

#: ../../../LanguageExtensions.rst:767
msgid "T __builtin_elementwise_sin(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:767
msgid "return the sine of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:768
msgid "T __builtin_elementwise_cos(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:768
msgid "return the cosine of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:769
msgid "T __builtin_elementwise_tan(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:769
msgid "return the tangent of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:770
msgid "T __builtin_elementwise_asin(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:770
msgid "return the arcsine of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:771
msgid "T __builtin_elementwise_acos(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:771
msgid "return the arccosine of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:772
msgid "T __builtin_elementwise_atan(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:772
msgid "return the arctangent of x interpreted as an angle in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:773
msgid "T __builtin_elementwise_atan2(T y, T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:773
msgid "return the arctangent of y/x"
msgstr ""

#: ../../../LanguageExtensions.rst:774
msgid "T __builtin_elementwise_sinh(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:774
msgid "return the hyperbolic sine of angle x in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:775
msgid "T __builtin_elementwise_cosh(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:775
msgid "return the hyperbolic cosine of angle x in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:776
msgid "T __builtin_elementwise_tanh(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:776
msgid "return the hyperbolic tangent of angle x in radians"
msgstr ""

#: ../../../LanguageExtensions.rst:777
msgid "T __builtin_elementwise_floor(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:777
msgid "return the largest integral value less than or equal to x"
msgstr ""

#: ../../../LanguageExtensions.rst:778
msgid "T __builtin_elementwise_log(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:778
msgid "return the natural logarithm of x"
msgstr ""

#: ../../../LanguageExtensions.rst:779
msgid "T __builtin_elementwise_log2(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:779
msgid "return the base 2 logarithm of x"
msgstr ""

#: ../../../LanguageExtensions.rst:780
msgid "T __builtin_elementwise_log10(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:780
msgid "return the base 10 logarithm of x"
msgstr ""

#: ../../../LanguageExtensions.rst:781
msgid "T __builtin_elementwise_popcount(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:781
msgid "return the number of 1 bits in x"
msgstr ""

#: ../../../LanguageExtensions.rst:781 ../../../LanguageExtensions.rst:783
#: ../../../LanguageExtensions.rst:818 ../../../LanguageExtensions.rst:820
#: ../../../LanguageExtensions.rst:867 ../../../LanguageExtensions.rst:868
#: ../../../LanguageExtensions.rst:869 ../../../LanguageExtensions.rst:870
#: ../../../LanguageExtensions.rst:871
msgid "integer types"
msgstr ""

#: ../../../LanguageExtensions.rst:782
msgid "T __builtin_elementwise_pow(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:782
msgid "return x raised to the power of y"
msgstr ""

#: ../../../LanguageExtensions.rst:783
msgid "T __builtin_elementwise_bitreverse(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:783
msgid "return the integer represented after reversing the bits of x"
msgstr ""

#: ../../../LanguageExtensions.rst:784
msgid "T __builtin_elementwise_exp(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:784
msgid "returns the base-e exponential, e^x, of the specified value"
msgstr ""

#: ../../../LanguageExtensions.rst:785
msgid "T __builtin_elementwise_exp2(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:785
msgid "returns the base-2 exponential, 2^x, of the specified value"
msgstr ""

#: ../../../LanguageExtensions.rst:787
msgid "T __builtin_elementwise_sqrt(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:787
msgid "return the square root of a floating-point number"
msgstr ""

#: ../../../LanguageExtensions.rst:788
msgid "T __builtin_elementwise_roundeven(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:788
msgid ""
"round x to the nearest integer value in floating point format, rounding "
"halfway cases to even (that is, to the nearest value that is an even "
"integer), regardless of the current rounding direction."
msgstr ""

#: ../../../LanguageExtensions.rst:792
msgid "T __builtin_elementwise_round(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:792
msgid ""
"round x to the nearest  integer value in floating point format, rounding "
"halfway cases away from zero, regardless of the current rounding direction. "
"May raise floating-point exceptions."
msgstr ""

#: ../../../LanguageExtensions.rst:796
msgid "T __builtin_elementwise_trunc(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:796
msgid "return the integral value nearest to but no larger in magnitude than x"
msgstr ""

#: ../../../LanguageExtensions.rst:799
msgid "T __builtin_elementwise_nearbyint(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:799
msgid ""
"round x to the nearest  integer value in floating point format, rounding "
"according to the current rounding direction. May not raise the inexact "
"floating-point exception. This is treated the same as "
"``__builtin_elementwise_rint`` unless :ref:`FENV_ACCESS is enabled <floating-"
"point-environment>`."
msgstr ""

#: ../../../LanguageExtensions.rst:805
msgid "T __builtin_elementwise_rint(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:805
msgid ""
"round x to the nearest  integer value in floating point format, rounding "
"according to the current rounding direction. May raise floating-point "
"exceptions. This is treated the same as ``__builtin_elementwise_nearbyint`` "
"unless :ref:`FENV_ACCESS is enabled <floating-point-environment>`."
msgstr ""

#: ../../../LanguageExtensions.rst:811
msgid "T __builtin_elementwise_canonicalize(T x)"
msgstr ""

#: ../../../LanguageExtensions.rst:811
msgid ""
"return the platform specific canonical encoding of a floating-point number"
msgstr ""

#: ../../../LanguageExtensions.rst:813
msgid "T __builtin_elementwise_copysign(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:813
msgid "return the magnitude of x with the sign of y."
msgstr ""

#: ../../../LanguageExtensions.rst:814
msgid "T __builtin_elementwise_fmod(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:814
msgid ""
"return The floating-point remainder of (x/y) whose sign matches the sign of "
"x."
msgstr ""

#: ../../../LanguageExtensions.rst:816
msgid "T __builtin_elementwise_max(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:816
msgid "return x or y, whichever is larger"
msgstr ""

#: ../../../LanguageExtensions.rst:816 ../../../LanguageExtensions.rst:817
#: ../../../LanguageExtensions.rst:863 ../../../LanguageExtensions.rst:865
msgid "integer and floating point types"
msgstr ""

#: ../../../LanguageExtensions.rst:817
msgid "T __builtin_elementwise_min(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:817
msgid "return x or y, whichever is smaller"
msgstr ""

#: ../../../LanguageExtensions.rst:818
msgid "T __builtin_elementwise_add_sat(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:818
msgid ""
"return the sum of x and y, clamped to the range of representable values for "
"the signed/unsigned integer type."
msgstr ""

#: ../../../LanguageExtensions.rst:820
msgid "T __builtin_elementwise_sub_sat(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:820
msgid ""
"return the difference of x and y, clamped to the range of representable "
"values for the signed/unsigned integer type."
msgstr ""

#: ../../../LanguageExtensions.rst:822
msgid "T __builtin_elementwise_maximum(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:822
msgid ""
"return x or y, whichever is larger. Follows IEEE 754-2019 semantics, see "
"`LangRef <http://llvm.org/docs/LangRef.html#llvm-min-intrinsics-"
"comparation>`_ for the comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:826
msgid "T __builtin_elementwise_minimum(T x, T y)"
msgstr ""

#: ../../../LanguageExtensions.rst:826
msgid ""
"return x or y, whichever is smaller. Follows IEEE 754-2019 semantics, see "
"`LangRef <http://llvm.org/docs/LangRef.html#llvm-min-intrinsics-"
"comparation>`_ for the comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:833
msgid "*Reduction Builtins*"
msgstr ""

#: ../../../LanguageExtensions.rst:835
msgid ""
"Each builtin returns a scalar equivalent to applying the specified "
"operation(x, y) as recursive even-odd pairwise reduction to all vector "
"elements. ``operation(x, y)`` is repeatedly applied to each non-overlapping "
"even-odd element pair with indices ``i * 2`` and ``i * 2 + 1`` with ``i in "
"[0, Number of elements / 2)``. If the numbers of elements is not a power of "
"2, the vector is widened with neutral elements for the reduction at the end "
"to the next power of 2."
msgstr ""

#: ../../../LanguageExtensions.rst:843
msgid "These reductions support both fixed-sized and scalable vector types."
msgstr ""

#: ../../../LanguageExtensions.rst:845
msgid ""
"The integer reduction intrinsics, including ``__builtin_reduce_max``, "
"``__builtin_reduce_min``, ``__builtin_reduce_add``, "
"``__builtin_reduce_mul``, ``__builtin_reduce_and``, ``__builtin_reduce_or``, "
"and ``__builtin_reduce_xor``, can be called in a ``constexpr`` context."
msgstr ""

#: ../../../LanguageExtensions.rst:850 ../../../LanguageExtensions.rst:4367
msgid "Example:"
msgstr ""

#: ../../../LanguageExtensions.rst:858
msgid "Let ``VT`` be a vector type and ``ET`` the element type of ``VT``."
msgstr ""

#: ../../../LanguageExtensions.rst:863
msgid "ET __builtin_reduce_max(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:863
msgid ""
"return the largest element of the vector. The floating point result will "
"always be a number unless all elements of the vector are NaN."
msgstr ""

#: ../../../LanguageExtensions.rst:865
msgid "ET __builtin_reduce_min(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:865
msgid ""
"return the smallest element of the vector. The floating point result will "
"always be a number unless all elements of the vector are NaN."
msgstr ""

#: ../../../LanguageExtensions.rst:867
msgid "ET __builtin_reduce_add(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:867
msgid "\\+"
msgstr ""

#: ../../../LanguageExtensions.rst:868
msgid "ET __builtin_reduce_mul(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:868
msgid "\\*"
msgstr ""

#: ../../../LanguageExtensions.rst:869
msgid "ET __builtin_reduce_and(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:869
msgid "&"
msgstr ""

#: ../../../LanguageExtensions.rst:870
msgid "ET __builtin_reduce_or(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:870
msgid "\\|"
msgstr ""

#: ../../../LanguageExtensions.rst:871
msgid "ET __builtin_reduce_xor(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:871
msgid "^"
msgstr ""

#: ../../../LanguageExtensions.rst:872
msgid "ET __builtin_reduce_maximum(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:872
msgid ""
"return the largest element of the vector. Follows IEEE 754-2019 semantics, "
"see `LangRef <http://llvm.org/docs/LangRef.html#llvm-min-intrinsics-"
"comparation>`_ for the comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:876
msgid "ET __builtin_reduce_minimum(VT a)"
msgstr ""

#: ../../../LanguageExtensions.rst:876
msgid ""
"return the smallest element of the vector. Follows IEEE 754-2019 semantics, "
"see `LangRef <http://llvm.org/docs/LangRef.html#llvm-min-intrinsics-"
"comparation>`_ for the comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:883
msgid "Matrix Types"
msgstr ""

#: ../../../LanguageExtensions.rst:885
msgid ""
"Clang provides an extension for matrix types, which is currently being "
"implemented. See :ref:`the draft specification <matrixtypes>` for more "
"details."
msgstr ""

#: ../../../LanguageExtensions.rst:888
msgid ""
"For example, the code below uses the matrix types extension to multiply two "
"4x4 float matrices and add the result to a third 4x4 matrix."
msgstr ""

#: ../../../LanguageExtensions.rst:899
msgid ""
"The matrix type extension also supports operations on a matrix and a scalar."
msgstr ""

#: ../../../LanguageExtensions.rst:909
msgid ""
"The matrix type extension supports division on a matrix and a scalar but not "
"on a matrix and a matrix."
msgstr ""

#: ../../../LanguageExtensions.rst:920
msgid ""
"The matrix type extension supports compound assignments for addition, "
"subtraction, and multiplication on matrices and on a matrix and a scalar, "
"provided their types are consistent."
msgstr ""

#: ../../../LanguageExtensions.rst:936
msgid ""
"The matrix type extension supports explicit casts. Implicit type conversion "
"between matrix types is not allowed."
msgstr ""

#: ../../../LanguageExtensions.rst:959
msgid "Half-Precision Floating Point"
msgstr ""

#: ../../../LanguageExtensions.rst:961
msgid ""
"Clang supports three half-precision (16-bit) floating point types: "
"``__fp16``, ``_Float16`` and ``__bf16``. These types are supported in all "
"language modes, but their support differs between targets. A target is said "
"to have \"native support\" for a type if the target processor offers "
"instructions for directly performing basic arithmetic on that type.  In the "
"absence of native support, a type can still be supported if the compiler can "
"emulate arithmetic on the type by promoting to ``float``; see below for more "
"information on this emulation."
msgstr ""

#: ../../../LanguageExtensions.rst:970
msgid ""
"``__fp16`` is supported on all targets. The special semantics of this type "
"mean that no arithmetic is ever performed directly on ``__fp16`` values; see "
"below."
msgstr ""

#: ../../../LanguageExtensions.rst:974
msgid "``_Float16`` is supported on the following targets:"
msgstr ""

#: ../../../LanguageExtensions.rst:976
msgid "32-bit ARM (natively on some architecture versions)"
msgstr ""

#: ../../../LanguageExtensions.rst:977
msgid "64-bit ARM (AArch64) (natively on ARMv8.2a and above)"
msgstr ""

#: ../../../LanguageExtensions.rst:978
msgid "AMDGPU (natively)"
msgstr ""

#: ../../../LanguageExtensions.rst:979
msgid "NVPTX (natively)"
msgstr ""

#: ../../../LanguageExtensions.rst:980
msgid "SPIR (natively)"
msgstr ""

#: ../../../LanguageExtensions.rst:981
msgid "X86 (if SSE2 is available; natively if AVX512-FP16 is also available)"
msgstr ""

#: ../../../LanguageExtensions.rst:982
msgid "RISC-V (natively if Zfh or Zhinx is available)"
msgstr ""

#: ../../../LanguageExtensions.rst:984
msgid ""
"``__bf16`` is supported on the following targets (currently never natively):"
msgstr ""

#: ../../../LanguageExtensions.rst:986
msgid "32-bit ARM"
msgstr ""

#: ../../../LanguageExtensions.rst:987
msgid "64-bit ARM (AArch64)"
msgstr ""

#: ../../../LanguageExtensions.rst:988
msgid "RISC-V"
msgstr ""

#: ../../../LanguageExtensions.rst:989
msgid "X86 (when SSE2 is available)"
msgstr ""

#: ../../../LanguageExtensions.rst:991
msgid ""
"(For X86, SSE2 is available on 64-bit and all recent 32-bit processors.)"
msgstr ""

#: ../../../LanguageExtensions.rst:993
msgid ""
"``__fp16`` and ``_Float16`` both use the binary16 format from IEEE 754-2008, "
"which provides a 5-bit exponent and an 11-bit significand (counting the "
"implicit leading 1). ``__bf16`` uses the `bfloat16 <https://en.wikipedia.org/"
"wiki/Bfloat16_floating-point_format>`_ format, which provides an 8-bit "
"exponent and an 8-bit significand; this is the same exponent range as "
"`float`, just with greatly reduced precision."
msgstr ""

#: ../../../LanguageExtensions.rst:1000
msgid ""
"``_Float16`` and ``__bf16`` follow the usual rules for arithmetic floating-"
"point types. Most importantly, this means that arithmetic operations on "
"operands of these types are formally performed in the type and produce "
"values of the type. ``__fp16`` does not follow those rules: most operations "
"immediately promote operands of type ``__fp16`` to ``float``, and so "
"arithmetic operations are defined to be performed in ``float`` and so result "
"in a value of type ``float`` (unless further promoted because of other "
"operands). See below for more information on the exact specifications of "
"these types."
msgstr ""

#: ../../../LanguageExtensions.rst:1009
msgid ""
"When compiling arithmetic on ``_Float16`` and ``__bf16`` for a target "
"without native support, Clang will perform the arithmetic in ``float``, "
"inserting extensions and truncations as necessary. This can be done in a way "
"that exactly matches the operation-by-operation behavior of native support, "
"but that can require many extra truncations and extensions. By default, when "
"emulating ``_Float16`` and ``__bf16`` arithmetic using ``float``, Clang does "
"not truncate intermediate operands back to their true type unless the "
"operand is the result of an explicit cast or assignment. This is generally "
"much faster but can generate different results from strict operation-by-"
"operation emulation. Usually the results are more precise. This is permitted "
"by the C and C++ standards under the rules for excess precision in "
"intermediate operands; see the discussion of evaluation formats in the C "
"standard and [expr.pre] in the C++ standard."
msgstr ""

#: ../../../LanguageExtensions.rst:1023
msgid ""
"The use of excess precision can be independently controlled for these two "
"types with the ``-ffloat16-excess-precision=`` and ``-fbfloat16-excess-"
"precision=`` options. Valid values include:"
msgstr ""

#: ../../../LanguageExtensions.rst:1027
msgid "``none``: meaning to perform strict operation-by-operation emulation"
msgstr ""

#: ../../../LanguageExtensions.rst:1028
msgid ""
"``standard``: meaning that excess precision is permitted under the rules "
"described in the standard, i.e. never across explicit casts or statements"
msgstr ""

#: ../../../LanguageExtensions.rst:1030
msgid ""
"``fast``: meaning that excess precision is permitted whenever the optimizer "
"sees an opportunity to avoid truncations; currently this has no effect "
"beyond ``standard``"
msgstr ""

#: ../../../LanguageExtensions.rst:1034
msgid ""
"The ``_Float16`` type is an interchange floating type specified in ISO/IEC "
"TS 18661-3:2015 (\"Floating-point extensions for C\"). It will be supported "
"on more targets as they define ABIs for it."
msgstr ""

#: ../../../LanguageExtensions.rst:1038
msgid ""
"The ``__bf16`` type is a non-standard extension, but it generally follows "
"the rules for arithmetic interchange floating types from ISO/IEC TS "
"18661-3:2015. In previous versions of Clang, it was a storage-only type that "
"forbade arithmetic operations. It will be supported on more targets as they "
"define ABIs for it."
msgstr ""

#: ../../../LanguageExtensions.rst:1044
msgid ""
"The ``__fp16`` type was originally an ARM extension and is specified by the "
"`ARM C Language Extensions <https://github.com/ARM-software/acle/"
"releases>`_. Clang uses the ``binary16`` format from IEEE 754-2008 for "
"``__fp16``, not the ARM alternative format. Operators that expect arithmetic "
"operands immediately promote ``__fp16`` operands to ``float``."
msgstr ""

#: ../../../LanguageExtensions.rst:1050
msgid ""
"It is recommended that portable code use ``_Float16`` instead of ``__fp16``, "
"as it has been defined by the C standards committee and has behavior that is "
"more familiar to most programmers."
msgstr ""

#: ../../../LanguageExtensions.rst:1054
msgid ""
"Because ``__fp16`` operands are always immediately promoted to ``float``, "
"the common real type of ``__fp16`` and ``_Float16`` for the purposes of the "
"usual arithmetic conversions is ``float``."
msgstr ""

#: ../../../LanguageExtensions.rst:1058
msgid ""
"A literal can be given ``_Float16`` type using the suffix ``f16``. For "
"example, ``3.14f16``."
msgstr ""

#: ../../../LanguageExtensions.rst:1061
msgid ""
"Because default argument promotion only applies to the standard floating-"
"point types, ``_Float16`` values are not promoted to ``double`` when passed "
"as variadic or untyped arguments. As a consequence, some caution must be "
"taken when using certain library facilities with ``_Float16``; for example, "
"there is no ``printf`` format specifier for ``_Float16``, and (unlike "
"``float``) it will not be implicitly promoted to ``double`` when passed to "
"``printf``, so the programmer must explicitly cast it to ``double`` before "
"using it with an ``%f`` or similar specifier."
msgstr ""

#: ../../../LanguageExtensions.rst:1070
msgid "Messages on ``deprecated`` and ``unavailable`` Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1072
msgid ""
"An optional string message can be added to the ``deprecated`` and "
"``unavailable`` attributes.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:1079
msgid ""
"If the deprecated or unavailable declaration is used, the message will be "
"incorporated into the appropriate diagnostic:"
msgstr ""

#: ../../../LanguageExtensions.rst:1089
msgid ""
"Query for this feature with "
"``__has_extension(attribute_deprecated_with_message)`` and "
"``__has_extension(attribute_unavailable_with_message)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1094
msgid "Attributes on Enumerators"
msgstr ""

#: ../../../LanguageExtensions.rst:1096
msgid ""
"Clang allows attributes to be written on individual enumerators.  This "
"allows enumerators to be deprecated, made unavailable, etc.  The attribute "
"must appear after the enumerator name and before any initializer, like so:"
msgstr ""

#: ../../../LanguageExtensions.rst:1109
msgid ""
"Attributes on the ``enum`` declaration do not apply to individual "
"enumerators."
msgstr ""

#: ../../../LanguageExtensions.rst:1111
msgid "Query for this feature with ``__has_extension(enumerator_attributes)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1114
msgid "C++11 Attributes on using-declarations"
msgstr ""

#: ../../../LanguageExtensions.rst:1116
msgid ""
"Clang allows C++-style ``[[]]`` attributes to be written on using-"
"declarations. For instance:"
msgstr ""

#: ../../../LanguageExtensions.rst:1124
msgid ""
"You can test for support for this extension with "
"``__has_extension(cxx_attributes_on_using_declarations)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1128
msgid "'User-Specified' System Frameworks"
msgstr ""

#: ../../../LanguageExtensions.rst:1130
msgid ""
"Clang provides a mechanism by which frameworks can be built in such a way "
"that they will always be treated as being \"system frameworks\", even if "
"they are not present in a system framework directory.  This can be useful to "
"system framework developers who want to be able to test building other "
"applications with development builds of their framework, including the "
"manner in which the compiler changes warning behavior for system headers."
msgstr ""

#: ../../../LanguageExtensions.rst:1137
msgid ""
"Framework developers can opt-in to this mechanism by creating a \"``."
"system_framework``\" file at the top-level of their framework.  That is, the "
"framework should have contents like:"
msgstr ""

#: ../../../LanguageExtensions.rst:1149
msgid ""
"Clang will treat the presence of this file as an indicator that the "
"framework should be treated as a system framework, regardless of how it was "
"found in the framework search path.  For consistency, we recommend that such "
"files never be included in installed versions of the framework."
msgstr ""

#: ../../../LanguageExtensions.rst:1155
msgid "Checks for Standard Language Features"
msgstr ""

#: ../../../LanguageExtensions.rst:1157
msgid ""
"The ``__has_feature`` macro can be used to query if certain standard "
"language features are enabled.  The ``__has_extension`` macro can be used to "
"query if language features are available as an extension when compiling for "
"a standard which does not provide them.  The features which can be tested "
"are listed here."
msgstr ""

#: ../../../LanguageExtensions.rst:1162
msgid ""
"Since Clang 3.4, the C++ SD-6 feature test macros are also supported. These "
"are macros with names of the form ``__cpp_<feature_name>``, and are intended "
"to be a portable way to query the supported features of the compiler. See "
"`the C++ status page <https://clang.llvm.org/cxx_status.html#ts>`_ for "
"information on the version of SD-6 supported by each Clang release, and the "
"macros provided by that revision of the recommendations."
msgstr ""

#: ../../../LanguageExtensions.rst:1170
msgid "C++98"
msgstr ""

#: ../../../LanguageExtensions.rst:1172
msgid ""
"The features listed below are part of the C++98 standard.  These features "
"are enabled by default when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:1176
msgid "C++ exceptions"
msgstr ""

#: ../../../LanguageExtensions.rst:1178
msgid ""
"Use ``__has_feature(cxx_exceptions)`` to determine if C++ exceptions have "
"been enabled.  For example, compiling code with ``-fno-exceptions`` disables "
"C++ exceptions."
msgstr ""

#: ../../../LanguageExtensions.rst:1183
msgid "C++ RTTI"
msgstr ""

#: ../../../LanguageExtensions.rst:1185
msgid ""
"Use ``__has_feature(cxx_rtti)`` to determine if C++ RTTI has been enabled.  "
"For example, compiling code with ``-fno-rtti`` disables the use of RTTI."
msgstr ""

#: ../../../LanguageExtensions.rst:1189 ../../../LanguageExtensions.rst:1607
#: ../../../LanguageExtensions.rst:1608 ../../../LanguageExtensions.rst:1609
#: ../../../LanguageExtensions.rst:1610 ../../../LanguageExtensions.rst:1611
#: ../../../LanguageExtensions.rst:1612 ../../../LanguageExtensions.rst:1613
#: ../../../LanguageExtensions.rst:1618 ../../../LanguageExtensions.rst:1619
#: ../../../LanguageExtensions.rst:1621 ../../../LanguageExtensions.rst:1628
#: ../../../LanguageExtensions.rst:1638 ../../../LanguageExtensions.rst:1640
msgid "C++11"
msgstr ""

#: ../../../LanguageExtensions.rst:1191
msgid ""
"The features listed below are part of the C++11 standard.  As a result, all "
"these features are enabled with the ``-std=c++11`` or ``-std=gnu++11`` "
"option when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:1196
msgid "C++11 SFINAE includes access control"
msgstr ""

#: ../../../LanguageExtensions.rst:1198
msgid ""
"Use ``__has_feature(cxx_access_control_sfinae)`` or "
"``__has_extension(cxx_access_control_sfinae)`` to determine whether access-"
"control errors (e.g., calling a private constructor) are considered to be "
"template argument deduction errors (aka SFINAE errors), per `C++ DR1170 "
"<http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1170>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1205
msgid "C++11 alias templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1207
msgid ""
"Use ``__has_feature(cxx_alias_templates)`` or "
"``__has_extension(cxx_alias_templates)`` to determine if support for C++11's "
"alias declarations and alias templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1212
msgid "C++11 alignment specifiers"
msgstr ""

#: ../../../LanguageExtensions.rst:1214
msgid ""
"Use ``__has_feature(cxx_alignas)`` or ``__has_extension(cxx_alignas)`` to "
"determine if support for alignment specifiers using ``alignas`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1217
msgid ""
"Use ``__has_feature(cxx_alignof)`` or ``__has_extension(cxx_alignof)`` to "
"determine if support for the ``alignof`` keyword is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1221
msgid "C++11 attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1223
msgid ""
"Use ``__has_feature(cxx_attributes)`` or ``__has_extension(cxx_attributes)`` "
"to determine if support for attribute parsing with C++11's square bracket "
"notation is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1228
msgid "C++11 generalized constant expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:1230
msgid ""
"Use ``__has_feature(cxx_constexpr)`` to determine if support for generalized "
"constant expressions (e.g., ``constexpr``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1234
msgid "C++11 ``decltype()``"
msgstr ""

#: ../../../LanguageExtensions.rst:1236
msgid ""
"Use ``__has_feature(cxx_decltype)`` or ``__has_extension(cxx_decltype)`` to "
"determine if support for the ``decltype()`` specifier is enabled.  C++11's "
"``decltype`` does not require type-completeness of a function call "
"expression. Use ``__has_feature(cxx_decltype_incomplete_return_types)`` or "
"``__has_extension(cxx_decltype_incomplete_return_types)`` to determine if "
"support for this feature is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1244
msgid "C++11 default template arguments in function templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1246
msgid ""
"Use ``__has_feature(cxx_default_function_template_args)`` or "
"``__has_extension(cxx_default_function_template_args)`` to determine if "
"support for default template arguments in function templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1251
msgid "C++11 ``default``\\ ed functions"
msgstr ""

#: ../../../LanguageExtensions.rst:1253
msgid ""
"Use ``__has_feature(cxx_defaulted_functions)`` or "
"``__has_extension(cxx_defaulted_functions)`` to determine if support for "
"defaulted function definitions (with ``= default``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1258
msgid "C++11 delegating constructors"
msgstr ""

#: ../../../LanguageExtensions.rst:1260
msgid ""
"Use ``__has_feature(cxx_delegating_constructors)`` to determine if support "
"for delegating constructors is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1264
msgid "C++11 ``deleted`` functions"
msgstr ""

#: ../../../LanguageExtensions.rst:1266
msgid ""
"Use ``__has_feature(cxx_deleted_functions)`` or "
"``__has_extension(cxx_deleted_functions)`` to determine if support for "
"deleted function definitions (with ``= delete``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1271
msgid "C++11 explicit conversion functions"
msgstr ""

#: ../../../LanguageExtensions.rst:1273
msgid ""
"Use ``__has_feature(cxx_explicit_conversions)`` to determine if support for "
"``explicit`` conversion functions is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1277
msgid "C++11 generalized initializers"
msgstr ""

#: ../../../LanguageExtensions.rst:1279
msgid ""
"Use ``__has_feature(cxx_generalized_initializers)`` to determine if support "
"for generalized initializers (using braced lists and ``std::"
"initializer_list``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1284
msgid "C++11 implicit move constructors/assignment operators"
msgstr ""

#: ../../../LanguageExtensions.rst:1286
msgid ""
"Use ``__has_feature(cxx_implicit_moves)`` to determine if Clang will "
"implicitly generate move constructors and move assignment operators where "
"needed."
msgstr ""

#: ../../../LanguageExtensions.rst:1290
msgid "C++11 inheriting constructors"
msgstr ""

#: ../../../LanguageExtensions.rst:1292
msgid ""
"Use ``__has_feature(cxx_inheriting_constructors)`` to determine if support "
"for inheriting constructors is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1296
msgid "C++11 inline namespaces"
msgstr ""

#: ../../../LanguageExtensions.rst:1298
msgid ""
"Use ``__has_feature(cxx_inline_namespaces)`` or "
"``__has_extension(cxx_inline_namespaces)`` to determine if support for "
"inline namespaces is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1303
msgid "C++11 lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1305
msgid ""
"Use ``__has_feature(cxx_lambdas)`` or ``__has_extension(cxx_lambdas)`` to "
"determine if support for lambdas is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1309
msgid "C++11 local and unnamed types as template arguments"
msgstr ""

#: ../../../LanguageExtensions.rst:1311
msgid ""
"Use ``__has_feature(cxx_local_type_template_args)`` or "
"``__has_extension(cxx_local_type_template_args)`` to determine if support "
"for local and unnamed types as template arguments is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1316
msgid "C++11 noexcept"
msgstr ""

#: ../../../LanguageExtensions.rst:1318
msgid ""
"Use ``__has_feature(cxx_noexcept)`` or ``__has_extension(cxx_noexcept)`` to "
"determine if support for noexcept exception specifications is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1322
msgid "C++11 in-class non-static data member initialization"
msgstr ""

#: ../../../LanguageExtensions.rst:1324
msgid ""
"Use ``__has_feature(cxx_nonstatic_member_init)`` to determine whether in-"
"class initialization of non-static data members is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1328
msgid "C++11 ``nullptr``"
msgstr ""

#: ../../../LanguageExtensions.rst:1330
msgid ""
"Use ``__has_feature(cxx_nullptr)`` or ``__has_extension(cxx_nullptr)`` to "
"determine if support for ``nullptr`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1334
msgid "C++11 ``override control``"
msgstr ""

#: ../../../LanguageExtensions.rst:1336
msgid ""
"Use ``__has_feature(cxx_override_control)`` or "
"``__has_extension(cxx_override_control)`` to determine if support for the "
"override control keywords is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1341
msgid "C++11 reference-qualified functions"
msgstr ""

#: ../../../LanguageExtensions.rst:1343
msgid ""
"Use ``__has_feature(cxx_reference_qualified_functions)`` or "
"``__has_extension(cxx_reference_qualified_functions)`` to determine if "
"support for reference-qualified functions (e.g., member functions with ``&`` "
"or ``&&`` applied to ``*this``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1349
msgid "C++11 range-based ``for`` loop"
msgstr ""

#: ../../../LanguageExtensions.rst:1351
msgid ""
"Use ``__has_feature(cxx_range_for)`` or ``__has_extension(cxx_range_for)`` "
"to determine if support for the range-based for loop is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1355
msgid "C++11 raw string literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1357
msgid ""
"Use ``__has_feature(cxx_raw_string_literals)`` to determine if support for "
"raw string literals (e.g., ``R\"x(foo\\bar)x\"``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1361
msgid "C++11 rvalue references"
msgstr ""

#: ../../../LanguageExtensions.rst:1363
msgid ""
"Use ``__has_feature(cxx_rvalue_references)`` or "
"``__has_extension(cxx_rvalue_references)`` to determine if support for "
"rvalue references is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1368
msgid "C++11 ``static_assert()``"
msgstr ""

#: ../../../LanguageExtensions.rst:1370
msgid ""
"Use ``__has_feature(cxx_static_assert)`` or "
"``__has_extension(cxx_static_assert)`` to determine if support for compile-"
"time assertions using ``static_assert`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1375
msgid "C++11 ``thread_local``"
msgstr ""

#: ../../../LanguageExtensions.rst:1377
msgid ""
"Use ``__has_feature(cxx_thread_local)`` to determine if support for "
"``thread_local`` variables is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1381
msgid "C++11 type inference"
msgstr ""

#: ../../../LanguageExtensions.rst:1383
msgid ""
"Use ``__has_feature(cxx_auto_type)`` or ``__has_extension(cxx_auto_type)`` "
"to determine C++11 type inference is supported using the ``auto`` "
"specifier.  If this is disabled, ``auto`` will instead be a storage class "
"specifier, as in C or C++98."
msgstr ""

#: ../../../LanguageExtensions.rst:1389
msgid "C++11 strongly typed enumerations"
msgstr ""

#: ../../../LanguageExtensions.rst:1391
msgid ""
"Use ``__has_feature(cxx_strong_enums)`` or "
"``__has_extension(cxx_strong_enums)`` to determine if support for strongly "
"typed, scoped enumerations is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1396
msgid "C++11 trailing return type"
msgstr ""

#: ../../../LanguageExtensions.rst:1398
msgid ""
"Use ``__has_feature(cxx_trailing_return)`` or "
"``__has_extension(cxx_trailing_return)`` to determine if support for the "
"alternate function declaration syntax with trailing return type is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1403
msgid "C++11 Unicode string literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1405
msgid ""
"Use ``__has_feature(cxx_unicode_literals)`` to determine if support for "
"Unicode string literals is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1409
msgid "C++11 unrestricted unions"
msgstr ""

#: ../../../LanguageExtensions.rst:1411
msgid ""
"Use ``__has_feature(cxx_unrestricted_unions)`` to determine if support for "
"unrestricted unions is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1415
msgid "C++11 user-defined literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1417
msgid ""
"Use ``__has_feature(cxx_user_literals)`` to determine if support for user-"
"defined literals is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1421
msgid "C++11 variadic templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1423
msgid ""
"Use ``__has_feature(cxx_variadic_templates)`` or "
"``__has_extension(cxx_variadic_templates)`` to determine if support for "
"variadic templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1428 ../../../LanguageExtensions.rst:1614
#: ../../../LanguageExtensions.rst:1615 ../../../LanguageExtensions.rst:1616
#: ../../../LanguageExtensions.rst:1617 ../../../LanguageExtensions.rst:1618
msgid "C++14"
msgstr ""

#: ../../../LanguageExtensions.rst:1430
msgid ""
"The features listed below are part of the C++14 standard.  As a result, all "
"these features are enabled with the ``-std=C++14`` or ``-std=gnu++14`` "
"option when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:1435
msgid "C++14 binary literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1437
msgid ""
"Use ``__has_feature(cxx_binary_literals)`` or "
"``__has_extension(cxx_binary_literals)`` to determine whether binary "
"literals (for instance, ``0b10010``) are recognized. Clang supports this "
"feature as an extension in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:1443
msgid "C++14 contextual conversions"
msgstr ""

#: ../../../LanguageExtensions.rst:1445
msgid ""
"Use ``__has_feature(cxx_contextual_conversions)`` or "
"``__has_extension(cxx_contextual_conversions)`` to determine if the C++14 "
"rules are used when performing an implicit conversion for an array bound in "
"a *new-expression*, the operand of a *delete-expression*, an integral "
"constant expression, or a condition in a ``switch`` statement."
msgstr ""

#: ../../../LanguageExtensions.rst:1452
msgid "C++14 decltype(auto)"
msgstr ""

#: ../../../LanguageExtensions.rst:1454
msgid ""
"Use ``__has_feature(cxx_decltype_auto)`` or "
"``__has_extension(cxx_decltype_auto)`` to determine if support for the "
"``decltype(auto)`` placeholder type is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1459
msgid "C++14 default initializers for aggregates"
msgstr ""

#: ../../../LanguageExtensions.rst:1461
msgid ""
"Use ``__has_feature(cxx_aggregate_nsdmi)`` or "
"``__has_extension(cxx_aggregate_nsdmi)`` to determine if support for default "
"initializers in aggregate members is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1466
msgid "C++14 digit separators"
msgstr ""

#: ../../../LanguageExtensions.rst:1468
msgid ""
"Use ``__cpp_digit_separators`` to determine if support for digit separators "
"using single quotes (for instance, ``10'000``) is enabled. At this time, "
"there is no corresponding ``__has_feature`` name"
msgstr ""

#: ../../../LanguageExtensions.rst:1473
msgid "C++14 generalized lambda capture"
msgstr ""

#: ../../../LanguageExtensions.rst:1475
msgid ""
"Use ``__has_feature(cxx_init_captures)`` or "
"``__has_extension(cxx_init_captures)`` to determine if support for lambda "
"captures with explicit initializers is enabled (for instance, ``[n(0)] "
"{ return ++n; }``)."
msgstr ""

#: ../../../LanguageExtensions.rst:1481
msgid "C++14 generic lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1483
msgid ""
"Use ``__has_feature(cxx_generic_lambdas)`` or "
"``__has_extension(cxx_generic_lambdas)`` to determine if support for generic "
"(polymorphic) lambdas is enabled (for instance, ``[] (auto x) { return x + "
"1; }``)."
msgstr ""

#: ../../../LanguageExtensions.rst:1489
msgid "C++14 relaxed constexpr"
msgstr ""

#: ../../../LanguageExtensions.rst:1491
msgid ""
"Use ``__has_feature(cxx_relaxed_constexpr)`` or "
"``__has_extension(cxx_relaxed_constexpr)`` to determine if variable "
"declarations, local variable modification, and control flow constructs are "
"permitted in ``constexpr`` functions."
msgstr ""

#: ../../../LanguageExtensions.rst:1497
msgid "C++14 return type deduction"
msgstr ""

#: ../../../LanguageExtensions.rst:1499
msgid ""
"Use ``__has_feature(cxx_return_type_deduction)`` or "
"``__has_extension(cxx_return_type_deduction)`` to determine if support for "
"return type deduction for functions (using ``auto`` as a return type) is "
"enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1505
msgid "C++14 runtime-sized arrays"
msgstr ""

#: ../../../LanguageExtensions.rst:1507
msgid ""
"Use ``__has_feature(cxx_runtime_array)`` or "
"``__has_extension(cxx_runtime_array)`` to determine if support for arrays of "
"runtime bound (a restricted form of variable-length arrays) is enabled. "
"Clang's implementation of this feature is incomplete."
msgstr ""

#: ../../../LanguageExtensions.rst:1514
msgid "C++14 variable templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1516
msgid ""
"Use ``__has_feature(cxx_variable_templates)`` or "
"``__has_extension(cxx_variable_templates)`` to determine if support for "
"templated variable declarations is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1521
msgid "C11"
msgstr ""

#: ../../../LanguageExtensions.rst:1523
msgid ""
"The features listed below are part of the C11 standard.  As a result, all "
"these features are enabled with the ``-std=c11`` or ``-std=gnu11`` option "
"when compiling C code.  Additionally, because these features are all "
"backward-compatible, they are available as extensions in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:1529
msgid "C11 alignment specifiers"
msgstr ""

#: ../../../LanguageExtensions.rst:1531
msgid ""
"Use ``__has_feature(c_alignas)`` or ``__has_extension(c_alignas)`` to "
"determine if support for alignment specifiers using ``_Alignas`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1534
msgid ""
"Use ``__has_feature(c_alignof)`` or ``__has_extension(c_alignof)`` to "
"determine if support for the ``_Alignof`` keyword is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1538
msgid "C11 atomic operations"
msgstr ""

#: ../../../LanguageExtensions.rst:1540
msgid ""
"Use ``__has_feature(c_atomic)`` or ``__has_extension(c_atomic)`` to "
"determine if support for atomic types using ``_Atomic`` is enabled.  Clang "
"also provides :ref:`a set of builtins <langext-__c11_atomic>` which can be "
"used to implement the ``<stdatomic.h>`` operations on ``_Atomic`` types. Use "
"``__has_include(<stdatomic.h>)`` to determine if C11's ``<stdatomic.h>`` "
"header is available."
msgstr ""

#: ../../../LanguageExtensions.rst:1547
msgid ""
"Clang will use the system's ``<stdatomic.h>`` header when one is available, "
"and will otherwise use its own. When using its own, implementations of the "
"atomic operations are provided as macros. In the cases where C11 also "
"requires a real function, this header provides only the declaration of that "
"function (along with a shadowing macro implementation), and you must link to "
"a library which provides a definition of the function if you use it instead "
"of the macro."
msgstr ""

#: ../../../LanguageExtensions.rst:1555
msgid "C11 generic selections"
msgstr ""

#: ../../../LanguageExtensions.rst:1557
msgid ""
"Use ``__has_feature(c_generic_selections)`` or "
"``__has_extension(c_generic_selections)`` to determine if support for "
"generic selections is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1561
msgid ""
"As an extension, the C11 generic selection expression is available in all "
"languages supported by Clang.  The syntax is the same as that given in the "
"C11 standard."
msgstr ""

#: ../../../LanguageExtensions.rst:1565
msgid ""
"In C, type compatibility is decided according to the rules given in the "
"appropriate standard, but in C++, which lacks the type compatibility rules "
"used in C, types are considered compatible only if they are equivalent."
msgstr ""

#: ../../../LanguageExtensions.rst:1569
msgid ""
"Clang also supports an extended form of ``_Generic`` with a controlling type "
"rather than a controlling expression. Unlike with a controlling expression, "
"a controlling type argument does not undergo any conversions and thus is "
"suitable for use when trying to match qualified types, incomplete types, or "
"function types. Variable-length array types lack the necessary compile-time "
"information to resolve which association they match with and thus are not "
"allowed as a controlling type argument."
msgstr ""

#: ../../../LanguageExtensions.rst:1577
msgid ""
"Use ``__has_extension(c_generic_selection_with_controlling_type)`` to "
"determine if support for this extension is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1581
msgid "C11 ``_Static_assert()``"
msgstr ""

#: ../../../LanguageExtensions.rst:1583
msgid ""
"Use ``__has_feature(c_static_assert)`` or "
"``__has_extension(c_static_assert)`` to determine if support for compile-"
"time assertions using ``_Static_assert`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1588
msgid "C11 ``_Thread_local``"
msgstr ""

#: ../../../LanguageExtensions.rst:1590
msgid ""
"Use ``__has_feature(c_thread_local)`` or ``__has_extension(c_thread_local)`` "
"to determine if support for ``_Thread_local`` variables is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1594
msgid "Modules"
msgstr ""

#: ../../../LanguageExtensions.rst:1596
msgid ""
"Use ``__has_feature(modules)`` to determine if Modules have been enabled. "
"For example, compiling code with ``-fmodules`` enables the use of Modules."
msgstr ""

#: ../../../LanguageExtensions.rst:1599
msgid ""
"More information could be found `here <https://clang.llvm.org/docs/Modules."
"html>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1602
msgid "Language Extensions Back-ported to Previous Standards"
msgstr ""

#: ../../../LanguageExtensions.rst:1605
msgid "Feature"
msgstr ""

#: ../../../LanguageExtensions.rst:1605
msgid "Feature Test Macro"
msgstr ""

#: ../../../LanguageExtensions.rst:1605
msgid "Introduced In"
msgstr ""

#: ../../../LanguageExtensions.rst:1605
msgid "Backported To"
msgstr ""

#: ../../../LanguageExtensions.rst:1607
msgid "variadic templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1607
msgid "__cpp_variadic_templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1607 ../../../LanguageExtensions.rst:1608
#: ../../../LanguageExtensions.rst:1609 ../../../LanguageExtensions.rst:1610
#: ../../../LanguageExtensions.rst:1611 ../../../LanguageExtensions.rst:1612
#: ../../../LanguageExtensions.rst:1613 ../../../LanguageExtensions.rst:1614
#: ../../../LanguageExtensions.rst:1615 ../../../LanguageExtensions.rst:1616
#: ../../../LanguageExtensions.rst:1617 ../../../LanguageExtensions.rst:1620
#: ../../../LanguageExtensions.rst:1622 ../../../LanguageExtensions.rst:1623
#: ../../../LanguageExtensions.rst:1624 ../../../LanguageExtensions.rst:1625
#: ../../../LanguageExtensions.rst:1626 ../../../LanguageExtensions.rst:1627
#: ../../../LanguageExtensions.rst:1629 ../../../LanguageExtensions.rst:1630
#: ../../../LanguageExtensions.rst:1631 ../../../LanguageExtensions.rst:1632
#: ../../../LanguageExtensions.rst:1633 ../../../LanguageExtensions.rst:1634
#: ../../../LanguageExtensions.rst:1635 ../../../LanguageExtensions.rst:1637
#: ../../../LanguageExtensions.rst:1639 ../../../LanguageExtensions.rst:1641
#: ../../../LanguageExtensions.rst:1642 ../../../LanguageExtensions.rst:1643
msgid "C++03"
msgstr ""

#: ../../../LanguageExtensions.rst:1608
msgid "Alias templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1608
msgid "__cpp_alias_templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1609
msgid "Non-static data member initializers"
msgstr ""

#: ../../../LanguageExtensions.rst:1609
msgid "__cpp_nsdmi"
msgstr ""

#: ../../../LanguageExtensions.rst:1610
msgid "Range-based ``for`` loop"
msgstr ""

#: ../../../LanguageExtensions.rst:1610
msgid "__cpp_range_based_for"
msgstr ""

#: ../../../LanguageExtensions.rst:1611
msgid "RValue references"
msgstr ""

#: ../../../LanguageExtensions.rst:1611
msgid "__cpp_rvalue_references"
msgstr ""

#: ../../../LanguageExtensions.rst:1612
msgid "Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1612
msgid "__cpp_attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1613
msgid "Lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1613
msgid "__cpp_lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1614
msgid "Generalized lambda captures"
msgstr ""

#: ../../../LanguageExtensions.rst:1614 ../../../LanguageExtensions.rst:1620
msgid "__cpp_init_captures"
msgstr ""

#: ../../../LanguageExtensions.rst:1615
msgid "Generic lambda expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:1615 ../../../LanguageExtensions.rst:1631
msgid "__cpp_generic_lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1616
msgid "variable templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1616
msgid "__cpp_variable_templates"
msgstr ""

#: ../../../LanguageExtensions.rst:1617
msgid "Binary literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1617
msgid "__cpp_binary_literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1618
msgid "Relaxed constexpr"
msgstr ""

#: ../../../LanguageExtensions.rst:1618
msgid "__cpp_constexpr"
msgstr ""

#: ../../../LanguageExtensions.rst:1619
msgid "Static assert with no message"
msgstr ""

#: ../../../LanguageExtensions.rst:1619
msgid "__cpp_static_assert >= 201411L"
msgstr ""

#: ../../../LanguageExtensions.rst:1619 ../../../LanguageExtensions.rst:1620
#: ../../../LanguageExtensions.rst:1621 ../../../LanguageExtensions.rst:1622
#: ../../../LanguageExtensions.rst:1623 ../../../LanguageExtensions.rst:1624
#: ../../../LanguageExtensions.rst:1625 ../../../LanguageExtensions.rst:1626
#: ../../../LanguageExtensions.rst:1627 ../../../LanguageExtensions.rst:1628
#: ../../../LanguageExtensions.rst:1629 ../../../LanguageExtensions.rst:1630
msgid "C++17"
msgstr ""

#: ../../../LanguageExtensions.rst:1620
msgid "Pack expansion in generalized lambda-capture"
msgstr ""

#: ../../../LanguageExtensions.rst:1621
msgid "``if constexpr``"
msgstr ""

#: ../../../LanguageExtensions.rst:1621
msgid "__cpp_if_constexpr"
msgstr ""

#: ../../../LanguageExtensions.rst:1622
msgid "fold expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:1622
msgid "__cpp_fold_expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:1623
msgid "Lambda capture of \\*this by value"
msgstr ""

#: ../../../LanguageExtensions.rst:1623
msgid "__cpp_capture_star_this"
msgstr ""

#: ../../../LanguageExtensions.rst:1624
msgid "Attributes on enums"
msgstr ""

#: ../../../LanguageExtensions.rst:1624
msgid "__cpp_enumerator_attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1625
msgid "Guaranteed copy elision"
msgstr ""

#: ../../../LanguageExtensions.rst:1625
msgid "__cpp_guaranteed_copy_elision"
msgstr ""

#: ../../../LanguageExtensions.rst:1626
msgid "Hexadecimal floating literals"
msgstr ""

#: ../../../LanguageExtensions.rst:1626
msgid "__cpp_hex_float"
msgstr ""

#: ../../../LanguageExtensions.rst:1627
msgid "``inline`` variables"
msgstr ""

#: ../../../LanguageExtensions.rst:1627
msgid "__cpp_inline_variables"
msgstr ""

#: ../../../LanguageExtensions.rst:1628
msgid "Attributes on namespaces"
msgstr ""

#: ../../../LanguageExtensions.rst:1628
msgid "__cpp_namespace_attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1629
msgid "Structured bindings"
msgstr ""

#: ../../../LanguageExtensions.rst:1629 ../../../LanguageExtensions.rst:1639
msgid "__cpp_structured_bindings"
msgstr ""

#: ../../../LanguageExtensions.rst:1630
msgid "template template arguments"
msgstr ""

#: ../../../LanguageExtensions.rst:1630
msgid "__cpp_template_template_args"
msgstr ""

#: ../../../LanguageExtensions.rst:1631
msgid "Familiar template syntax for generic lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1631 ../../../LanguageExtensions.rst:1632
#: ../../../LanguageExtensions.rst:1633 ../../../LanguageExtensions.rst:1634
#: ../../../LanguageExtensions.rst:1635 ../../../LanguageExtensions.rst:1636
msgid "C++20"
msgstr ""

#: ../../../LanguageExtensions.rst:1632
msgid "``static operator[]``"
msgstr ""

#: ../../../LanguageExtensions.rst:1632
msgid "__cpp_multidimensional_subscript"
msgstr ""

#: ../../../LanguageExtensions.rst:1633
msgid "Designated initializers"
msgstr ""

#: ../../../LanguageExtensions.rst:1633
msgid "__cpp_designated_initializers"
msgstr ""

#: ../../../LanguageExtensions.rst:1634
msgid "Conditional ``explicit``"
msgstr ""

#: ../../../LanguageExtensions.rst:1634
msgid "__cpp_conditional_explicit"
msgstr ""

#: ../../../LanguageExtensions.rst:1635
msgid "``using enum``"
msgstr ""

#: ../../../LanguageExtensions.rst:1635
msgid "__cpp_using_enum"
msgstr ""

#: ../../../LanguageExtensions.rst:1636
msgid "``if consteval``"
msgstr ""

#: ../../../LanguageExtensions.rst:1636
msgid "__cpp_if_consteval"
msgstr ""

#: ../../../LanguageExtensions.rst:1636 ../../../LanguageExtensions.rst:1637
#: ../../../LanguageExtensions.rst:1638
msgid "C++23"
msgstr ""

#: ../../../LanguageExtensions.rst:1637
msgid "``static operator()``"
msgstr ""

#: ../../../LanguageExtensions.rst:1637
msgid "__cpp_static_call_operator"
msgstr ""

#: ../../../LanguageExtensions.rst:1638
msgid "Attributes on Lambda-Expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:1639
msgid "Attributes on Structured Bindings"
msgstr ""

#: ../../../LanguageExtensions.rst:1639 ../../../LanguageExtensions.rst:1640
#: ../../../LanguageExtensions.rst:1641 ../../../LanguageExtensions.rst:1642
#: ../../../LanguageExtensions.rst:1643
msgid "C++26"
msgstr ""

#: ../../../LanguageExtensions.rst:1640
msgid "Static assert with user-generated message"
msgstr ""

#: ../../../LanguageExtensions.rst:1640
msgid "__cpp_static_assert >= 202306L"
msgstr ""

#: ../../../LanguageExtensions.rst:1641
msgid "Pack Indexing"
msgstr ""

#: ../../../LanguageExtensions.rst:1641
msgid "__cpp_pack_indexing"
msgstr ""

#: ../../../LanguageExtensions.rst:1642
msgid "``= delete (\"should have a reason\");``"
msgstr ""

#: ../../../LanguageExtensions.rst:1642
msgid "__cpp_deleted_function"
msgstr ""

#: ../../../LanguageExtensions.rst:1643
msgid "Variadic Friends"
msgstr ""

#: ../../../LanguageExtensions.rst:1643
msgid "__cpp_variadic_friend"
msgstr ""

#: ../../../LanguageExtensions.rst:1645
msgid "Designated initializers (N494)"
msgstr ""

#: ../../../LanguageExtensions.rst:1645
msgid "C99"
msgstr ""

#: ../../../LanguageExtensions.rst:1645 ../../../LanguageExtensions.rst:1646
#: ../../../LanguageExtensions.rst:1647
msgid "C89"
msgstr ""

#: ../../../LanguageExtensions.rst:1646
msgid "Array & element qualification (N2607)"
msgstr ""

#: ../../../LanguageExtensions.rst:1646 ../../../LanguageExtensions.rst:1647
#: ../../../LanguageExtensions.rst:1648
msgid "C23"
msgstr ""

#: ../../../LanguageExtensions.rst:1647
msgid "Attributes (N2335)"
msgstr ""

#: ../../../LanguageExtensions.rst:1648
msgid "``#embed`` (N3017)"
msgstr ""

#: ../../../LanguageExtensions.rst:1648
msgid "C89, C++"
msgstr ""

#: ../../../LanguageExtensions.rst:1652
msgid "Builtin type aliases"
msgstr ""

#: ../../../LanguageExtensions.rst:1654
msgid ""
"Clang provides a few builtin aliases to improve the throughput of certain "
"metaprogramming facilities."
msgstr ""

#: ../../../LanguageExtensions.rst:1657
msgid "__builtin_common_type"
msgstr ""

#: ../../../LanguageExtensions.rst:1667
msgid ""
"This alias is used for implementing ``std::common_type``. If ``std::"
"common_type`` should contain a ``type`` member, it is an alias to "
"``HasTypeMember<TheCommonType>``. Otherwise it is an alias to "
"``HasNoTypeMember``. The ``BaseTemplate`` is usually ``std::common_type``. "
"``Ts`` are the arguments to ``std::common_type``."
msgstr ""

#: ../../../LanguageExtensions.rst:1672
msgid "__type_pack_element"
msgstr ""

#: ../../../LanguageExtensions.rst:1679
msgid "This alias returns the type at ``Index`` in the parameter pack ``Ts``."
msgstr ""

#: ../../../LanguageExtensions.rst:1682
msgid "__make_integer_seq"
msgstr ""

#: ../../../LanguageExtensions.rst:1689
msgid ""
"This alias returns ``IntSeq`` instantiated with ``IntSeqT = T``and ``Ints`` "
"being the pack ``0, ..., N - 1``."
msgstr ""

#: ../../../LanguageExtensions.rst:1692
msgid "Type Trait Primitives"
msgstr ""

#: ../../../LanguageExtensions.rst:1694
msgid ""
"Type trait primitives are special builtin constant expressions that can be "
"used by the standard C++ library to facilitate or simplify the "
"implementation of user-facing type traits in the <type_traits> header."
msgstr ""

#: ../../../LanguageExtensions.rst:1698
msgid ""
"They are not intended to be used directly by user code because they are "
"implementation-defined and subject to change -- as such they're tied closely "
"to the supported set of system headers, currently:"
msgstr ""

#: ../../../LanguageExtensions.rst:1702
msgid "LLVM's own libc++"
msgstr ""

#: ../../../LanguageExtensions.rst:1703
msgid "GNU libstdc++"
msgstr ""

#: ../../../LanguageExtensions.rst:1704
msgid "The Microsoft standard C++ library"
msgstr ""

#: ../../../LanguageExtensions.rst:1706
msgid ""
"Clang supports the `GNU C++ type traits <https://gcc.gnu.org/onlinedocs/gcc/"
"Type-Traits.html>`_ and a subset of the `Microsoft Visual C++ type traits "
"<https://msdn.microsoft.com/en-us/library/ms177194(v=VS.100).aspx>`_, as "
"well as nearly all of the `Embarcadero C++ type traits <http://docwiki."
"embarcadero.com/RADStudio/Rio/en/Type_Trait_Functions_(C%2B%2B11)_Index>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1714
msgid ""
"The following type trait primitives are supported by Clang. Those traits "
"marked (C++) provide implementations for type traits specified by the C++ "
"standard; ``__X(...)`` has the same semantics and constraints as the "
"corresponding ``std::X_t<...>`` or ``std::X_v<...>`` type trait."
msgstr ""

#: ../../../LanguageExtensions.rst:1719
msgid ""
"``__array_rank(type)`` (Embarcadero): Returns the number of levels of array "
"in the type ``type``: ``0`` if ``type`` is not an array type, and "
"``__array_rank(element) + 1`` if ``type`` is an array of ``element``."
msgstr ""

#: ../../../LanguageExtensions.rst:1723
msgid ""
"``__array_extent(type, dim)`` (Embarcadero): The ``dim``'th array bound in "
"the type ``type``, or ``0`` if ``dim >= __array_rank(type)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1726
msgid "``__builtin_is_implicit_lifetime`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1727
msgid "``__builtin_is_virtual_base_of`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1728
msgid ""
"``__can_pass_in_regs`` (C++) Returns whether a class can be passed in "
"registers under the current ABI. This type can only be applied to "
"unqualified class types. This is not a portable type trait."
msgstr ""

#: ../../../LanguageExtensions.rst:1732
msgid ""
"``__has_nothrow_assign`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_nothrow_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1734
msgid ""
"``__has_nothrow_move_assign`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1736
msgid ""
"``__has_nothrow_copy`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1738
msgid ""
"``__has_nothrow_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1740
msgid ""
"``__has_trivial_assign`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_trivially_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1742
msgid ""
"``__has_trivial_move_assign`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1744
msgid ""
"``__has_trivial_copy`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_copyable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1746
msgid ""
"``__has_trivial_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1748
msgid ""
"``__has_trivial_move_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1750
msgid ""
"``__has_trivial_destructor`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_trivially_destructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1752
msgid "``__has_unique_object_representations`` (C++, GNU)"
msgstr ""

#: ../../../LanguageExtensions.rst:1753
msgid "``__has_virtual_destructor`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1754
msgid "``__is_abstract`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1755
msgid "``__is_aggregate`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1756
msgid "``__is_arithmetic`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1757
msgid "``__is_array`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1758
msgid "``__is_assignable`` (C++, MSVC 2015)"
msgstr ""

#: ../../../LanguageExtensions.rst:1759
msgid "``__is_base_of`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1760
msgid "``__is_bounded_array`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1761
msgid "``__is_class`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1762
msgid ""
"``__is_complete_type(type)`` (Embarcadero): Return ``true`` if ``type`` is a "
"complete type. Warning: this trait is dangerous because it can return "
"different values at different points in the same program."
msgstr ""

#: ../../../LanguageExtensions.rst:1766
msgid "``__is_compound`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1767
msgid "``__is_const`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1768
msgid "``__is_constructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1769
msgid "``__is_convertible`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1770
msgid "``__is_nothrow_convertible`` (C++, GNU)"
msgstr ""

#: ../../../LanguageExtensions.rst:1771
msgid "``__is_convertible_to`` (Microsoft): Synonym for ``__is_convertible``."
msgstr ""

#: ../../../LanguageExtensions.rst:1773
msgid "``__is_destructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1774
msgid "``__is_empty`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1775
msgid "``__is_enum`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1776
msgid "``__is_final`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1777
msgid "``__is_floating_point`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1778
msgid "``__is_function`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1779
msgid "``__is_fundamental`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1780
msgid "``__is_integral`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1781
msgid ""
"``__is_interface_class`` (Microsoft): Returns ``false``, even for types "
"defined with ``__interface``."
msgstr ""

#: ../../../LanguageExtensions.rst:1783
msgid "``__is_layout_compatible`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1784
msgid "``__is_literal`` (Clang): Synonym for ``__is_literal_type``."
msgstr ""

#: ../../../LanguageExtensions.rst:1786
msgid ""
"``__is_literal_type`` (C++, GNU, Microsoft): Note, the corresponding "
"standard trait was deprecated in C++17 and removed in C++20."
msgstr ""

#: ../../../LanguageExtensions.rst:1789
msgid "``__is_lvalue_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1790
msgid "``__is_member_object_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1791
msgid "``__is_member_function_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1792
msgid "``__is_member_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1793
msgid "``__is_nothrow_assignable`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1794
msgid "``__is_nothrow_constructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1795
msgid "``__is_nothrow_destructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1796
msgid "``__is_object`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1797
msgid ""
"``__is_pod`` (C++, GNU, Microsoft, Embarcadero): Note, the corresponding "
"standard trait was deprecated in C++20."
msgstr ""

#: ../../../LanguageExtensions.rst:1799
msgid "``__is_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1800
msgid "``__is_pointer_interconvertible_base_of`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1801
msgid "``__is_polymorphic`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1802
msgid "``__is_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1803
msgid ""
"``__is_referenceable`` (C++, GNU, Microsoft, Embarcadero): Returns true if a "
"type is referenceable, and false otherwise. A referenceable type is a type "
"that's either an object type, a reference type, or an unqualified function "
"type. This trait is deprecated and will be removed in Clang 21."
msgstr ""

#: ../../../LanguageExtensions.rst:1807
msgid "``__is_rvalue_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1808
msgid "``__is_same`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1809
msgid "``__is_same_as`` (GCC): Synonym for ``__is_same``."
msgstr ""

#: ../../../LanguageExtensions.rst:1810
msgid "``__is_scalar`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1811
msgid "``__is_scoped_enum`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1812
msgid "``__is_sealed`` (Microsoft): Synonym for ``__is_final``."
msgstr ""

#: ../../../LanguageExtensions.rst:1814
msgid ""
"``__is_signed`` (C++, Embarcadero): Returns false for enumeration types, and "
"returns true for floating-point types. Note, before Clang 10, returned true "
"for enumeration types if the underlying type was signed, and returned false "
"for floating-point types."
msgstr ""

#: ../../../LanguageExtensions.rst:1818
msgid "``__is_standard_layout`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1819
msgid "``__is_trivial`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1820
msgid "``__is_trivially_assignable`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1821
msgid "``__is_trivially_constructible`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1822
msgid "``__is_trivially_copyable`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1823
msgid "``__is_trivially_destructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1824
msgid ""
"``__is_trivially_relocatable`` (Clang): Returns true if moving an object of "
"the given type, and then destroying the source object, is known to be "
"functionally equivalent to copying the underlying bytes and then dropping "
"the source object on the floor. This is true of trivial types and types "
"which were made trivially relocatable via the ``clang::trivial_abi`` "
"attribute."
msgstr ""

#: ../../../LanguageExtensions.rst:1829
msgid ""
"``__is_trivially_equality_comparable`` (Clang): Returns true if comparing "
"two objects of the provided type is known to be equivalent to comparing "
"their object representations. Note that types containing padding bytes are "
"never trivially equality comparable."
msgstr ""

#: ../../../LanguageExtensions.rst:1833
msgid "``__is_unbounded_array`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1834
msgid "``__is_union`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1835
msgid ""
"``__is_unsigned`` (C++, Embarcadero): Returns false for enumeration types. "
"Note, before Clang 13, returned true for enumeration types if the underlying "
"type was unsigned."
msgstr ""

#: ../../../LanguageExtensions.rst:1838
msgid "``__is_void`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1839
msgid "``__is_volatile`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1840
msgid ""
"``__reference_binds_to_temporary(T, U)`` (Clang):  Determines whether a "
"reference of type ``T`` bound to an expression of type ``U`` would bind to a "
"materialized temporary object. If ``T`` is not a reference type the result "
"is false. Note this trait will also return false when the initialization of "
"``T`` from ``U`` is ill-formed. Deprecated, use "
"``__reference_constructs_from_temporary``."
msgstr ""

#: ../../../LanguageExtensions.rst:1846
msgid ""
"``__reference_constructs_from_temporary(T, U)`` (C++) Returns true if a "
"reference ``T`` can be direct-initialized from a temporary of type a non-cv-"
"qualified ``U``."
msgstr ""

#: ../../../LanguageExtensions.rst:1850
msgid "``__reference_converts_from_temporary(T, U)`` (C++)"
msgstr ""

#: ../../../LanguageExtensions.rst:1850
msgid ""
"Returns true if a reference ``T`` can be copy-initialized from a temporary "
"of type a non-cv-qualified ``U``."
msgstr ""

#: ../../../LanguageExtensions.rst:1852
msgid "``__underlying_type`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1854
msgid "In addition, the following expression traits are supported:"
msgstr ""

#: ../../../LanguageExtensions.rst:1856
msgid ""
"``__is_lvalue_expr(e)`` (Embarcadero): Returns true if ``e`` is an lvalue "
"expression. Deprecated, use ``__is_lvalue_reference(decltype((e)))`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1859
msgid ""
"``__is_rvalue_expr(e)`` (Embarcadero): Returns true if ``e`` is a prvalue "
"expression. Deprecated, use ``!__is_reference(decltype((e)))`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1863
msgid ""
"There are multiple ways to detect support for a type trait ``__X`` in the "
"compiler, depending on the oldest version of Clang you wish to support."
msgstr ""

#: ../../../LanguageExtensions.rst:1866
msgid "From Clang 10 onwards, ``__has_builtin(__X)`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:1867
msgid "From Clang 6 onwards, ``!__is_identifier(__X)`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:1868
msgid ""
"From Clang 3 onwards, ``__has_feature(X)`` can be used, but only supports "
"the following traits:"
msgstr ""

#: ../../../LanguageExtensions.rst:1871
msgid "``__has_nothrow_assign``"
msgstr ""

#: ../../../LanguageExtensions.rst:1872
msgid "``__has_nothrow_copy``"
msgstr ""

#: ../../../LanguageExtensions.rst:1873
msgid "``__has_nothrow_constructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1874
msgid "``__has_trivial_assign``"
msgstr ""

#: ../../../LanguageExtensions.rst:1875
msgid "``__has_trivial_copy``"
msgstr ""

#: ../../../LanguageExtensions.rst:1876
msgid "``__has_trivial_constructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1877
msgid "``__has_trivial_destructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1878
msgid "``__has_virtual_destructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1879
msgid "``__is_abstract``"
msgstr ""

#: ../../../LanguageExtensions.rst:1880
msgid "``__is_base_of``"
msgstr ""

#: ../../../LanguageExtensions.rst:1881
msgid "``__is_class``"
msgstr ""

#: ../../../LanguageExtensions.rst:1882
msgid "``__is_constructible``"
msgstr ""

#: ../../../LanguageExtensions.rst:1883
msgid "``__is_convertible_to``"
msgstr ""

#: ../../../LanguageExtensions.rst:1884
msgid "``__is_empty``"
msgstr ""

#: ../../../LanguageExtensions.rst:1885
msgid "``__is_enum``"
msgstr ""

#: ../../../LanguageExtensions.rst:1886
msgid "``__is_final``"
msgstr ""

#: ../../../LanguageExtensions.rst:1887
msgid "``__is_literal``"
msgstr ""

#: ../../../LanguageExtensions.rst:1888
msgid "``__is_standard_layout``"
msgstr ""

#: ../../../LanguageExtensions.rst:1889
msgid "``__is_pod``"
msgstr ""

#: ../../../LanguageExtensions.rst:1890
msgid "``__is_polymorphic``"
msgstr ""

#: ../../../LanguageExtensions.rst:1891
msgid "``__is_sealed``"
msgstr ""

#: ../../../LanguageExtensions.rst:1892
msgid "``__is_trivial``"
msgstr ""

#: ../../../LanguageExtensions.rst:1893
msgid "``__is_trivially_assignable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1894
msgid "``__is_trivially_constructible``"
msgstr ""

#: ../../../LanguageExtensions.rst:1895
msgid "``__is_trivially_copyable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1896
msgid "``__is_union``"
msgstr ""

#: ../../../LanguageExtensions.rst:1897
msgid "``__underlying_type``"
msgstr ""

#: ../../../LanguageExtensions.rst:1899
msgid ""
"A simplistic usage example as might be seen in standard C++ headers follows:"
msgstr ""

#: ../../../LanguageExtensions.rst:1913
msgid "Blocks"
msgstr ""

#: ../../../LanguageExtensions.rst:1915
msgid ""
"The syntax and high level language feature description is in :doc:"
"`BlockLanguageSpec<BlockLanguageSpec>`. Implementation and ABI details for "
"the clang implementation are in :doc:`Block-ABI-Apple<Block-ABI-Apple>`."
msgstr ""

#: ../../../LanguageExtensions.rst:1919
msgid "Query for this feature with ``__has_extension(blocks)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1922
msgid "ASM Goto with Output Constraints"
msgstr ""

#: ../../../LanguageExtensions.rst:1924
msgid ""
"Outputs may be used along any branches from the ``asm goto`` whether the "
"branches are taken or not."
msgstr ""

#: ../../../LanguageExtensions.rst:1927
msgid ""
"Query for this feature with ``__has_extension(gnu_asm_goto_with_outputs)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1929
msgid ""
"Prior to clang-16, the output may only be used safely when the indirect "
"branches are not taken.  Query for this difference with "
"``__has_extension(gnu_asm_goto_with_outputs_full)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1933
msgid ""
"When using tied-outputs (i.e. outputs that are inputs and outputs, not just "
"outputs) with the `+r` constraint, there is a hidden input that's created "
"before the label, so numeric references to operands must account for that."
msgstr ""

#: ../../../LanguageExtensions.rst:1948
msgid ""
"This was changed to match GCC in clang-13; for better portability, symbolic "
"references can be used instead of numeric references."
msgstr ""

#: ../../../LanguageExtensions.rst:1961
msgid "Objective-C Features"
msgstr ""

#: ../../../LanguageExtensions.rst:1964
msgid "Related result types"
msgstr ""

#: ../../../LanguageExtensions.rst:1966
msgid ""
"According to Cocoa conventions, Objective-C methods with certain names "
"(\"``init``\", \"``alloc``\", etc.) always return objects that are an "
"instance of the receiving class's type.  Such methods are said to have a "
"\"related result type\", meaning that a message send to one of these methods "
"will have the same static type as an instance of the receiver class.  For "
"example, given the following classes:"
msgstr ""

#: ../../../LanguageExtensions.rst:1983
msgid "and this common initialization pattern"
msgstr ""

#: ../../../LanguageExtensions.rst:1989
msgid ""
"the type of the expression ``[NSArray alloc]`` is ``NSArray*`` because "
"``alloc`` implicitly has a related result type.  Similarly, the type of the "
"expression ``[[NSArray alloc] init]`` is ``NSArray*``, since ``init`` has a "
"related result type and its receiver is known to have the type ``NSArray "
"*``. If neither ``alloc`` nor ``init`` had a related result type, the "
"expressions would have had type ``id``, as declared in the method signature."
msgstr ""

#: ../../../LanguageExtensions.rst:1996
msgid ""
"A method with a related result type can be declared by using the type "
"``instancetype`` as its result type.  ``instancetype`` is a contextual "
"keyword that is only permitted in the result type of an Objective-C method, "
"e.g."
msgstr ""

#: ../../../LanguageExtensions.rst:2006
msgid ""
"The related result type can also be inferred for some methods.  To determine "
"whether a method has an inferred related result type, the first word in the "
"camel-case selector (e.g., \"``init``\" in \"``initWithObjects``\") is "
"considered, and the method will have a related result type if its return "
"type is compatible with the type of its class and if:"
msgstr ""

#: ../../../LanguageExtensions.rst:2012
msgid ""
"the first word is \"``alloc``\" or \"``new``\", and the method is a class "
"method, or"
msgstr ""

#: ../../../LanguageExtensions.rst:2015
msgid ""
"the first word is \"``autorelease``\", \"``init``\", \"``retain``\", or "
"\"``self``\", and the method is an instance method."
msgstr ""

#: ../../../LanguageExtensions.rst:2018
msgid ""
"If a method with a related result type is overridden by a subclass method, "
"the subclass method must also return a type that is compatible with the "
"subclass type.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2028
msgid ""
"Related result types only affect the type of a message send or property "
"access via the given method.  In all other respects, a method with a related "
"result type is treated the same way as method that returns ``id``."
msgstr ""

#: ../../../LanguageExtensions.rst:2032
msgid ""
"Use ``__has_feature(objc_instancetype)`` to determine whether the "
"``instancetype`` contextual keyword is available."
msgstr ""

#: ../../../LanguageExtensions.rst:2036
msgid "Automatic reference counting"
msgstr ""

#: ../../../LanguageExtensions.rst:2038
msgid ""
"Clang provides support for :doc:`automated reference counting "
"<AutomaticReferenceCounting>` in Objective-C, which eliminates the need for "
"manual ``retain``/``release``/``autorelease`` message sends.  There are "
"three feature macros associated with automatic reference counting: "
"``__has_feature(objc_arc)`` indicates the availability of automated "
"reference counting in general, while ``__has_feature(objc_arc_weak)`` "
"indicates that automated reference counting also includes support for "
"``__weak`` pointers to Objective-C objects. "
"``__has_feature(objc_arc_fields)`` indicates that C structs are allowed to "
"have fields that are pointers to Objective-C objects managed by automatic "
"reference counting."
msgstr ""

#: ../../../LanguageExtensions.rst:2052
msgid "Weak references"
msgstr ""

#: ../../../LanguageExtensions.rst:2054
msgid ""
"Clang supports ARC-style weak and unsafe references in Objective-C even "
"outside of ARC mode.  Weak references must be explicitly enabled with the ``-"
"fobjc-weak`` option; use ``__has_feature((objc_arc_weak))`` to test whether "
"they are enabled.  Unsafe references are enabled unconditionally.  ARC-style "
"weak and unsafe references cannot be used when Objective-C garbage "
"collection is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:2061
msgid ""
"Except as noted below, the language rules for the ``__weak`` and "
"``__unsafe_unretained`` qualifiers (and the ``weak`` and "
"``unsafe_unretained`` property attributes) are just as laid out in the :doc:"
"`ARC specification <AutomaticReferenceCounting>`. In particular, note that "
"some classes do not support forming weak references to their instances, and "
"note that special care must be taken when storing weak references in memory "
"where initialization and deinitialization are outside the responsibility of "
"the compiler (such as in ``malloc``-ed memory)."
msgstr ""

#: ../../../LanguageExtensions.rst:2071
msgid ""
"Loading from a ``__weak`` variable always implicitly retains the loaded "
"value.  In non-ARC modes, this retain is normally balanced by an implicit "
"autorelease.  This autorelease can be suppressed by performing the load in "
"the receiver position of a ``-retain`` message send (e.g. ``[weakReference "
"retain]``); note that this performs only a single retain (the retain done "
"when primitively loading from the weak reference)."
msgstr ""

#: ../../../LanguageExtensions.rst:2079
msgid ""
"For the most part, ``__unsafe_unretained`` in non-ARC modes is just the "
"default behavior of variables and therefore is not needed.  However, it does "
"have an effect on the semantics of block captures: normally, copying a block "
"which captures an Objective-C object or block pointer causes the captured "
"pointer to be retained or copied, respectively, but that behavior is "
"suppressed when the captured variable is qualified with "
"``__unsafe_unretained``."
msgstr ""

#: ../../../LanguageExtensions.rst:2087
msgid ""
"Note that the ``__weak`` qualifier formerly meant the GC qualifier in all "
"non-ARC modes and was silently ignored outside of GC modes.  It now means "
"the ARC-style qualifier in all non-GC modes and is no longer allowed if not "
"enabled by either ``-fobjc-arc`` or ``-fobjc-weak``. It is expected that ``-"
"fobjc-weak`` will eventually be enabled by default in all non-GC Objective-C "
"modes."
msgstr ""

#: ../../../LanguageExtensions.rst:2097
msgid "Enumerations with a fixed underlying type"
msgstr ""

#: ../../../LanguageExtensions.rst:2099
msgid ""
"Clang provides support for C++11 enumerations with a fixed underlying type "
"within Objective-C and C `prior to C23 <https://open-std.org/JTC1/SC22/WG14/"
"www/docs/n3030.htm>`_.  For example, one can write an enumeration type as:"
msgstr ""

#: ../../../LanguageExtensions.rst:2106
msgid ""
"This specifies that the underlying type, which is used to store the "
"enumeration value, is ``unsigned char``."
msgstr ""

#: ../../../LanguageExtensions.rst:2109
msgid ""
"Use ``__has_feature(objc_fixed_enum)`` to determine whether support for "
"fixed underlying types is available in Objective-C."
msgstr ""

#: ../../../LanguageExtensions.rst:2112
msgid ""
"Use ``__has_extension(c_fixed_enum)`` to determine whether support for fixed "
"underlying types is available in C prior to C23. This will also report "
"``true`` in C23 and later modes as the functionality is available even if "
"it's not an extension in those modes."
msgstr ""

#: ../../../LanguageExtensions.rst:2117
msgid ""
"Use ``__has_feature(c_fixed_enum)`` to determine whether support for fixed "
"underlying types is available in C23 and later."
msgstr ""

#: ../../../LanguageExtensions.rst:2121
msgid "Interoperability with C++11 lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:2123
msgid ""
"Clang provides interoperability between C++11 lambdas and blocks-based APIs, "
"by permitting a lambda to be implicitly converted to a block pointer with "
"the corresponding signature.  For example, consider an API such as "
"``NSArray``'s array-sorting method:"
msgstr ""

#: ../../../LanguageExtensions.rst:2132
msgid ""
"``NSComparator`` is simply a typedef for the block pointer "
"``NSComparisonResult (^)(id, id)``, and parameters of this type are "
"generally provided with block literals as arguments.  However, one can also "
"use a C++11 lambda so long as it provides the same signature (in this case, "
"accepting two parameters of type ``id`` and returning an "
"``NSComparisonResult``):"
msgstr ""

#: ../../../LanguageExtensions.rst:2154
msgid ""
"This code relies on an implicit conversion from the type of the lambda "
"expression (an unnamed, local class type called the *closure type*) to the "
"corresponding block pointer type.  The conversion itself is expressed by a "
"conversion operator in that closure type that produces a block pointer with "
"the same signature as the lambda itself, e.g.,"
msgstr ""

#: ../../../LanguageExtensions.rst:2164
msgid ""
"This conversion function returns a new block that simply forwards the two "
"parameters to the lambda object (which it captures by copy), then returns "
"the result.  The returned block is first copied (with ``Block_copy``) and "
"then autoreleased.  As an optimization, if a lambda expression is "
"immediately converted to a block pointer (as in the first example, above), "
"then the block is not copied and autoreleased: rather, it is given the same "
"lifetime as a block literal written at that point in the program, which "
"avoids the overhead of copying a block to the heap in the common case."
msgstr ""

#: ../../../LanguageExtensions.rst:2173
msgid ""
"The conversion from a lambda to a block pointer is only available in "
"Objective-C++, and not in C++ with blocks, due to its use of Objective-C "
"memory management (autorelease)."
msgstr ""

#: ../../../LanguageExtensions.rst:2178
msgid "Object Literals and Subscripting"
msgstr ""

#: ../../../LanguageExtensions.rst:2180
msgid ""
"Clang provides support for :doc:`Object Literals and Subscripting "
"<ObjectiveCLiterals>` in Objective-C, which simplifies common Objective-C "
"programming patterns, makes programs more concise, and improves the safety "
"of container creation.  There are several feature macros associated with "
"object literals and subscripting: ``__has_feature(objc_array_literals)`` "
"tests the availability of array literals; "
"``__has_feature(objc_dictionary_literals)`` tests the availability of "
"dictionary literals; ``__has_feature(objc_subscripting)`` tests the "
"availability of object subscripting."
msgstr ""

#: ../../../LanguageExtensions.rst:2191
msgid "Objective-C Autosynthesis of Properties"
msgstr ""

#: ../../../LanguageExtensions.rst:2193
msgid ""
"Clang provides support for autosynthesis of declared properties.  Using this "
"feature, clang provides default synthesis of those properties not declared "
"@dynamic and not having user provided backing getter and setter methods. "
"``__has_feature(objc_default_synthesize_properties)`` checks for "
"availability of this feature in version of clang being used."
msgstr ""

#: ../../../LanguageExtensions.rst:2202
msgid "Objective-C retaining behavior attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:2204
msgid ""
"In Objective-C, functions and methods are generally assumed to follow the "
"`Cocoa Memory Management <https://developer.apple.com/library/mac/"
"#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html>`_ "
"conventions for ownership of object arguments and return values. However, "
"there are exceptions, and so Clang provides attributes to allow these "
"exceptions to be documented. This are used by ARC and the `static analyzer "
"<https://clang-analyzer.llvm.org>`_ Some exceptions may be better described "
"using the ``objc_method_family`` attribute instead."
msgstr ""

#: ../../../LanguageExtensions.rst:2213
msgid ""
"**Usage**: The ``ns_returns_retained``, ``ns_returns_not_retained``, "
"``ns_returns_autoreleased``, ``cf_returns_retained``, and "
"``cf_returns_not_retained`` attributes can be placed on methods and "
"functions that return Objective-C or CoreFoundation objects. They are "
"commonly placed at the end of a function prototype or method declaration:"
msgstr ""

#: ../../../LanguageExtensions.rst:2225
msgid ""
"The ``*_returns_retained`` attributes specify that the returned object has a "
"+1 retain count.  The ``*_returns_not_retained`` attributes specify that the "
"return object has a +0 retain count, even if the normal convention for its "
"selector would be +1.  ``ns_returns_autoreleased`` specifies that the "
"returned object is +0, but is guaranteed to live at least as long as the "
"next flush of an autorelease pool."
msgstr ""

#: ../../../LanguageExtensions.rst:2232
msgid ""
"**Usage**: The ``ns_consumed`` and ``cf_consumed`` attributes can be placed "
"on a parameter declaration; they specify that the argument is expected to "
"have a +1 retain count, which will be balanced in some way by the function "
"or method. The ``ns_consumes_self`` attribute can only be placed on an "
"Objective-C method; it specifies that the method expects its ``self`` "
"parameter to have a +1 retain count, which it will balance in some way."
msgstr ""

#: ../../../LanguageExtensions.rst:2246
msgid ""
"Further examples of these attributes are available in the static analyzer's "
"`list of annotations for analysis <analyzer/user-docs/Annotations.html#cocoa-"
"mem>`__."
msgstr ""

#: ../../../LanguageExtensions.rst:2249
msgid ""
"Query for these features with ``__has_attribute(ns_consumed)``, "
"``__has_attribute(ns_returns_retained)``, etc."
msgstr ""

#: ../../../LanguageExtensions.rst:2253
msgid "Objective-C @available"
msgstr ""

#: ../../../LanguageExtensions.rst:2255
msgid ""
"It is possible to use the newest SDK but still build a program that can run "
"on older versions of macOS and iOS by passing ``-mmacos-version-min=`` / ``-"
"miphoneos-version-min=``."
msgstr ""

#: ../../../LanguageExtensions.rst:2259
msgid ""
"Before LLVM 5.0, when calling a function that exists only in the OS that's "
"newer than the target OS (as determined by the minimum deployment version), "
"programmers had to carefully check if the function exists at runtime, using "
"null checks for weakly-linked C functions, ``+class`` for Objective-C "
"classes, and ``-respondsToSelector:`` or ``+instancesRespondToSelector:`` "
"for Objective-C methods.  If such a check was missed, the program would "
"compile fine, run fine on newer systems, but crash on older systems."
msgstr ""

#: ../../../LanguageExtensions.rst:2267
msgid ""
"As of LLVM 5.0, ``-Wunguarded-availability`` uses the `availability "
"attributes <https://clang.llvm.org/docs/AttributeReference."
"html#availability>`_ together with the new ``@available()`` keyword to "
"assist with this issue. When a method that's introduced in the OS newer than "
"the target OS is called, a -Wunguarded-availability warning is emitted if "
"that call is not guarded:"
msgstr ""

#: ../../../LanguageExtensions.rst:2282
msgid ""
"To fix the warning and to avoid the crash on macOS 10.11, wrap it in "
"``if(@available())``:"
msgstr ""

#: ../../../LanguageExtensions.rst:2296
msgid ""
"The ``*`` is required and means that platforms not explicitly listed will "
"take the true branch, and the compiler will emit ``-Wunguarded-"
"availability`` warnings for unlisted platforms based on those platform's "
"deployment target. More than one platform can be listed in ``@available()``:"
msgstr ""

#: ../../../LanguageExtensions.rst:2309
msgid ""
"If the caller of ``my_fun()`` already checks that ``my_fun()`` is only "
"called on 10.12, then add an `availability attribute <https://clang.llvm.org/"
"docs/AttributeReference.html#availability>`_ to it, which will also suppress "
"the warning and require that calls to my_fun() are checked:"
msgstr ""

#: ../../../LanguageExtensions.rst:2321
msgid ""
"``@available()`` is only available in Objective-C code.  To use the feature "
"in C and C++ code, use the ``__builtin_available()`` spelling instead."
msgstr ""

#: ../../../LanguageExtensions.rst:2324
msgid ""
"If existing code uses null checks or ``-respondsToSelector:``, it should be "
"changed to use ``@available()`` (or ``__builtin_available``) instead."
msgstr ""

#: ../../../LanguageExtensions.rst:2327
msgid ""
"``-Wunguarded-availability`` is disabled by default, but ``-Wunguarded-"
"availability-new``, which only emits this warning for APIs that have been "
"introduced in macOS >= 10.13, iOS >= 11, watchOS >= 4 and tvOS >= 11, is "
"enabled by default."
msgstr ""

#: ../../../LanguageExtensions.rst:2335
msgid "Objective-C++ ABI: protocol-qualifier mangling of parameters"
msgstr ""

#: ../../../LanguageExtensions.rst:2337
msgid ""
"Starting with LLVM 3.4, Clang produces a new mangling for parameters whose "
"type is a qualified-``id`` (e.g., ``id<Foo>``).  This mangling allows such "
"parameters to be differentiated from those with the regular unqualified "
"``id`` type."
msgstr ""

#: ../../../LanguageExtensions.rst:2342
msgid ""
"This was a non-backward compatible mangling change to the ABI.  This change "
"allows proper overloading, and also prevents mangling conflicts with "
"template parameters of protocol-qualified type."
msgstr ""

#: ../../../LanguageExtensions.rst:2346
msgid ""
"Query the presence of this new mangling with "
"``__has_feature(objc_protocol_qualifier_mangling)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2350
msgid "Initializer lists for complex numbers in C"
msgstr ""

#: ../../../LanguageExtensions.rst:2352
msgid "clang supports an extension which allows the following in C:"
msgstr ""

#: ../../../LanguageExtensions.rst:2360
msgid ""
"This construct is useful because there is no way to separately initialize "
"the real and imaginary parts of a complex variable in standard C, given that "
"clang does not support ``_Imaginary``.  (Clang also supports the "
"``__real__`` and ``__imag__`` extensions from gcc, which help in some cases, "
"but are not usable in static initializers.)"
msgstr ""

#: ../../../LanguageExtensions.rst:2366
msgid ""
"Note that this extension does not allow eliding the braces; the meaning of "
"the following two lines is different:"
msgstr ""

#: ../../../LanguageExtensions.rst:2374
msgid ""
"This extension also works in C++ mode, as far as that goes, but does not "
"apply to the C++ ``std::complex``.  (In C++11, list initialization allows "
"the same syntax to be used with ``std::complex`` with the same meaning.)"
msgstr ""

#: ../../../LanguageExtensions.rst:2378
msgid ""
"For GCC compatibility, ``__builtin_complex(re, im)`` can also be used to "
"construct a complex number from the given real and imaginary components."
msgstr ""

#: ../../../LanguageExtensions.rst:2382
msgid "OpenCL Features"
msgstr ""

#: ../../../LanguageExtensions.rst:2384
msgid "Clang supports internal OpenCL extensions documented below."
msgstr ""

#: ../../../LanguageExtensions.rst:2387
msgid "``__cl_clang_bitfields``"
msgstr ""

#: ../../../LanguageExtensions.rst:2389
msgid ""
"With this extension it is possible to enable bitfields in structs or unions "
"using the OpenCL extension pragma mechanism detailed in `the OpenCL "
"Extension Specification, section 1.2 <https://www.khronos.org/registry/"
"OpenCL/specs/3.0-unified/html/OpenCL_Ext.html#extensions-overview>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:2394
msgid ""
"Use of bitfields in OpenCL kernels can result in reduced portability as "
"struct layout is not guaranteed to be consistent when compiled by different "
"compilers. If structs with bitfields are used as kernel function parameters, "
"it can result in incorrect functionality when the layout is different "
"between the host and device code."
msgstr ""

#: ../../../LanguageExtensions.rst:2400 ../../../LanguageExtensions.rst:2444
#: ../../../LanguageExtensions.rst:2476 ../../../LanguageExtensions.rst:2500
#: ../../../LanguageExtensions.rst:2543 ../../../LanguageExtensions.rst:2568
#: ../../../LanguageExtensions.rst:2738 ../../../LanguageExtensions.rst:2772
#: ../../../LanguageExtensions.rst:2809 ../../../LanguageExtensions.rst:2845
#: ../../../LanguageExtensions.rst:2883 ../../../LanguageExtensions.rst:2925
#: ../../../LanguageExtensions.rst:2953 ../../../LanguageExtensions.rst:2989
#: ../../../LanguageExtensions.rst:3483 ../../../LanguageExtensions.rst:3603
#: ../../../LanguageExtensions.rst:4888
msgid "**Example of Use**:"
msgstr ""

#: ../../../LanguageExtensions.rst:2415
msgid "``__cl_clang_function_pointers``"
msgstr ""

#: ../../../LanguageExtensions.rst:2417
msgid ""
"With this extension it is possible to enable various language features that "
"are relying on function pointers using regular OpenCL extension pragma "
"mechanism detailed in `the OpenCL Extension Specification, section 1.2 "
"<https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_Ext."
"html#extensions-overview>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:2423
msgid "In C++ for OpenCL this also enables:"
msgstr ""

#: ../../../LanguageExtensions.rst:2425
msgid "Use of member function pointers;"
msgstr ""

#: ../../../LanguageExtensions.rst:2427
msgid "Unrestricted use of references to functions;"
msgstr ""

#: ../../../LanguageExtensions.rst:2429
msgid "Virtual member functions."
msgstr ""

#: ../../../LanguageExtensions.rst:2431
msgid ""
"Such functionality is not conformant and does not guarantee to compile "
"correctly in any circumstances. It can be used if:"
msgstr ""

#: ../../../LanguageExtensions.rst:2434
msgid ""
"the kernel source does not contain call expressions to (member-) function "
"pointers, or virtual functions. For example this extension can be used in "
"metaprogramming algorithms to be able to specify/detect types generically."
msgstr ""

#: ../../../LanguageExtensions.rst:2438
msgid ""
"the generated kernel binary does not contain indirect calls because they are "
"eliminated using compiler optimizations e.g. devirtualization."
msgstr ""

#: ../../../LanguageExtensions.rst:2441
msgid ""
"the selected target supports the function pointer like functionality e.g. "
"most CPU targets."
msgstr ""

#: ../../../LanguageExtensions.rst:2461
msgid "``__cl_clang_variadic_functions``"
msgstr ""

#: ../../../LanguageExtensions.rst:2463
msgid ""
"With this extension it is possible to enable variadic arguments in functions "
"using regular OpenCL extension pragma mechanism detailed in `the OpenCL "
"Extension Specification, section 1.2 <https://www.khronos.org/registry/"
"OpenCL/specs/3.0-unified/html/OpenCL_Ext.html#extensions-overview>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:2468
msgid ""
"This is not conformant behavior and it can only be used portably when the "
"functions with variadic prototypes do not get generated in binary e.g. the "
"variadic prototype is used to specify a function type with any number of "
"arguments in metaprogramming algorithms in C++ for OpenCL."
msgstr ""

#: ../../../LanguageExtensions.rst:2473
msgid ""
"This extensions can also be used when the kernel code is intended for "
"targets supporting the variadic arguments e.g. majority of CPU targets."
msgstr ""

#: ../../../LanguageExtensions.rst:2487
msgid "``__cl_clang_non_portable_kernel_param_types``"
msgstr ""

#: ../../../LanguageExtensions.rst:2489
msgid ""
"With this extension it is possible to enable the use of some restricted "
"types in kernel parameters specified in `C++ for OpenCL v1.0 s2.4 <https://"
"www.khronos.org/opencl/assets/CXX_for_OpenCL.html#kernel_function>`_. The "
"restrictions can be relaxed using regular OpenCL extension pragma mechanism "
"detailed in `the OpenCL Extension Specification, section 1.2 <https://www."
"khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_Ext."
"html#extensions-overview>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:2496
msgid ""
"This is not a conformant behavior and it can only be used when the kernel "
"arguments are not accessed on the host side or the data layout/size between "
"the host and device is known to be compatible."
msgstr ""

#: ../../../LanguageExtensions.rst:2536
msgid "Remove address space builtin function"
msgstr ""

#: ../../../LanguageExtensions.rst:2538
msgid ""
"``__remove_address_space`` allows to derive types in C++ for OpenCL that "
"have address space qualifiers removed. This utility only affects address "
"space qualifiers, therefore, other type qualifiers such as ``const`` or "
"``volatile`` remain unchanged."
msgstr ""

#: ../../../LanguageExtensions.rst:2560
msgid "Legacy 1.x atomics with generic address space"
msgstr ""

#: ../../../LanguageExtensions.rst:2562
msgid ""
"Clang allows use of atomic functions from the OpenCL 1.x standards with the "
"generic address space pointer in C++ for OpenCL mode."
msgstr ""

#: ../../../LanguageExtensions.rst:2565
msgid ""
"This is a non-portable feature and might not be supported by all targets."
msgstr ""

#: ../../../LanguageExtensions.rst:2577
msgid "WebAssembly Features"
msgstr ""

#: ../../../LanguageExtensions.rst:2579
msgid ""
"Clang supports the WebAssembly features documented below. For further "
"information related to the semantics of the builtins, please refer to the "
"`WebAssembly Specification <https://webassembly.github.io/spec/core/>`_. In "
"this section, when we refer to reference types, we are referring to "
"WebAssembly reference types, not C++ reference types unless stated otherwise."
msgstr ""

#: ../../../LanguageExtensions.rst:2586
msgid "``__builtin_wasm_table_set``"
msgstr ""

#: ../../../LanguageExtensions.rst:2588
msgid ""
"This builtin function stores a value in a WebAssembly table. It takes three "
"arguments. The first argument is the table to store a value into, the second "
"argument is the index to which to store the value into, and the third "
"argument is a value of reference type to store in the table. It returns "
"nothing."
msgstr ""

#: ../../../LanguageExtensions.rst:2605
msgid "``__builtin_wasm_table_get``"
msgstr ""

#: ../../../LanguageExtensions.rst:2607
msgid ""
"This builtin function is the counterpart to ``__builtin_wasm_table_set`` and "
"loads a value from a WebAssembly table of reference typed values. It takes 2 "
"arguments. The first argument is a table of reference typed values and the "
"second argument is an index from which to load the value. It returns the "
"loaded reference typed value."
msgstr ""

#: ../../../LanguageExtensions.rst:2624
msgid "``__builtin_wasm_table_size``"
msgstr ""

#: ../../../LanguageExtensions.rst:2626
msgid ""
"This builtin function returns the size of the WebAssembly table. Takes the "
"table as an argument and returns an unsigned integer (``size_t``) with the "
"current table size."
msgstr ""

#: ../../../LanguageExtensions.rst:2640
msgid "``__builtin_wasm_table_grow``"
msgstr ""

#: ../../../LanguageExtensions.rst:2642
msgid ""
"This builtin function grows the WebAssembly table by a certain amount. "
"Currently, as all WebAssembly tables created in C/C++ are zero-sized, this "
"always needs to be called to grow the table."
msgstr ""

#: ../../../LanguageExtensions.rst:2646
msgid ""
"It takes three arguments. The first argument is the WebAssembly table to "
"grow. The second argument is the reference typed value to store in the new "
"table entries (the initialization value), and the third argument is the "
"amount to grow the table by. It returns the previous table size or -1. It "
"will return -1 if not enough space could be allocated."
msgstr ""

#: ../../../LanguageExtensions.rst:2666
msgid "``__builtin_wasm_table_fill``"
msgstr ""

#: ../../../LanguageExtensions.rst:2668
msgid ""
"This builtin function sets all the entries of a WebAssembly table to a given "
"reference typed value. It takes four arguments. The first argument is the "
"WebAssembly table, the second argument is the index that starts the range, "
"the third argument is the value to set in the new entries, and the fourth "
"and the last argument is the size of the range. It returns nothing."
msgstr ""

#: ../../../LanguageExtensions.rst:2686
msgid "``__builtin_wasm_table_copy``"
msgstr ""

#: ../../../LanguageExtensions.rst:2688
msgid ""
"This builtin function copies elements from a source WebAssembly table to a "
"possibly overlapping destination region. It takes five arguments. The first "
"argument is the destination WebAssembly table, and the second argument is "
"the source WebAssembly table. The third argument is the destination index "
"from where the copy starts, the fourth argument is the source index from "
"there the copy starts, and the fifth and last argument is the number of "
"elements to copy. It returns nothing."
msgstr ""

#: ../../../LanguageExtensions.rst:2709
msgid "Builtin Functions"
msgstr ""

#: ../../../LanguageExtensions.rst:2711
msgid ""
"Clang supports a number of builtin library functions with the same syntax as "
"GCC, including things like ``__builtin_nan``, ``__builtin_constant_p``, "
"``__builtin_choose_expr``, ``__builtin_types_compatible_p``, "
"``__builtin_assume_aligned``, ``__sync_fetch_and_add``, etc.  In addition to "
"the GCC builtins, Clang supports a number of builtins that GCC does not, "
"which are listed here."
msgstr ""

#: ../../../LanguageExtensions.rst:2718
msgid ""
"Please note that Clang does not and will not support all of the GCC builtins "
"for vector operations.  Instead of using builtins, you should use the "
"functions defined in target-specific header files like ``<xmmintrin.h>``, "
"which define portable wrappers for these.  Many of the Clang versions of "
"these functions are implemented directly in terms of :ref:`extended vector "
"support <langext-vectors>` instead of builtins, in order to reduce the "
"number of builtins that we need to implement."
msgstr ""

#: ../../../LanguageExtensions.rst:2727
msgid "``__builtin_alloca``"
msgstr ""

#: ../../../LanguageExtensions.rst:2729
msgid ""
"``__builtin_alloca`` is used to dynamically allocate memory on the stack. "
"Memory is automatically freed upon function termination."
msgstr ""

#: ../../../LanguageExtensions.rst:2732 ../../../LanguageExtensions.rst:2766
#: ../../../LanguageExtensions.rst:2803 ../../../LanguageExtensions.rst:2839
#: ../../../LanguageExtensions.rst:2877 ../../../LanguageExtensions.rst:2919
#: ../../../LanguageExtensions.rst:2947 ../../../LanguageExtensions.rst:2983
#: ../../../LanguageExtensions.rst:3011 ../../../LanguageExtensions.rst:3039
#: ../../../LanguageExtensions.rst:3130 ../../../LanguageExtensions.rst:3186
#: ../../../LanguageExtensions.rst:3231 ../../../LanguageExtensions.rst:3260
#: ../../../LanguageExtensions.rst:3293 ../../../LanguageExtensions.rst:3328
#: ../../../LanguageExtensions.rst:3359 ../../../LanguageExtensions.rst:3387
#: ../../../LanguageExtensions.rst:3416 ../../../LanguageExtensions.rst:3446
#: ../../../LanguageExtensions.rst:3477 ../../../LanguageExtensions.rst:3521
#: ../../../LanguageExtensions.rst:3597 ../../../LanguageExtensions.rst:3624
#: ../../../LanguageExtensions.rst:3642 ../../../LanguageExtensions.rst:3659
#: ../../../LanguageExtensions.rst:3676 ../../../LanguageExtensions.rst:3730
#: ../../../LanguageExtensions.rst:3773 ../../../LanguageExtensions.rst:3819
#: ../../../LanguageExtensions.rst:3832 ../../../LanguageExtensions.rst:3868
#: ../../../LanguageExtensions.rst:3908 ../../../LanguageExtensions.rst:4075
#: ../../../LanguageExtensions.rst:4336 ../../../LanguageExtensions.rst:4514
#: ../../../LanguageExtensions.rst:4559 ../../../LanguageExtensions.rst:4586
#: ../../../LanguageExtensions.rst:4661 ../../../LanguageExtensions.rst:4882
msgid "**Syntax**:"
msgstr ""

#: ../../../LanguageExtensions.rst:2751 ../../../LanguageExtensions.rst:2787
#: ../../../LanguageExtensions.rst:2821 ../../../LanguageExtensions.rst:2857
#: ../../../LanguageExtensions.rst:2899 ../../../LanguageExtensions.rst:2931
#: ../../../LanguageExtensions.rst:2962 ../../../LanguageExtensions.rst:2998
#: ../../../LanguageExtensions.rst:3024 ../../../LanguageExtensions.rst:3093
#: ../../../LanguageExtensions.rst:3158 ../../../LanguageExtensions.rst:3211
#: ../../../LanguageExtensions.rst:3246 ../../../LanguageExtensions.rst:3275
#: ../../../LanguageExtensions.rst:3308 ../../../LanguageExtensions.rst:3344
#: ../../../LanguageExtensions.rst:3373 ../../../LanguageExtensions.rst:3401
#: ../../../LanguageExtensions.rst:3430 ../../../LanguageExtensions.rst:3458
#: ../../../LanguageExtensions.rst:3489 ../../../LanguageExtensions.rst:3546
#: ../../../LanguageExtensions.rst:3851 ../../../LanguageExtensions.rst:3891
#: ../../../LanguageExtensions.rst:3932 ../../../LanguageExtensions.rst:4091
#: ../../../LanguageExtensions.rst:4342 ../../../LanguageExtensions.rst:4621
#: ../../../LanguageExtensions.rst:4702
msgid "**Description**:"
msgstr ""

#: ../../../LanguageExtensions.rst:2753
msgid ""
"``__builtin_alloca`` is meant to be used to allocate a dynamic amount of "
"memory on the stack. This amount is subject to stack allocation limits."
msgstr ""

#: ../../../LanguageExtensions.rst:2756
msgid "Query for this feature with ``__has_builtin(__builtin_alloca)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2759
msgid "``__builtin_alloca_with_align``"
msgstr ""

#: ../../../LanguageExtensions.rst:2761
msgid ""
"``__builtin_alloca_with_align`` is used to dynamically allocate memory on "
"the stack while controlling its alignment. Memory is automatically freed "
"upon function termination."
msgstr ""

#: ../../../LanguageExtensions.rst:2789
msgid ""
"``__builtin_alloca_with_align`` is meant to be used to allocate a dynamic "
"amount of memory on the stack. It is similar to ``__builtin_alloca`` but "
"accepts a second argument whose value is the alignment constraint, as a "
"power of 2 in *bits*."
msgstr ""

#: ../../../LanguageExtensions.rst:2793
msgid ""
"Query for this feature with ``__has_builtin(__builtin_alloca_with_align)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2798
msgid "``__builtin_assume``"
msgstr ""

#: ../../../LanguageExtensions.rst:2800
msgid ""
"``__builtin_assume`` is used to provide the optimizer with a boolean "
"invariant that is defined to be true."
msgstr ""

#: ../../../LanguageExtensions.rst:2823
msgid ""
"The boolean argument to this function is defined to be true. The optimizer "
"may analyze the form of the expression provided as the argument and deduce "
"from that information used to optimize the program. If the condition is "
"violated during execution, the behavior is undefined. The argument itself is "
"never evaluated, so any side effects of the expression will be discarded."
msgstr ""

#: ../../../LanguageExtensions.rst:2829
msgid "Query for this feature with ``__has_builtin(__builtin_assume)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2834
msgid "``__builtin_assume_separate_storage``"
msgstr ""

#: ../../../LanguageExtensions.rst:2836
msgid ""
"``__builtin_assume_separate_storage`` is used to provide the optimizer with "
"the knowledge that its two arguments point to separately allocated objects."
msgstr ""

#: ../../../LanguageExtensions.rst:2859
msgid ""
"The arguments to this function are assumed to point into separately "
"allocated storage (either different variable definitions or different "
"dynamic storage allocations). The optimizer may use this fact to aid in "
"alias analysis. If the arguments point into the same storage, the behavior "
"is undefined. Note that the definition of \"storage\" here refers to the "
"outermost enclosing allocation of any particular object (so for example, "
"it's never correct to call this function passing the addresses of fields in "
"the same struct, elements of the same array, etc.)."
msgstr ""

#: ../../../LanguageExtensions.rst:2868
msgid ""
"Query for this feature with "
"``__has_builtin(__builtin_assume_separate_storage)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2872
msgid "``__builtin_offsetof``"
msgstr ""

#: ../../../LanguageExtensions.rst:2874
msgid ""
"``__builtin_offsetof`` is used to implement the ``offsetof`` macro, which "
"calculates the offset (in bytes) to a given member of the given type."
msgstr ""

#: ../../../LanguageExtensions.rst:2901
msgid ""
"This builtin is usable in an integer constant expression which returns a "
"value of type ``size_t``. The value returned is the offset in bytes to the "
"subobject designated by the member-designator from the beginning of an "
"object of type ``type-name``. Clang extends the required standard "
"functionality in the following way:"
msgstr ""

#: ../../../LanguageExtensions.rst:2907
msgid ""
"In C language modes, the first argument may be the definition of a new type. "
"Any type declared this way is scoped to the nearest scope containing the "
"call to the builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:2911
msgid "Query for this feature with ``__has_builtin(__builtin_offsetof)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2914
msgid "``__builtin_call_with_static_chain``"
msgstr ""

#: ../../../LanguageExtensions.rst:2916
msgid ""
"``__builtin_call_with_static_chain`` is used to perform a static call while "
"setting updating the static chain register."
msgstr ""

#: ../../../LanguageExtensions.rst:2933
msgid ""
"This builtin returns ``expr`` after checking that ``expr`` is a non-member "
"static call expression. The call to that expression is made while using "
"``ptr`` as a function pointer stored in a dedicated register to implement "
"*static chain* calling convention, as used by some language to implement "
"closures or nested functions."
msgstr ""

#: ../../../LanguageExtensions.rst:2939
msgid ""
"Query for this feature with "
"``__has_builtin(__builtin_call_with_static_chain)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2942
msgid "``__builtin_readcyclecounter``"
msgstr ""

#: ../../../LanguageExtensions.rst:2944
msgid ""
"``__builtin_readcyclecounter`` is used to access the cycle counter register "
"(or a similar low-latency, high-accuracy clock) on those targets that "
"support it."
msgstr ""

#: ../../../LanguageExtensions.rst:2964
msgid ""
"The ``__builtin_readcyclecounter()`` builtin returns the cycle counter "
"value, which may be either global or process/thread-specific depending on "
"the target. As the backing counters often overflow quickly (on the order of "
"seconds) this should only be used for timing small intervals.  When not "
"supported by the target, the return value is always zero.  This builtin "
"takes no arguments and produces an unsigned long long result."
msgstr ""

#: ../../../LanguageExtensions.rst:2971
msgid ""
"Query for this feature with ``__has_builtin(__builtin_readcyclecounter)``. "
"Note that even if present, its use may depend on run-time privilege or other "
"OS controlled state."
msgstr ""

#: ../../../LanguageExtensions.rst:2976
msgid "``__builtin_readsteadycounter``"
msgstr ""

#: ../../../LanguageExtensions.rst:2978
msgid ""
"``__builtin_readsteadycounter`` is used to access the fixed frequency "
"counter register (or a similar steady-rate clock) on those targets that "
"support it. The function is similar to ``__builtin_readcyclecounter`` above "
"except that the frequency is fixed, making it suitable for measuring elapsed "
"time."
msgstr ""

#: ../../../LanguageExtensions.rst:3000
msgid ""
"The ``__builtin_readsteadycounter()`` builtin returns the frequency counter "
"value. When not supported by the target, the return value is always zero. "
"This builtin takes no arguments and produces an unsigned long long result. "
"The builtin does not guarantee any particular frequency, only that it is "
"stable. Knowledge of the counter's true frequency will need to be provided "
"by the user."
msgstr ""

#: ../../../LanguageExtensions.rst:3006
msgid ""
"Query for this feature with ``__has_builtin(__builtin_readsteadycounter)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3009
msgid "``__builtin_cpu_supports``"
msgstr ""

#: ../../../LanguageExtensions.rst:3017
msgid "**Example of Use:**:"
msgstr ""

#: ../../../LanguageExtensions.rst:3026
msgid ""
"The ``__builtin_cpu_supports`` function detects if the run-time CPU supports "
"features specified in string argument. It returns a positive integer if all "
"features are supported and 0 otherwise. Feature names are target specific. "
"On AArch64 features are combined using ``+`` like this "
"``__builtin_cpu_supports(\"flagm+sha3+lse+rcpc2+fcma+memtag+bti+sme2\")``. "
"If a feature name is not supported, Clang will issue a warning and replace "
"builtin by the constant 0."
msgstr ""

#: ../../../LanguageExtensions.rst:3034
msgid "Query for this feature with ``__has_builtin(__builtin_cpu_supports)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3037
msgid "``__builtin_dump_struct``"
msgstr ""

#: ../../../LanguageExtensions.rst:3045 ../../../LanguageExtensions.rst:3136
#: ../../../LanguageExtensions.rst:3192 ../../../LanguageExtensions.rst:3237
#: ../../../LanguageExtensions.rst:3266 ../../../LanguageExtensions.rst:3299
#: ../../../LanguageExtensions.rst:3779 ../../../LanguageExtensions.rst:3838
#: ../../../LanguageExtensions.rst:3875 ../../../LanguageExtensions.rst:3914
msgid "**Examples**:"
msgstr ""

#: ../../../LanguageExtensions.rst:3061
msgid "Example output:"
msgstr ""

#: ../../../LanguageExtensions.rst:3095
msgid ""
"The ``__builtin_dump_struct`` function is used to print the fields of a "
"simple structure and their values for debugging purposes. The first argument "
"of the builtin should be a pointer to a complete record type to dump. The "
"second argument ``f`` should be some callable expression, and can be a "
"function object or an overload set. The builtin calls ``f``, passing any "
"further arguments ``args...`` followed by a ``printf``-compatible format "
"string and the corresponding arguments. ``f`` may be called more than once, "
"and ``f`` and ``args`` will be evaluated once per call. In C++, ``f`` may be "
"a template or overload set and resolve to different functions for each call."
msgstr ""

#: ../../../LanguageExtensions.rst:3105
msgid ""
"In the format string, a suitable format specifier will be used for builtin "
"types that Clang knows how to format. This includes standard builtin types, "
"as well as aggregate structures, ``void*`` (printed with ``%p``), and "
"``const char*`` (printed with ``%s``). A ``*%p`` specifier will be used for "
"a field that Clang doesn't know how to format, and the corresponding "
"argument will be a pointer to the field. This allows a C++ templated "
"formatting function to detect this case and implement custom formatting. A "
"``*`` will otherwise not precede a format specifier."
msgstr ""

#: ../../../LanguageExtensions.rst:3114
msgid "This builtin does not return a value."
msgstr ""

#: ../../../LanguageExtensions.rst:3116 ../../../LanguageExtensions.rst:4353
msgid "This builtin can be used in constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3118
msgid "Query for this feature with ``__has_builtin(__builtin_dump_struct)``"
msgstr ""

#: ../../../LanguageExtensions.rst:3123
msgid "``__builtin_shufflevector``"
msgstr ""

#: ../../../LanguageExtensions.rst:3125
msgid ""
"``__builtin_shufflevector`` is used to express generic vector permutation/"
"shuffle/swizzle operations.  This builtin is also very important for the "
"implementation of various target-specific header files like ``<xmmintrin."
"h>``. This builtin can be used within constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3160
msgid ""
"The first two arguments to ``__builtin_shufflevector`` are vectors that have "
"the same element type.  The remaining arguments are a list of integers that "
"specify the elements indices of the first two vectors that should be "
"extracted and returned in a new vector.  These element indices are numbered "
"sequentially starting with the first vector, continuing into the second "
"vector.  Thus, if ``vec1`` is a 4-element vector, index 5 would refer to the "
"second element of ``vec2``. An index of -1 can be used to indicate that the "
"corresponding element in the returned vector is a don't care and can be "
"optimized by the backend. Values of -1 are not supported in constant "
"expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3170
msgid ""
"The result of ``__builtin_shufflevector`` is a vector with the same element "
"type as ``vec1``/``vec2`` but that has an element count equal to the number "
"of indices specified."
msgstr ""

#: ../../../LanguageExtensions.rst:3174
msgid "Query for this feature with ``__has_builtin(__builtin_shufflevector)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3179
msgid "``__builtin_convertvector``"
msgstr ""

#: ../../../LanguageExtensions.rst:3181
msgid ""
"``__builtin_convertvector`` is used to express generic vector type-"
"conversion operations. The input vector and the output vector type must have "
"the same number of elements. This builtin can be used within constant "
"expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3213
msgid ""
"The first argument to ``__builtin_convertvector`` is a vector, and the "
"second argument is a vector type with the same number of elements as the "
"first argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3217
msgid ""
"The result of ``__builtin_convertvector`` is a vector with the same element "
"type as the second argument, with a value defined in terms of the action of "
"a C-style cast applied to each element of the first argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3221
msgid "Query for this feature with ``__has_builtin(__builtin_convertvector)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3224
msgid "``__builtin_bitreverse``"
msgstr ""

#: ../../../LanguageExtensions.rst:3226 ../../../LanguageExtensions.rst:5904
msgid "``__builtin_bitreverse8``"
msgstr ""

#: ../../../LanguageExtensions.rst:3227 ../../../LanguageExtensions.rst:5905
msgid "``__builtin_bitreverse16``"
msgstr ""

#: ../../../LanguageExtensions.rst:3228 ../../../LanguageExtensions.rst:5906
msgid "``__builtin_bitreverse32``"
msgstr ""

#: ../../../LanguageExtensions.rst:3229 ../../../LanguageExtensions.rst:5907
msgid "``__builtin_bitreverse64``"
msgstr ""

#: ../../../LanguageExtensions.rst:3248
msgid ""
"The '``__builtin_bitreverse``' family of builtins is used to reverse the "
"bitpattern of an integer value; for example ``0b10110110`` becomes "
"``0b01101101``. These builtins can be used within constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3253
msgid "``__builtin_rotateleft``"
msgstr ""

#: ../../../LanguageExtensions.rst:3255 ../../../LanguageExtensions.rst:5945
msgid "``__builtin_rotateleft8``"
msgstr ""

#: ../../../LanguageExtensions.rst:3256 ../../../LanguageExtensions.rst:5946
msgid "``__builtin_rotateleft16``"
msgstr ""

#: ../../../LanguageExtensions.rst:3257 ../../../LanguageExtensions.rst:5947
msgid "``__builtin_rotateleft32``"
msgstr ""

#: ../../../LanguageExtensions.rst:3258 ../../../LanguageExtensions.rst:5948
msgid "``__builtin_rotateleft64``"
msgstr ""

#: ../../../LanguageExtensions.rst:3277
msgid ""
"The '``__builtin_rotateleft``' family of builtins is used to rotate the bits "
"in the first argument by the amount in the second argument. For example, "
"``0b10000110`` rotated left by 11 becomes ``0b00110100``. The shift value is "
"treated as an unsigned amount modulo the size of the arguments. Both "
"arguments and the result have the bitwidth specified by the name of the "
"builtin. These builtins can be used within constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3286
msgid "``__builtin_rotateright``"
msgstr ""

#: ../../../LanguageExtensions.rst:3288 ../../../LanguageExtensions.rst:5949
msgid "``__builtin_rotateright8``"
msgstr ""

#: ../../../LanguageExtensions.rst:3289 ../../../LanguageExtensions.rst:5950
msgid "``__builtin_rotateright16``"
msgstr ""

#: ../../../LanguageExtensions.rst:3290 ../../../LanguageExtensions.rst:5951
msgid "``__builtin_rotateright32``"
msgstr ""

#: ../../../LanguageExtensions.rst:3291 ../../../LanguageExtensions.rst:5952
msgid "``__builtin_rotateright64``"
msgstr ""

#: ../../../LanguageExtensions.rst:3310
msgid ""
"The '``__builtin_rotateright``' family of builtins is used to rotate the "
"bits in the first argument by the amount in the second argument. For "
"example, ``0b10000110`` rotated right by 3 becomes ``0b11010000``. The shift "
"value is treated as an unsigned amount modulo the size of the arguments. "
"Both arguments and the result have the bitwidth specified by the name of the "
"builtin. These builtins can be used within constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:3319
msgid "``__builtin_unreachable``"
msgstr ""

#: ../../../LanguageExtensions.rst:3321
msgid ""
"``__builtin_unreachable`` is used to indicate that a specific point in the "
"program cannot be reached, even if the compiler might otherwise think it "
"can. This is useful to improve optimization and eliminates certain "
"warnings.  For example, without the ``__builtin_unreachable`` in the example "
"below, the compiler assumes that the inline asm can fall through and prints "
"a \"function declared '``noreturn``' should not return\" warning."
msgstr ""

#: ../../../LanguageExtensions.rst:3334 ../../../LanguageExtensions.rst:3365
#: ../../../LanguageExtensions.rst:3393 ../../../LanguageExtensions.rst:3422
#: ../../../LanguageExtensions.rst:3452 ../../../LanguageExtensions.rst:3508
#: ../../../LanguageExtensions.rst:3527 ../../../LanguageExtensions.rst:3736
#: ../../../LanguageExtensions.rst:4082 ../../../LanguageExtensions.rst:4523
#: ../../../LanguageExtensions.rst:4598 ../../../LanguageExtensions.rst:4670
msgid "**Example of use**:"
msgstr ""

#: ../../../LanguageExtensions.rst:3346
msgid ""
"The ``__builtin_unreachable()`` builtin has completely undefined behavior. "
"Since it has undefined behavior, it is a statement that it is never reached "
"and the optimizer can take advantage of this to produce better code.  This "
"builtin takes no arguments and produces a void result."
msgstr ""

#: ../../../LanguageExtensions.rst:3351
msgid "Query for this feature with ``__has_builtin(__builtin_unreachable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3354
msgid "``__builtin_unpredictable``"
msgstr ""

#: ../../../LanguageExtensions.rst:3356
msgid ""
"``__builtin_unpredictable`` is used to indicate that a branch condition is "
"unpredictable by hardware mechanisms such as branch prediction logic."
msgstr ""

#: ../../../LanguageExtensions.rst:3375
msgid ""
"The ``__builtin_unpredictable()`` builtin is expected to be used with "
"control flow conditions such as in ``if`` and ``switch`` statements."
msgstr ""

#: ../../../LanguageExtensions.rst:3378
msgid "Query for this feature with ``__has_builtin(__builtin_unpredictable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3382
msgid "``__builtin_expect``"
msgstr ""

#: ../../../LanguageExtensions.rst:3384
msgid ""
"``__builtin_expect`` is used to indicate that the value of an expression is "
"anticipated to be the same as a statically known result."
msgstr ""

#: ../../../LanguageExtensions.rst:3403
msgid ""
"The ``__builtin_expect()`` builtin is typically used with control flow "
"conditions such as in ``if`` and ``switch`` statements to help branch "
"prediction. It means that its first argument ``expr`` is expected to take "
"the value of its second argument ``val``. It always returns ``expr``."
msgstr ""

#: ../../../LanguageExtensions.rst:3408
msgid "Query for this feature with ``__has_builtin(__builtin_expect)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3411
msgid "``__builtin_expect_with_probability``"
msgstr ""

#: ../../../LanguageExtensions.rst:3413
msgid ""
"``__builtin_expect_with_probability`` is similar to ``__builtin_expect`` but "
"it takes a probability as third argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3432
msgid ""
"The ``__builtin_expect_with_probability()`` builtin is typically used with "
"control flow conditions such as in ``if`` and ``switch`` statements to help "
"branch prediction. It means that its first argument ``expr`` is expected to "
"take the value of its second argument ``val`` with probability ``p``. ``p`` "
"must be within ``[0.0 ; 1.0]`` bounds. This builtin always returns the value "
"of ``expr``."
msgstr ""

#: ../../../LanguageExtensions.rst:3438
msgid ""
"Query for this feature with "
"``__has_builtin(__builtin_expect_with_probability)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3441
msgid "``__builtin_prefetch``"
msgstr ""

#: ../../../LanguageExtensions.rst:3443
msgid ""
"``__builtin_prefetch`` is used to communicate with the cache handler to "
"bring data into the cache before it gets used."
msgstr ""

#: ../../../LanguageExtensions.rst:3460
msgid ""
"The ``__builtin_prefetch(addr, rw, locality)`` builtin is expected to be "
"used to avoid cache misses when the developer has a good understanding of "
"which data are going to be used next. ``addr`` is the address that needs to "
"be brought into the cache. ``rw`` indicates the expected access mode: ``0`` "
"for *read* and ``1`` for *write*. In case of *read write* access, ``1`` is "
"to be used. ``locality`` indicates the expected persistence of data in "
"cache, from ``0`` which means that data can be discarded from cache after "
"its next use to ``3`` which means that data is going to be reused a lot once "
"in cache. ``1`` and ``2`` provide intermediate behavior between these two "
"extremes."
msgstr ""

#: ../../../LanguageExtensions.rst:3470
msgid "Query for this feature with ``__has_builtin(__builtin_prefetch)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3473
msgid "``__sync_swap``"
msgstr ""

#: ../../../LanguageExtensions.rst:3475
msgid ""
"``__sync_swap`` is used to atomically swap integers or pointers in memory."
msgstr ""

#: ../../../LanguageExtensions.rst:3491
msgid ""
"The ``__sync_swap()`` builtin extends the existing ``__sync_*()`` family of "
"atomic intrinsics to allow code to atomically swap the current value with "
"the new value.  More importantly, it helps developers write more efficient "
"and correct code by avoiding expensive loops around "
"``__sync_bool_compare_and_swap()`` or relying on the platform specific "
"implementation details of ``__sync_lock_test_and_set()``.  The "
"``__sync_swap()`` builtin is a full barrier."
msgstr ""

#: ../../../LanguageExtensions.rst:3500
msgid "``__builtin_addressof``"
msgstr ""

#: ../../../LanguageExtensions.rst:3502
msgid ""
"``__builtin_addressof`` performs the functionality of the built-in ``&`` "
"operator, ignoring any ``operator&`` overload.  This is useful in constant "
"expressions in C++11, where there is no other way to take the address of an "
"object that overloads ``operator&``. Clang automatically adds ``[[clang::"
"lifetimebound]]`` to the parameter of ``__builtin_addressof``."
msgstr ""

#: ../../../LanguageExtensions.rst:3517
msgid "``__builtin_function_start``"
msgstr ""

#: ../../../LanguageExtensions.rst:3519
msgid "``__builtin_function_start`` returns the address of a function body."
msgstr ""

#: ../../../LanguageExtensions.rst:3548
msgid ""
"The ``__builtin_function_start`` builtin accepts an argument that can be "
"constant-evaluated to a function, and returns the address of the function "
"body.  This builtin is not supported on all targets."
msgstr ""

#: ../../../LanguageExtensions.rst:3552
msgid ""
"The returned pointer may differ from the normally taken function address and "
"is not safe to call.  For example, with ``-fsanitize=cfi``, taking a "
"function address produces a callable pointer to a CFI jump table, while "
"``__builtin_function_start`` returns an address that fails :doc:`cfi-"
"icall<ControlFlowIntegrity>` checks."
msgstr ""

#: ../../../LanguageExtensions.rst:3559
msgid "``__builtin_operator_new`` and ``__builtin_operator_delete``"
msgstr ""

#: ../../../LanguageExtensions.rst:3561
msgid ""
"A call to ``__builtin_operator_new(args)`` is exactly the same as a call to "
"``::operator new(args)``, except that it allows certain optimizations that "
"the C++ standard does not permit for a direct function call to ``::operator "
"new`` (in particular, removing ``new`` / ``delete`` pairs and merging "
"allocations), and that the call is required to resolve to a `replaceable "
"global allocation function <https://en.cppreference.com/w/cpp/memory/new/"
"operator_new>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:3569
msgid ""
"Likewise, ``__builtin_operator_delete`` is exactly the same as a call to ``::"
"operator delete(args)``, except that it permits optimizations and that the "
"call is required to resolve to a `replaceable global deallocation function "
"<https://en.cppreference.com/w/cpp/memory/new/operator_delete>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:3575
msgid ""
"These builtins are intended for use in the implementation of ``std::"
"allocator`` and other similar allocation libraries, and are only available "
"in C++."
msgstr ""

#: ../../../LanguageExtensions.rst:3578
msgid ""
"Query for this feature with ``__has_builtin(__builtin_operator_new)`` or "
"``__has_builtin(__builtin_operator_delete)``:"
msgstr ""

#: ../../../LanguageExtensions.rst:3581
msgid ""
"If the value is at least ``201802L``, the builtins behave as described above."
msgstr ""

#: ../../../LanguageExtensions.rst:3583
msgid ""
"If the value is non-zero, the builtins may not support calling arbitrary "
"replaceable global (de)allocation functions, but do support calling at least "
"``::operator new(size_t)`` and ``::operator delete(void*)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3588
msgid "``__builtin_preserve_access_index``"
msgstr ""

#: ../../../LanguageExtensions.rst:3590
msgid ""
"``__builtin_preserve_access_index`` specifies a code section where array "
"subscript access and structure/union member access are relocatable under bpf "
"compile-once run-everywhere framework. Debuginfo (typically with ``-g``) is "
"needed, otherwise, the compiler will exit with an error. The return type for "
"the intrinsic is the same as the type of the argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3620
msgid "``__builtin_debugtrap``"
msgstr ""

#: ../../../LanguageExtensions.rst:3622
msgid ""
"``__builtin_debugtrap`` causes the program to stop its execution in such a "
"way that a debugger can catch it."
msgstr ""

#: ../../../LanguageExtensions.rst:3630 ../../../LanguageExtensions.rst:3648
#: ../../../LanguageExtensions.rst:3665 ../../../LanguageExtensions.rst:3682
#: ../../../LanguageExtensions.rst:3744 ../../../LanguageExtensions.rst:3787
msgid "**Description**"
msgstr ""

#: ../../../LanguageExtensions.rst:3632
msgid ""
"``__builtin_debugtrap`` is lowered to the ` ``llvm.debugtrap`` <https://llvm."
"org/docs/LangRef.html#llvm-debugtrap-intrinsic>`_ builtin. It should have "
"the same effect as setting a breakpoint on the line where the builtin is "
"called."
msgstr ""

#: ../../../LanguageExtensions.rst:3634
msgid "Query for this feature with ``__has_builtin(__builtin_debugtrap)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3638
msgid "``__builtin_trap``"
msgstr ""

#: ../../../LanguageExtensions.rst:3640
msgid "``__builtin_trap`` causes the program to stop its execution abnormally."
msgstr ""

#: ../../../LanguageExtensions.rst:3650
msgid ""
"``__builtin_trap`` is lowered to the ` ``llvm.trap`` <https://llvm.org/docs/"
"LangRef.html#llvm-trap-intrinsic>`_ builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:3652
msgid "Query for this feature with ``__has_builtin(__builtin_trap)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3655
msgid "``__builtin_arm_trap``"
msgstr ""

#: ../../../LanguageExtensions.rst:3657
msgid ""
"``__builtin_arm_trap`` is an AArch64 extension to ``__builtin_trap`` which "
"also accepts a compile-time constant value, encoded directly into the trap "
"instruction for later inspection."
msgstr ""

#: ../../../LanguageExtensions.rst:3667
msgid ""
"``__builtin_arm_trap`` is lowered to the ``llvm.aarch64.break`` builtin, and "
"then to ``brk #payload``."
msgstr ""

#: ../../../LanguageExtensions.rst:3670
msgid "``__builtin_verbose_trap``"
msgstr ""

#: ../../../LanguageExtensions.rst:3672
msgid ""
"``__builtin_verbose_trap`` causes the program to stop its execution "
"abnormally and shows a human-readable description of the reason for the "
"termination when a debugger is attached or in a symbolicated crash log."
msgstr ""

#: ../../../LanguageExtensions.rst:3684
msgid ""
"``__builtin_verbose_trap`` is lowered to the ` ``llvm.trap`` <https://llvm."
"org/docs/LangRef.html#llvm-trap-intrinsic>`_ builtin. Additionally, clang "
"emits debugging information that represents an artificial inline frame whose "
"name encodes the category and reason strings passed to the builtin, prefixed "
"by a \"magic\" prefix."
msgstr ""

#: ../../../LanguageExtensions.rst:3689
msgid "For example, consider the following code:"
msgstr ""

#: ../../../LanguageExtensions.rst:3698
msgid ""
"The debugging information would look as if it were produced for the "
"following code:"
msgstr ""

#: ../../../LanguageExtensions.rst:3712
msgid ""
"However, the generated code would not actually contain a call to the "
"artificial function — it only exists in the debugging information."
msgstr ""

#: ../../../LanguageExtensions.rst:3715
msgid ""
"Query for this feature with ``__has_builtin(__builtin_verbose_trap)``. Note "
"that users need to enable debug information to enable this feature. A call "
"to this builtin is equivalent to a call to ``__builtin_trap`` if debug "
"information isn't enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:3720
msgid ""
"The optimizer can merge calls to trap with different messages, which "
"degrades the debugging experience."
msgstr ""

#: ../../../LanguageExtensions.rst:3724
msgid "``__builtin_allow_runtime_check``"
msgstr ""

#: ../../../LanguageExtensions.rst:3726
msgid ""
"``__builtin_allow_runtime_check`` returns true if the check at the current "
"program location should be executed. It is expected to be used to implement "
"``assert`` like checks which can be safely removed by optimizer."
msgstr ""

#: ../../../LanguageExtensions.rst:3746
msgid ""
"``__builtin_allow_runtime_check`` is lowered to the `llvm.allow.runtime."
"check <https://llvm.org/docs/LangRef.html#llvm-allow-runtime-check-"
"intrinsic>`_ intrinsic."
msgstr ""

#: ../../../LanguageExtensions.rst:3750
msgid ""
"The ``__builtin_allow_runtime_check()`` can be used within control "
"structures like ``if`` to guard expensive runtime checks. The return value "
"is determined by the following compiler options and may differ per call site:"
msgstr ""

#: ../../../LanguageExtensions.rst:3754
msgid ""
"``-mllvm -lower-allow-check-percentile-cutoff-hot=N``: Disable checks in hot "
"code marked by the profile summary with a hotness cutoff in the range ``[0, "
"999999]`` (a larger N disables more checks)."
msgstr ""

#: ../../../LanguageExtensions.rst:3757
msgid ""
"``-mllvm -lower-allow-check-random-rate=P``: Keep a check with probability "
"P, a floating point number in the range ``[0.0, 1.0]``."
msgstr ""

#: ../../../LanguageExtensions.rst:3759
msgid ""
"If both options are specified, a check is disabled if either condition is "
"satisfied."
msgstr ""

#: ../../../LanguageExtensions.rst:3760
msgid "If neither is specified, all checks are allowed."
msgstr ""

#: ../../../LanguageExtensions.rst:3762
msgid ""
"Parameter ``kind``, currently unused, is a string literal specifying the "
"check kind. Future compiler versions may use this to allow for more granular "
"control, such as applying different hotness cutoffs to different check kinds."
msgstr ""

#: ../../../LanguageExtensions.rst:3766
msgid ""
"Query for this feature with ``__has_builtin(__builtin_allow_runtime_check)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3769
msgid "``__builtin_nondeterministic_value``"
msgstr ""

#: ../../../LanguageExtensions.rst:3771
msgid ""
"``__builtin_nondeterministic_value`` returns a valid nondeterministic value "
"of the same type as the provided argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3789
msgid ""
"Each call to ``__builtin_nondeterministic_value`` returns a valid value of "
"the type given by the argument."
msgstr ""

#: ../../../LanguageExtensions.rst:3791
msgid ""
"The types currently supported are: integer types, floating-point types, "
"vector types."
msgstr ""

#: ../../../LanguageExtensions.rst:3793
msgid ""
"Query for this feature with "
"``__has_builtin(__builtin_nondeterministic_value)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3796
msgid "``__builtin_sycl_unique_stable_name``"
msgstr ""

#: ../../../LanguageExtensions.rst:3798
msgid ""
"``__builtin_sycl_unique_stable_name()`` is a builtin that takes a type and "
"produces a string literal containing a unique name for the type that is "
"stable across split compilations, mainly to support SYCL/Data Parallel C++ "
"language."
msgstr ""

#: ../../../LanguageExtensions.rst:3802
msgid ""
"In cases where the split compilation needs to share a unique token for a "
"type across the boundary (such as in an offloading situation), this name can "
"be used for lookup purposes, such as in the SYCL Integration Header."
msgstr ""

#: ../../../LanguageExtensions.rst:3806
msgid ""
"The value of this builtin is computed entirely at compile time, so it can be "
"used in constant expressions. This value encodes lambda functions based on a "
"stable numbering order in which they appear in their local declaration "
"contexts. Once this builtin is evaluated in a constexpr context, it is "
"erroneous to use it in an instantiation which changes its value."
msgstr ""

#: ../../../LanguageExtensions.rst:3812
msgid ""
"In order to produce the unique name, the current implementation of the "
"builtin uses Itanium mangling even if the host compilation uses a different "
"name mangling scheme at runtime. The mangler marks all the lambdas required "
"to name the SYCL kernel and emits a stable local ordering of the respective "
"lambdas. The resulting pattern is demanglable.  When non-lambda types are "
"passed to the builtin, the mangler emits their usual pattern without any "
"special treatment."
msgstr ""

#: ../../../LanguageExtensions.rst:3827 ../../../LanguageExtensions.rst:5944
msgid "``__builtin_popcountg``"
msgstr ""

#: ../../../LanguageExtensions.rst:3829
msgid ""
"``__builtin_popcountg`` returns the number of 1 bits in the argument. The "
"argument can be of any unsigned integer type."
msgstr ""

#: ../../../LanguageExtensions.rst:3853
msgid ""
"``__builtin_popcountg`` is meant to be a type-generic alternative to the "
"``__builtin_popcount{,l,ll}`` builtins, with support for other integer "
"types, such as ``unsigned __int128`` and C23 ``unsigned _BitInt(N)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3858
msgid "``__builtin_clzg`` and ``__builtin_ctzg``"
msgstr ""

#: ../../../LanguageExtensions.rst:3860
msgid ""
"``__builtin_clzg`` (respectively ``__builtin_ctzg``) returns the number of "
"leading (respectively trailing) 0 bits in the first argument. The first "
"argument can be of any unsigned integer type."
msgstr ""

#: ../../../LanguageExtensions.rst:3864
msgid ""
"If the first argument is 0 and an optional second argument of ``int`` type "
"is provided, then the second argument is returned. If the first argument is "
"0, but only one argument is provided, then the behavior is undefined."
msgstr ""

#: ../../../LanguageExtensions.rst:3893
msgid ""
"``__builtin_clzg`` (respectively ``__builtin_ctzg``) is meant to be a type-"
"generic alternative to the ``__builtin_clz{,l,ll}`` (respectively "
"``__builtin_ctz{,l,ll}``) builtins, with support for other integer types, "
"such as ``unsigned __int128`` and C23 ``unsigned _BitInt(N)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3899
msgid "``__builtin_counted_by_ref``"
msgstr ""

#: ../../../LanguageExtensions.rst:3901
msgid ""
"``__builtin_counted_by_ref`` returns a pointer to the count field from the "
"``counted_by`` attribute."
msgstr ""

#: ../../../LanguageExtensions.rst:3904
msgid ""
"The argument must be a flexible array member. If the argument isn't a "
"flexible array member or doesn't have the ``counted_by`` attribute, the "
"builtin returns ``(void *)0``."
msgstr ""

#: ../../../LanguageExtensions.rst:3934
msgid ""
"The ``__builtin_counted_by_ref`` builtin allows the programmer to prevent a "
"common error associated with the ``counted_by`` attribute. When using the "
"``counted_by`` attribute, the ``count`` field **must** be set before the "
"flexible array member can be accessed. Otherwise, the sanitizers may view "
"such accesses as false positives. For instance, it's not uncommon for "
"programmers to initialize the flexible array before setting the ``count`` "
"field:"
msgstr ""

#: ../../../LanguageExtensions.rst:3956
msgid ""
"Enforcing the rule that ``ptr->count = COUNT;`` must occur after every "
"allocation of a struct with a flexible array member with the ``counted_by`` "
"attribute is prone to failure in large code bases. This builtin mitigates "
"this for allocators (like in Linux) that are implemented in a way where the "
"counter assignment can happen automatically."
msgstr ""

#: ../../../LanguageExtensions.rst:3962
msgid ""
"**Note:** The value returned by ``__builtin_counted_by_ref`` cannot be "
"assigned to a variable, have its address taken, or passed into or returned "
"from a function, because doing so violates bounds safety conventions."
msgstr ""

#: ../../../LanguageExtensions.rst:3967
msgid "Multiprecision Arithmetic Builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:3969
msgid ""
"Clang provides a set of builtins which expose multiprecision arithmetic in a "
"manner amenable to C. They all have the following form:"
msgstr ""

#: ../../../LanguageExtensions.rst:3977
msgid ""
"Thus one can form a multiprecision addition chain in the following manner:"
msgstr ""

#: ../../../LanguageExtensions.rst:3990
msgid "The complete list of builtins are:"
msgstr ""

#: ../../../LanguageExtensions.rst:4006
msgid "Checked Arithmetic Builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4008
msgid ""
"Clang provides a set of builtins that implement checked arithmetic for "
"security critical applications in a manner that is fast and easily "
"expressible in C. As an example of their usage:"
msgstr ""

#: ../../../LanguageExtensions.rst:4024
msgid "Clang provides the following checked arithmetic builtins:"
msgstr ""

#: ../../../LanguageExtensions.rst:4050
msgid ""
"Each builtin performs the specified mathematical operation on the first two "
"arguments and stores the result in the third argument.  If possible, the "
"result will be equal to mathematically-correct result and the builtin will "
"return 0.  Otherwise, the builtin will return 1 and the result will be equal "
"to the unique value that is equivalent to the mathematically-correct result "
"modulo two raised to the *k* power, where *k* is the number of bits in the "
"result type.  The behavior of these builtins is well-defined for all "
"argument values."
msgstr ""

#: ../../../LanguageExtensions.rst:4059
msgid ""
"The first three builtins work generically for operands of any integer type, "
"including boolean types.  The operands need not have the same type as each "
"other, or as the result.  The other builtins may implicitly promote or "
"convert their operands before performing the operation."
msgstr ""

#: ../../../LanguageExtensions.rst:4064
msgid ""
"Query for this feature with ``__has_builtin(__builtin_add_overflow)``, etc."
msgstr ""

#: ../../../LanguageExtensions.rst:4067
msgid "Floating point builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4070
msgid "``__builtin_isfpclass``"
msgstr ""

#: ../../../LanguageExtensions.rst:4072
msgid ""
"``__builtin_isfpclass`` is used to test if the specified floating-point "
"values fall into one of the specified floating-point classes."
msgstr ""

#: ../../../LanguageExtensions.rst:4093
msgid ""
"The ``__builtin_isfpclass()`` builtin is a generalization of functions "
"``isnan``, ``isinf``, ``isfinite`` and some others defined by the C "
"standard. It tests if the floating-point value, specified by the first "
"argument, falls into any of data classes, specified by the second argument. "
"The latter is an integer constant bitmask expression, in which each data "
"class is represented by a bit using the encoding:"
msgstr ""

#: ../../../LanguageExtensions.rst:4101
msgid "Mask value"
msgstr ""

#: ../../../LanguageExtensions.rst:4101
msgid "Data class"
msgstr ""

#: ../../../LanguageExtensions.rst:4101
msgid "Macro"
msgstr ""

#: ../../../LanguageExtensions.rst:4103
msgid "0x0001"
msgstr ""

#: ../../../LanguageExtensions.rst:4103
msgid "Signaling NaN"
msgstr ""

#: ../../../LanguageExtensions.rst:4103
msgid "__FPCLASS_SNAN"
msgstr ""

#: ../../../LanguageExtensions.rst:4104
msgid "0x0002"
msgstr ""

#: ../../../LanguageExtensions.rst:4104
msgid "Quiet NaN"
msgstr ""

#: ../../../LanguageExtensions.rst:4104
msgid "__FPCLASS_QNAN"
msgstr ""

#: ../../../LanguageExtensions.rst:4105
msgid "0x0004"
msgstr ""

#: ../../../LanguageExtensions.rst:4105
msgid "Negative infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:4105
msgid "__FPCLASS_NEGINF"
msgstr ""

#: ../../../LanguageExtensions.rst:4106
msgid "0x0008"
msgstr ""

#: ../../../LanguageExtensions.rst:4106
msgid "Negative normal"
msgstr ""

#: ../../../LanguageExtensions.rst:4106
msgid "__FPCLASS_NEGNORMAL"
msgstr ""

#: ../../../LanguageExtensions.rst:4107
msgid "0x0010"
msgstr ""

#: ../../../LanguageExtensions.rst:4107
msgid "Negative subnormal"
msgstr ""

#: ../../../LanguageExtensions.rst:4107
msgid "__FPCLASS_NEGSUBNORMAL"
msgstr ""

#: ../../../LanguageExtensions.rst:4108
msgid "0x0020"
msgstr ""

#: ../../../LanguageExtensions.rst:4108
msgid "Negative zero"
msgstr ""

#: ../../../LanguageExtensions.rst:4108
msgid "__FPCLASS_NEGZERO"
msgstr ""

#: ../../../LanguageExtensions.rst:4109
msgid "0x0040"
msgstr ""

#: ../../../LanguageExtensions.rst:4109
msgid "Positive zero"
msgstr ""

#: ../../../LanguageExtensions.rst:4109
msgid "__FPCLASS_POSZERO"
msgstr ""

#: ../../../LanguageExtensions.rst:4110
msgid "0x0080"
msgstr ""

#: ../../../LanguageExtensions.rst:4110
msgid "Positive subnormal"
msgstr ""

#: ../../../LanguageExtensions.rst:4110
msgid "__FPCLASS_POSSUBNORMAL"
msgstr ""

#: ../../../LanguageExtensions.rst:4111
msgid "0x0100"
msgstr ""

#: ../../../LanguageExtensions.rst:4111
msgid "Positive normal"
msgstr ""

#: ../../../LanguageExtensions.rst:4111
msgid "__FPCLASS_POSNORMAL"
msgstr ""

#: ../../../LanguageExtensions.rst:4112
msgid "0x0200"
msgstr ""

#: ../../../LanguageExtensions.rst:4112
msgid "Positive infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:4112
msgid "__FPCLASS_POSINF"
msgstr ""

#: ../../../LanguageExtensions.rst:4115
msgid ""
"For convenience preprocessor defines macros for these values. The function "
"returns 1 if ``expr`` falls into one of the specified data classes, 0 "
"otherwise."
msgstr ""

#: ../../../LanguageExtensions.rst:4118
msgid ""
"In the example above the mask value 448 (0x1C0) contains the bits selecting "
"positive zero, positive subnormal and positive normal classes. "
"``__builtin_isfpclass(x, 448)`` would return true only if ``x`` if of any of "
"these data classes. Using suitable mask value, the function can implement "
"any of the standard classification functions, for example, "
"``__builtin_isfpclass(x, 3)`` is identical to ``isnan``,"
"``__builtin_isfpclass(x, 504)`` - to ``isfinite`` and so on."
msgstr ""

#: ../../../LanguageExtensions.rst:4126
msgid ""
"If the first argument is a vector, the function is equivalent to the set of "
"scalar calls of ``__builtin_isfpclass`` applied to the input elementwise."
msgstr ""

#: ../../../LanguageExtensions.rst:4129
msgid ""
"The result of ``__builtin_isfpclass`` is a boolean value, if the first "
"argument is a scalar, or an integer vector with the same element count as "
"the first argument. The element type in this vector has the same bit length "
"as the element of the first argument type."
msgstr ""

#: ../../../LanguageExtensions.rst:4134
msgid ""
"This function never raises floating-point exceptions and does not "
"canonicalize its input. The floating-point argument is not promoted, its "
"data class is determined based on its representation in its actual semantic "
"type."
msgstr ""

#: ../../../LanguageExtensions.rst:4139
msgid "``__builtin_canonicalize``"
msgstr ""

#: ../../../LanguageExtensions.rst:4147
msgid ""
"Returns the platform specific canonical encoding of a floating point number. "
"This canonicalization is useful for implementing certain numeric primitives "
"such as frexp. See `LLVM canonicalize intrinsic <https://llvm.org/docs/"
"LangRef.html#llvm-canonicalize-intrinsic>`_ for more information on the "
"semantics."
msgstr ""

#: ../../../LanguageExtensions.rst:4154
msgid "``__builtin_flt_rounds`` and ``__builtin_set_flt_rounds``"
msgstr ""

#: ../../../LanguageExtensions.rst:4161
msgid ""
"Returns and sets current floating point rounding mode. The encoding of "
"returned values and input parameters is same as the result of FLT_ROUNDS, "
"specified by C standard: - ``0``  - toward zero - ``1``  - to nearest, ties "
"to even - ``2``  - toward positive infinity - ``3``  - toward negative "
"infinity - ``4``  - to nearest, ties away from zero The effect of passing "
"some other value to ``__builtin_flt_rounds`` is implementation-defined. "
"``__builtin_set_flt_rounds`` is currently only supported to work on x86, "
"x86_64, powerpc, powerpc64, Arm and AArch64 targets. These builtins read and "
"modify the floating-point environment, which is not always allowed and may "
"have unexpected behavior. Please see the section on `Accessing the floating "
"point environment <https://clang.llvm.org/docs/UsersManual.html#accessing-"
"the-floating-point-environment>`_ for more information."
msgstr ""

#: ../../../LanguageExtensions.rst:4176
msgid "String builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4178
msgid ""
"Clang provides constant expression evaluation support for builtins forms of "
"the following functions from the C standard library headers ``<string.h>`` "
"and ``<wchar.h>``:"
msgstr ""

#: ../../../LanguageExtensions.rst:4182
msgid "``memchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:4183
msgid "``memcmp`` (and its deprecated BSD / POSIX alias ``bcmp``)"
msgstr ""

#: ../../../LanguageExtensions.rst:4184
msgid "``strchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:4185
msgid "``strcmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:4186
msgid "``strlen``"
msgstr ""

#: ../../../LanguageExtensions.rst:4187
msgid "``strncmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:4188
msgid "``wcschr``"
msgstr ""

#: ../../../LanguageExtensions.rst:4189
msgid "``wcscmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:4190
msgid "``wcslen``"
msgstr ""

#: ../../../LanguageExtensions.rst:4191
msgid "``wcsncmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:4192
msgid "``wmemchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:4193
msgid "``wmemcmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:4195
msgid ""
"In each case, the builtin form has the name of the C library function "
"prefixed by ``__builtin_``. Example:"
msgstr ""

#: ../../../LanguageExtensions.rst:4202
msgid "In addition to the above, one further builtin is provided:"
msgstr ""

#: ../../../LanguageExtensions.rst:4208
msgid ""
"``__builtin_char_memchr(a, b, c)`` is identical to "
"``(char*)__builtin_memchr(a, b, c)`` except that its use is permitted within "
"constant expressions in C++11 onwards (where a cast from ``void*`` to "
"``char*`` is disallowed in general)."
msgstr ""

#: ../../../LanguageExtensions.rst:4213
msgid ""
"Constant evaluation support for the ``__builtin_mem*`` functions is provided "
"only for arrays of ``char``, ``signed char``, ``unsigned char``, or "
"``char8_t``, despite these functions accepting an argument of type ``const "
"void*``."
msgstr ""

#: ../../../LanguageExtensions.rst:4217
msgid ""
"Support for constant expression evaluation for the above builtins can be "
"detected with ``__has_feature(cxx_constexpr_string_builtins)``."
msgstr ""

#: ../../../LanguageExtensions.rst:4221
msgid "Variadic function builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4223
msgid ""
"Clang provides several builtins for working with variadic functions from the "
"C standard library ``<stdarg.h>`` header:"
msgstr ""

#: ../../../LanguageExtensions.rst:4226
msgid "``__builtin_va_list``"
msgstr ""

#: ../../../LanguageExtensions.rst:4228
msgid ""
"A predefined typedef for the target-specific ``va_list`` type. It is "
"undefined behavior to use a byte-wise copy of this type produced by calling "
"``memcpy``, ``memmove``, or similar. Valid explicit copies are only produced "
"by calling ``va_copy`` or ``__builtin_va_copy``."
msgstr ""

#: ../../../LanguageExtensions.rst:4233
msgid "``void __builtin_va_start(__builtin_va_list list, <parameter-name>)``"
msgstr ""

#: ../../../LanguageExtensions.rst:4235
msgid ""
"A builtin function for the target-specific ``va_start`` function-like macro. "
"The ``parameter-name`` argument is the name of the parameter preceding the "
"ellipsis (``...``) in the function signature. Alternatively, in C23 mode or "
"later, it may be the integer literal ``0`` if there is no parameter "
"preceding the ellipsis. This function initializes the given "
"``__builtin_va_list`` object. It is undefined behavior to call this function "
"on an already initialized ``__builtin_va_list`` object."
msgstr ""

#: ../../../LanguageExtensions.rst:4243
msgid "``void __builtin_va_end(__builtin_va_list list)``"
msgstr ""

#: ../../../LanguageExtensions.rst:4245
msgid ""
"A builtin function for the target-specific ``va_end`` function-like macro. "
"This function finalizes the given ``__builtin_va_list`` object such that it "
"is no longer usable unless re-initialized with a call to "
"``__builtin_va_start`` or ``__builtin_va_copy``. It is undefined behavior to "
"call this function with a ``list`` that has not been initialized by either "
"``__builtin_va_start`` or ``__builtin_va_copy``."
msgstr ""

#: ../../../LanguageExtensions.rst:4252
msgid "``<type-name> __builtin_va_arg(__builtin_va_list list, <type-name>)``"
msgstr ""

#: ../../../LanguageExtensions.rst:4254
msgid ""
"A builtin function for the target-specific ``va_arg`` function-like macro. "
"This function returns the value of the next variadic argument to the call. "
"It is undefined behavior to call this builtin when there is no next variadic "
"argument to retrieve or if the next variadic argument does not have a type "
"compatible with the given ``type-name``. The return type of the function is "
"the ``type-name`` given as the second argument. It is undefined behavior to "
"call this function with a ``list`` that has not been initialized by either "
"``__builtin_va_start`` or ``__builtin_va_copy``."
msgstr ""

#: ../../../LanguageExtensions.rst:4263
msgid ""
"``void __builtin_va_copy(__builtin_va_list dest, __builtin_va_list src)``"
msgstr ""

#: ../../../LanguageExtensions.rst:4265
msgid ""
"A builtin function for the target-specific ``va_copy`` function-like macro. "
"This function initializes ``dest`` as a copy of ``src``. It is undefined "
"behavior to call this function with an already initialized ``dest`` argument."
msgstr ""

#: ../../../LanguageExtensions.rst:4270
msgid "Memory builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4272
msgid ""
"Clang provides constant expression evaluation support for builtin forms of "
"the following functions from the C standard library headers ``<string.h>`` "
"and ``<wchar.h>``:"
msgstr ""

#: ../../../LanguageExtensions.rst:4276
msgid "``memcpy``"
msgstr ""

#: ../../../LanguageExtensions.rst:4277
msgid "``memmove``"
msgstr ""

#: ../../../LanguageExtensions.rst:4278
msgid "``wmemcpy``"
msgstr ""

#: ../../../LanguageExtensions.rst:4279
msgid "``wmemmove``"
msgstr ""

#: ../../../LanguageExtensions.rst:4281
msgid ""
"In each case, the builtin form has the name of the C library function "
"prefixed by ``__builtin_``."
msgstr ""

#: ../../../LanguageExtensions.rst:4284
msgid ""
"Constant evaluation support is only provided when the source and destination "
"are pointers to arrays with the same trivially copyable element type, and "
"the given size is an exact multiple of the element size that is no greater "
"than the number of elements accessible through the source and destination "
"operands."
msgstr ""

#: ../../../LanguageExtensions.rst:4290
msgid "Guaranteed inlined copy"
msgstr ""

#: ../../../LanguageExtensions.rst:4297
msgid ""
"``__builtin_memcpy_inline`` has been designed as a building block for "
"efficient ``memcpy`` implementations. It is identical to "
"``__builtin_memcpy`` but also guarantees not to call any external functions. "
"See LLVM IR `llvm.memcpy.inline <https://llvm.org/docs/LangRef.html#llvm-"
"memcpy-inline-intrinsic>`_ intrinsic for more information."
msgstr ""

#: ../../../LanguageExtensions.rst:4303
msgid ""
"This is useful to implement a custom version of ``memcpy``, implement a "
"``libc`` memcpy or work around the absence of a ``libc``."
msgstr ""

#: ../../../LanguageExtensions.rst:4306 ../../../LanguageExtensions.rst:4327
msgid "Note that the `size` argument must be a compile time constant."
msgstr ""

#: ../../../LanguageExtensions.rst:4308 ../../../LanguageExtensions.rst:4329
msgid ""
"Note that this intrinsic cannot yet be called in a ``constexpr`` context."
msgstr ""

#: ../../../LanguageExtensions.rst:4311
msgid "Guaranteed inlined memset"
msgstr ""

#: ../../../LanguageExtensions.rst:4318
msgid ""
"``__builtin_memset_inline`` has been designed as a building block for "
"efficient ``memset`` implementations. It is identical to "
"``__builtin_memset`` but also guarantees not to call any external functions. "
"See LLVM IR `llvm.memset.inline <https://llvm.org/docs/LangRef.html#llvm-"
"memset-inline-intrinsic>`_ intrinsic for more information."
msgstr ""

#: ../../../LanguageExtensions.rst:4324
msgid ""
"This is useful to implement a custom version of ``memset``, implement a "
"``libc`` memset or work around the absence of a ``libc``."
msgstr ""

#: ../../../LanguageExtensions.rst:4332
msgid "``__is_bitwise_cloneable``"
msgstr ""

#: ../../../LanguageExtensions.rst:4334
msgid ""
"A type trait is used to check whether a type can be safely copied by memcpy."
msgstr ""

#: ../../../LanguageExtensions.rst:4344
msgid ""
"Objects of bitwise cloneable types can be bitwise copied by memcpy/memmove. "
"The Clang compiler warrants that this behavior is well defined, and won't be "
"broken by compiler optimizations and sanitizers."
msgstr ""

#: ../../../LanguageExtensions.rst:4348
msgid ""
"For implicit-lifetime types, the lifetime of the new object is implicitly "
"started after the copy. For other types (e.g., classes with virtual "
"methods), the lifetime isn't started, and using the object results in "
"undefined behavior according to the C++ Standard."
msgstr ""

#: ../../../LanguageExtensions.rst:4356
msgid "Atomic Min/Max builtins with memory ordering"
msgstr ""

#: ../../../LanguageExtensions.rst:4358
msgid ""
"There are two atomic builtins with min/max in-memory comparison and swap. "
"The syntax and semantics are similar to GCC-compatible __atomic_* builtins."
msgstr ""

#: ../../../LanguageExtensions.rst:4361
msgid "``__atomic_fetch_min``"
msgstr ""

#: ../../../LanguageExtensions.rst:4362
msgid "``__atomic_fetch_max``"
msgstr ""

#: ../../../LanguageExtensions.rst:4364
msgid ""
"The builtins work with signed and unsigned integers and require to specify "
"memory ordering. The return value is the original value that was stored in "
"memory before comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:4373
msgid ""
"The third argument is one of the memory ordering specifiers "
"``__ATOMIC_RELAXED``, ``__ATOMIC_CONSUME``, ``__ATOMIC_ACQUIRE``, "
"``__ATOMIC_RELEASE``, ``__ATOMIC_ACQ_REL``, or ``__ATOMIC_SEQ_CST`` "
"following C++11 memory model semantics."
msgstr ""

#: ../../../LanguageExtensions.rst:4377
msgid ""
"In terms of acquire-release ordering barriers these two operations are "
"always considered as operations with *load-store* semantics, even when the "
"original value is not actually modified after comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:4384
msgid "__c11_atomic builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4386
msgid ""
"Clang provides a set of builtins which are intended to be used to implement "
"C11's ``<stdatomic.h>`` header.  These builtins provide the semantics of the "
"``_explicit`` form of the corresponding C11 operation, and are named with a "
"``__c11_`` prefix.  The supported operations, and the differences from the "
"corresponding C11 operations, are:"
msgstr ""

#: ../../../LanguageExtensions.rst:4392
msgid "``__c11_atomic_init``"
msgstr ""

#: ../../../LanguageExtensions.rst:4393
msgid "``__c11_atomic_thread_fence``"
msgstr ""

#: ../../../LanguageExtensions.rst:4394
msgid "``__c11_atomic_signal_fence``"
msgstr ""

#: ../../../LanguageExtensions.rst:4395
msgid ""
"``__c11_atomic_is_lock_free`` (The argument is the size of the "
"``_Atomic(...)`` object, instead of its address)"
msgstr ""

#: ../../../LanguageExtensions.rst:4397
msgid "``__c11_atomic_store``"
msgstr ""

#: ../../../LanguageExtensions.rst:4398
msgid "``__c11_atomic_load``"
msgstr ""

#: ../../../LanguageExtensions.rst:4399
msgid "``__c11_atomic_exchange``"
msgstr ""

#: ../../../LanguageExtensions.rst:4400
msgid "``__c11_atomic_compare_exchange_strong``"
msgstr ""

#: ../../../LanguageExtensions.rst:4401
msgid "``__c11_atomic_compare_exchange_weak``"
msgstr ""

#: ../../../LanguageExtensions.rst:4402
msgid "``__c11_atomic_fetch_add``"
msgstr ""

#: ../../../LanguageExtensions.rst:4403
msgid "``__c11_atomic_fetch_sub``"
msgstr ""

#: ../../../LanguageExtensions.rst:4404
msgid "``__c11_atomic_fetch_and``"
msgstr ""

#: ../../../LanguageExtensions.rst:4405
msgid "``__c11_atomic_fetch_or``"
msgstr ""

#: ../../../LanguageExtensions.rst:4406
msgid "``__c11_atomic_fetch_xor``"
msgstr ""

#: ../../../LanguageExtensions.rst:4407
msgid ""
"``__c11_atomic_fetch_nand`` (Nand is not presented in ``<stdatomic.h>``)"
msgstr ""

#: ../../../LanguageExtensions.rst:4408
msgid "``__c11_atomic_fetch_max``"
msgstr ""

#: ../../../LanguageExtensions.rst:4409
msgid "``__c11_atomic_fetch_min``"
msgstr ""

#: ../../../LanguageExtensions.rst:4411
msgid ""
"The macros ``__ATOMIC_RELAXED``, ``__ATOMIC_CONSUME``, ``__ATOMIC_ACQUIRE``, "
"``__ATOMIC_RELEASE``, ``__ATOMIC_ACQ_REL``, and ``__ATOMIC_SEQ_CST`` are "
"provided, with values corresponding to the enumerators of C11's "
"``memory_order`` enumeration."
msgstr ""

#: ../../../LanguageExtensions.rst:4416
msgid ""
"(Note that Clang additionally provides GCC-compatible ``__atomic_*`` "
"builtins and OpenCL 2.0 ``__opencl_atomic_*`` builtins. The OpenCL 2.0 "
"atomic builtins are an explicit form of the corresponding OpenCL 2.0 builtin "
"function, and are named with a ``__opencl_`` prefix. The macros "
"``__OPENCL_MEMORY_SCOPE_WORK_ITEM``, ``__OPENCL_MEMORY_SCOPE_WORK_GROUP``, "
"``__OPENCL_MEMORY_SCOPE_DEVICE``, ``__OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES``, "
"and ``__OPENCL_MEMORY_SCOPE_SUB_GROUP`` are provided, with values "
"corresponding to the enumerators of OpenCL's ``memory_scope`` enumeration.)"
msgstr ""

#: ../../../LanguageExtensions.rst:4426
msgid "__scoped_atomic builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4428
msgid ""
"Clang provides a set of atomics taking a memory scope argument. These "
"atomics are identical to the standard GNU / GCC atomic builtins but taking "
"an extra memory scope argument. These are designed to be a generic "
"alternative to the ``__opencl_atomic_*`` builtin functions for targets that "
"support atomic memory scopes."
msgstr ""

#: ../../../LanguageExtensions.rst:4434
msgid ""
"Atomic memory scopes are designed to assist optimizations for systems with "
"several levels of memory hierarchy like GPUs. The following memory scopes "
"are currently supported:"
msgstr ""

#: ../../../LanguageExtensions.rst:4438
msgid "``__MEMORY_SCOPE_SYSTEM``"
msgstr ""

#: ../../../LanguageExtensions.rst:4439
msgid "``__MEMORY_SCOPE_DEVICE``"
msgstr ""

#: ../../../LanguageExtensions.rst:4440
msgid "``__MEMORY_SCOPE_WRKGRP``"
msgstr ""

#: ../../../LanguageExtensions.rst:4441
msgid "``__MEMORY_SCOPE_WVFRNT``"
msgstr ""

#: ../../../LanguageExtensions.rst:4442
msgid "``__MEMORY_SCOPE_SINGLE``"
msgstr ""

#: ../../../LanguageExtensions.rst:4444
msgid ""
"This controls whether or not the atomic operation is ordered with respect to "
"the whole system, the current device, an OpenCL workgroup, wavefront, or "
"just a single thread. If these are used on a target that does not support "
"atomic scopes, then they will behave exactly as the standard GNU atomic "
"builtins."
msgstr ""

#: ../../../LanguageExtensions.rst:4450
msgid "Low-level ARM exclusive memory builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4452
msgid ""
"Clang provides overloaded builtins giving direct access to the three key ARM "
"instructions for implementing atomic operations."
msgstr ""

#: ../../../LanguageExtensions.rst:4463 ../../../LanguageExtensions.rst:4494
msgid "The types ``T`` currently supported are:"
msgstr ""

#: ../../../LanguageExtensions.rst:4465
msgid "Integer types with width at most 64 bits (or 128 bits on AArch64)."
msgstr ""

#: ../../../LanguageExtensions.rst:4466
msgid "Floating-point types"
msgstr ""

#: ../../../LanguageExtensions.rst:4467
msgid "Pointer types."
msgstr ""

#: ../../../LanguageExtensions.rst:4469
msgid ""
"Note that the compiler does not guarantee it will not insert stores which "
"clear the exclusive monitor in between an ``ldrex`` type operation and its "
"paired ``strex``. In practice this is only usually a risk when the extra "
"store is on the same cache line as the variable being modified and Clang "
"will only insert stack stores on its own, so it is best not to use these "
"operations on variables with automatic storage duration."
msgstr ""

#: ../../../LanguageExtensions.rst:4476
msgid ""
"Also, loads and stores may be implicit in code written between the ``ldrex`` "
"and ``strex``. Clang will not necessarily mitigate the effects of these "
"either, so care should be exercised."
msgstr ""

#: ../../../LanguageExtensions.rst:4480
msgid ""
"For these reasons the higher level atomic primitives should be preferred "
"where possible."
msgstr ""

#: ../../../LanguageExtensions.rst:4484
msgid "Non-temporal load/store builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4486
msgid ""
"Clang provides overloaded builtins allowing generation of non-temporal "
"memory accesses."
msgstr ""

#: ../../../LanguageExtensions.rst:4496
msgid "Integer types."
msgstr ""

#: ../../../LanguageExtensions.rst:4497
msgid "Floating-point types."
msgstr ""

#: ../../../LanguageExtensions.rst:4498
msgid "Vector types."
msgstr ""

#: ../../../LanguageExtensions.rst:4500
msgid ""
"Note that the compiler does not guarantee that non-temporal loads or stores "
"will be used."
msgstr ""

#: ../../../LanguageExtensions.rst:4504
msgid "C++ Coroutines support builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4507
msgid ""
"This is a work in progress. Compatibility across Clang/LLVM releases is not "
"guaranteed."
msgstr ""

#: ../../../LanguageExtensions.rst:4510
msgid ""
"Clang provides experimental builtins to support C++ Coroutines as defined by "
"https://wg21.link/P0057. The following four are intended to be used by the "
"standard library to implement the ``std::coroutine_handle`` type."
msgstr ""

#: ../../../LanguageExtensions.rst:4551
msgid ""
"Other coroutine builtins are either for internal clang use or for use during "
"development of the coroutine feature. See `Coroutines in LLVM <https://llvm."
"org/docs/Coroutines.html#intrinsics>`_ for more information on their "
"semantics. Note that builtins matching the intrinsics that take token as the "
"first parameter (llvm.coro.begin, llvm.coro.alloc, llvm.coro.free and llvm."
"coro.suspend) omit the token parameter and fill it to an appropriate value "
"during the emission."
msgstr ""

#: ../../../LanguageExtensions.rst:4573
msgid ""
"Note that there is no builtin matching the `llvm.coro.save` intrinsic. LLVM "
"automatically will insert one if the first argument to `llvm.coro.suspend` "
"is token `none`. If a user calls `__builtin_suspend`, clang will insert "
"`token none` as the first argument to the intrinsic."
msgstr ""

#: ../../../LanguageExtensions.rst:4579
msgid "Source location builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4581
msgid ""
"Clang provides builtins to support C++ standard library implementation of "
"``std::source_location`` as specified in C++20.  With the exception of "
"``__builtin_COLUMN``, ``__builtin_FILE_NAME`` and ``__builtin_FUNCSIG``, "
"these builtins are also implemented by GCC."
msgstr ""

#: ../../../LanguageExtensions.rst:4623
msgid ""
"The builtins ``__builtin_LINE``, ``__builtin_FUNCTION``, "
"``__builtin_FUNCSIG``, ``__builtin_FILE`` and ``__builtin_FILE_NAME`` return "
"the values, at the \"invocation point\", for ``__LINE__``, ``__FUNCTION__``, "
"``__FUNCSIG__``, ``__FILE__`` and ``__FILE_NAME__`` respectively. "
"``__builtin_COLUMN`` similarly returns the column, though there is no "
"corresponding macro. These builtins are constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:4630
msgid ""
"When the builtins appear as part of a default function argument the "
"invocation point is the location of the caller. When the builtins appear as "
"part of a default member initializer, the invocation point is the location "
"of the constructor or aggregate initialization used to create the object. "
"Otherwise the invocation point is the same as the location of the builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:4636
msgid ""
"When the invocation point of ``__builtin_FUNCTION`` is not a function scope, "
"the empty string is returned."
msgstr ""

#: ../../../LanguageExtensions.rst:4639
msgid ""
"The builtin ``__builtin_COLUMN`` returns the offset from the start of the "
"line, beginning from column 1. `This may differ from other implementations. "
"<https://eel.is/c++draft/support.srcloc#tab:support.srcloc.current-row-3-"
"column-2-sentence-2>`_"
msgstr ""

#: ../../../LanguageExtensions.rst:4643
msgid ""
"The builtin ``__builtin_source_location`` returns a pointer to constant "
"static data of type ``std::source_location::__impl``. This type must have "
"already been defined, and must contain exactly four fields: ``const char "
"*_M_file_name``, ``const char *_M_function_name``, ``<any-integral-type> "
"_M_line``, and ``<any-integral-type> _M_column``. The fields will be "
"populated in the same manner as the above four builtins, except that "
"``_M_function_name`` is populated with ``__PRETTY_FUNCTION__`` rather than "
"``__FUNCTION__``."
msgstr ""

#: ../../../LanguageExtensions.rst:4653
msgid "Alignment builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4654
msgid ""
"Clang provides builtins to support checking and adjusting alignment of "
"pointers and integers. These builtins can be used to avoid relying on "
"implementation-defined behavior of arithmetic on integers derived from "
"pointers. Additionally, these builtins retain type information and, unlike "
"bitwise arithmetic, they can perform semantic checking on the alignment "
"value."
msgstr ""

#: ../../../LanguageExtensions.rst:4704
msgid ""
"The builtins ``__builtin_align_up``, ``__builtin_align_down``, return their "
"first argument aligned up/down to the next multiple of the second argument. "
"If the value is already sufficiently aligned, it is returned unchanged. The "
"builtin ``__builtin_is_aligned`` returns whether the first argument is "
"aligned to a multiple of the second argument. All of these builtins expect "
"the alignment to be expressed as a number of bytes."
msgstr ""

#: ../../../LanguageExtensions.rst:4711
msgid ""
"These builtins can be used for all integer types as well as (non-function) "
"pointer types. For pointer types, these builtins operate in terms of the "
"integer address of the pointer and return a new pointer of the same type "
"(including qualifiers such as ``const``) with an adjusted address. When "
"aligning pointers up or down, the resulting value must be within the same "
"underlying allocation or one past the end (see C17 6.5.6p8, C++ [expr.add]). "
"This means that arbitrary integer values stored in pointer-type variables "
"must not be passed to these builtins. For those use cases, the builtins can "
"still be used, but the operation must be performed on the pointer cast to "
"``uintptr_t``."
msgstr ""

#: ../../../LanguageExtensions.rst:4721
msgid ""
"If Clang can determine that the alignment is not a power of two at compile "
"time, it will result in a compilation failure. If the alignment argument is "
"not a power of two at run time, the behavior of these builtins is undefined."
msgstr ""

#: ../../../LanguageExtensions.rst:4726
msgid "Non-standard C++11 Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:4728
msgid ""
"Clang's non-standard C++11 attributes live in the ``clang`` attribute "
"namespace."
msgstr ""

#: ../../../LanguageExtensions.rst:4731
msgid ""
"Clang supports GCC's ``gnu`` attribute namespace. All GCC attributes which "
"are accepted with the ``__attribute__((foo))`` syntax are also accepted as "
"``[[gnu::foo]]``. This only extends to attributes which are specified by GCC "
"(see the list of `GCC function attributes <https://gcc.gnu.org/onlinedocs/"
"gcc/Function-Attributes.html>`_, `GCC variable attributes <https://gcc.gnu."
"org/onlinedocs/gcc/Variable-Attributes.html>`_, and `GCC type attributes "
"<https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html>`_). As with the "
"GCC implementation, these attributes must appertain to the *declarator-id* "
"in a declaration, which means they must go either at the start of the "
"declaration or immediately after the name being declared."
msgstr ""

#: ../../../LanguageExtensions.rst:4743
msgid ""
"For example, this applies the GNU ``unused`` attribute to ``a`` and ``f``, "
"and also applies the GNU ``noreturn`` attribute to ``f``."
msgstr ""

#: ../../../LanguageExtensions.rst:4746
msgid "Examples: .. code-block:: c++"
msgstr ""

#: ../../../LanguageExtensions.rst:4749
msgid "[[gnu::unused]] int a, f [[gnu::noreturn]] ();"
msgstr ""

#: ../../../LanguageExtensions.rst:4752
msgid "Target-Specific Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:4754
msgid "Clang supports some language features conditionally on some targets."
msgstr ""

#: ../../../LanguageExtensions.rst:4757
msgid "AMDGPU Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:4760
msgid "__builtin_amdgcn_fence"
msgstr ""

#: ../../../LanguageExtensions.rst:4762
msgid "``__builtin_amdgcn_fence`` emits a fence."
msgstr ""

#: ../../../LanguageExtensions.rst:4764
msgid "``unsigned`` atomic ordering, e.g. ``__ATOMIC_ACQUIRE``"
msgstr ""

#: ../../../LanguageExtensions.rst:4765
msgid "``const char *`` synchronization scope, e.g. ``workgroup``"
msgstr ""

#: ../../../LanguageExtensions.rst:4766
msgid "Zero or more ``const char *`` address spaces names."
msgstr ""

#: ../../../LanguageExtensions.rst:4768
msgid ""
"The address spaces arguments must be one of the following string literals:"
msgstr ""

#: ../../../LanguageExtensions.rst:4770
msgid "``\"local\"``"
msgstr ""

#: ../../../LanguageExtensions.rst:4771
msgid "``\"global\"``"
msgstr ""

#: ../../../LanguageExtensions.rst:4773
msgid ""
"If one or more address space name are provided, the code generator will "
"attempt to emit potentially faster instructions that order access to at "
"least those address spaces. Emitting such instructions may not always be "
"possible and the compiler is free to fence more aggressively."
msgstr ""

#: ../../../LanguageExtensions.rst:4779
msgid "If no address spaces names are provided, all address spaces are fenced."
msgstr ""

#: ../../../LanguageExtensions.rst:4793
msgid "ARM/AArch64 Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:4796
msgid "Memory Barrier Intrinsics"
msgstr ""

#: ../../../LanguageExtensions.rst:4797
msgid ""
"Clang implements the ``__dmb``, ``__dsb`` and ``__isb`` intrinsics as "
"defined in the `Arm C Language Extensions <https://github.com/ARM-software/"
"acle/releases>`_. Note that these intrinsics are implemented as motion "
"barriers that block reordering of memory accesses and side effect "
"instructions. Other instructions like simple arithmetic may be reordered "
"around the intrinsic. If you expect to have no reordering at all, use inline "
"assembly instead."
msgstr ""

#: ../../../LanguageExtensions.rst:4806
msgid "Pointer Authentication"
msgstr ""

#: ../../../LanguageExtensions.rst:4807
msgid "See :doc:`PointerAuthentication`."
msgstr ""

#: ../../../LanguageExtensions.rst:4810
msgid "X86/X86-64 Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:4812
msgid "The X86 backend has these language extensions:"
msgstr ""

#: ../../../LanguageExtensions.rst:4815
msgid "Memory references to specified segments"
msgstr ""

#: ../../../LanguageExtensions.rst:4817
msgid ""
"Annotating a pointer with address space #256 causes it to be code generated "
"relative to the X86 GS segment register, address space #257 causes it to be "
"relative to the X86 FS segment, and address space #258 causes it to be "
"relative to the X86 SS segment.  Note that this is a very very low-level "
"feature that should only be used if you know what you're doing (for example "
"in an OS kernel)."
msgstr ""

#: ../../../LanguageExtensions.rst:4824
msgid "Here is an example:"
msgstr ""

#: ../../../LanguageExtensions.rst:4833
msgid "Which compiles to (on X86-32):"
msgstr ""

#: ../../../LanguageExtensions.rst:4842
msgid ""
"You can also use the GCC compatibility macros ``__seg_fs`` and ``__seg_gs`` "
"for the same purpose. The preprocessor symbols ``__SEG_FS`` and ``__SEG_GS`` "
"indicate their support."
msgstr ""

#: ../../../LanguageExtensions.rst:4847
msgid "PowerPC Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:4850
msgid "Set the Floating Point Rounding Mode"
msgstr ""

#: ../../../LanguageExtensions.rst:4851
msgid ""
"PowerPC64/PowerPC64le supports the builtin function ``__builtin_setrnd`` to "
"set the floating point rounding mode. This function will use the least "
"significant two bits of integer argument to set the floating point rounding "
"mode."
msgstr ""

#: ../../../LanguageExtensions.rst:4859
msgid "The effective values for mode are:"
msgstr ""

#: ../../../LanguageExtensions.rst:4861
msgid "0 - round to nearest"
msgstr ""

#: ../../../LanguageExtensions.rst:4862
msgid "1 - round to zero"
msgstr ""

#: ../../../LanguageExtensions.rst:4863
msgid "2 - round to +infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:4864
msgid "3 - round to -infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:4866
msgid ""
"Note that the mode argument will modulo 4, so if the integer argument is "
"greater than 3, it will only use the least significant two bits of the mode. "
"Namely, ``__builtin_setrnd(102))`` is equal to ``__builtin_setrnd(2)``."
msgstr ""

#: ../../../LanguageExtensions.rst:4871
msgid "PowerPC cache builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:4873
msgid ""
"The PowerPC architecture specifies instructions implementing cache "
"operations. Clang provides builtins that give direct programmer access to "
"these cache instructions."
msgstr ""

#: ../../../LanguageExtensions.rst:4877
msgid "Currently the following builtins are implemented in clang:"
msgstr ""

#: ../../../LanguageExtensions.rst:4879
msgid ""
"``__builtin_dcbf`` copies the contents of a modified block from the data "
"cache to main memory and flushes the copy from the data cache."
msgstr ""

#: ../../../LanguageExtensions.rst:4896
msgid "Extensions for Static Analysis"
msgstr ""

#: ../../../LanguageExtensions.rst:4898
msgid ""
"Clang supports additional attributes that are useful for documenting program "
"invariants and rules for static analysis tools, such as the `Clang Static "
"Analyzer <https://clang-analyzer.llvm.org/>`_. These attributes are "
"documented in the analyzer's `list of annotations for analysis <analyzer/"
"user-docs/Annotations.html>`__."
msgstr ""

#: ../../../LanguageExtensions.rst:4906
msgid "Extensions for Dynamic Analysis"
msgstr ""

#: ../../../LanguageExtensions.rst:4908
msgid ""
"Use ``__has_feature(address_sanitizer)`` to check if the code is being built "
"with :doc:`AddressSanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:4911
msgid ""
"Use ``__has_feature(thread_sanitizer)`` to check if the code is being built "
"with :doc:`ThreadSanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:4914
msgid ""
"Use ``__has_feature(memory_sanitizer)`` to check if the code is being built "
"with :doc:`MemorySanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:4917
msgid ""
"Use ``__has_feature(dataflow_sanitizer)`` to check if the code is being "
"built with :doc:`DataFlowSanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:4920
msgid ""
"Use ``__has_feature(safe_stack)`` to check if the code is being built with :"
"doc:`SafeStack`."
msgstr ""

#: ../../../LanguageExtensions.rst:4925
msgid "Extensions for selectively disabling optimization"
msgstr ""

#: ../../../LanguageExtensions.rst:4927
msgid ""
"Clang provides a mechanism for selectively disabling optimizations in "
"functions and methods."
msgstr ""

#: ../../../LanguageExtensions.rst:4930
msgid ""
"To disable optimizations in a single function definition, the GNU-style or C+"
"+11 non-standard attribute ``optnone`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:4945
msgid ""
"To facilitate disabling optimization for a range of function definitions, a "
"range-based pragma is provided. Its syntax is ``#pragma clang optimize`` "
"followed by ``off`` or ``on``."
msgstr ""

#: ../../../LanguageExtensions.rst:4949
msgid ""
"All function definitions in the region between an ``off`` and the following "
"``on`` will be decorated with the ``optnone`` attribute unless doing so "
"would conflict with explicit attributes already present on the function (e."
"g. the ones that control inlining)."
msgstr ""

#: ../../../LanguageExtensions.rst:4968
msgid ""
"If no ``on`` is found to close an ``off`` region, the end of the region is "
"the end of the compilation unit."
msgstr ""

#: ../../../LanguageExtensions.rst:4971
msgid ""
"Note that a stray ``#pragma clang optimize on`` does not selectively enable "
"additional optimizations when compiling at low optimization levels. This "
"feature can only be used to selectively disable optimizations."
msgstr ""

#: ../../../LanguageExtensions.rst:4975
msgid ""
"The pragma has an effect on functions only at the point of their definition; "
"for function templates, this means that the state of the pragma at the point "
"of an instantiation is not necessarily relevant. Consider the following "
"example:"
msgstr ""

#: ../../../LanguageExtensions.rst:4995
msgid ""
"In this example, the definition of the template function ``twice`` is "
"outside the pragma region, whereas the definition of ``thrice`` is inside "
"the region. The ``container`` function is also in the region and will not be "
"optimized, but it causes the instantiation of ``twice`` and ``thrice`` with "
"an ``int`` type; of these two instantiations, ``twice`` will be optimized "
"(because its definition was outside the region) and ``thrice`` will not be "
"optimized."
msgstr ""

#: ../../../LanguageExtensions.rst:5002
msgid ""
"Clang also implements MSVC's range-based pragma, ``#pragma "
"optimize(\"[optimization-list]\", on | off)``. At the moment, Clang only "
"supports an empty optimization list, whereas MSVC supports the arguments, "
"``s``, ``g``, ``t``, and ``y``. Currently, the implementation of ``pragma "
"optimize`` behaves the same as ``#pragma clang optimize``. All functions "
"between ``off`` and ``on`` will be decorated with the ``optnone`` attribute."
msgstr ""

#: ../../../LanguageExtensions.rst:5024
msgid ""
"For MSVC, an empty optimization list and ``off`` parameter will turn off all "
"optimizations, ``s``, ``g``, ``t``, and ``y``. An empty optimization and "
"``on`` parameter will reset the optimizations to the ones specified on the "
"commandline."
msgstr ""

#: ../../../LanguageExtensions.rst:5029
msgid "Parameters (unsupported by Clang)"
msgstr ""

#: ../../../LanguageExtensions.rst:5031
msgid "Parameter"
msgstr ""

#: ../../../LanguageExtensions.rst:5032
msgid "Type of optimization"
msgstr ""

#: ../../../LanguageExtensions.rst:5033
msgid "g"
msgstr ""

#: ../../../LanguageExtensions.rst:5034
msgid "Deprecated"
msgstr ""

#: ../../../LanguageExtensions.rst:5035
msgid "s or t"
msgstr ""

#: ../../../LanguageExtensions.rst:5036
msgid "Short or fast sequences of machine code"
msgstr ""

#: ../../../LanguageExtensions.rst:5037
msgid "y"
msgstr ""

#: ../../../LanguageExtensions.rst:5038
msgid "Enable frame pointers"
msgstr ""

#: ../../../LanguageExtensions.rst:5041
msgid "Extensions for loop hint optimizations"
msgstr ""

#: ../../../LanguageExtensions.rst:5043
msgid ""
"The ``#pragma clang loop`` directive is used to specify hints for optimizing "
"the subsequent for, while, do-while, or c++11 range-based for loop. The "
"directive provides options for vectorization, interleaving, predication, "
"unrolling and distribution. Loop hints can be specified before any loop and "
"will be ignored if the optimization is not safe to apply."
msgstr ""

#: ../../../LanguageExtensions.rst:5049
msgid ""
"There are loop hints that control transformations (e.g. vectorization, loop "
"unrolling) and there are loop hints that set transformation options (e.g. "
"``vectorize_width``, ``unroll_count``).  Pragmas setting transformation "
"options imply the transformation is enabled, as if it was enabled via the "
"corresponding transformation pragma (e.g. ``vectorize(enable)``). If the "
"transformation is disabled  (e.g. ``vectorize(disable)``), that takes "
"precedence over transformations option pragmas implying that transformation."
msgstr ""

#: ../../../LanguageExtensions.rst:5058
msgid "Vectorization, Interleaving, and Predication"
msgstr ""

#: ../../../LanguageExtensions.rst:5060
msgid ""
"A vectorized loop performs multiple iterations of the original loop in "
"parallel using vector instructions. The instruction set of the target "
"processor determines which vector instructions are available and their "
"vector widths. This restricts the types of loops that can be vectorized. The "
"vectorizer automatically determines if the loop is safe and profitable to "
"vectorize. A vector instruction cost model is used to select the vector "
"width."
msgstr ""

#: ../../../LanguageExtensions.rst:5067
msgid ""
"Interleaving multiple loop iterations allows modern processors to further "
"improve instruction-level parallelism (ILP) using advanced hardware "
"features, such as multiple execution units and out-of-order execution. The "
"vectorizer uses a cost model that depends on the register pressure and "
"generated code size to select the interleaving count."
msgstr ""

#: ../../../LanguageExtensions.rst:5073
msgid ""
"Vectorization is enabled by ``vectorize(enable)`` and interleaving is "
"enabled by ``interleave(enable)``. This is useful when compiling with ``-"
"Os`` to manually enable vectorization or interleaving."
msgstr ""

#: ../../../LanguageExtensions.rst:5085
msgid ""
"The vector width is specified by ``vectorize_width(_value_[, fixed|"
"scalable])``, where _value_ is a positive integer and the type of "
"vectorization can be specified with an optional second parameter. The "
"default for the second parameter is 'fixed' and refers to fixed width "
"vectorization, whereas 'scalable' indicates the compiler should use scalable "
"vectors instead. Another use of vectorize_width is ``vectorize_width(fixed|"
"scalable)`` where the user can hint at the type of vectorization to use "
"without specifying the exact width. In both variants of the pragma the "
"vectorizer may decide to fall back on fixed width vectorization if the "
"target does not support scalable vectors."
msgstr ""

#: ../../../LanguageExtensions.rst:5096
msgid ""
"The interleave count is specified by ``interleave_count(_value_)``, where "
"_value_ is a positive integer. This is useful for specifying the optimal "
"width/count of the set of target architectures supported by your application."
msgstr ""

#: ../../../LanguageExtensions.rst:5108
msgid ""
"Specifying a width/count of 1 disables the optimization, and is equivalent "
"to ``vectorize(disable)`` or ``interleave(disable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:5111
msgid ""
"Vector predication is enabled by ``vectorize_predicate(enable)``, for "
"example:"
msgstr ""

#: ../../../LanguageExtensions.rst:5121
msgid ""
"This predicates (masks) all instructions in the loop, which allows the "
"scalar remainder loop (the tail) to be folded into the main vectorized loop. "
"This might be more efficient when vector predication is efficiently "
"supported by the target platform."
msgstr ""

#: ../../../LanguageExtensions.rst:5127
msgid "Loop Unrolling"
msgstr ""

#: ../../../LanguageExtensions.rst:5129
msgid ""
"Unrolling a loop reduces the loop control overhead and exposes more "
"opportunities for ILP. Loops can be fully or partially unrolled. Full "
"unrolling eliminates the loop and replaces it with an enumerated sequence of "
"loop iterations. Full unrolling is only possible if the loop trip count is "
"known at compile time. Partial unrolling replicates the loop body within the "
"loop and reduces the trip count."
msgstr ""

#: ../../../LanguageExtensions.rst:5136
msgid ""
"If ``unroll(enable)`` is specified the unroller will attempt to fully unroll "
"the loop if the trip count is known at compile time. If the fully unrolled "
"code size is greater than an internal limit the loop will be partially "
"unrolled up to this limit. If the trip count is not known at compile time "
"the loop will be partially unrolled with a heuristically chosen unroll "
"factor."
msgstr ""

#: ../../../LanguageExtensions.rst:5149
msgid ""
"If ``unroll(full)`` is specified the unroller will attempt to fully unroll "
"the loop if the trip count is known at compile time identically to "
"``unroll(enable)``. However, with ``unroll(full)`` the loop will not be "
"unrolled if the loop count is not known at compile time."
msgstr ""

#: ../../../LanguageExtensions.rst:5161
msgid ""
"The unroll count can be specified explicitly with ``unroll_count(_value_)`` "
"where _value_ is a positive integer. If this value is greater than the trip "
"count the loop will be fully unrolled. Otherwise the loop is partially "
"unrolled subject to the same code size limit as with ``unroll(enable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:5173
msgid "Unrolling of a loop can be prevented by specifying ``unroll(disable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:5175
msgid ""
"Loop unroll parameters can be controlled by options `-mllvm -unroll-count=n` "
"and `-mllvm -pragma-unroll-threshold=n`."
msgstr ""

#: ../../../LanguageExtensions.rst:5179
msgid "Loop Distribution"
msgstr ""

#: ../../../LanguageExtensions.rst:5181
msgid ""
"Loop Distribution allows splitting a loop into multiple loops.  This is "
"beneficial for example when the entire loop cannot be vectorized but some of "
"the resulting loops can."
msgstr ""

#: ../../../LanguageExtensions.rst:5185
msgid ""
"If ``distribute(enable))`` is specified and the loop has memory dependencies "
"that inhibit vectorization, the compiler will attempt to isolate the "
"offending operations into a new loop.  This optimization is not enabled by "
"default, only loops marked with the pragma are considered."
msgstr ""

#: ../../../LanguageExtensions.rst:5198
msgid ""
"This loop will be split into two loops between statements S1 and S2.  The "
"second loop containing S2 will be vectorized."
msgstr ""

#: ../../../LanguageExtensions.rst:5201
msgid ""
"Loop Distribution is currently not enabled by default in the optimizer "
"because it can hurt performance in some cases.  For example, instruction-"
"level parallelism could be reduced by sequentializing the execution of the "
"statements S1 and S2 above."
msgstr ""

#: ../../../LanguageExtensions.rst:5206
msgid ""
"If Loop Distribution is turned on globally with ``-mllvm -enable-loop-"
"distribution``, specifying ``distribute(disable)`` can be used the disable "
"it on a per-loop basis."
msgstr ""

#: ../../../LanguageExtensions.rst:5211
msgid "Additional Information"
msgstr ""

#: ../../../LanguageExtensions.rst:5213
msgid "For convenience multiple loop hints can be specified on a single line."
msgstr ""

#: ../../../LanguageExtensions.rst:5222
msgid ""
"If an optimization cannot be applied any hints that apply to it will be "
"ignored. For example, the hint ``vectorize_width(4)`` is ignored if the loop "
"is not proven safe to vectorize. To identify and diagnose optimization "
"issues use `-Rpass`, `-Rpass-missed`, and `-Rpass-analysis` command line "
"options. See the user guide for details."
msgstr ""

#: ../../../LanguageExtensions.rst:5229
msgid "Extensions to specify floating-point flags"
msgstr ""

#: ../../../LanguageExtensions.rst:5231
msgid ""
"The ``#pragma clang fp`` pragma allows floating-point options to be "
"specified for a section of the source code. This pragma can only appear at "
"file scope or at the start of a compound statement (excluding comments). "
"When using within a compound statement, the pragma is active within the "
"scope of the compound statement."
msgstr ""

#: ../../../LanguageExtensions.rst:5237
msgid "Currently, the following settings can be controlled with this pragma:"
msgstr ""

#: ../../../LanguageExtensions.rst:5239
msgid ""
"``#pragma clang fp reassociate`` allows control over the reassociation of "
"floating point expressions. When enabled, this pragma allows the expression "
"``x + (y + z)`` to be reassociated as ``(x + y) + z``. Reassociation can "
"also occur across multiple statements. This pragma can be used to disable "
"reassociation when it is otherwise enabled for the translation unit with the "
"``-fassociative-math`` flag. The pragma can take two values: ``on`` and "
"``off``."
msgstr ""

#: ../../../LanguageExtensions.rst:5257
msgid ""
"``#pragma clang fp reciprocal`` allows control over using reciprocal "
"approximations in floating point expressions. When enabled, this pragma "
"allows the expression ``x / y`` to be approximated as ``x * (1.0 / y)``.  "
"This pragma can be used to disable reciprocal approximation when it is "
"otherwise enabled for the translation unit with the ``-freciprocal-math`` "
"flag or other fast-math options. The pragma can take two values: ``on`` and "
"``off``."
msgstr ""

#: ../../../LanguageExtensions.rst:5274
msgid ""
"``#pragma clang fp contract`` specifies whether the compiler should contract "
"a multiply and an addition (or subtraction) into a fused FMA operation when "
"supported by the target."
msgstr ""

#: ../../../LanguageExtensions.rst:5278
msgid ""
"The pragma can take three values: ``on``, ``fast`` and ``off``.  The ``on`` "
"option is identical to using ``#pragma STDC FP_CONTRACT(ON)`` and it allows "
"fusion as specified the language standard.  The ``fast`` option allows "
"fusion in cases when the language standard does not make this possible (e.g. "
"across statements in C)."
msgstr ""

#: ../../../LanguageExtensions.rst:5293
msgid ""
"The pragma can also be used with ``off`` which turns FP contraction off for "
"a section of the code. This can be useful when fast contraction is otherwise "
"enabled for the translation unit with the ``-ffp-contract=fast-honor-"
"pragmas`` flag. Note that ``-ffp-contract=fast`` will override pragmas to "
"fuse multiply and addition across statements regardless of any controlling "
"pragmas."
msgstr ""

#: ../../../LanguageExtensions.rst:5299
msgid ""
"``#pragma clang fp exceptions`` specifies floating point exception behavior. "
"It may take one of the values: ``ignore``, ``maytrap`` or ``strict``. "
"Meaning of these values is same as for `constrained floating point "
"intrinsics <http://llvm.org/docs/LangRef.html#constrained-floating-point-"
"intrinsics>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:5313
msgid "A ``#pragma clang fp`` pragma may contain any number of options:"
msgstr ""

#: ../../../LanguageExtensions.rst:5322
msgid ""
"``#pragma clang fp eval_method`` allows floating-point behavior to be "
"specified for a section of the source code. This pragma can appear at file "
"or namespace scope, or at the start of a compound statement (excluding "
"comments). The pragma is active within the scope of the compound statement."
msgstr ""

#: ../../../LanguageExtensions.rst:5327
msgid ""
"When ``pragma clang fp eval_method(source)`` is enabled, the section of code "
"governed by the pragma behaves as though the command-line option ``-ffp-eval-"
"method=source`` is enabled. Rounds intermediate results to source-defined "
"precision."
msgstr ""

#: ../../../LanguageExtensions.rst:5332
msgid ""
"When ``pragma clang fp eval_method(double)`` is enabled, the section of code "
"governed by the pragma behaves as though the command-line option ``-ffp-eval-"
"method=double`` is enabled. Rounds intermediate results to ``double`` "
"precision."
msgstr ""

#: ../../../LanguageExtensions.rst:5337
msgid ""
"When ``pragma clang fp eval_method(extended)`` is enabled, the section of "
"code governed by the pragma behaves as though the command-line option ``-ffp-"
"eval-method=extended`` is enabled. Rounds intermediate results to target-"
"dependent ``long double`` precision. In Win32 programming, for instance, the "
"long double data type maps to the double, 64-bit precision data type."
msgstr ""

#: ../../../LanguageExtensions.rst:5343
msgid ""
"The full syntax this pragma supports is ``#pragma clang fp "
"eval_method(source|double|extended)``."
msgstr ""

#: ../../../LanguageExtensions.rst:5355
msgid ""
"Note: ``math.h`` defines the typedefs ``float_t`` and ``double_t`` based on "
"the active evaluation method at the point where the header is included, not "
"where the typedefs are used.  Because of this, it is unwise to combine these "
"typedefs with ``#pragma clang fp eval_method``.  To catch obvious bugs, "
"Clang will emit an error for any references to these typedefs within the "
"scope of this pragma; however, this is not a fool-proof protection, and "
"programmers must take care."
msgstr ""

#: ../../../LanguageExtensions.rst:5362
msgid ""
"The ``#pragma float_control`` pragma allows precise floating-point semantics "
"and floating-point exception behavior to be specified for a section of the "
"source code. This pragma can only appear at file or namespace scope, within "
"a language linkage specification or at the start of a compound statement "
"(excluding comments). When used within a compound statement, the pragma is "
"active within the scope of the compound statement.  This pragma is modeled "
"after a Microsoft pragma with the same spelling and syntax.  For pragmas "
"specified at file or namespace scope, or within a language linkage "
"specification, a stack is supported so that the ``pragma float_control`` "
"settings can be pushed or popped."
msgstr ""

#: ../../../LanguageExtensions.rst:5373
msgid ""
"When ``pragma float_control(precise, on)`` is enabled, the section of code "
"governed by the pragma uses precise floating point semantics, effectively ``-"
"ffast-math`` is disabled and ``-ffp-contract=on`` (fused multiply add) is "
"enabled. This pragma enables ``-fmath-errno``."
msgstr ""

#: ../../../LanguageExtensions.rst:5378
msgid ""
"When ``pragma float_control(precise, off)`` is enabled, unsafe-floating "
"point optimizations are enabled in the section of code governed by the "
"pragma. Effectively ``-ffast-math`` is enabled and ``-ffp-contract=fast``. "
"This pragma disables ``-fmath-errno``."
msgstr ""

#: ../../../LanguageExtensions.rst:5383
msgid ""
"When ``pragma float_control(except, on)`` is enabled, the section of code "
"governed by the pragma behaves as though the command-line option ``-ffp-"
"exception-behavior=strict`` is enabled, when ``pragma float_control(except, "
"off)`` is enabled, the section of code governed by the pragma behaves as "
"though the command-line option ``-ffp-exception-behavior=ignore`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:5390
msgid ""
"The full syntax this pragma supports is ``float_control(except|precise, on|"
"off [, push])`` and ``float_control(push|pop)``. The ``push`` and ``pop`` "
"forms, including using ``push`` as the optional third argument, can only "
"occur at file scope."
msgstr ""

#: ../../../LanguageExtensions.rst:5405
msgid ""
"Specifying an attribute for multiple declarations (#pragma clang attribute)"
msgstr ""

#: ../../../LanguageExtensions.rst:5407
msgid ""
"The ``#pragma clang attribute`` directive can be used to apply an attribute "
"to multiple declarations. The ``#pragma clang attribute push`` variation of "
"the directive pushes a new \"scope\" of ``#pragma clang attribute`` that "
"attributes can be added to. The ``#pragma clang attribute (...)`` variation "
"adds an attribute to that scope, and the ``#pragma clang attribute pop`` "
"variation pops the scope. You can also use ``#pragma clang attribute push "
"(...)``, which is a shorthand for when you want to add one attribute to a "
"new scope. Multiple push directives can be nested inside each other."
msgstr ""

#: ../../../LanguageExtensions.rst:5416
msgid ""
"The attributes that are used in the ``#pragma clang attribute`` directives "
"can be written using the GNU-style syntax:"
msgstr ""

#: ../../../LanguageExtensions.rst:5427
msgid "The attributes can also be written using the C++11 style syntax:"
msgstr ""

#: ../../../LanguageExtensions.rst:5437
msgid "The ``__declspec`` style syntax is also supported:"
msgstr ""

#: ../../../LanguageExtensions.rst:5447
msgid ""
"A single push directive can contain multiple attributes, however, only one "
"syntax style can be used within a single directive:"
msgstr ""

#: ../../../LanguageExtensions.rst:5464
msgid ""
"Because multiple push directives can be nested, if you're writing a macro "
"that expands to ``_Pragma(\"clang attribute\")`` it's good hygiene (though "
"not required) to add a namespace to your push/pop directives. A pop "
"directive with a namespace will pop the innermost push that has that same "
"namespace. This will ensure that another macro's ``pop`` won't inadvertently "
"pop your attribute. Note that an ``pop`` without a namespace will pop the "
"innermost ``push`` without a namespace. ``push``es with a namespace can only "
"be popped by ``pop`` with the same namespace. For instance:"
msgstr ""

#: ../../../LanguageExtensions.rst:5489
msgid ""
"Without the namespaces on the macros, ``other_function`` will be annotated "
"with ``[[noreturn]]`` instead of ``__attribute__((unavailable))``. This may "
"seem like a contrived example, but its very possible for this kind of "
"situation to appear in real code if the pragmas are spread out across a "
"large file. You can test if your version of clang supports namespaces on "
"``#pragma clang attribute`` with "
"``__has_extension(pragma_clang_attribute_namespaces)``."
msgstr ""

#: ../../../LanguageExtensions.rst:5497
msgid "Subject Match Rules"
msgstr ""

#: ../../../LanguageExtensions.rst:5499
msgid ""
"The set of declarations that receive a single attribute from the attribute "
"stack depends on the subject match rules that were specified in the pragma. "
"Subject match rules are specified after the attribute. The compiler expects "
"an identifier that corresponds to the subject set specifier. The "
"``apply_to`` specifier is currently the only supported subject set "
"specifier. It allows you to specify match rules that form a subset of the "
"attribute's allowed subject set, i.e. the compiler doesn't require all of "
"the attribute's subjects. For example, an attribute like ``[[nodiscard]]`` "
"whose subject set includes ``enum``, ``record`` and "
"``hasType(functionType)``, requires the presence of at least one of these "
"rules after ``apply_to``:"
msgstr ""

#: ../../../LanguageExtensions.rst:5533
msgid ""
"Multiple match rules can be specified using the ``any`` match rule, as shown "
"in the example above. The ``any`` rule applies attributes to all "
"declarations that are matched by at least one of the rules in the ``any``. "
"It doesn't nest and can't be used inside the other match rules. Redundant "
"match rules or rules that conflict with one another should not be used "
"inside of ``any``. Failing to specify a rule within the ``any`` rule results "
"in an error."
msgstr ""

#: ../../../LanguageExtensions.rst:5540
msgid "Clang supports the following match rules:"
msgstr ""

#: ../../../LanguageExtensions.rst:5542
msgid ""
"``function``: Can be used to apply attributes to functions. This includes C+"
"+ member functions, static functions, operators, and constructors/"
"destructors."
msgstr ""

#: ../../../LanguageExtensions.rst:5545
msgid ""
"``function(is_member)``: Can be used to apply attributes to C++ member "
"functions. This includes members like static functions, operators, and "
"constructors/destructors."
msgstr ""

#: ../../../LanguageExtensions.rst:5549
msgid ""
"``hasType(functionType)``: Can be used to apply attributes to functions, C++ "
"member functions, and variables/fields whose type is a function pointer. It "
"does not apply attributes to Objective-C methods or blocks."
msgstr ""

#: ../../../LanguageExtensions.rst:5553
msgid ""
"``type_alias``: Can be used to apply attributes to ``typedef`` declarations "
"and C++11 type aliases."
msgstr ""

#: ../../../LanguageExtensions.rst:5556
msgid ""
"``record``: Can be used to apply attributes to ``struct``, ``class``, and "
"``union`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5559
msgid ""
"``record(unless(is_union))``: Can be used to apply attributes only to "
"``struct`` and ``class`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5562
msgid "``enum``: Can be used to apply attributes to enumeration declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5564
msgid "``enum_constant``: Can be used to apply attributes to enumerators."
msgstr ""

#: ../../../LanguageExtensions.rst:5566
msgid ""
"``variable``: Can be used to apply attributes to variables, including local "
"variables, parameters, global variables, and static member variables. It "
"does not apply attributes to instance member variables or Objective-C ivars."
msgstr ""

#: ../../../LanguageExtensions.rst:5571
msgid ""
"``variable(is_thread_local)``: Can be used to apply attributes to thread-"
"local variables only."
msgstr ""

#: ../../../LanguageExtensions.rst:5574
msgid ""
"``variable(is_global)``: Can be used to apply attributes to global variables "
"only."
msgstr ""

#: ../../../LanguageExtensions.rst:5577
msgid ""
"``variable(is_local)``: Can be used to apply attributes to local variables "
"only."
msgstr ""

#: ../../../LanguageExtensions.rst:5580
msgid ""
"``variable(is_parameter)``: Can be used to apply attributes to parameters "
"only."
msgstr ""

#: ../../../LanguageExtensions.rst:5583
msgid ""
"``variable(unless(is_parameter))``: Can be used to apply attributes to all "
"the variables that are not parameters."
msgstr ""

#: ../../../LanguageExtensions.rst:5586
msgid ""
"``field``: Can be used to apply attributes to non-static member variables in "
"a record. This includes Objective-C ivars."
msgstr ""

#: ../../../LanguageExtensions.rst:5589
msgid ""
"``namespace``: Can be used to apply attributes to ``namespace`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5591
msgid ""
"``objc_interface``: Can be used to apply attributes to ``@interface`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5594
msgid ""
"``objc_protocol``: Can be used to apply attributes to ``@protocol`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5597
msgid ""
"``objc_category``: Can be used to apply attributes to category declarations, "
"including class extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:5600
msgid ""
"``objc_method``: Can be used to apply attributes to Objective-C methods, "
"including instance and class methods. Implicit methods like implicit "
"property getters and setters do not receive the attribute."
msgstr ""

#: ../../../LanguageExtensions.rst:5604
msgid ""
"``objc_method(is_instance)``: Can be used to apply attributes to Objective-C "
"instance methods."
msgstr ""

#: ../../../LanguageExtensions.rst:5607
msgid ""
"``objc_property``: Can be used to apply attributes to ``@property`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:5610
msgid ""
"``block``: Can be used to apply attributes to block declarations. This does "
"not include variables/fields of block pointer type."
msgstr ""

#: ../../../LanguageExtensions.rst:5613
msgid ""
"The use of ``unless`` in match rules is currently restricted to a strict set "
"of sub-rules that are used by the supported attributes. That means that even "
"though ``variable(unless(is_parameter))`` is a valid match rule, "
"``variable(unless(is_thread_local))`` is not."
msgstr ""

#: ../../../LanguageExtensions.rst:5619
msgid "Supported Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:5621
msgid ""
"Not all attributes can be used with the ``#pragma clang attribute`` "
"directive. Notably, statement attributes like ``[[fallthrough]]`` or type "
"attributes like ``address_space`` aren't supported by this directive. You "
"can determine whether or not an attribute is supported by the pragma by "
"referring to the :doc:`individual documentation for that attribute "
"<AttributeReference>`."
msgstr ""

#: ../../../LanguageExtensions.rst:5627
msgid ""
"The attributes are applied to all matching declarations individually, even "
"when the attribute is semantically incorrect. The attributes that aren't "
"applied to any declaration are not verified semantically."
msgstr ""

#: ../../../LanguageExtensions.rst:5632
msgid "Specifying section names for global objects (#pragma clang section)"
msgstr ""

#: ../../../LanguageExtensions.rst:5634
msgid ""
"The ``#pragma clang section`` directive provides a means to assign section-"
"names to global variables, functions and static variables."
msgstr ""

#: ../../../LanguageExtensions.rst:5637
msgid "The section names can be specified as:"
msgstr ""

#: ../../../LanguageExtensions.rst:5643
msgid ""
"The section names can be reverted back to default name by supplying an empty "
"string to the section kind, for example:"
msgstr ""

#: ../../../LanguageExtensions.rst:5650
msgid "The ``#pragma clang section`` directive obeys the following rules:"
msgstr ""

#: ../../../LanguageExtensions.rst:5652
msgid ""
"The pragma applies to all global variable, statics and function declarations "
"from the pragma to the end of the translation unit."
msgstr ""

#: ../../../LanguageExtensions.rst:5655
msgid ""
"The pragma clang section is enabled automatically, without need of any flags."
msgstr ""

#: ../../../LanguageExtensions.rst:5657
msgid ""
"This feature is only defined to work sensibly for ELF, Mach-O and COFF "
"targets."
msgstr ""

#: ../../../LanguageExtensions.rst:5659
msgid ""
"If section name is specified through _attribute_((section(\"myname\"))), "
"then the attribute name gains precedence."
msgstr ""

#: ../../../LanguageExtensions.rst:5662
msgid ""
"Global variables that are initialized to zero will be placed in the named "
"bss section, if one is present."
msgstr ""

#: ../../../LanguageExtensions.rst:5665
msgid ""
"The ``#pragma clang section`` directive does not try to infer section-kind "
"from the name. For example, naming a section \"``.bss.mySec``\" does NOT "
"mean it will be a bss section name."
msgstr ""

#: ../../../LanguageExtensions.rst:5669
msgid ""
"The decision about which section-kind applies to each global is taken in the "
"back-end. Once the section-kind is known, appropriate section name, as "
"specified by the user using ``#pragma clang section`` directive, is applied "
"to that global."
msgstr ""

#: ../../../LanguageExtensions.rst:5674
msgid "Specifying Linker Options on ELF Targets"
msgstr ""

#: ../../../LanguageExtensions.rst:5676
msgid ""
"The ``#pragma comment(lib, ...)`` directive is supported on all ELF targets. "
"The second parameter is the library name (without the traditional Unix "
"prefix of ``lib``).  This allows you to provide an implicit link of "
"dependent libraries."
msgstr ""

#: ../../../LanguageExtensions.rst:5681
msgid "Evaluating Object Size"
msgstr ""

#: ../../../LanguageExtensions.rst:5683
msgid ""
"Clang supports the builtins ``__builtin_object_size`` and "
"``__builtin_dynamic_object_size``. The semantics are compatible with GCC's "
"builtins of the same names, but the details are slightly different."
msgstr ""

#: ../../../LanguageExtensions.rst:5691
msgid ""
"Returns the number of accessible bytes ``n`` past ``ptr``. The value "
"returned depends on ``type``, which is required to be an integer constant "
"between 0 and 3:"
msgstr ""

#: ../../../LanguageExtensions.rst:5695
msgid ""
"If ``type & 2 == 0``, the least ``n`` is returned such that accesses to "
"``(const char*)ptr + n`` and beyond are known to be out of bounds. This is "
"``(size_t)-1`` if no better bound is known."
msgstr ""

#: ../../../LanguageExtensions.rst:5698
msgid ""
"If ``type & 2 == 2``, the greatest ``n`` is returned such that accesses to "
"``(const char*)ptr + i`` are known to be in bounds, for 0 <= ``i`` < ``n``. "
"This is ``(size_t)0`` if no better bound is known."
msgstr ""

#: ../../../LanguageExtensions.rst:5711
msgid ""
"If ``type & 1 == 0``, pointers are considered to be in bounds if they point "
"into the same storage as ``ptr`` -- that is, the same stack object, global "
"variable, or heap allocation."
msgstr ""

#: ../../../LanguageExtensions.rst:5714
msgid ""
"If ``type & 1 == 1``, pointers are considered to be in bounds if they point "
"to the same subobject that ``ptr`` points to. If ``ptr`` points to an array "
"element, other elements of the same array, but not of enclosing arrays, are "
"considered in bounds."
msgstr ""

#: ../../../LanguageExtensions.rst:5734
msgid ""
"The values returned by this builtin are a best effort conservative "
"approximation of the correct answers. When ``type & 2 == 0``, the true value "
"is less than or equal to the value returned by the builtin, and when ``type "
"& 2 == 1``, the true value is greater than or equal to the value returned by "
"the builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:5739
msgid ""
"For ``__builtin_object_size``, the value is determined entirely at compile "
"time. With optimization enabled, better results will be produced, especially "
"when the call to ``__builtin_object_size`` is in a different function from "
"the formation of the pointer. Unlike in GCC, enabling optimization in Clang "
"does not allow more information about subobjects to be determined, so the "
"``type & 1 == 1`` case will often give imprecise results when used across a "
"function call boundary even when optimization is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:5747
msgid ""
"`The pass_object_size and pass_dynamic_object_size attributes <https://clang."
"llvm.org/docs/AttributeReference.html#pass-object-size-pass-dynamic-object-"
"size>`_ can be used to invisibly pass the object size for a pointer "
"parameter alongside the pointer in a function call. This allows more precise "
"object sizes to be determined both when building without optimizations and "
"in the ``type & 1 == 1`` case."
msgstr ""

#: ../../../LanguageExtensions.rst:5753
msgid ""
"For ``__builtin_dynamic_object_size``, the result is not limited to being a "
"compile time constant. Instead, a small amount of runtime evaluation is "
"permitted to determine the size of the object, in order to give a more "
"precise result. ``__builtin_dynamic_object_size`` is meant to be used as a "
"drop-in replacement for ``__builtin_object_size`` in libraries that support "
"it. For instance, here is a program that ``__builtin_dynamic_object_size`` "
"will make safer:"
msgstr ""

#: ../../../LanguageExtensions.rst:5770
msgid ""
"Since the size of ``buffer`` can't be known at compile time, Clang will fold "
"``__builtin_object_size(buffer, 0)`` into ``-1``. However, if this was "
"written as ``__builtin_dynamic_object_size(buffer, 0)``, Clang will fold it "
"into ``size``, providing some extra runtime safety."
msgstr ""

#: ../../../LanguageExtensions.rst:5776
msgid "Deprecating Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:5778
msgid ""
"Clang supports the pragma ``#pragma clang deprecated``, which can be used to "
"provide deprecation warnings for macro uses. For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:5790
msgid ""
"``#pragma clang deprecated`` should be preferred for this purpose over "
"``#pragma GCC warning`` because the warning can be controlled with ``-"
"Wdeprecated``."
msgstr ""

#: ../../../LanguageExtensions.rst:5795
msgid "Restricted Expansion Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:5797
msgid ""
"Clang supports the pragma ``#pragma clang restrict_expansion``, which can be "
"used restrict macro expansion in headers. This can be valuable when "
"providing headers with ABI stability requirements. Any expansion of the "
"annotated macro processed by the preprocessor after the ``#pragma`` "
"annotation will log a warning. Redefining the macro or undefining the macro "
"will not be diagnosed, nor will expansion of the macro within the main "
"source file. For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:5826
msgid "This warning is controlled by ``-Wpedantic-macros``."
msgstr ""

#: ../../../LanguageExtensions.rst:5829
msgid "Final Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:5831
msgid ""
"Clang supports the pragma ``#pragma clang final``, which can be used to mark "
"macros as final, meaning they cannot be undef'd or re-defined. For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:5842
msgid ""
"This is useful for enforcing system-provided macros that should not be "
"altered in user headers or code. This is controlled by ``-Wpedantic-"
"macros``. Final macros will always warn on redefinition, including "
"situations with identical bodies and in system headers."
msgstr ""

#: ../../../LanguageExtensions.rst:5848
msgid "Line Control"
msgstr ""

#: ../../../LanguageExtensions.rst:5850
msgid ""
"Clang supports an extension for source line control, which takes the form of "
"a preprocessor directive starting with an unsigned integral constant. In "
"addition to the standard ``#line`` directive, this form allows control of an "
"include stack and header file type, which is used in issuing diagnostics. "
"These lines are emitted in preprocessed output."
msgstr ""

#: ../../../LanguageExtensions.rst:5861
msgid ""
"The filename is optional, and if unspecified indicates no change in source "
"filename. The header-type is an optional, whitespace-delimited, sequence of "
"magic numbers as follows."
msgstr ""

#: ../../../LanguageExtensions.rst:5865
msgid ""
"``1:`` Push the current source file name onto the include stack and enter a "
"new file."
msgstr ""

#: ../../../LanguageExtensions.rst:5868
msgid ""
"``2``: Pop the include stack and return to the specified file. If the "
"filename is ``\"\"``, the name popped from the include stack is used. "
"Otherwise there is no requirement that the specified filename matches the "
"current source when originally pushed."
msgstr ""

#: ../../../LanguageExtensions.rst:5873
msgid ""
"``3``: Enter a system-header region. System headers often contain "
"implementation-specific source that would normally emit a diagnostic."
msgstr ""

#: ../../../LanguageExtensions.rst:5876
msgid ""
"``4``: Enter an implicit ``extern \"C\"`` region. This is not required on "
"modern systems where system headers are C++-aware."
msgstr ""

#: ../../../LanguageExtensions.rst:5879
msgid ""
"At most a single ``1`` or ``2`` can be present, and values must be in "
"ascending order."
msgstr ""

#: ../../../LanguageExtensions.rst:5882
msgid "Examples are:"
msgstr ""

#: ../../../LanguageExtensions.rst:5895
msgid "Intrinsics Support within Constant Expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:5897
msgid "The following builtin intrinsics can be used in constant expressions:"
msgstr ""

#: ../../../LanguageExtensions.rst:5899
msgid "``__builtin_addcb``"
msgstr ""

#: ../../../LanguageExtensions.rst:5900
msgid "``__builtin_addcs``"
msgstr ""

#: ../../../LanguageExtensions.rst:5901
msgid "``__builtin_addc``"
msgstr ""

#: ../../../LanguageExtensions.rst:5902
msgid "``__builtin_addcl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5903
msgid "``__builtin_addcll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5908
msgid "``__builtin_bswap16``"
msgstr ""

#: ../../../LanguageExtensions.rst:5909
msgid "``__builtin_bswap32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5910
msgid "``__builtin_bswap64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5911
msgid "``__builtin_clrsb``"
msgstr ""

#: ../../../LanguageExtensions.rst:5912
msgid "``__builtin_clrsbl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5913
msgid "``__builtin_clrsbll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5914
msgid "``__builtin_clz``"
msgstr ""

#: ../../../LanguageExtensions.rst:5915
msgid "``__builtin_clzl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5916
msgid "``__builtin_clzll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5917
msgid "``__builtin_clzs``"
msgstr ""

#: ../../../LanguageExtensions.rst:5918
msgid "``__builtin_clzg``"
msgstr ""

#: ../../../LanguageExtensions.rst:5919
msgid "``__builtin_ctz``"
msgstr ""

#: ../../../LanguageExtensions.rst:5920
msgid "``__builtin_ctzl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5921
msgid "``__builtin_ctzll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5922
msgid "``__builtin_ctzs``"
msgstr ""

#: ../../../LanguageExtensions.rst:5923
msgid "``__builtin_ctzg``"
msgstr ""

#: ../../../LanguageExtensions.rst:5924
msgid "``__builtin_ffs``"
msgstr ""

#: ../../../LanguageExtensions.rst:5925
msgid "``__builtin_ffsl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5926
msgid "``__builtin_ffsll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5927
msgid "``__builtin_fmax``"
msgstr ""

#: ../../../LanguageExtensions.rst:5928
msgid "``__builtin_fmin``"
msgstr ""

#: ../../../LanguageExtensions.rst:5929
msgid "``__builtin_fpclassify``"
msgstr ""

#: ../../../LanguageExtensions.rst:5930
msgid "``__builtin_inf``"
msgstr ""

#: ../../../LanguageExtensions.rst:5931
msgid "``__builtin_isinf``"
msgstr ""

#: ../../../LanguageExtensions.rst:5932
msgid "``__builtin_isinf_sign``"
msgstr ""

#: ../../../LanguageExtensions.rst:5933
msgid "``__builtin_isfinite``"
msgstr ""

#: ../../../LanguageExtensions.rst:5934
msgid "``__builtin_isnan``"
msgstr ""

#: ../../../LanguageExtensions.rst:5935
msgid "``__builtin_isnormal``"
msgstr ""

#: ../../../LanguageExtensions.rst:5936
msgid "``__builtin_nan``"
msgstr ""

#: ../../../LanguageExtensions.rst:5937
msgid "``__builtin_nans``"
msgstr ""

#: ../../../LanguageExtensions.rst:5938
msgid "``__builtin_parity``"
msgstr ""

#: ../../../LanguageExtensions.rst:5939
msgid "``__builtin_parityl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5940
msgid "``__builtin_parityll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5941
msgid "``__builtin_popcount``"
msgstr ""

#: ../../../LanguageExtensions.rst:5942
msgid "``__builtin_popcountl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5943
msgid "``__builtin_popcountll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5953
msgid "``__builtin_subcb``"
msgstr ""

#: ../../../LanguageExtensions.rst:5954
msgid "``__builtin_subcs``"
msgstr ""

#: ../../../LanguageExtensions.rst:5955
msgid "``__builtin_subc``"
msgstr ""

#: ../../../LanguageExtensions.rst:5956
msgid "``__builtin_subcl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5957
msgid "``__builtin_subcll``"
msgstr ""

#: ../../../LanguageExtensions.rst:5959
msgid ""
"The following x86-specific intrinsics can be used in constant expressions:"
msgstr ""

#: ../../../LanguageExtensions.rst:5961
msgid "``_addcarry_u32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5962
msgid "``_addcarry_u64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5963
msgid "``_bit_scan_forward``"
msgstr ""

#: ../../../LanguageExtensions.rst:5964
msgid "``_bit_scan_reverse``"
msgstr ""

#: ../../../LanguageExtensions.rst:5965
msgid "``__bsfd``"
msgstr ""

#: ../../../LanguageExtensions.rst:5966
msgid "``__bsfq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5967
msgid "``__bsrd``"
msgstr ""

#: ../../../LanguageExtensions.rst:5968
msgid "``__bsrq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5969
msgid "``__bswap``"
msgstr ""

#: ../../../LanguageExtensions.rst:5970
msgid "``__bswapd``"
msgstr ""

#: ../../../LanguageExtensions.rst:5971
msgid "``__bswap64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5972
msgid "``__bswapq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5973
msgid "``_castf32_u32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5974
msgid "``_castf64_u64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5975
msgid "``_castu32_f32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5976
msgid "``_castu64_f64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5977
msgid "``__lzcnt16``"
msgstr ""

#: ../../../LanguageExtensions.rst:5978
msgid "``__lzcnt``"
msgstr ""

#: ../../../LanguageExtensions.rst:5979
msgid "``__lzcnt64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5980
msgid "``_mm_popcnt_u32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5981
msgid "``_mm_popcnt_u64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5982
msgid "``_popcnt32``"
msgstr ""

#: ../../../LanguageExtensions.rst:5983
msgid "``_popcnt64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5984
msgid "``__popcntd``"
msgstr ""

#: ../../../LanguageExtensions.rst:5985
msgid "``__popcntq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5986
msgid "``__popcnt16``"
msgstr ""

#: ../../../LanguageExtensions.rst:5987
msgid "``__popcnt``"
msgstr ""

#: ../../../LanguageExtensions.rst:5988
msgid "``__popcnt64``"
msgstr ""

#: ../../../LanguageExtensions.rst:5989
msgid "``__rolb``"
msgstr ""

#: ../../../LanguageExtensions.rst:5990
msgid "``__rolw``"
msgstr ""

#: ../../../LanguageExtensions.rst:5991
msgid "``__rold``"
msgstr ""

#: ../../../LanguageExtensions.rst:5992
msgid "``__rolq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5993
msgid "``__rorb``"
msgstr ""

#: ../../../LanguageExtensions.rst:5994
msgid "``__rorw``"
msgstr ""

#: ../../../LanguageExtensions.rst:5995
msgid "``__rord``"
msgstr ""

#: ../../../LanguageExtensions.rst:5996
msgid "``__rorq``"
msgstr ""

#: ../../../LanguageExtensions.rst:5997
msgid "``_rotl``"
msgstr ""

#: ../../../LanguageExtensions.rst:5998
msgid "``_rotr``"
msgstr ""

#: ../../../LanguageExtensions.rst:5999
msgid "``_rotwl``"
msgstr ""

#: ../../../LanguageExtensions.rst:6000
msgid "``_rotwr``"
msgstr ""

#: ../../../LanguageExtensions.rst:6001
msgid "``_lrotl``"
msgstr ""

#: ../../../LanguageExtensions.rst:6002
msgid "``_lrotr``"
msgstr ""

#: ../../../LanguageExtensions.rst:6003
msgid "``_subborrow_u32``"
msgstr ""

#: ../../../LanguageExtensions.rst:6004
msgid "``_subborrow_u64``"
msgstr ""

#: ../../../LanguageExtensions.rst:6007
msgid "Debugging the Compiler"
msgstr ""

#: ../../../LanguageExtensions.rst:6009
msgid ""
"Clang supports a number of pragma directives that help debugging the "
"compiler itself. Syntax is the following: `#pragma clang __debug <command> "
"<arguments>`. Note, all of debugging pragmas are subject to change."
msgstr ""

#: ../../../LanguageExtensions.rst:6014
msgid "`dump`"
msgstr ""

#: ../../../LanguageExtensions.rst:6015
msgid ""
"Accepts either a single identifier or an expression. When a single "
"identifier is passed, the lookup results for the identifier are printed to "
"`stderr`. When an expression is passed, the AST for the expression is "
"printed to `stderr`. The expression is an unevaluated operand, so things "
"like overload resolution and template instantiations are performed, but the "
"expression has no runtime effects. Type- and value-dependent expressions are "
"not supported yet."
msgstr ""

#: ../../../LanguageExtensions.rst:6022
msgid "This facility is designed to aid with testing name lookup machinery."
msgstr ""

#: ../../../LanguageExtensions.rst:6025
msgid "Predefined Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:6028
msgid "`__GCC_DESTRUCTIVE_SIZE` and `__GCC_CONSTRUCTIVE_SIZE`"
msgstr ""

#: ../../../LanguageExtensions.rst:6029
msgid ""
"Specify the mimum offset between two objects to avoid false sharing and the "
"maximum size of contiguous memory to promote true sharing, respectively. "
"These macros are predefined in all C and C++ language modes, but can be "
"redefined on the command line with ``-D`` to specify different values as "
"needed or can be undefined on the command line with ``-U`` to disable "
"support for the feature."
msgstr ""

#: ../../../LanguageExtensions.rst:6035
msgid ""
"**Note: the values the macros expand to are not guaranteed to be stable. "
"They are are affected by architectures and CPU tuning flags, can change "
"between releases of Clang and will not match the values defined by other "
"compilers such as GCC.**"
msgstr ""

#: ../../../LanguageExtensions.rst:6040
msgid ""
"Compiling different TUs depending on these flags (including use of ``std::"
"hardware_constructive_interference`` or ``std::"
"hardware_destructive_interference``)  with different compilers, macro "
"definitions, or architecture flags will lead to ODR violations and should be "
"avoided."
msgstr ""

#: ../../../LanguageExtensions.rst:6047
msgid "``#embed`` Parameters"
msgstr ""

#: ../../../LanguageExtensions.rst:6050
msgid "``clang::offset``"
msgstr ""

#: ../../../LanguageExtensions.rst:6051
msgid ""
"The ``clang::offset`` embed parameter may appear zero or one time in the "
"embed parameter sequence. Its preprocessor argument clause shall be present "
"and have the form:"
msgstr ""

#: ../../../LanguageExtensions.rst:6055
msgid "..code-block: text"
msgstr ""

#: ../../../LanguageExtensions.rst:6057
msgid "( constant-expression )"
msgstr ""

#: ../../../LanguageExtensions.rst:6059
msgid ""
"and shall be an integer constant expression. The integer constant expression "
"shall not evaluate to a value less than 0. The token ``defined`` shall not "
"appear within the constant expression."
msgstr ""

#: ../../../LanguageExtensions.rst:6063
msgid ""
"The offset will be used when reading the contents of the embedded resource "
"to specify the starting offset to begin embedding from. The resources is "
"treated as being empty if the specified offset is larger than the number of "
"bytes in the resource. The offset will be applied *before* any ``limit`` "
"parameters are applied."
msgstr ""

#: ../../../LanguageExtensions.rst:6070
msgid "Union and aggregate initialization in C"
msgstr ""

#: ../../../LanguageExtensions.rst:6072
msgid ""
"In C23 (N2900), when an object is initialized from initializer ``= {}``, all "
"elements of arrays, all members of structs, and the first members of unions "
"are empty-initialized recursively. In addition, all padding bits are "
"initialized to zero."
msgstr ""

#: ../../../LanguageExtensions.rst:6077
msgid "Clang guarantees the following behaviors:"
msgstr ""

#: ../../../LanguageExtensions.rst:6079
msgid ""
"``1:`` Clang supports initializer ``= {}`` mentioned above in all C "
"standards."
msgstr ""

#: ../../../LanguageExtensions.rst:6082
msgid ""
"``2:`` When unions are initialized from initializer ``= {}``, bytes outside "
"of the first members of unions are also initialized to zero."
msgstr ""

#: ../../../LanguageExtensions.rst:6085
msgid ""
"``3:`` When unions, structures and arrays are initialized from initializer "
"``= { initializer-list }``, all members not explicitly initialized in the "
"initializer list are empty-initialized recursively. In addition, all padding "
"bits are initialized to zero."
msgstr ""

#: ../../../LanguageExtensions.rst:6090
msgid "Currently, the above extension only applies to C source code, not C++."
msgstr ""

#: ../../../LanguageExtensions.rst:6094
msgid "Empty Objects in C"
msgstr ""

#: ../../../LanguageExtensions.rst:6095
msgid ""
"The declaration of a structure or union type which has no named members is "
"undefined behavior (C23 and earlier) or implementation-defined behavior "
"(C2y). Clang allows the declaration of a structure or union type with no "
"named members in all C language modes. `sizeof` for such a type returns `0`, "
"which is different behavior than in C++ (where the size of such an object is "
"typically `1`)."
msgstr ""

#: ../../../LanguageExtensions.rst:6104
msgid "Qualified function types in C"
msgstr ""

#: ../../../LanguageExtensions.rst:6105
msgid ""
"Declaring a function with a qualified type in C is undefined behavior (C23 "
"and earlier) or implementation-defined behavior (C2y). Clang allows a "
"function type to be specified with the ``const`` and ``volatile`` "
"qualifiers, but ignores the qualifications."
msgstr ""

#: ../../../LanguageExtensions.rst:6116
msgid ""
"Note, Clang does not allow an ``_Atomic`` function type because of explicit "
"constraints against atomically qualified (arrays and) function types."
msgstr ""
