# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../FAQ.rst:3
msgid "Frequently Asked Questions (FAQ)"
msgstr ""

#: ../../../FAQ.rst:9
msgid "Driver"
msgstr ""

#: ../../../FAQ.rst:12
msgid "I run ``clang -cc1 ...`` and get weird errors about missing headers"
msgstr ""

#: ../../../FAQ.rst:14
msgid "Given this source file:"
msgstr ""

#: ../../../FAQ.rst:25
msgid "If you run:"
msgstr ""

#: ../../../FAQ.rst:35
msgid ""
"``clang -cc1`` is the frontend, ``clang`` is the :doc:`driver "
"<DriverInternals>`.  The driver invokes the frontend with options "
"appropriate for your system.  To see these options, run:"
msgstr ""

#: ../../../FAQ.rst:43
msgid ""
"Some clang command line options are driver-only options, some are frontend-"
"only options.  Frontend-only options are intended to be used only by clang "
"developers. Users should not run ``clang -cc1`` directly, because ``-cc1`` "
"options are not guaranteed to be stable."
msgstr ""

#: ../../../FAQ.rst:48
msgid ""
"If you want to use a frontend-only option (\"a ``-cc1`` option\"), for "
"example ``-ast-dump``, then you need to take the ``clang -cc1`` line "
"generated by the driver and add the option you need.  Alternatively, you can "
"run ``clang -Xclang <option> ...`` to force the driver pass ``<option>`` to "
"``clang -cc1``."
msgstr ""

#: ../../../FAQ.rst:55
msgid ""
"I get errors about some headers being missing (``stddef.h``, ``stdarg.h``)"
msgstr ""

#: ../../../FAQ.rst:57
msgid ""
"Some header files (``stddef.h``, ``stdarg.h``, and others) are shipped with "
"Clang --- these are called builtin includes.  Clang searches for them in a "
"directory relative to the location of the ``clang`` binary.  If you moved "
"the ``clang`` binary, you need to move the builtin headers, too."
msgstr ""

#: ../../../FAQ.rst:62
msgid ""
"More information can be found in the :ref:`libtooling_builtin_includes` "
"section."
msgstr ""
