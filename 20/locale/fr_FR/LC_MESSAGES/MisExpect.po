# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MisExpect.rst:3
msgid "Misexpect"
msgstr ""

#: ../../../MisExpect.rst:4
msgid "Contents"
msgstr ""

#: ../../../MisExpect.rst:9
msgid ""
"When developers use ``llvm.expect`` intrinsics, i.e., through use of "
"``__builtin_expect(...)``, they are trying to communicate how their code is "
"expected to behave at runtime to the optimizer. These annotations, however, "
"can be incorrect for a variety of reasons: changes to the code base "
"invalidate them silently, the developer mis-annotated them (e.g., using "
"``LIKELY`` instead of ``UNLIKELY``), or perhaps they assumed something "
"incorrectly when they wrote the annotation. Regardless of why, it is useful "
"to detect these situations so that the optimizer can make more useful "
"decisions about the code."
msgstr ""

#: ../../../MisExpect.rst:18
msgid ""
"MisExpect diagnostics are intended to help developers identify and address "
"these situations, by comparing the branch weights added by the ``llvm."
"expect`` intrinsic to those collected through profiling. Whenever these "
"values are mismatched, a diagnostic is surfaced to the user. Details on how "
"the checks operate in the LLVM backed can be found in LLVM's documentation."
msgstr ""

#: ../../../MisExpect.rst:24
msgid ""
"By default MisExpect checking is quite strict, because the use of the ``llvm."
"expect`` intrinsic is designed for specialized cases, where the outcome of a "
"condition is severely skewed. As a result, the optimizer can be extremely "
"aggressive, which can result in performance degradation if the outcome is "
"less predictable than the annotation suggests. Even when the annotation is "
"correct 90% of the time, it may be beneficial to either remove the "
"annotation or to use a different intrinsic that can communicate the "
"probability more directly."
msgstr ""

#: ../../../MisExpect.rst:32
msgid ""
"Because this may be too strict, MisExpect diagnostics are not enabled by "
"default, and support an additional flag to tolerate some deviation from the "
"exact thresholds. The ``-fdiagnostic-misexpect-tolerance=N`` accepts "
"deviations when comparing branch weights within ``N%`` of the expected "
"values. So passing ``-fdiagnostic-misexpect-tolerance=5`` will not report "
"diagnostic messages if the branch weight from the profile is within 5% of "
"the weight added by the ``llvm.expect`` intrinsic."
msgstr ""

#: ../../../MisExpect.rst:40
msgid ""
"MisExpect diagnostics are also available in the form of optimization "
"remarks, which can be serialized and processed through the ``opt-viewer.py`` "
"scripts in LLVM."
msgstr ""

#: ../../../MisExpect.rst:46
msgid ""
"Enables optimization remarks for misexpect when profiling data conflicts "
"with use of ``llvm.expect`` intrinsics."
msgstr ""

#: ../../../MisExpect.rst:52
msgid ""
"Enables misexpect warnings when profiling data conflicts with use of ``llvm."
"expect`` intrinsics."
msgstr ""

#: ../../../MisExpect.rst:57
msgid ""
"Relaxes misexpect checking to tolerate profiling values within N% of the "
"expected branch weight. e.g., a value of ``N=5`` allows misexpect to check "
"against ``0.95 * Threshold``"
msgstr ""

#: ../../../MisExpect.rst:61
msgid ""
"LLVM supports 4 types of profile formats: Frontend, IR, CS-IR, and Sampling. "
"MisExpect Diagnostics are compatible with all Profiling formats."
msgstr ""

#: ../../../MisExpect.rst:65
msgid "Profile Type"
msgstr ""

#: ../../../MisExpect.rst:65
msgid "Description"
msgstr ""

#: ../../../MisExpect.rst:67
msgid "Frontend"
msgstr ""

#: ../../../MisExpect.rst:67
msgid ""
"Profiling instrumentation added during compilation by the frontend, i.e. "
"``clang``"
msgstr ""

#: ../../../MisExpect.rst:69
msgid "IR"
msgstr ""

#: ../../../MisExpect.rst:69
msgid "Profiling instrumentation added during by the LLVM backend"
msgstr ""

#: ../../../MisExpect.rst:71
msgid "CS-IR"
msgstr ""

#: ../../../MisExpect.rst:71
msgid "Context Sensitive IR based profiles"
msgstr ""

#: ../../../MisExpect.rst:73
msgid "Sampling"
msgstr ""

#: ../../../MisExpect.rst:73
msgid ""
"Profiles collected through sampling with external tools, such as ``perf`` on "
"Linux"
msgstr ""
