# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../RealtimeSanitizer.rst:3
msgid "RealtimeSanitizer"
msgstr ""

#: ../../../RealtimeSanitizer.rst:9
msgid "Introduction"
msgstr ""

#: ../../../RealtimeSanitizer.rst:10
msgid ""
"RealtimeSanitizer (a.k.a. RTSan) is a real-time safety testing tool for C "
"and C++ projects. RTSan can be used to detect real-time violations, i.e. "
"calls to methods that are not safe for use in functions with deterministic "
"run time requirements. RTSan considers any function marked with the "
"``[[clang::nonblocking]]`` attribute to be a real-time function. At run-"
"time, if RTSan detects a call to ``malloc``, ``free``, "
"``pthread_mutex_lock``, or anything else known to have a non-deterministic "
"execution time in a function marked ``[[clang::nonblocking]]`` it raises an "
"error."
msgstr ""

#: ../../../RealtimeSanitizer.rst:19
msgid ""
"RTSan performs its analysis at run-time but shares the ``[[clang::"
"nonblocking]]`` attribute with the :doc:`FunctionEffectAnalysis` system, "
"which operates at compile-time to detect potential real-time safety "
"violations. For comprehensive detection of real-time safety issues, it is "
"recommended to use both systems together."
msgstr ""

#: ../../../RealtimeSanitizer.rst:24
msgid "The runtime slowdown introduced by RealtimeSanitizer is negligible."
msgstr ""

#: ../../../RealtimeSanitizer.rst:27
msgid "How to build"
msgstr ""

#: ../../../RealtimeSanitizer.rst:29
msgid ""
"Build LLVM/Clang with `CMake <https://llvm.org/docs/CMake.html>`_ and enable "
"the ``compiler-rt`` runtime. An example CMake configuration that will allow "
"for the use/testing of RealtimeSanitizer:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:38
msgid "Usage"
msgstr ""

#: ../../../RealtimeSanitizer.rst:40
msgid "There are two requirements:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:42
msgid "The code must be compiled with the ``-fsanitize=realtime`` flag."
msgstr ""

#: ../../../RealtimeSanitizer.rst:43
msgid ""
"Functions that are subject to real-time constraints must be marked with the "
"``[[clang::nonblocking]]`` attribute."
msgstr ""

#: ../../../RealtimeSanitizer.rst:46
msgid ""
"Typically, these attributes should be added onto the functions that are "
"entry points for threads with real-time priority. These threads are subject "
"to a fixed callback time, such as audio callback threads or rendering loops "
"in video game code."
msgstr ""

#: ../../../RealtimeSanitizer.rst:68
msgid ""
"If a real-time safety violation is detected in a ``[[clang::nonblocking]]`` "
"context, or any function invoked by that function, the program will exit "
"with a non-zero exit code."
msgstr ""

#: ../../../RealtimeSanitizer.rst:92
msgid "Blocking functions"
msgstr ""

#: ../../../RealtimeSanitizer.rst:94
msgid ""
"Calls to system library functions such as ``malloc`` are automatically "
"caught by RealtimeSanitizer. Real-time programmers may also write their own "
"blocking (real-time unsafe) functions that they wish RealtimeSanitizer to be "
"aware of. RealtimeSanitizer will raise an error at run time if any function "
"attributed with ``[[clang::blocking]]`` is called in a ``[[clang::"
"nonblocking]]`` context."
msgstr ""

#: ../../../RealtimeSanitizer.rst:133
msgid "Run-time flags"
msgstr ""

#: ../../../RealtimeSanitizer.rst:135
msgid ""
"RealtimeSanitizer supports a number of run-time flags, which can be "
"specified in the ``RTSAN_OPTIONS`` environment variable:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:142
msgid "Or at compile-time by providing the symbol ``__rtsan_default_options``:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:151
msgid ""
"You can see all sanitizer options (some of which are unsupported) by using "
"the ``help`` flag:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:157
msgid "A **partial** list of flags RealtimeSanitizer respects:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:159
msgid "Run-time Flags"
msgstr ""

#: ../../../RealtimeSanitizer.rst:163
msgid "Flag name"
msgstr ""

#: ../../../RealtimeSanitizer.rst:164
msgid "Default value"
msgstr ""

#: ../../../RealtimeSanitizer.rst:165
msgid "Type"
msgstr ""

#: ../../../RealtimeSanitizer.rst:166
msgid "Short description"
msgstr ""

#: ../../../RealtimeSanitizer.rst:167
msgid "``halt_on_error``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:168 ../../../RealtimeSanitizer.rst:172
#: ../../../RealtimeSanitizer.rst:192 ../../../RealtimeSanitizer.rst:200
msgid "``true``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:169 ../../../RealtimeSanitizer.rst:173
#: ../../../RealtimeSanitizer.rst:177 ../../../RealtimeSanitizer.rst:185
#: ../../../RealtimeSanitizer.rst:189 ../../../RealtimeSanitizer.rst:193
#: ../../../RealtimeSanitizer.rst:201
msgid "boolean"
msgstr ""

#: ../../../RealtimeSanitizer.rst:170
msgid "Exit after first reported error."
msgstr ""

#: ../../../RealtimeSanitizer.rst:171
msgid "``suppress_equal_stacks``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:174
msgid ""
"If true, suppress duplicate reports (i.e. only print each unique error "
"once). Only particularly useful when ``halt_on_error=false``."
msgstr ""

#: ../../../RealtimeSanitizer.rst:175
msgid "``print_stats_on_exit``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:176 ../../../RealtimeSanitizer.rst:184
msgid "``false``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:178
msgid "Print stats on exit. Includes total and unique errors."
msgstr ""

#: ../../../RealtimeSanitizer.rst:179
msgid "``color``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:180
msgid "``\"auto\"``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:181
msgid "string"
msgstr ""

#: ../../../RealtimeSanitizer.rst:182
msgid "Colorize reports: (always|never|auto)."
msgstr ""

#: ../../../RealtimeSanitizer.rst:183
msgid "``fast_unwind_on_fatal``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:186
msgid ""
"If available, use the fast frame-pointer-based unwinder on detected errors. "
"If true, ensure the code under test has been compiled with frame pointers "
"with ``-fno-omit-frame-pointers`` or similar."
msgstr ""

#: ../../../RealtimeSanitizer.rst:187
msgid "``abort_on_error``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:188
msgid "OS dependent"
msgstr ""

#: ../../../RealtimeSanitizer.rst:190
msgid ""
"If true, the tool calls ``abort()`` instead of ``_exit()`` after printing "
"the error report. On some OSes (MacOS, for exmple) this is beneficial "
"because a better stack trace is emitted on crash."
msgstr ""

#: ../../../RealtimeSanitizer.rst:191
msgid "``symbolize``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:194
msgid ""
"If set, use the symbolizer to turn virtual addresses to file/line locations. "
"If false, can greatly speed up the error reporting."
msgstr ""

#: ../../../RealtimeSanitizer.rst:195
msgid "``suppressions``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:196
msgid "``\"\"``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:197
msgid "path"
msgstr ""

#: ../../../RealtimeSanitizer.rst:198
msgid ""
"If set to a valid suppressions file, will suppress issue reporting. See "
"details in `Disabling and Suppressing`_."
msgstr ""

#: ../../../RealtimeSanitizer.rst:199
msgid "``verify_interceptors``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:202
msgid ""
"If true, verifies interceptors are working at initialization. The program "
"will abort with error ``==ERROR: Interceptors are not working. This may be "
"because RealtimeSanitizer is loaded too late (e.g. via dlopen)`` if an issue "
"is detected."
msgstr ""

#: ../../../RealtimeSanitizer.rst:204
msgid ""
"Some issues with flags can be debugged using the ``verbosity=$NUM`` flag:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:214
msgid "Additional customization"
msgstr ""

#: ../../../RealtimeSanitizer.rst:216
msgid ""
"In addition to ``__rtsan_default_options`` outlined above, you can provide "
"definitions of other functions that affect how RTSan operates."
msgstr ""

#: ../../../RealtimeSanitizer.rst:218
msgid ""
"To be notified on every error reported by RTsan, provide a definition of "
"``__sanitizer_report_error_summary``."
msgstr ""

#: ../../../RealtimeSanitizer.rst:227
msgid "The error summary will be of the form:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:233
msgid ""
"To register a callback which will be invoked before a RTSan kills the "
"process:"
msgstr ""

#: ../../../RealtimeSanitizer.rst:253
msgid "Disabling and suppressing"
msgstr ""

#: ../../../RealtimeSanitizer.rst:255
msgid ""
"There are multiple ways to disable error reporting when using "
"RealtimeSanitizer."
msgstr ""

#: ../../../RealtimeSanitizer.rst:257
msgid ""
"In general, ``ScopedDisabler`` should be preferred, as it is the most "
"performant."
msgstr ""

#: ../../../RealtimeSanitizer.rst:259
msgid "Suppression methods"
msgstr ""

#: ../../../RealtimeSanitizer.rst:263
msgid "Method"
msgstr ""

#: ../../../RealtimeSanitizer.rst:264
msgid "Specified at?"
msgstr ""

#: ../../../RealtimeSanitizer.rst:265
msgid "Scope"
msgstr ""

#: ../../../RealtimeSanitizer.rst:266
msgid "Run-time cost"
msgstr ""

#: ../../../RealtimeSanitizer.rst:267
msgid "Description"
msgstr ""

#: ../../../RealtimeSanitizer.rst:268 ../../../RealtimeSanitizer.rst:286
msgid "``ScopedDisabler``"
msgstr ""

#: ../../../RealtimeSanitizer.rst:269
msgid "Compile-time"
msgstr ""

#: ../../../RealtimeSanitizer.rst:270 ../../../RealtimeSanitizer.rst:280
msgid "Stack"
msgstr ""

#: ../../../RealtimeSanitizer.rst:271
msgid "Very low"
msgstr ""

#: ../../../RealtimeSanitizer.rst:272
msgid ""
"Violations are ignored for the lifetime of the ``ScopedDisabler`` object."
msgstr ""

#: ../../../RealtimeSanitizer.rst:273
msgid "``function-name-matches`` suppression"
msgstr ""

#: ../../../RealtimeSanitizer.rst:274 ../../../RealtimeSanitizer.rst:279
msgid "Run-time"
msgstr ""

#: ../../../RealtimeSanitizer.rst:275
msgid "Single function"
msgstr ""

#: ../../../RealtimeSanitizer.rst:276
msgid "Medium"
msgstr ""

#: ../../../RealtimeSanitizer.rst:277
msgid ""
"Suppresses intercepted and ``[[clang::blocking]]`` function calls by name."
msgstr ""

#: ../../../RealtimeSanitizer.rst:278
msgid "``call-stack-contains`` suppression"
msgstr ""

#: ../../../RealtimeSanitizer.rst:281
msgid "High"
msgstr ""

#: ../../../RealtimeSanitizer.rst:282
msgid "Suppresses any stack trace contaning the specified pattern."
msgstr ""

#: ../../../RealtimeSanitizer.rst:288
msgid ""
"At compile time, RealtimeSanitizer may be disabled using ``__rtsan::"
"ScopedDisabler``. RTSan ignores any errors originating within the "
"``ScopedDisabler`` instance variable scope."
msgstr ""

#: ../../../RealtimeSanitizer.rst:301
msgid ""
"If RealtimeSanitizer is not enabled at compile time (i.e., the code is not "
"compiled with the ``-fsanitize=realtime`` flag), the ``ScopedDisabler`` is "
"compiled as a no-op."
msgstr ""

#: ../../../RealtimeSanitizer.rst:303
msgid ""
"In C, you can use the ``__rtsan_disable()`` and ``rtsan_enable()`` functions "
"to manually disable and re-enable RealtimeSanitizer checks."
msgstr ""

#: ../../../RealtimeSanitizer.rst:320
msgid ""
"Each call to ``__rtsan_disable()`` must be paired with a subsequent call to "
"``__rtsan_enable()`` to restore normal sanitizer functionality. If a "
"corresponding ``rtsan_enable()`` call is not made, the behavior is undefined."
msgstr ""

#: ../../../RealtimeSanitizer.rst:323
msgid "Suppression file"
msgstr ""

#: ../../../RealtimeSanitizer.rst:325
msgid ""
"At run-time, suppressions may be specified using a suppressions file passed "
"in ``RTSAN_OPTIONS``. Run-time suppression may be useful if the source "
"cannot be changed."
msgstr ""

#: ../../../RealtimeSanitizer.rst:337
msgid "Suppressions specified in this file are one of two flavors."
msgstr ""

#: ../../../RealtimeSanitizer.rst:339
msgid ""
"``function-name-matches`` suppresses reporting of any intercepted library "
"call, or function marked ``[[clang::blocking]]`` by name. If, for instance, "
"you know that ``malloc`` is real-time safe on your system, you can disable "
"the check for it via ``function-name-matches:malloc``."
msgstr ""

#: ../../../RealtimeSanitizer.rst:341
msgid ""
"``call-stack-contains`` suppresses reporting of errors in any stack that "
"contains a string matching the pattern specified. For example, suppressing "
"error reporting of any non-real-time-safe behavior in ``std::vector`` may be "
"specified ``call-stack-contains:std::*vector``. You must include symbols in "
"your build for this method to be effective, unsymbolicated stack traces "
"cannot be matched. ``call-stack-contains`` has the highest run-time cost of "
"any method of suppression."
msgstr ""

#: ../../../RealtimeSanitizer.rst:343
msgid ""
"Patterns may be exact matches or are \"regex-light\" patterns, containing "
"special characters such as ``^$*``."
msgstr ""

#: ../../../RealtimeSanitizer.rst:345
msgid ""
"The number of potential errors suppressed via this method may be seen on "
"exit when using the ``print_stats_on_exit`` flag."
msgstr ""

#: ../../../RealtimeSanitizer.rst:348
msgid "Compile-time sanitizer detection"
msgstr ""

#: ../../../RealtimeSanitizer.rst:350
msgid ""
"Clang provides the pre-processor macro ``__has_feature`` which may be used "
"to detect if RealtimeSanitizer is enabled at compile-time."
msgstr ""
