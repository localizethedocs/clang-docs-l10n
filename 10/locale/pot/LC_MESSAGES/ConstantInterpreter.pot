# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ConstantInterpreter.rst:3
msgid "Constant Interpreter"
msgstr ""

#: ../../../ConstantInterpreter.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ConstantInterpreter.rst:11
msgid ""
"The constexpr interpreter aims to replace the existing tree evaluator in "
"clang, improving performance on constructs which are executed inefficiently "
"by the evaluator. The interpreter is activated using the following flags:"
msgstr ""

#: ../../../ConstantInterpreter.rst:13
msgid ""
"``-fexperimental-new-constant-interpreter`` enables the interpreter, "
"emitting an error if an unsupported feature is encountered"
msgstr ""

#: ../../../ConstantInterpreter.rst:16
msgid "Bytecode Compilation"
msgstr ""

#: ../../../ConstantInterpreter.rst:18
msgid ""
"Bytecode compilation is handled in ``ByteCodeStmtGen.h`` for statements and "
"``ByteCodeExprGen.h`` for expressions. The compiler has two different "
"backends: one to generate bytecode for functions (``ByteCodeEmitter``) and "
"one to directly evaluate expressions as they are compiled, without "
"generating bytecode (``EvalEmitter``). All functions are compiled to "
"bytecode, while toplevel expressions used in constant contexts are directly "
"evaluated since the bytecode would never be reused. This mechanism aims to "
"pave the way towards replacing the evaluator, improving its performance on "
"functions and loops, while being just as fast on single-use toplevel "
"expressions."
msgstr ""

#: ../../../ConstantInterpreter.rst:20
msgid ""
"The interpreter relies on stack-based, strongly-typed opcodes. The glue "
"logic between the code generator, along with the enumeration and description "
"of opcodes, can be found in ``Opcodes.td``. The opcodes are implemented as "
"generic template methods in ``Interp.h`` and instantiated with the relevant "
"primitive types by the interpreter loop or by the evaluating emitter."
msgstr ""

#: ../../../ConstantInterpreter.rst:23
msgid "Primitive Types"
msgstr ""

#: ../../../ConstantInterpreter.rst:25
msgid "``PT_{U|S}int{8|16|32|64}``"
msgstr ""

#: ../../../ConstantInterpreter.rst:27
msgid ""
"Signed or unsigned integers of a specific bit width, implemented using the "
"```Integral``` type."
msgstr ""

#: ../../../ConstantInterpreter.rst:29
msgid "``PT_{U|S}intFP``"
msgstr ""

#: ../../../ConstantInterpreter.rst:31
msgid ""
"Signed or unsigned integers of an arbitrary, but fixed width used to "
"implement integral types which are required by the target, but are not "
"supported by the host. Under the hood, they rely on APValue. The "
"``Integral`` specialisation for these types is required by opcodes to share "
"an implementation with fixed integrals."
msgstr ""

#: ../../../ConstantInterpreter.rst:36
msgid "``PT_Bool``"
msgstr ""

#: ../../../ConstantInterpreter.rst:38
msgid ""
"Representation for boolean types, essentially a 1-bit unsigned ``Integral``."
msgstr ""

#: ../../../ConstantInterpreter.rst:40
msgid "``PT_RealFP``"
msgstr ""

#: ../../../ConstantInterpreter.rst:42
msgid ""
"Arbitrary, but fixed precision floating point numbers. Could be specialised "
"in the future similarly to integers in order to improve floating point "
"performance."
msgstr ""

#: ../../../ConstantInterpreter.rst:45
msgid "``PT_Ptr``"
msgstr ""

#: ../../../ConstantInterpreter.rst:47
msgid "Pointer type, defined in ``\"Pointer.h\"``."
msgstr ""

#: ../../../ConstantInterpreter.rst:49
msgid "``PT_FnPtr``"
msgstr ""

#: ../../../ConstantInterpreter.rst:51
msgid ""
"Function pointer type, can also be a null function pointer. Defined in "
"``\"Pointer.h\"``."
msgstr ""

#: ../../../ConstantInterpreter.rst:53
msgid "``PT_MemPtr``"
msgstr ""

#: ../../../ConstantInterpreter.rst:55
msgid ""
"Member pointer type, can also be a null member pointer. Defined in "
"``\"Pointer.h\"``"
msgstr ""

#: ../../../ConstantInterpreter.rst:58
msgid "Composite types"
msgstr ""

#: ../../../ConstantInterpreter.rst:60
msgid ""
"The interpreter distinguishes two kinds of composite types: arrays and "
"records. Unions are represented as records, except a single field can be "
"marked as active. The contents of inactive fields are kept until they are "
"reactivated and overwritten."
msgstr ""

#: ../../../ConstantInterpreter.rst:65
msgid "Bytecode Execution"
msgstr ""

#: ../../../ConstantInterpreter.rst:67
msgid ""
"Bytecode is executed using a stack-based interpreter. The execution context "
"consists of an ``InterpStack``, along with a chain of ``InterpFrame`` "
"objects storing the call frames. Frames are built by call instructions and "
"destroyed by return instructions. They perform one allocation to reserve "
"space for all locals in a single block. These objects store all the required "
"information to emit stack traces whenever evaluation fails."
msgstr ""

#: ../../../ConstantInterpreter.rst:70
msgid "Memory Organisation"
msgstr ""

#: ../../../ConstantInterpreter.rst:72
msgid ""
"Memory management in the interpreter relies on 3 data structures: ``Block`` "
"object which store the data and associated inline metadata, ``Pointer`` "
"objects which refer to or into blocks, and ``Descriptor`` structures which "
"describe blocks and subobjects nested inside blocks."
msgstr ""

#: ../../../ConstantInterpreter.rst:78
msgid "Blocks"
msgstr ""

#: ../../../ConstantInterpreter.rst:80
msgid ""
"Blocks contain data interleaved with metadata. They are allocated either "
"statically in the code generator (globals, static members, dummy parameter "
"values etc.) or dynamically in the interpreter, when creating the frame "
"containing the local variables of a function. Blocks are associated with a "
"descriptor that characterises the entire allocation, along with a few "
"additional attributes:"
msgstr ""

#: ../../../ConstantInterpreter.rst:86
msgid ""
"``IsStatic`` indicates whether the block has static duration in the "
"interpreter, i.e. it is not a local in a frame."
msgstr ""

#: ../../../ConstantInterpreter.rst:88
msgid ""
"``IsExtern`` indicates that the block was created for an extern and the "
"storage cannot be read or written."
msgstr ""

#: ../../../ConstantInterpreter.rst:90
msgid ""
"``DeclID`` identifies each global declaration (it is set to an invalid and "
"irrelevant value for locals) in order to prevent illegal writes and reads "
"involving globals and temporaries with static storage duration."
msgstr ""

#: ../../../ConstantInterpreter.rst:92
msgid ""
"Static blocks are never deallocated, but local ones might be deallocated "
"even when there are live pointers to them. Pointers are only valid as long "
"as the blocks they point to are valid, so a block with pointers to it whose "
"lifetime ends is kept alive until all pointers to it go out of scope. Since "
"the frame is destroyed on function exit, such blocks are turned into a "
"``DeadBlock`` and copied to storage managed by the interpreter itself, not "
"the frame. Reads and writes to these blocks are illegal and cause an "
"appropriate diagnostic to be emitted. When the last pointer goes out of "
"scope, dead blocks are also deallocated."
msgstr ""

#: ../../../ConstantInterpreter.rst:94
msgid ""
"The lifetime of blocks is managed through 3 methods stored in the descriptor "
"of the block:"
msgstr ""

#: ../../../ConstantInterpreter.rst:96
msgid ""
"**CtorFn**: initializes the metadata which is store in the block, alongside "
"actual data. Invokes the default constructors of objects which are not "
"trivial (``Pointer``, ``RealFP``, etc.)"
msgstr ""

#: ../../../ConstantInterpreter.rst:97
msgid "**DtorFn**: invokes the destructors of non-trivial objects."
msgstr ""

#: ../../../ConstantInterpreter.rst:98
msgid "**MoveFn**: moves a block to dead storage."
msgstr ""

#: ../../../ConstantInterpreter.rst:100
msgid ""
"Non-static blocks track all the pointers into them through an intrusive "
"doubly-linked list, this is required in order to adjust all pointers when "
"transforming a block into a dead block."
msgstr ""

#: ../../../ConstantInterpreter.rst:103
msgid "Descriptors"
msgstr ""

#: ../../../ConstantInterpreter.rst:105
msgid ""
"Descriptor are generated at bytecode compilation time and contain "
"information required to determine if a particular memory access is allowed "
"in constexpr. Even though there is a single descriptor object, it encodes "
"information for several kinds of objects:"
msgstr ""

#: ../../../ConstantInterpreter.rst:107
msgid "**Primitives**"
msgstr ""

#: ../../../ConstantInterpreter.rst:109
msgid "A block containing a primitive reserved storage only for the primitive."
msgstr ""

#: ../../../ConstantInterpreter.rst:111
msgid "**Arrays of primitives**"
msgstr ""

#: ../../../ConstantInterpreter.rst:113
msgid ""
"An array of primitives contains a pointer to an ``InitMap`` storage as its "
"first field: the initialisation map is a bit map indicating all elements of "
"the array which were initialised. If the pointer is null, no elements were "
"initialised, while a value of ``(InitMap)-1`` indicates that the object was "
"fully initialised. when all fields are initialised, the map is deallocated "
"and replaced with that token."
msgstr ""

#: ../../../ConstantInterpreter.rst:115
msgid ""
"Array elements are stored sequentially, without padding, after the pointer "
"to the map."
msgstr ""

#: ../../../ConstantInterpreter.rst:117
msgid "**Arrays of composites and records**"
msgstr ""

#: ../../../ConstantInterpreter.rst:119
msgid ""
"Each element in an array of composites is preceded by an "
"``InlineDescriptor``. Descriptors and elements are stored sequentially in "
"the block. Records are laid out identically to arrays of composites: each "
"field and base class is preceded by an inline descriptor. The "
"``InlineDescriptor`` has the following field:"
msgstr ""

#: ../../../ConstantInterpreter.rst:121
msgid ""
"**Offset**: byte offset into the array or record, used to step back to the "
"parent array or record."
msgstr ""

#: ../../../ConstantInterpreter.rst:122
msgid "**IsConst**: flag indicating if the field is const-qualified."
msgstr ""

#: ../../../ConstantInterpreter.rst:123
msgid ""
"**IsInitialized**: flag indicating whether the field or element was "
"initialized. For non-primitive fields, this is only relevant for base "
"classes."
msgstr ""

#: ../../../ConstantInterpreter.rst:124
msgid ""
"**IsBase**: flag indicating whether the record is a base class. In that "
"case, the offset can be used to identify the derived class."
msgstr ""

#: ../../../ConstantInterpreter.rst:125
msgid "**IsActive**: indicates if the field is the active field of a union."
msgstr ""

#: ../../../ConstantInterpreter.rst:126
msgid "**IsMutable**: indicates if the field is marked as mutable."
msgstr ""

#: ../../../ConstantInterpreter.rst:128
msgid ""
"Inline descriptors are filled in by the `CtorFn` of blocks, which leaves "
"storage in an uninitialised, but valid state."
msgstr ""

#: ../../../ConstantInterpreter.rst:131
msgid "Pointers"
msgstr ""

#: ../../../ConstantInterpreter.rst:133
msgid ""
"Pointers track a ``Pointee``, the block to which they point or ``nullptr`` "
"for null pointers, along with a ``Base`` and an ``Offset``. The base "
"identifies the innermost field, while the offset points to an array element "
"relative to the base (including one-past-end pointers). Most subobject the "
"pointer points to in block, while the offset identifies the array element "
"the pointer points to. These two fields allow all pointers to be uniquely "
"identified and disambiguated."
msgstr ""

#: ../../../ConstantInterpreter.rst:135
msgid "As an example, consider the following structure:"
msgstr ""

#: ../../../ConstantInterpreter.rst:152
msgid ""
"On the target, ``&a`` and ``&a.b.x`` are equal. So are ``&a.c[0]`` and ``&a."
"c[0].a``. In the interpreter, all these pointers must be distinguished since "
"the are all allowed to address distinct range of memory."
msgstr ""

#: ../../../ConstantInterpreter.rst:154
msgid ""
"In the interpreter, the object would require 240 bytes of storage and would "
"have its field interleaved with metadata. The pointers which can be derived "
"to the object are illustrated in the following diagram:"
msgstr ""

#: ../../../ConstantInterpreter.rst:167
msgid ""
"The ``Base`` offset of all pointers points to the start of a field or an "
"array and is preceded by an inline descriptor (unless ``Base == 0``, "
"pointing to the root). All the relevant attributes can be read from either "
"the inline descriptor or the descriptor of the block."
msgstr ""

#: ../../../ConstantInterpreter.rst:169
msgid ""
"Array elements are identified by the ``Offset`` field of pointers, pointing "
"to past the inline descriptors for composites and before the actual data in "
"the case of primitive arrays. The ``Offset`` points to the offset where "
"primitives can be read from. As an example, ``a.c + 1`` would have the same "
"base as ``a.c`` since it is an element of ``a.c``, but its offset would "
"point to ``&a.c[1]``. The ``*`` operation narrows the scope of the pointer, "
"adjusting the base to ``&a.c[1]``. The reverse operator, ``&``, expands the "
"scope of ``&a.c[1]``, turning it into ``a.c + 1``. When a one-past-end "
"pointer is narrowed, its offset is set to ``-1`` to indicate that it is an "
"invalid value (expanding returns the past-the-end pointer). As a special "
"case, narrowing ``&a.c`` results in ``&a.c[0]``. The `narrow` and `expand` "
"methods can be used to follow the chain of equivalent pointers."
msgstr ""

#: ../../../ConstantInterpreter.rst:172
msgid "TODO"
msgstr ""

#: ../../../ConstantInterpreter.rst:175
msgid "Missing Language Features"
msgstr ""

#: ../../../ConstantInterpreter.rst:177
msgid "Definition of externs must override previous declaration"
msgstr ""

#: ../../../ConstantInterpreter.rst:178
msgid "Changing the active field of unions"
msgstr ""

#: ../../../ConstantInterpreter.rst:179
msgid "Union copy constructors"
msgstr ""

#: ../../../ConstantInterpreter.rst:180
msgid "``typeid``"
msgstr ""

#: ../../../ConstantInterpreter.rst:181
msgid "``volatile``"
msgstr ""

#: ../../../ConstantInterpreter.rst:182
msgid "``__builtin_constant_p``"
msgstr ""

#: ../../../ConstantInterpreter.rst:183
msgid "``std::initializer_list``"
msgstr ""

#: ../../../ConstantInterpreter.rst:184
msgid "lambdas"
msgstr ""

#: ../../../ConstantInterpreter.rst:185
msgid "range-based for loops"
msgstr ""

#: ../../../ConstantInterpreter.rst:186
msgid "``vector_size``"
msgstr ""

#: ../../../ConstantInterpreter.rst:187
msgid "``dynamic_cast``"
msgstr ""

#: ../../../ConstantInterpreter.rst:190
msgid "Known Bugs"
msgstr ""

#: ../../../ConstantInterpreter.rst:192
msgid "Pointer comparison for equality needs to narrow/expand pointers"
msgstr ""

#: ../../../ConstantInterpreter.rst:193
msgid ""
"If execution fails, memory storing APInts and APFloats is leaked when the "
"stack is cleared"
msgstr ""
