# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../LeakSanitizer.rst:3
msgid "LeakSanitizer"
msgstr ""

#: ../../../LeakSanitizer.rst:9
msgid "Introduction"
msgstr ""

#: ../../../LeakSanitizer.rst:11
msgid ""
"LeakSanitizer is a run-time memory leak detector. It can be combined with :"
"doc:`AddressSanitizer` to get both memory error and leak detection, or used "
"in a stand-alone mode. LSan adds almost no performance overhead until the "
"very end of the process, at which point there is an extra leak detection "
"phase."
msgstr ""

#: ../../../LeakSanitizer.rst:18
msgid "Usage"
msgstr ""

#: ../../../LeakSanitizer.rst:20
msgid ""
"LeakSanitizer is supported on x86\\_64 Linux and macOS. In order to use it, "
"simply build your program with :doc:`AddressSanitizer`:"
msgstr ""

#: ../../../LeakSanitizer.rst:41
msgid ""
"To use LeakSanitizer in stand-alone mode, link your program with ``-"
"fsanitize=leak`` flag. Make sure to use ``clang`` (not ``ld``) for the link "
"step, so that it would link in proper LeakSanitizer run-time library into "
"the final executable."
msgstr ""

#: ../../../LeakSanitizer.rst:47
msgid "More Information"
msgstr ""

#: ../../../LeakSanitizer.rst:49
msgid ""
"`<https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer>`_"
msgstr ""
