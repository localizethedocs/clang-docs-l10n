# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AttributeReference.rst:9
msgid "Attributes in Clang"
msgstr ""

#: ../../../AttributeReference.rst:18
msgid "Introduction"
msgstr ""

#: ../../../AttributeReference.rst:20
msgid "This page lists the attributes currently supported by Clang."
msgstr ""

#: ../../../AttributeReference.rst:23
msgid "Function Attributes"
msgstr ""

#: ../../../AttributeReference.rst:27
msgid "#pragma omp declare simd"
msgstr ""

#: ../../../AttributeReference.rst:28 ../../../AttributeReference.rst:64
#: ../../../AttributeReference.rst:104 ../../../AttributeReference.rst:133
#: ../../../AttributeReference.rst:147 ../../../AttributeReference.rst:164
#: ../../../AttributeReference.rst:174 ../../../AttributeReference.rst:207
#: ../../../AttributeReference.rst:248 ../../../AttributeReference.rst:268
#: ../../../AttributeReference.rst:281 ../../../AttributeReference.rst:292
#: ../../../AttributeReference.rst:318 ../../../AttributeReference.rst:513
#: ../../../AttributeReference.rst:564 ../../../AttributeReference.rst:584
#: ../../../AttributeReference.rst:652 ../../../AttributeReference.rst:720
#: ../../../AttributeReference.rst:788 ../../../AttributeReference.rst:802
#: ../../../AttributeReference.rst:827 ../../../AttributeReference.rst:842
#: ../../../AttributeReference.rst:871 ../../../AttributeReference.rst:933
#: ../../../AttributeReference.rst:995 ../../../AttributeReference.rst:1058
#: ../../../AttributeReference.rst:1098 ../../../AttributeReference.rst:1235
#: ../../../AttributeReference.rst:1300 ../../../AttributeReference.rst:1318
#: ../../../AttributeReference.rst:1330 ../../../AttributeReference.rst:1357
#: ../../../AttributeReference.rst:1422 ../../../AttributeReference.rst:1460
#: ../../../AttributeReference.rst:1483 ../../../AttributeReference.rst:1499
#: ../../../AttributeReference.rst:1519 ../../../AttributeReference.rst:1539
#: ../../../AttributeReference.rst:1552 ../../../AttributeReference.rst:1596
#: ../../../AttributeReference.rst:1614 ../../../AttributeReference.rst:1657
#: ../../../AttributeReference.rst:1682 ../../../AttributeReference.rst:1700
#: ../../../AttributeReference.rst:1719 ../../../AttributeReference.rst:1742
#: ../../../AttributeReference.rst:1758 ../../../AttributeReference.rst:1782
#: ../../../AttributeReference.rst:1809 ../../../AttributeReference.rst:1849
#: ../../../AttributeReference.rst:1886 ../../../AttributeReference.rst:1906
#: ../../../AttributeReference.rst:1920 ../../../AttributeReference.rst:1935
#: ../../../AttributeReference.rst:1950 ../../../AttributeReference.rst:1989
#: ../../../AttributeReference.rst:2001 ../../../AttributeReference.rst:2025
#: ../../../AttributeReference.rst:2037 ../../../AttributeReference.rst:2057
#: ../../../AttributeReference.rst:2118 ../../../AttributeReference.rst:2164
#: ../../../AttributeReference.rst:2180 ../../../AttributeReference.rst:2192
#: ../../../AttributeReference.rst:2249 ../../../AttributeReference.rst:2264
#: ../../../AttributeReference.rst:2332 ../../../AttributeReference.rst:2400
#: ../../../AttributeReference.rst:2468 ../../../AttributeReference.rst:2536
#: ../../../AttributeReference.rst:2604 ../../../AttributeReference.rst:2634
#: ../../../AttributeReference.rst:2682 ../../../AttributeReference.rst:2701
#: ../../../AttributeReference.rst:2769 ../../../AttributeReference.rst:2837
#: ../../../AttributeReference.rst:2905 ../../../AttributeReference.rst:2973
#: ../../../AttributeReference.rst:3041 ../../../AttributeReference.rst:3109
#: ../../../AttributeReference.rst:3230 ../../../AttributeReference.rst:3243
#: ../../../AttributeReference.rst:3257 ../../../AttributeReference.rst:3288
#: ../../../AttributeReference.rst:3298 ../../../AttributeReference.rst:3322
#: ../../../AttributeReference.rst:3337 ../../../AttributeReference.rst:3365
#: ../../../AttributeReference.rst:3441 ../../../AttributeReference.rst:3486
#: ../../../AttributeReference.rst:3499 ../../../AttributeReference.rst:3515
#: ../../../AttributeReference.rst:3535 ../../../AttributeReference.rst:3547
#: ../../../AttributeReference.rst:3564 ../../../AttributeReference.rst:3581
#: ../../../AttributeReference.rst:3600 ../../../AttributeReference.rst:3628
#: ../../../AttributeReference.rst:3674 ../../../AttributeReference.rst:3686
#: ../../../AttributeReference.rst:3732 ../../../AttributeReference.rst:3747
#: ../../../AttributeReference.rst:3779 ../../../AttributeReference.rst:3887
#: ../../../AttributeReference.rst:3934 ../../../AttributeReference.rst:3945
#: ../../../AttributeReference.rst:3965 ../../../AttributeReference.rst:4003
#: ../../../AttributeReference.rst:4034 ../../../AttributeReference.rst:4101
#: ../../../AttributeReference.rst:4121 ../../../AttributeReference.rst:4139
#: ../../../AttributeReference.rst:4158 ../../../AttributeReference.rst:4191
#: ../../../AttributeReference.rst:4205 ../../../AttributeReference.rst:4217
#: ../../../AttributeReference.rst:4228 ../../../AttributeReference.rst:4239
#: ../../../AttributeReference.rst:4262 ../../../AttributeReference.rst:4277
#: ../../../AttributeReference.rst:4337 ../../../AttributeReference.rst:4363
#: ../../../AttributeReference.rst:4380 ../../../AttributeReference.rst:4437
#: ../../../AttributeReference.rst:4466 ../../../AttributeReference.rst:4520
#: ../../../AttributeReference.rst:4537 ../../../AttributeReference.rst:4552
#: ../../../AttributeReference.rst:4585 ../../../AttributeReference.rst:4614
#: ../../../AttributeReference.rst:4658 ../../../AttributeReference.rst:4707
#: ../../../AttributeReference.rst:4734 ../../../AttributeReference.rst:4759
#: ../../../AttributeReference.rst:4772 ../../../AttributeReference.rst:4823
#: ../../../AttributeReference.rst:4884 ../../../AttributeReference.rst:4897
#: ../../../AttributeReference.rst:4910 ../../../AttributeReference.rst:4920
#: ../../../AttributeReference.rst:4932 ../../../AttributeReference.rst:4962
#: ../../../AttributeReference.rst:5039 ../../../AttributeReference.rst:5066
#: ../../../AttributeReference.rst:5083 ../../../AttributeReference.rst:5106
#: ../../../AttributeReference.rst:5119 ../../../AttributeReference.rst:5130
#: ../../../AttributeReference.rst:5147 ../../../AttributeReference.rst:5168
#: ../../../AttributeReference.rst:5217 ../../../AttributeReference.rst:5248
#: ../../../AttributeReference.rst:5279 ../../../AttributeReference.rst:5310
#: ../../../AttributeReference.rst:5368 ../../../AttributeReference.rst:5396
#: ../../../AttributeReference.rst:5414 ../../../AttributeReference.rst:5426
#: ../../../AttributeReference.rst:5438 ../../../AttributeReference.rst:5468
#: ../../../AttributeReference.rst:5510 ../../../AttributeReference.rst:5525
#: ../../../AttributeReference.rst:5538 ../../../AttributeReference.rst:5554
#: ../../../AttributeReference.rst:5571 ../../../AttributeReference.rst:5607
#: ../../../AttributeReference.rst:5621 ../../../AttributeReference.rst:5635
#: ../../../AttributeReference.rst:5648 ../../../AttributeReference.rst:5666
#: ../../../AttributeReference.rst:5678 ../../../AttributeReference.rst:5722
#: ../../../AttributeReference.rst:5759 ../../../AttributeReference.rst:5796
#: ../../../AttributeReference.rst:5929 ../../../AttributeReference.rst:5943
#: ../../../AttributeReference.rst:5958 ../../../AttributeReference.rst:5973
#: ../../../AttributeReference.rst:5988 ../../../AttributeReference.rst:6032
#: ../../../AttributeReference.rst:6048 ../../../AttributeReference.rst:6058
#: ../../../AttributeReference.rst:6074 ../../../AttributeReference.rst:6106
#: ../../../AttributeReference.rst:6132 ../../../AttributeReference.rst:6157
#: ../../../AttributeReference.rst:6172
msgid "Supported Syntaxes"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "GNU"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "C++11"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "C2x"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__declspec``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "Keyword"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``#pragma``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``#pragma clang attribute``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``omp declare simd``"
msgstr ""

#: ../../../AttributeReference.rst:33
msgid ""
"The `declare simd` construct can be applied to a function to enable the "
"creation of one or more versions that can process multiple arguments using "
"SIMD instructions from a single invocation in a SIMD loop. The `declare "
"simd` directive is a declarative directive. There may be multiple `declare "
"simd` directives for a function. The use of a `declare simd` construct on a "
"function enables the creation of SIMD versions of the associated function "
"that can be used to process multiple arguments from a single invocation from "
"a SIMD loop concurrently. The syntax of the `declare simd` construct is as "
"follows:"
msgstr ""

#: ../../../AttributeReference.rst:50 ../../../AttributeReference.rst:92
#: ../../../AttributeReference.rst:121
msgid "where clause is one of the following:"
msgstr ""

#: ../../../AttributeReference.rst:63
msgid "#pragma omp declare target"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``omp declare target``"
msgstr ""

#: ../../../AttributeReference.rst:69
msgid ""
"The `declare target` directive specifies that variables and functions are "
"mapped to a device for OpenMP offload mechanism."
msgstr ""

#: ../../../AttributeReference.rst:72
msgid "The syntax of the declare target directive is as follows:"
msgstr ""

#: ../../../AttributeReference.rst:80 ../../../AttributeReference.rst:86
msgid "or"
msgstr ""

#: ../../../AttributeReference.rst:103
msgid "#pragma omp declare variant"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``omp declare variant``"
msgstr ""

#: ../../../AttributeReference.rst:110
msgid ""
"The `declare variant` directive declares a specialized variant of a base"
msgstr ""

#: ../../../AttributeReference.rst:110
msgid ""
"function and specifies the context in which that specialized variant is "
"used. The declare variant directive is a declarative directive."
msgstr ""

#: ../../../AttributeReference.rst:112
msgid "The syntax of the `declare variant` construct is as follows:"
msgstr ""

#: ../../../AttributeReference.rst:129
msgid ""
"and where `variant-func-id` is the name of a function variant that is either "
"a"
msgstr ""

#: ../../../AttributeReference.rst:128
msgid "base language identifier or, for C++, a template-id."
msgstr ""

#: ../../../AttributeReference.rst:132
msgid "_Noreturn"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``_Noreturn``"
msgstr ""

#: ../../../AttributeReference.rst:138
msgid ""
"A function declared as ``_Noreturn`` shall not return to its caller. The "
"compiler will generate a diagnostic for a function declared as ``_Noreturn`` "
"that appears to be capable of returning to its caller. Despite being a type "
"specifier, the ``_Noreturn`` attribute cannot be specified on a function "
"pointer type."
msgstr ""

#: ../../../AttributeReference.rst:146
msgid "abi_tag"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``abi_tag``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::abi_tag``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "Yes"
msgstr ""

#: ../../../AttributeReference.rst:152
msgid ""
"The ``abi_tag`` attribute can be applied to a function, variable, class or "
"inline namespace declaration to modify the mangled name of the entity. It "
"gives the ability to distinguish between different versions of the same "
"entity but with different ABI versions supported. For example, a newer "
"version of a class could have a different set of data members and thus have "
"a different size. Using the ``abi_tag`` attribute, it is possible to have "
"different mangled names for a global variable of the class type. Therefore, "
"the old code could keep using the old manged name and the new code will use "
"the new mangled name with tags."
msgstr ""

#: ../../../AttributeReference.rst:163
msgid "acquire_capability, acquire_shared_capability"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``acquire_capability`` |br| ``acquire_shared_capability`` |br| "
"``exclusive_lock_function`` |br| ``shared_lock_function``"
msgstr ""

#: ../../../AttributeReference.rst:13
msgid "<br/>"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::acquire_capability`` |br| ``clang::acquire_shared_capability``"
msgstr ""

#: ../../../AttributeReference.rst:169
msgid "Marks a function as acquiring a capability."
msgstr ""

#: ../../../AttributeReference.rst:173
msgid "alloc_align"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``alloc_align``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::alloc_align``"
msgstr ""

#: ../../../AttributeReference.rst:179
msgid ""
"Use ``__attribute__((alloc_align(<alignment>))`` on a function declaration "
"to specify that the return value of the function (which must be a pointer "
"type) is at least as aligned as the value of the indicated parameter. The "
"parameter is given by its index in the list of formal parameters; the first "
"parameter has index 1 unless the function is a C++ non-static member "
"function, in which case the first parameter has index 2 to account for the "
"implicit ``this`` parameter."
msgstr ""

#: ../../../AttributeReference.rst:199
msgid ""
"Note that this attribute merely informs the compiler that a function always "
"returns a sufficiently aligned pointer. It does not cause the compiler to "
"emit code to enforce that alignment.  The behavior is undefined if the "
"returned poitner is not sufficiently aligned."
msgstr ""

#: ../../../AttributeReference.rst:206
msgid "alloc_size"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``alloc_size``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::alloc_size``"
msgstr ""

#: ../../../AttributeReference.rst:212
msgid ""
"The ``alloc_size`` attribute can be placed on functions that return pointers "
"in order to hint to the compiler how many bytes of memory will be available "
"at the returned pointer. ``alloc_size`` takes one or two arguments."
msgstr ""

#: ../../../AttributeReference.rst:216
msgid ""
"``alloc_size(N)`` implies that argument number N equals the number of "
"available bytes at the returned pointer."
msgstr ""

#: ../../../AttributeReference.rst:218
msgid ""
"``alloc_size(N, M)`` implies that the product of argument number N and "
"argument number M equals the number of available bytes at the returned "
"pointer."
msgstr ""

#: ../../../AttributeReference.rst:222
msgid "Argument numbers are 1-based."
msgstr ""

#: ../../../AttributeReference.rst:224
msgid "An example of how to use ``alloc_size``"
msgstr ""

#: ../../../AttributeReference.rst:238
msgid ""
"This attribute works differently in clang than it does in GCC. Specifically, "
"clang will only trace ``const`` pointers (as above); we give up on pointers "
"that are not marked as ``const``. In the vast majority of cases, this is "
"unimportant, because LLVM has support for the ``alloc_size`` attribute. "
"However, this may cause mildly unintuitive behavior when used with other "
"attributes, such as ``enable_if``."
msgstr ""

#: ../../../AttributeReference.rst:247
msgid "allocator"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``allocator``"
msgstr ""

#: ../../../AttributeReference.rst:253
msgid ""
"The ``__declspec(allocator)`` attribute is applied to functions that "
"allocate memory, such as operator new in C++. When CodeView debug "
"information is emitted (enabled by ``clang -gcodeview`` or ``clang-cl /"
"Z7``), Clang will attempt to record the code offset of heap allocation call "
"sites in the debug info. It will also record the type being allocated using "
"some local heuristics. The Visual Studio debugger uses this information to "
"`profile memory usage`_."
msgstr ""

#: ../../../AttributeReference.rst:262
msgid ""
"This attribute does not affect optimizations in any way, unlike GCC's "
"``__attribute__((malloc))``."
msgstr ""

#: ../../../AttributeReference.rst:267
msgid "artificial"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``artificial``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::artificial``"
msgstr ""

#: ../../../AttributeReference.rst:273
msgid ""
"The ``artificial`` attribute can be applied to an inline function. If such a "
"function is inlined, the attribute indicates that debuggers should associate "
"the resulting instructions with the call site, rather than with the "
"corresponding line within the inlined callee."
msgstr ""

#: ../../../AttributeReference.rst:280
msgid "assert_capability, assert_shared_capability"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``assert_capability`` |br| ``assert_shared_capability``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::assert_capability`` |br| ``clang::assert_shared_capability``"
msgstr ""

#: ../../../AttributeReference.rst:286
msgid ""
"Marks a function that dynamically tests whether a capability is held, and "
"halts the program if it is not held."
msgstr ""

#: ../../../AttributeReference.rst:291
msgid "assume_aligned"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``assume_aligned``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::assume_aligned``"
msgstr ""

#: ../../../AttributeReference.rst:297
msgid ""
"Use ``__attribute__((assume_aligned(<alignment>[,<offset>]))`` on a function "
"declaration to specify that the return value of the function (which must be "
"a pointer type) has the specified offset, in bytes, from an address with the "
"specified alignment. The offset is taken to be zero if omitted."
msgstr ""

#: ../../../AttributeReference.rst:311
msgid ""
"Note that this attribute provides information to the compiler regarding a "
"condition that the code already ensures is true. It does not cause the "
"compiler to enforce the provided alignment assumption."
msgstr ""

#: ../../../AttributeReference.rst:317
msgid "availability"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``availability``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::availability``"
msgstr ""

#: ../../../AttributeReference.rst:323
msgid ""
"The ``availability`` attribute can be placed on declarations to describe the "
"lifecycle of that declaration relative to operating system versions.  "
"Consider the function declaration for a hypothetical function ``f``:"
msgstr ""

#: ../../../AttributeReference.rst:331
msgid ""
"The availability attribute states that ``f`` was introduced in macOS 10.4, "
"deprecated in macOS 10.6, and obsoleted in macOS 10.7.  This information is "
"used by Clang to determine when it is safe to use ``f``: for example, if "
"Clang is instructed to compile code for macOS 10.5, a call to ``f()`` "
"succeeds.  If Clang is instructed to compile code for macOS 10.6, the call "
"succeeds but Clang emits a warning specifying that the function is "
"deprecated. Finally, if Clang is instructed to compile code for macOS 10.7, "
"the call fails because ``f()`` is no longer available."
msgstr ""

#: ../../../AttributeReference.rst:340
msgid ""
"The availability attribute is a comma-separated list starting with the "
"platform name and then including clauses specifying important milestones in "
"the declaration's lifetime (in any order) along with additional "
"information.  Those clauses can be:"
msgstr ""

#: ../../../AttributeReference.rst:346
msgid "introduced=\\ *version*"
msgstr ""

#: ../../../AttributeReference.rst:346
msgid "The first version in which this declaration was introduced."
msgstr ""

#: ../../../AttributeReference.rst:350
msgid "deprecated=\\ *version*"
msgstr ""

#: ../../../AttributeReference.rst:349
msgid ""
"The first version in which this declaration was deprecated, meaning that "
"users should migrate away from this API."
msgstr ""

#: ../../../AttributeReference.rst:354
msgid "obsoleted=\\ *version*"
msgstr ""

#: ../../../AttributeReference.rst:353
msgid ""
"The first version in which this declaration was obsoleted, meaning that it "
"was removed completely and can no longer be used."
msgstr ""

#: ../../../AttributeReference.rst:357
msgid "unavailable"
msgstr ""

#: ../../../AttributeReference.rst:357
msgid "This declaration is never available on this platform."
msgstr ""

#: ../../../AttributeReference.rst:362
msgid "message=\\ *string-literal*"
msgstr ""

#: ../../../AttributeReference.rst:360
msgid ""
"Additional message text that Clang will provide when emitting a warning or "
"error about use of a deprecated or obsoleted declaration.  Useful to direct "
"users to replacement APIs."
msgstr ""

#: ../../../AttributeReference.rst:367
msgid "replacement=\\ *string-literal*"
msgstr ""

#: ../../../AttributeReference.rst:365
msgid ""
"Additional message text that Clang will use to provide Fix-It when emitting "
"a warning about use of a deprecated declaration. The Fix-It will replace the "
"deprecated declaration with the new declaration specified."
msgstr ""

#: ../../../AttributeReference.rst:369
msgid ""
"Multiple availability attributes can be placed on a declaration, which may "
"correspond to different platforms. For most platforms, the availability "
"attribute with the platform corresponding to the target platform will be "
"used; any others will be ignored. However, the availability for ``watchOS`` "
"and ``tvOS`` can be implicitly inferred from an ``iOS`` availability "
"attribute. Any explicit availability attributes for those platforms are "
"still prefered over the implicitly inferred availability attributes. If no "
"availability attribute specifies availability for the current target "
"platform, the availability attributes are ignored. Supported platforms are:"
msgstr ""

#: ../../../AttributeReference.rst:382
msgid "``ios``"
msgstr ""

#: ../../../AttributeReference.rst:380
msgid ""
"Apple's iOS operating system.  The minimum deployment target is specified by "
"the ``-mios-version-min=*version*`` or ``-miphoneos-version-min=*version*`` "
"command-line arguments."
msgstr ""

#: ../../../AttributeReference.rst:388
msgid "``macos``"
msgstr ""

#: ../../../AttributeReference.rst:385
msgid ""
"Apple's macOS operating system.  The minimum deployment target is specified "
"by the ``-mmacosx-version-min=*version*`` command-line argument. ``macosx`` "
"is supported for backward-compatibility reasons, but it is deprecated."
msgstr ""

#: ../../../AttributeReference.rst:392
msgid "``tvos``"
msgstr ""

#: ../../../AttributeReference.rst:391
msgid ""
"Apple's tvOS operating system.  The minimum deployment target is specified "
"by the ``-mtvos-version-min=*version*`` command-line argument."
msgstr ""

#: ../../../AttributeReference.rst:396
msgid "``watchos``"
msgstr ""

#: ../../../AttributeReference.rst:395
msgid ""
"Apple's watchOS operating system.  The minimum deployment target is "
"specified by the ``-mwatchos-version-min=*version*`` command-line argument."
msgstr ""

#: ../../../AttributeReference.rst:398
msgid ""
"A declaration can typically be used even when deploying back to a platform "
"version prior to when the declaration was introduced.  When this happens, "
"the declaration is `weakly linked <https://developer.apple.com/library/mac/"
"#documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html>`_, "
"as if the ``weak_import`` attribute were added to the declaration.  A weakly-"
"linked declaration may or may not be present a run-time, and a program can "
"determine whether the declaration is present by checking whether the address "
"of that declaration is non-NULL."
msgstr ""

#: ../../../AttributeReference.rst:407
msgid ""
"The flag ``strict`` disallows using API when deploying back to a platform "
"version prior to when the declaration was introduced.  An attempt to use "
"such API before its introduction causes a hard error. Weakly-linking is "
"almost always a better API choice, since it allows users to query "
"availability at runtime."
msgstr ""

#: ../../../AttributeReference.rst:413
msgid ""
"If there are multiple declarations of the same entity, the availability "
"attributes must either match on a per-platform basis or later declarations "
"must not have availability attributes for that platform. For example:"
msgstr ""

#: ../../../AttributeReference.rst:426
msgid ""
"When one method overrides another, the overriding method can be more widely "
"available than the overridden method, e.g.,:"
msgstr ""

#: ../../../AttributeReference.rst:440
msgid ""
"Starting with the macOS 10.12 SDK, the ``API_AVAILABLE`` macro from ``<os/"
"availability.h>`` can simplify the spelling:"
msgstr ""

#: ../../../AttributeReference.rst:450
msgid ""
"Availability attributes can also be applied using a ``#pragma clang "
"attribute``. Any explicit availability attribute whose platform corresponds "
"to the target platform is applied to a declaration regardless of the "
"availability attributes specified in the pragma. For example, in the code "
"below, ``hasExplicitAvailabilityAttribute`` will use the ``macOS`` "
"availability attribute that is specified with the declaration, whereas "
"``getsThePragmaAvailabilityAttribute`` will use the ``macOS`` availability "
"attribute that is applied by the pragma."
msgstr ""

#: ../../../AttributeReference.rst:466
msgid ""
"For platforms like ``watchOS`` and ``tvOS``, whose availability attributes "
"can be implicitly inferred from an ``iOS`` availability attribute, the logic "
"is slightly more complex. The explicit and the pragma-applied availability "
"attributes whose platform corresponds to the target platform are applied as "
"described in the previous paragraph. However, the implicitly inferred "
"attributes are applied to a declaration only when there is no explicit or "
"pragma-applied availability attribute whose platform corresponds to the "
"target platform. For example, the function below will receive the ``tvOS`` "
"availability from the pragma rather than using the inferred ``iOS`` "
"availability from the declaration:"
msgstr ""

#: ../../../AttributeReference.rst:482
msgid ""
"The compiler is also able to apply implicly inferred attributes from a "
"pragma as well. For example, when targeting ``tvOS``, the function below "
"will receive a ``tvOS`` availability attribute that is implicitly inferred "
"from the ``iOS`` availability attribute applied by the pragma:"
msgstr ""

#: ../../../AttributeReference.rst:493
msgid ""
"The implicit attributes that are inferred from explicitly specified "
"attributes whose platform corresponds to the target platform are applied to "
"the declaration even if there is an availability attribute that can be "
"inferred from a pragma. For example, the function below will receive the "
"``tvOS, introduced=11.0`` availability that is inferred from the attribute "
"on the declaration rather than inferring availability from the pragma:"
msgstr ""

#: ../../../AttributeReference.rst:507
msgid ""
"Also see the documentation for `@available <http://clang.llvm.org/docs/"
"LanguageExtensions.html#objective-c-available>`_"
msgstr ""

#: ../../../AttributeReference.rst:512
msgid "callback"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``callback``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::callback``"
msgstr ""

#: ../../../AttributeReference.rst:518
msgid ""
"The ``callback`` attribute specifies that the annotated function may invoke "
"the specified callback zero or more times. The callback, as well as the "
"passed arguments, are identified by their parameter name or position "
"(starting with 1!) in the annotated function. The first position in the "
"attribute identifies the callback callee, the following positions declare "
"describe its arguments. The callback callee is required to be callable with "
"the number, and order, of the specified arguments. The index `0`, or the "
"identifier `this`, is used to represent an implicit \"this\" pointer in "
"class methods. If there is no implicit \"this\" pointer it shall not be "
"referenced. The index '-1', or the name \"__\", represents an unknown "
"callback callee argument. This can be a value which is not present in the "
"declared parameter list, or one that is, but is potentially inspected, "
"captured, or modified. Parameter names and indices can be mixed in the "
"callback attribute."
msgstr ""

#: ../../../AttributeReference.rst:532
msgid ""
"The ``callback`` attribute, which is directly translated to ``callback`` "
"metadata <http://llvm.org/docs/LangRef.html#callback-metadata>, make the "
"connection between the call to the annotated function and the callback "
"callee. This can enable interprocedural optimizations which were otherwise "
"impossible. If a function parameter is mentioned in the ``callback`` "
"attribute, through its position, it is undefined if that parameter is used "
"for anything other than the actual callback. Inspected, captured, or "
"modified parameters shall not be listed in the ``callback`` metadata."
msgstr ""

#: ../../../AttributeReference.rst:541
msgid ""
"Example encodings for the callback performed by `pthread_create` are shown "
"below. The explicit attribute annotation indicates that the third parameter "
"(`start_routine`) is called zero or more times by the `pthread_create` "
"function, and that the fourth parameter (`arg`) is passed along. Note that "
"the callback behavior of `pthread_create` is automatically recognized by "
"Clang. In addition, the declarations of `__kmpc_fork_teams` and "
"`__kmpc_fork_call`, generated for `#pragma omp target teams` and `#pragma "
"omp parallel`, respectively, are also automatically recognized as broker "
"functions. Further functions might be added in the future."
msgstr ""

#: ../../../AttributeReference.rst:563
msgid "carries_dependency"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``carries_dependency``"
msgstr ""

#: ../../../AttributeReference.rst:569
msgid ""
"The ``carries_dependency`` attribute specifies dependency propagation into "
"and out of functions."
msgstr ""

#: ../../../AttributeReference.rst:572
msgid ""
"When specified on a function or Objective-C method, the "
"``carries_dependency`` attribute means that the return value carries a "
"dependency out of the function, so that the implementation need not "
"constrain ordering upon return from that function. Implementations of the "
"function and its caller may choose to preserve dependencies instead of "
"emitting memory ordering instructions such as fences."
msgstr ""

#: ../../../AttributeReference.rst:578
msgid ""
"Note, this attribute does not change the meaning of the program, but may "
"result in generation of more efficient code."
msgstr ""

#: ../../../AttributeReference.rst:583
msgid "cf_consumed"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cf_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cf_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:589 ../../../AttributeReference.rst:657
#: ../../../AttributeReference.rst:725 ../../../AttributeReference.rst:2269
#: ../../../AttributeReference.rst:2337 ../../../AttributeReference.rst:2405
#: ../../../AttributeReference.rst:2473 ../../../AttributeReference.rst:2541
#: ../../../AttributeReference.rst:2706 ../../../AttributeReference.rst:2774
#: ../../../AttributeReference.rst:2842 ../../../AttributeReference.rst:2910
#: ../../../AttributeReference.rst:2978 ../../../AttributeReference.rst:3046
msgid ""
"The behavior of a function with respect to reference counting for Foundation "
"(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a "
"naming convention (e.g. functions starting with \"get\" are assumed to "
"return at ``+0``)."
msgstr ""

#: ../../../AttributeReference.rst:594 ../../../AttributeReference.rst:662
#: ../../../AttributeReference.rst:730 ../../../AttributeReference.rst:2274
#: ../../../AttributeReference.rst:2342 ../../../AttributeReference.rst:2410
#: ../../../AttributeReference.rst:2478 ../../../AttributeReference.rst:2546
#: ../../../AttributeReference.rst:2711 ../../../AttributeReference.rst:2779
#: ../../../AttributeReference.rst:2847 ../../../AttributeReference.rst:2915
#: ../../../AttributeReference.rst:2983 ../../../AttributeReference.rst:3051
msgid ""
"It can be overriden using a family of the following attributes.  In "
"Objective-C, the annotation ``__attribute__((ns_returns_retained))`` applied "
"to a function communicates that the object is returned at ``+1``, and the "
"caller is responsible for freeing it. Similiarly, the annotation "
"``__attribute__((ns_returns_not_retained))`` specifies that the object is "
"returned at ``+0`` and the ownership remains with the callee. The annotation "
"``__attribute__((ns_consumes_self))`` specifies that the Objective-C method "
"call consumes the reference to ``self``, e.g. by attaching it to a supplied "
"parameter. Additionally, parameters can have an annotation "
"``__attribute__((ns_consumed))``, which specifies that passing an owned "
"object as that parameter effectively transfers the ownership, and the caller "
"is no longer responsible for it. These attributes affect code generation "
"when interacting with ARC code, and they are used by the Clang Static "
"Analyzer."
msgstr ""

#: ../../../AttributeReference.rst:611 ../../../AttributeReference.rst:679
#: ../../../AttributeReference.rst:747 ../../../AttributeReference.rst:2291
#: ../../../AttributeReference.rst:2359 ../../../AttributeReference.rst:2427
#: ../../../AttributeReference.rst:2495 ../../../AttributeReference.rst:2563
#: ../../../AttributeReference.rst:2728 ../../../AttributeReference.rst:2796
#: ../../../AttributeReference.rst:2864 ../../../AttributeReference.rst:2932
#: ../../../AttributeReference.rst:3000 ../../../AttributeReference.rst:3068
msgid ""
"In C programs using CoreFoundation, a similar set of attributes: "
"``__attribute__((cf_returns_not_retained))``, "
"``__attribute__((cf_returns_retained))`` and "
"``__attribute__((cf_consumed))`` have the same respective semantics when "
"applied to CoreFoundation objects. These attributes affect code generation "
"when interacting with ARC code, and they are used by the Clang Static "
"Analyzer."
msgstr ""

#: ../../../AttributeReference.rst:618 ../../../AttributeReference.rst:686
#: ../../../AttributeReference.rst:754 ../../../AttributeReference.rst:2298
#: ../../../AttributeReference.rst:2366 ../../../AttributeReference.rst:2434
#: ../../../AttributeReference.rst:2502 ../../../AttributeReference.rst:2570
#: ../../../AttributeReference.rst:2735 ../../../AttributeReference.rst:2803
#: ../../../AttributeReference.rst:2871 ../../../AttributeReference.rst:2939
#: ../../../AttributeReference.rst:3007 ../../../AttributeReference.rst:3075
msgid ""
"Finally, in C++ interacting with XNU kernel (objects inheriting from "
"OSObject), the same attribute family is present: "
"``__attribute__((os_returns_not_retained))``, "
"``__attribute__((os_returns_retained))`` and "
"``__attribute__((os_consumed))``, with the same respective semantics. "
"Similar to ``__attribute__((ns_consumes_self))``, "
"``__attribute__((os_consumes_this))`` specifies that the method call "
"consumes the reference to \"this\" (e.g., when attaching it to a different "
"object supplied as a parameter). Out parameters (parameters the function is "
"meant to write into, either via pointers-to-pointers or references-to-"
"pointers) may be annotated with ``__attribute__((os_returns_retained))`` or "
"``__attribute__((os_returns_not_retained))`` which specifies that the object "
"written into the out parameter should (or respectively should not) be "
"released after use. Since often out parameters may or may not be written "
"depending on the exit code of the function, annotations "
"``__attribute__((os_returns_retained_on_zero))`` and "
"``__attribute__((os_returns_retained_on_non_zero))`` specify that an out "
"parameter at ``+1`` is written if and only if the function returns a zero "
"(respectively non-zero) error code. Observe that return-code-dependent out "
"parameter annotations are only available for retained out parameters, as non-"
"retained object do not have to be released by the callee. These attributes "
"are only used by the Clang Static Analyzer."
msgstr ""

#: ../../../AttributeReference.rst:644 ../../../AttributeReference.rst:712
#: ../../../AttributeReference.rst:780 ../../../AttributeReference.rst:2324
#: ../../../AttributeReference.rst:2392 ../../../AttributeReference.rst:2460
#: ../../../AttributeReference.rst:2528 ../../../AttributeReference.rst:2596
#: ../../../AttributeReference.rst:2761 ../../../AttributeReference.rst:2829
#: ../../../AttributeReference.rst:2897 ../../../AttributeReference.rst:2965
#: ../../../AttributeReference.rst:3033 ../../../AttributeReference.rst:3101
msgid ""
"The family of attributes ``X_returns_X_retained`` can be added to functions, "
"C++ methods, and Objective-C methods and properties. Attributes "
"``X_consumed`` can be added to parameters of methods, functions, and "
"Objective-C methods."
msgstr ""

#: ../../../AttributeReference.rst:651
msgid "cf_returns_not_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cf_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cf_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:719
msgid "cf_returns_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cf_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cf_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:787
msgid "cfi_canonical_jump_table"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cfi_canonical_jump_table``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cfi_canonical_jump_table``"
msgstr ""

#: ../../../AttributeReference.rst:795
msgid ""
"Use ``__attribute__((cfi_canonical_jump_table))`` on a function declaration "
"to make the function's CFI jump table canonical. See :ref:`the CFI "
"documentation <cfi-canonical-jump-tables>` for more details."
msgstr ""

#: ../../../AttributeReference.rst:801
msgid "clang_arm_mve_alias"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__clang_arm_mve_alias``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::__clang_arm_mve_alias``"
msgstr ""

#: ../../../AttributeReference.rst:807
msgid ""
"This attribute is used in the implementation of the ACLE intrinsics for the "
"Arm MVE instruction set. It allows the intrinsic functions to be declared "
"using the names defined in ACLE, and still be recognized as clang builtins "
"equivalent to the underlying name. For example, ``arm_mve.h`` declares the "
"function ``vaddq_u32`` with "
"``__attribute__((__clang_arm_mve_alias(__builtin_arm_mve_vaddq_u32)))``, and "
"similarly, one of the type-overloaded declarations of ``vaddq`` will have "
"the same attribute. This ensures that both functions are recognized as that "
"clang builtin, and in the latter case, the choice of which builtin to "
"identify the function as can be deferred until after overload resolution."
msgstr ""

#: ../../../AttributeReference.rst:819
msgid ""
"This attribute can only be used to set up the aliases for the MVE intrinsic "
"functions; it is intended for use only inside ``arm_mve.h``, and is not a "
"general mechanism for declaring arbitrary aliases for clang builtin "
"functions."
msgstr ""

#: ../../../AttributeReference.rst:826
msgid "code_seg"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``code_seg``"
msgstr ""

#: ../../../AttributeReference.rst:832
msgid ""
"The ``__declspec(code_seg)`` attribute enables the placement of code into "
"separate named segments that can be paged or locked in memory individually. "
"This attribute is used to control the placement of instantiated templates "
"and compiler-generated code. See the documentation for "
"`__declspec(code_seg)`_ on MSDN."
msgstr ""

#: ../../../AttributeReference.rst:841
msgid "convergent"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``convergent``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::convergent``"
msgstr ""

#: ../../../AttributeReference.rst:847
msgid ""
"The ``convergent`` attribute can be placed on a function declaration. It is "
"translated into the LLVM ``convergent`` attribute, which indicates that the "
"call instructions of a function with this attribute cannot be made control-"
"dependent on any additional values."
msgstr ""

#: ../../../AttributeReference.rst:852
msgid ""
"In languages designed for SPMD/SIMT programming model, e.g. OpenCL or CUDA, "
"the call instructions of a function with this attribute must be executed by "
"all work items or threads in a work group or sub group."
msgstr ""

#: ../../../AttributeReference.rst:856
msgid ""
"This attribute is different from ``noduplicate`` because it allows "
"duplicating function calls if it can be proved that the duplicated function "
"calls are not made control-dependent on any additional values, e.g., "
"unrolling a loop executed by all work items."
msgstr ""

#: ../../../AttributeReference.rst:861
msgid "Sample usage: .. code-block:: c"
msgstr ""

#: ../../../AttributeReference.rst:864
msgid ""
"void convfunc(void) __attribute__((convergent)); // Setting it as a C++11 "
"attribute is also valid in a C++ program. // void convfunc(void) [[clang::"
"convergent]];"
msgstr ""

#: ../../../AttributeReference.rst:870
msgid "cpu_dispatch"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cpu_dispatch``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cpu_dispatch``"
msgstr ""

#: ../../../AttributeReference.rst:876 ../../../AttributeReference.rst:938
msgid ""
"The ``cpu_specific`` and ``cpu_dispatch`` attributes are used to define and "
"resolve multiversioned functions. This form of multiversioning provides a "
"mechanism for declaring versions across translation units and manually "
"specifying the resolved function list. A specified CPU defines a set of "
"minimum features that are required for the function to be called. The result "
"of this is that future processors execute the most restrictive version of "
"the function the new processor can execute."
msgstr ""

#: ../../../AttributeReference.rst:884 ../../../AttributeReference.rst:946
msgid ""
"Function versions are defined with ``cpu_specific``, which takes one or more "
"CPU names as a parameter. For example:"
msgstr ""

#: ../../../AttributeReference.rst:901 ../../../AttributeReference.rst:963
msgid ""
"A dispatching (or resolving) function can be declared anywhere in a "
"project's source code with ``cpu_dispatch``. This attribute takes one or "
"more CPU names as a parameter (like ``cpu_specific``). Functions marked with "
"``cpu_dispatch`` are not expected to be defined, only declared. If such a "
"marked function has a definition, any side effects of the function are "
"ignored; trivial function bodies are permissible for ICC compatibility."
msgstr ""

#: ../../../AttributeReference.rst:919 ../../../AttributeReference.rst:981
msgid ""
"Note that it is possible to have a resolving function that dispatches based "
"on more or fewer options than are present in the program. Specifying fewer "
"will result in the omitted options not being considered during resolution. "
"Specifying a version for resolution that isn't defined in the program will "
"result in a linking failure."
msgstr ""

#: ../../../AttributeReference.rst:925 ../../../AttributeReference.rst:987
msgid ""
"It is also possible to specify a CPU name of ``generic`` which will be "
"resolved if the executing processor doesn't satisfy the features required in "
"the CPU name. The behavior of a program executing on a processor that "
"doesn't satisfy any option of a multiversioned function is undefined."
msgstr ""

#: ../../../AttributeReference.rst:932
msgid "cpu_specific"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``cpu_specific``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::cpu_specific``"
msgstr ""

#: ../../../AttributeReference.rst:994
msgid "diagnose_if"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``diagnose_if``"
msgstr ""

#: ../../../AttributeReference.rst:1000
msgid ""
"The ``diagnose_if`` attribute can be placed on function declarations to emit "
"warnings or errors at compile-time if calls to the attributed function meet "
"certain user-defined criteria. For example:"
msgstr ""

#: ../../../AttributeReference.rst:1019
msgid ""
"``diagnose_if`` is closely related to ``enable_if``, with a few key "
"differences:"
msgstr ""

#: ../../../AttributeReference.rst:1021
msgid ""
"Overload resolution is not aware of ``diagnose_if`` attributes: they're "
"considered only after we select the best candidate from a given candidate "
"set."
msgstr ""

#: ../../../AttributeReference.rst:1023
msgid ""
"Function declarations that differ only in their ``diagnose_if`` attributes "
"are considered to be redeclarations of the same function (not overloads)."
msgstr ""

#: ../../../AttributeReference.rst:1025
msgid ""
"If the condition provided to ``diagnose_if`` cannot be evaluated, no "
"diagnostic will be emitted."
msgstr ""

#: ../../../AttributeReference.rst:1028
msgid ""
"Otherwise, ``diagnose_if`` is essentially the logical negation of "
"``enable_if``."
msgstr ""

#: ../../../AttributeReference.rst:1030
msgid ""
"As a result of bullet number two, ``diagnose_if`` attributes will stack on "
"the same function. For example:"
msgstr ""

#: ../../../AttributeReference.rst:1053
msgid "Query for this feature with ``__has_attribute(diagnose_if)``."
msgstr ""

#: ../../../AttributeReference.rst:1057
msgid "disable_tail_calls"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``disable_tail_calls``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::disable_tail_calls``"
msgstr ""

#: ../../../AttributeReference.rst:1063
msgid ""
"The ``disable_tail_calls`` attribute instructs the backend to not perform "
"tail call optimization inside the marked function."
msgstr ""

#: ../../../AttributeReference.rst:1065 ../../../AttributeReference.rst:1869
#: ../../../AttributeReference.rst:1969 ../../../AttributeReference.rst:3209
#: ../../../AttributeReference.rst:3697 ../../../AttributeReference.rst:5747
#: ../../../AttributeReference.rst:5783
msgid "For example:"
msgstr ""

#: ../../../AttributeReference.rst:1075
msgid "Marking virtual functions as ``disable_tail_calls`` is legal."
msgstr ""

#: ../../../AttributeReference.rst:1097
msgid "enable_if"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``enable_if``"
msgstr ""

#: ../../../AttributeReference.rst:1103
msgid ""
"Some features of this attribute are experimental. The meaning of multiple "
"enable_if attributes on a single declaration is subject to change in a "
"future version of clang. Also, the ABI is not standardized and the name "
"mangling may change in future versions. To avoid that, use asm labels."
msgstr ""

#: ../../../AttributeReference.rst:1108
msgid ""
"The ``enable_if`` attribute can be placed on function declarations to "
"control which overload is selected based on the values of the function's "
"arguments. When combined with the ``overloadable`` attribute, this feature "
"is also available in C."
msgstr ""

#: ../../../AttributeReference.rst:1124
msgid ""
"The enable_if attribute takes two arguments, the first is an expression "
"written in terms of the function parameters, the second is a string "
"explaining why this overload candidate could not be selected to be displayed "
"in diagnostics. The expression is part of the function signature for the "
"purposes of determining whether it is a redeclaration (following the rules "
"used when determining whether a C++ template specialization is ODR-"
"equivalent), but is not part of the type."
msgstr ""

#: ../../../AttributeReference.rst:1132
msgid ""
"The enable_if expression is evaluated as if it were the body of a bool-"
"returning constexpr function declared with the arguments of the function it "
"is being applied to, then called with the parameters at the call site. If "
"the result is false or could not be determined through constant expression "
"evaluation, then this overload will not be chosen and the provided string "
"may be used in a diagnostic if the compile fails as a result."
msgstr ""

#: ../../../AttributeReference.rst:1139
msgid ""
"Because the enable_if expression is an unevaluated context, there are no "
"global state changes, nor the ability to pass information from the enable_if "
"expression to the function body. For example, suppose we want calls to "
"strnlen(strbuf, maxlen) to resolve to strnlen_chk(strbuf, maxlen, size of "
"strbuf) only if the size of strbuf can be determined:"
msgstr ""

#: ../../../AttributeReference.rst:1156
msgid ""
"Multiple enable_if attributes may be applied to a single declaration. In "
"this case, the enable_if expressions are evaluated from left to right in the "
"following manner. First, the candidates whose enable_if expressions evaluate "
"to false or cannot be evaluated are discarded. If the remaining candidates "
"do not share ODR-equivalent enable_if expressions, the overload resolution "
"is ambiguous. Otherwise, enable_if overload resolution continues with the "
"next enable_if attribute on the candidates that have not been discarded and "
"have remaining enable_if attributes. In this way, we pick the most specific "
"overload out of a number of viable overloads using enable_if."
msgstr ""

#: ../../../AttributeReference.rst:1174
msgid ""
"In this example, a call to f() is always resolved to #2, as the first "
"enable_if expression is ODR-equivalent for both declarations, but #1 does "
"not have another enable_if expression to continue evaluating, so the next "
"round of evaluation has only a single candidate. In a call to g(1, 1), the "
"call is ambiguous even though #2 has more enable_if attributes, because the "
"first enable_if expressions are not ODR-equivalent."
msgstr ""

#: ../../../AttributeReference.rst:1181
msgid "Query for this feature with ``__has_attribute(enable_if)``."
msgstr ""

#: ../../../AttributeReference.rst:1183
msgid ""
"Note that functions with one or more ``enable_if`` attributes may not have "
"their address taken, unless all of the conditions specified by said "
"``enable_if`` are constants that evaluate to ``true``. For example:"
msgstr ""

#: ../../../AttributeReference.rst:1206
msgid ""
"Because ``enable_if`` evaluation happens during overload resolution, "
"``enable_if`` may give unintuitive results when used with templates, "
"depending on when overloads are resolved. In the example below, clang will "
"emit a diagnostic about no viable overloads for ``foo`` in ``bar``, but not "
"in ``baz``:"
msgstr ""

#: ../../../AttributeReference.rst:1227
msgid ""
"This is because, in ``bar``, ``foo`` is resolved prior to template "
"instantiation, so the value for ``I`` isn't known (thus, both ``enable_if`` "
"conditions for ``foo`` fail). However, in ``baz``, ``foo`` is resolved "
"during template instantiation, so the value for ``T::number`` is known."
msgstr ""

#: ../../../AttributeReference.rst:1234
msgid "exclude_from_explicit_instantiation"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``exclude_from_explicit_instantiation``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::exclude_from_explicit_instantiation``"
msgstr ""

#: ../../../AttributeReference.rst:1240
msgid ""
"The ``exclude_from_explicit_instantiation`` attribute opts-out a member of a "
"class template from being part of explicit template instantiations of that "
"class template. This means that an explicit instantiation will not "
"instantiate members of the class template marked with the attribute, but "
"also that code where an extern template declaration of the enclosing class "
"template is visible will not take for granted that an external instantiation "
"of the class template would provide those members (which would otherwise be "
"a link error, since the explicit instantiation won't provide those members). "
"For example, let's say we don't want the ``data()`` method to be part of "
"libc++'s ABI. To make sure it is not exported from the dylib, we give it "
"hidden visibility:"
msgstr ""

#: ../../../AttributeReference.rst:1263
msgid ""
"Since an explicit template instantiation declaration for "
"``basic_string<char>`` is provided, the compiler is free to assume that "
"``basic_string<char>::data()`` will be provided by another translation unit, "
"and it is free to produce an external call to this function. However, since "
"``data()`` has hidden visibility and the explicit template instantiation is "
"provided in a shared library (as opposed to simply another translation "
"unit), ``basic_string<char>::data()`` won't be found and a link error will "
"ensue. This happens because the compiler assumes that ``basic_string<char>::"
"data()`` is part of the explicit template instantiation declaration, when it "
"really isn't. To tell the compiler that ``data()`` is not part of the "
"explicit template instantiation declaration, the "
"``exclude_from_explicit_instantiation`` attribute can be used:"
msgstr ""

#: ../../../AttributeReference.rst:1288
msgid ""
"Now, the compiler won't assume that ``basic_string<char>::data()`` is "
"provided externally despite there being an explicit template instantiation "
"declaration: the compiler will implicitly instantiate ``basic_string<char>::"
"data()`` in the TUs where it is used."
msgstr ""

#: ../../../AttributeReference.rst:1293
msgid ""
"This attribute can be used on static and non-static member functions of "
"class templates, static data members of class templates and member classes "
"of class templates."
msgstr ""

#: ../../../AttributeReference.rst:1299
msgid "export_name"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``export_name``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::export_name``"
msgstr ""

#: ../../../AttributeReference.rst:1305
msgid ""
"Clang supports the ``__attribute__((export_name(<name>)))`` attribute for "
"the WebAssembly target. This attribute may be attached to a function "
"declaration, where it modifies how the symbol is to be exported from the "
"linked WebAssembly."
msgstr ""

#: ../../../AttributeReference.rst:1310
msgid ""
"WebAssembly functions are exported via string name. By default when a symbol "
"is exported, the export name for C/C++ symbols are the same as their C/C++ "
"symbol names. This attribute can be used to override the default behavior, "
"and request a specific string name be used instead."
msgstr ""

#: ../../../AttributeReference.rst:1317
msgid "flatten"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``flatten``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::flatten``"
msgstr ""

#: ../../../AttributeReference.rst:1323
msgid ""
"The ``flatten`` attribute causes calls within the attributed function to be "
"inlined unless it is impossible to do so, for example if the body of the "
"callee is unavailable or if the callee has the ``noinline`` attribute."
msgstr ""

#: ../../../AttributeReference.rst:1329
msgid "force_align_arg_pointer"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``force_align_arg_pointer``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::force_align_arg_pointer``"
msgstr ""

#: ../../../AttributeReference.rst:1335
msgid "Use this attribute to force stack alignment."
msgstr ""

#: ../../../AttributeReference.rst:1337
msgid ""
"Legacy x86 code uses 4-byte stack alignment. Newer aligned SSE instructions "
"(like 'movaps') that work with the stack require operands to be 16-byte "
"aligned. This attribute realigns the stack in the function prologue to make "
"sure the stack can be used with SSE instructions."
msgstr ""

#: ../../../AttributeReference.rst:1342
msgid ""
"Note that the x86_64 ABI forces 16-byte stack alignment at the call site. "
"Because of this, 'force_align_arg_pointer' is not needed on x86_64, except "
"in rare cases where the caller does not align the stack properly (e.g. flow "
"jumps from i386 arch code)."
msgstr ""

#: ../../../AttributeReference.rst:1356
msgid "format"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``format``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::format``"
msgstr ""

#: ../../../AttributeReference.rst:1362
msgid ""
"Clang supports the ``format`` attribute, which indicates that the function "
"accepts a ``printf`` or ``scanf``-like format string and corresponding "
"arguments or a ``va_list`` that contains these arguments."
msgstr ""

#: ../../../AttributeReference.rst:1366
msgid ""
"Please see `GCC documentation about format attribute <http://gcc.gnu.org/"
"onlinedocs/gcc/Function-Attributes.html>`_ to find details about attribute "
"syntax."
msgstr ""

#: ../../../AttributeReference.rst:1370
msgid "Clang implements two kinds of checks with this attribute."
msgstr ""

#: ../../../AttributeReference.rst:1372
msgid ""
"Clang checks that the function with the ``format`` attribute is called with "
"a format string that uses format specifiers that are allowed, and that "
"arguments match the format string.  This is the ``-Wformat`` warning, it is "
"on by default."
msgstr ""

#: ../../../AttributeReference.rst:1377
msgid ""
"Clang checks that the format string argument is a literal string.  This is "
"the ``-Wformat-nonliteral`` warning, it is off by default."
msgstr ""

#: ../../../AttributeReference.rst:1380
msgid ""
"Clang implements this mostly the same way as GCC, but there is a difference "
"for functions that accept a ``va_list`` argument (for example, ``vprintf``). "
"GCC does not emit ``-Wformat-nonliteral`` warning for calls to such "
"functions.  Clang does not warn if the format string comes from a function "
"parameter, where the function is annotated with a compatible attribute, "
"otherwise it warns.  For example:"
msgstr ""

#: ../../../AttributeReference.rst:1397
msgid ""
"In this case we warn because ``s`` contains a format string for a ``scanf``-"
"like function, but it is passed to a ``printf``-like function."
msgstr ""

#: ../../../AttributeReference.rst:1400
msgid ""
"If the attribute is removed, clang still warns, because the format string is "
"not a string literal."
msgstr ""

#: ../../../AttributeReference.rst:1403
msgid "Another example:"
msgstr ""

#: ../../../AttributeReference.rst:1415
msgid ""
"In this case Clang does not warn because the format string ``s`` and the "
"corresponding arguments are annotated.  If the arguments are incorrect, the "
"caller of ``foo`` will receive a warning."
msgstr ""

#: ../../../AttributeReference.rst:1421
msgid "gnu_inline"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu_inline``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::gnu_inline``"
msgstr ""

#: ../../../AttributeReference.rst:1427
msgid ""
"The ``gnu_inline`` changes the meaning of ``extern inline`` to use GNU "
"inline semantics, meaning:"
msgstr ""

#: ../../../AttributeReference.rst:1430
msgid ""
"If any declaration that is declared ``inline`` is not declared ``extern``, "
"then the ``inline`` keyword is just a hint. In particular, an out-of-line "
"definition is still emitted for a function with external linkage, even if "
"all call sites are inlined, unlike in C99 and C++ inline semantics."
msgstr ""

#: ../../../AttributeReference.rst:1435
msgid ""
"If all declarations that are declared ``inline`` are also declared "
"``extern``, then the function body is present only for inlining and no out-"
"of-line version is emitted."
msgstr ""

#: ../../../AttributeReference.rst:1439
msgid ""
"Some important consequences: ``static inline`` emits an out-of-line version "
"if needed, a plain ``inline`` definition emits an out-of-line version "
"always, and an ``extern inline`` definition (in a header) followed by a (non-"
"``extern``) ``inline`` declaration in a source file emits an out-of-line "
"version of the function in that source file but provides the function body "
"for inlining to all includers of the header."
msgstr ""

#: ../../../AttributeReference.rst:1446
msgid ""
"Either ``__GNUC_GNU_INLINE__`` (GNU inline semantics) or "
"``__GNUC_STDC_INLINE__`` (C99 semantics) will be defined (they are mutually "
"exclusive). If ``__GNUC_STDC_INLINE__`` is defined, then the ``gnu_inline`` "
"function attribute can be used to get GNU inline semantics on a per function "
"basis. If ``__GNUC_GNU_INLINE__`` is defined, then the translation unit is "
"already being compiled with GNU inline semantics as the implied default. It "
"is unspecified which macro is defined in a C++ compilation."
msgstr ""

#: ../../../AttributeReference.rst:1454
msgid ""
"GNU inline semantics are the default behavior with ``-std=gnu89``, ``-"
"std=c89``, ``-std=c94``, or ``-fgnu89-inline``."
msgstr ""

#: ../../../AttributeReference.rst:1459
msgid "guard"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``guard``"
msgstr ""

#: ../../../AttributeReference.rst:1465
msgid ""
"Code can indicate CFG checks are not wanted with the "
"``__declspec(guard(nocf))`` attribute. This directs the compiler to not "
"insert any CFG checks for the entire function. This approach is typically "
"used only sparingly in specific situations where the programmer has manually "
"inserted \"CFG-equivalent\" protection. The programmer knows that they are "
"calling through some read-only function table whose address is obtained "
"through read-only memory references and for which the index is masked to the "
"function table limit. This approach may also be applied to small wrapper "
"functions that are not inlined and that do nothing more than make a call "
"through a function pointer. Since incorrect usage of this directive can "
"compromise the security of CFG, the programmer must be very careful using "
"the directive. Typically, this usage is limited to very small functions that "
"only call one function."
msgstr ""

#: ../../../AttributeReference.rst:1478
msgid ""
"`Control Flow Guard documentation <https://docs.microsoft.com/en-us/windows/"
"win32/secbp/pe-metadata>`"
msgstr ""

#: ../../../AttributeReference.rst:1482
msgid "ifunc"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ifunc``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::ifunc``"
msgstr ""

#: ../../../AttributeReference.rst:1488
msgid ""
"``__attribute__((ifunc(\"resolver\")))`` is used to mark that the address of "
"a declaration should be resolved at runtime by calling a resolver function."
msgstr ""

#: ../../../AttributeReference.rst:1490
msgid ""
"The symbol name of the resolver function is given in quotes.  A function "
"with this name (after mangling) must be defined in the current translation "
"unit; it may be ``static``.  The resolver function should return a pointer."
msgstr ""

#: ../../../AttributeReference.rst:1492
msgid ""
"The ``ifunc`` attribute may only be used on a function declaration.  A "
"function declaration with an ``ifunc`` attribute is considered to be a "
"definition of the declared entity.  The entity must not have weak linkage; "
"for example, in C++, it cannot be applied to a declaration if a definition "
"at that location would be considered inline."
msgstr ""

#: ../../../AttributeReference.rst:1494
msgid ""
"Not all targets support this attribute. ELF target support depends on both "
"the linker and runtime linker, and is available in at least lld 4.0 and "
"later, binutils 2.20.1 and later, glibc v2.11.1 and later, and FreeBSD 9.1 "
"and later. Non-ELF targets currently do not support this attribute."
msgstr ""

#: ../../../AttributeReference.rst:1498
msgid "import_module"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``import_module``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::import_module``"
msgstr ""

#: ../../../AttributeReference.rst:1504
msgid ""
"Clang supports the ``__attribute__((import_module(<module_name>)))`` "
"attribute for the WebAssembly target. This attribute may be attached to a "
"function declaration, where it modifies how the symbol is to be imported "
"within the WebAssembly linking environment."
msgstr ""

#: ../../../AttributeReference.rst:1509
msgid ""
"WebAssembly imports use a two-level namespace scheme, consisting of a module "
"name, which typically identifies a module from which to import, and a field "
"name, which typically identifies a field from that module to import. By "
"default, module names for C/C++ symbols are assigned automatically by the "
"linker. This attribute can be used to override the default behavior, and "
"request a specific module name be used instead."
msgstr ""

#: ../../../AttributeReference.rst:1518
msgid "import_name"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``import_name``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::import_name``"
msgstr ""

#: ../../../AttributeReference.rst:1524
msgid ""
"Clang supports the ``__attribute__((import_name(<name>)))`` attribute for "
"the WebAssembly target. This attribute may be attached to a function "
"declaration, where it modifies how the symbol is to be imported within the "
"WebAssembly linking environment."
msgstr ""

#: ../../../AttributeReference.rst:1529
msgid ""
"WebAssembly imports use a two-level namespace scheme, consisting of a module "
"name, which typically identifies a module from which to import, and a field "
"name, which typically identifies a field from that module to import. By "
"default, field names for C/C++ symbols are the same as their C/C++ symbol "
"names. This attribute can be used to override the default behavior, and "
"request a specific field name be used instead."
msgstr ""

#: ../../../AttributeReference.rst:1538
msgid "internal_linkage"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``internal_linkage``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::internal_linkage``"
msgstr ""

#: ../../../AttributeReference.rst:1544
msgid ""
"The ``internal_linkage`` attribute changes the linkage type of the "
"declaration to internal. This is similar to C-style ``static``, but can be "
"used on classes and class methods. When applied to a class definition, this "
"attribute affects all methods and static data members of that class. This "
"can be used to contain the ABI of a C++ library by excluding unwanted class "
"methods from the export tables."
msgstr ""

#: ../../../AttributeReference.rst:1551
msgid "interrupt (ARM)"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``interrupt``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::interrupt``"
msgstr ""

#: ../../../AttributeReference.rst:1557
msgid ""
"Clang supports the GNU style ``__attribute__((interrupt(\"TYPE\")))`` "
"attribute on ARM targets. This attribute may be attached to a function "
"definition and instructs the backend to generate appropriate function entry/"
"exit code so that it can be used directly as an interrupt service routine."
msgstr ""

#: ../../../AttributeReference.rst:1562
msgid ""
"The parameter passed to the interrupt attribute is optional, but if provided "
"it must be a string literal with one of the following values: \"IRQ\", "
"\"FIQ\", \"SWI\", \"ABORT\", \"UNDEF\"."
msgstr ""

#: ../../../AttributeReference.rst:1566 ../../../AttributeReference.rst:1635
msgid "The semantics are as follows:"
msgstr ""

#: ../../../AttributeReference.rst:1568
msgid ""
"If the function is AAPCS, Clang instructs the backend to realign the stack "
"to 8 bytes on entry. This is a general requirement of the AAPCS at public "
"interfaces, but may not hold when an exception is taken. Doing this allows "
"other AAPCS functions to be called."
msgstr ""

#: ../../../AttributeReference.rst:1572
msgid ""
"If the CPU is M-class this is all that needs to be done since the "
"architecture itself is designed in such a way that functions obeying the "
"normal AAPCS ABI constraints are valid exception handlers."
msgstr ""

#: ../../../AttributeReference.rst:1575
msgid ""
"If the CPU is not M-class, the prologue and epilogue are modified to save "
"all non-banked registers that are used, so that upon return the user-mode "
"state will not be corrupted. Note that to avoid unnecessary overhead, only "
"general-purpose (integer) registers are saved in this way. If VFP operations "
"are needed, that state must be saved manually."
msgstr ""

#: ../../../AttributeReference.rst:1581
msgid ""
"Specifically, interrupt kinds other than \"FIQ\" will save all core "
"registers except \"lr\" and \"sp\". \"FIQ\" interrupts will save r0-r7."
msgstr ""

#: ../../../AttributeReference.rst:1583
msgid ""
"If the CPU is not M-class, the return instruction is changed to one of the "
"canonical sequences permitted by the architecture for exception return. "
"Where possible the function itself will make the necessary \"lr\" "
"adjustments so that the \"preferred return address\" is selected."
msgstr ""

#: ../../../AttributeReference.rst:1588
msgid ""
"Unfortunately the compiler is unable to make this guarantee for an \"UNDEF\" "
"handler, where the offset from \"lr\" to the preferred return address "
"depends on the execution state of the code which generated the exception. In "
"this case a sequence equivalent to \"movs pc, lr\" will be used."
msgstr ""

#: ../../../AttributeReference.rst:1595
msgid "interrupt (AVR)"
msgstr ""

#: ../../../AttributeReference.rst:1601
msgid ""
"Clang supports the GNU style ``__attribute__((interrupt))`` attribute on AVR "
"targets. This attribute may be attached to a function definition and "
"instructs the backend to generate appropriate function entry/exit code so "
"that it can be used directly as an interrupt service routine."
msgstr ""

#: ../../../AttributeReference.rst:1606
msgid ""
"On the AVR, the hardware globally disables interrupts when an interrupt is "
"executed. The first instruction of an interrupt handler declared with this "
"attribute is a SEI instruction to re-enable interrupts. See also the signal "
"attribute that does not insert a SEI instruction."
msgstr ""

#: ../../../AttributeReference.rst:1613
msgid "interrupt (MIPS)"
msgstr ""

#: ../../../AttributeReference.rst:1619
msgid ""
"Clang supports the GNU style ``__attribute__((interrupt(\"ARGUMENT\")))`` "
"attribute on MIPS targets. This attribute may be attached to a function "
"definition and instructs the backend to generate appropriate function entry/"
"exit code so that it can be used directly as an interrupt service routine."
msgstr ""

#: ../../../AttributeReference.rst:1624
msgid ""
"By default, the compiler will produce a function prologue and epilogue "
"suitable for an interrupt service routine that handles an External Interrupt "
"Controller (eic) generated interrupt. This behaviour can be explicitly "
"requested with the \"eic\" argument."
msgstr ""

#: ../../../AttributeReference.rst:1629
msgid ""
"Otherwise, for use with vectored interrupt mode, the argument passed should "
"be of the form \"vector=LEVEL\" where LEVEL is one of the following values: "
"\"sw0\", \"sw1\", \"hw0\", \"hw1\", \"hw2\", \"hw3\", \"hw4\", \"hw5\". The "
"compiler will then set the interrupt mask to the corresponding level which "
"will mask all interrupts up to and including the argument."
msgstr ""

#: ../../../AttributeReference.rst:1637
msgid ""
"The prologue is modified so that the Exception Program Counter (EPC) and "
"Status coprocessor registers are saved to the stack. The interrupt mask is "
"set so that the function can only be interrupted by a higher priority "
"interrupt. The epilogue will restore the previous values of EPC and Status."
msgstr ""

#: ../../../AttributeReference.rst:1642
msgid ""
"The prologue and epilogue are modified to save and restore all non-kernel "
"registers as necessary."
msgstr ""

#: ../../../AttributeReference.rst:1645
msgid ""
"The FPU is disabled in the prologue, as the floating pointer registers are "
"not spilled to the stack."
msgstr ""

#: ../../../AttributeReference.rst:1648
msgid ""
"The function return sequence is changed to use an exception return "
"instruction."
msgstr ""

#: ../../../AttributeReference.rst:1650
msgid ""
"The parameter sets the interrupt mask for the function corresponding to the "
"interrupt level specified. If no mask is specified the interrupt mask "
"defaults to \"eic\"."
msgstr ""

#: ../../../AttributeReference.rst:1656
msgid "interrupt (RISCV)"
msgstr ""

#: ../../../AttributeReference.rst:1662
msgid ""
"Clang supports the GNU style ``__attribute__((interrupt))`` attribute on "
"RISCV targets. This attribute may be attached to a function definition and "
"instructs the backend to generate appropriate function entry/exit code so "
"that it can be used directly as an interrupt service routine."
msgstr ""

#: ../../../AttributeReference.rst:1667
msgid ""
"Permissible values for this parameter are ``user``, ``supervisor``, and "
"``machine``. If there is no parameter, then it defaults to machine."
msgstr ""

#: ../../../AttributeReference.rst:1670
msgid ""
"Repeated interrupt attribute on the same declaration will cause a warning to "
"be emitted. In case of repeated declarations, the last one prevails."
msgstr ""

#: ../../../AttributeReference.rst:1673
msgid ""
"Refer to: https://gcc.gnu.org/onlinedocs/gcc/RISC-V-Function-Attributes.html "
"https://riscv.org/specifications/privileged-isa/ The RISC-V Instruction Set "
"Manual Volume II: Privileged Architecture Version 1.10."
msgstr ""

#: ../../../AttributeReference.rst:1681
msgid "kernel"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``kernel``"
msgstr ""

#: ../../../AttributeReference.rst:1687
msgid ""
"``__attribute__((kernel))`` is used to mark a ``kernel`` function in "
"RenderScript."
msgstr ""

#: ../../../AttributeReference.rst:1690
msgid ""
"In RenderScript, ``kernel`` functions are used to express data-parallel "
"computations.  The RenderScript runtime efficiently parallelizes ``kernel`` "
"functions to run on computational resources such as multi-core CPUs and "
"GPUs. See the RenderScript_ documentation for more information."
msgstr ""

#: ../../../AttributeReference.rst:1699
msgid "lifetimebound"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``lifetimebound``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::lifetimebound``"
msgstr ""

#: ../../../AttributeReference.rst:1705
msgid ""
"The ``lifetimebound`` attribute indicates that a resource owned by a "
"function parameter or implicit object parameter is retained by the return "
"value of the annotated function (or, for a parameter of a constructor, in "
"the value of the constructed object). It is only supported in C++."
msgstr ""

#: ../../../AttributeReference.rst:1711
msgid ""
"This attribute provides an experimental implementation of the facility "
"described in the C++ committee paper `P0936R0 <http://wg21.link/p0936r0>`_, "
"and is subject to change as the design of the corresponding functionality "
"changes."
msgstr ""

#: ../../../AttributeReference.rst:1718
msgid "long_call, far"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``long_call`` |br| ``far``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::long_call`` |br| ``gnu::far``"
msgstr ""

#: ../../../AttributeReference.rst:1724
msgid ""
"Clang supports the ``__attribute__((long_call))``, ``__attribute__((far))``, "
"and ``__attribute__((near))`` attributes on MIPS targets. These attributes "
"may only be added to function declarations and change the code generated by "
"the compiler when directly calling the function. The ``near`` attribute "
"allows calls to the function to be made using the ``jal`` instruction, which "
"requires the function to be located in the same naturally aligned 256MB "
"segment as the caller.  The ``long_call`` and ``far`` attributes are "
"synonyms and require the use of a different call sequence that works "
"regardless of the distance between the functions."
msgstr ""

#: ../../../AttributeReference.rst:1734 ../../../AttributeReference.rst:3314
msgid "These attributes have no effect for position-independent code."
msgstr ""

#: ../../../AttributeReference.rst:1736 ../../../AttributeReference.rst:3316
msgid ""
"These attributes take priority over command line switches such as ``-mlong-"
"calls`` and ``-mno-long-calls``."
msgstr ""

#: ../../../AttributeReference.rst:1741
msgid "micromips"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``micromips``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::micromips``"
msgstr ""

#: ../../../AttributeReference.rst:1747 ../../../AttributeReference.rst:2169
msgid ""
"Clang supports the GNU style ``__attribute__((micromips))`` and "
"``__attribute__((nomicromips))`` attributes on MIPS targets. These "
"attributes may be attached to a function definition and instructs the "
"backend to generate or not to generate microMIPS code for that function."
msgstr ""

#: ../../../AttributeReference.rst:1752 ../../../AttributeReference.rst:2174
msgid ""
"These attributes override the `-mmicromips` and `-mno-micromips` options on "
"the command line."
msgstr ""

#: ../../../AttributeReference.rst:1757
msgid "mig_server_routine"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``mig_server_routine``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::mig_server_routine``"
msgstr ""

#: ../../../AttributeReference.rst:1763
msgid ""
"The Mach Interface Generator release-on-success convention dictates "
"functions that follow it to only release arguments passed to them when they "
"return \"success\" (a ``kern_return_t`` error code that indicates that no "
"errors have occured). Otherwise the release is performed by the MIG client "
"that called the function. The annotation "
"``__attribute__((mig_server_routine))`` is applied in order to specify which "
"functions are expected to follow the convention. This allows the Static "
"Analyzer to find bugs caused by violations of that convention. The attribute "
"would normally appear on the forward declaration of the actual server "
"routine in the MIG server header, but it may also be added to arbitrary "
"functions that need to follow the same convention - for example, a user can "
"add them to auxiliary functions called by the server routine that have their "
"return value of type ``kern_return_t`` unconditionally returned from the "
"routine. The attribute can be applied to C++ methods, and in this case it "
"will be automatically applied to overrides if the method is virtual. The "
"attribute can also be written using C++11 syntax: ``[[mig::"
"server_routine]]``."
msgstr ""

#: ../../../AttributeReference.rst:1781
msgid "min_vector_width"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``min_vector_width``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::min_vector_width``"
msgstr ""

#: ../../../AttributeReference.rst:1787
msgid ""
"Clang supports the ``__attribute__((min_vector_width(width)))`` attribute. "
"This attribute may be attached to a function and informs the backend that "
"this function desires vectors of at least this width to be generated. Target-"
"specific maximum vector widths still apply. This means even if you ask for "
"something larger than the target supports, you will only get what the target "
"supports. This attribute is meant to be a hint to control target heuristics "
"that may generate narrower vectors than what the target hardware supports."
msgstr ""

#: ../../../AttributeReference.rst:1795
msgid ""
"This is currently used by the X86 target to allow some CPUs that support 512-"
"bit vectors to be limited to using 256-bit vectors to avoid frequency "
"penalties. This is currently enabled with the ``-prefer-vector-width=256`` "
"command line option. The ``min_vector_width`` attribute can be used to "
"prevent the backend from trying to split vector operations to match the "
"``prefer-vector-width``. All X86 vector intrinsics from x86intrin.h already "
"set this attribute. Additionally, use of any of the X86-specific vector "
"builtins will implicitly set this attribute on the calling function. The "
"intent is that explicitly writing vector code using the X86 intrinsics will "
"prevent ``prefer-vector-width`` from affecting the code."
msgstr ""

#: ../../../AttributeReference.rst:1808
msgid "no_builtin"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_builtin``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_builtin``"
msgstr ""

#: ../../../AttributeReference.rst:1814
msgid "This attribute is not yet fully implemented, it is validated but has"
msgstr ""

#: ../../../AttributeReference.rst:1815
msgid "no effect on the generated code."
msgstr ""

#: ../../../AttributeReference.rst:1817
msgid ""
"The ``__attribute__((no_builtin))`` is similar to the ``-fno-builtin`` flag "
"except it is specific to the body of a function. The attribute may also be "
"applied to a virtual function but has no effect on the behavior of "
"overriding functions in a derived class."
msgstr ""

#: ../../../AttributeReference.rst:1822
msgid ""
"It accepts one or more strings corresponding to the specific names of the "
"builtins to disable (e.g. \"memcpy\", \"memset\"). If the attribute is used "
"without parameters it will disable all buitins at once."
msgstr ""

#: ../../../AttributeReference.rst:1848
msgid "no_caller_saved_registers"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_caller_saved_registers``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::no_caller_saved_registers``"
msgstr ""

#: ../../../AttributeReference.rst:1854
msgid ""
"Use this attribute to indicate that the specified function has no caller-"
"saved registers. That is, all registers are callee-saved except for "
"registers used for passing parameters to the function or returning "
"parameters from the function. The compiler saves and restores any modified "
"registers that were not used for passing or returning arguments to the "
"function."
msgstr ""

#: ../../../AttributeReference.rst:1861
msgid ""
"The user can call functions specified with the 'no_caller_saved_registers' "
"attribute from an interrupt handler without saving and restoring all call-"
"clobbered registers."
msgstr ""

#: ../../../AttributeReference.rst:1865
msgid ""
"Note that 'no_caller_saved_registers' attribute is not a calling convention. "
"In fact, it only overrides the decision of which registers should be saved "
"by the caller, but not how the parameters are passed from the caller to the "
"callee."
msgstr ""

#: ../../../AttributeReference.rst:1878
msgid ""
"In this case parameters 'arg1' and 'arg2' will be passed in registers. In "
"this case, on 32-bit x86 targets, the function 'f' will use ECX and EDX as "
"register parameters. However, it will not assume any scratch registers and "
"should save and restore any modified registers except for ECX and EDX."
msgstr ""

#: ../../../AttributeReference.rst:1885
msgid "no_sanitize"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_sanitize``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_sanitize``"
msgstr ""

#: ../../../AttributeReference.rst:1891
msgid ""
"Use the ``no_sanitize`` attribute on a function or a global variable "
"declaration to specify that a particular instrumentation or set of "
"instrumentations should not be applied. The attribute takes a list of string "
"literals, which have the same meaning as values accepted by the ``-fno-"
"sanitize=`` flag. For example, ``__attribute__((no_sanitize(\"address\", "
"\"thread\")))`` specifies that AddressSanitizer and ThreadSanitizer should "
"not be applied to the function or variable."
msgstr ""

#: ../../../AttributeReference.rst:1900
msgid ""
"See :ref:`Controlling Code Generation <controlling-code-generation>` for a "
"full list of supported sanitizer flags."
msgstr ""

#: ../../../AttributeReference.rst:1905
msgid "no_sanitize_address, no_address_safety_analysis"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``no_address_safety_analysis`` |br| ``no_sanitize_address`` |br| "
"``no_sanitize_thread`` |br| ``no_sanitize_memory``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``gnu::no_address_safety_analysis`` |br| ``gnu::no_sanitize_address`` |br| "
"``gnu::no_sanitize_thread`` |br| ``clang::no_sanitize_memory``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_sanitize_memory``"
msgstr ""

#: ../../../AttributeReference.rst:1913
msgid ""
"Use ``__attribute__((no_sanitize_address))`` on a function or a global "
"variable declaration to specify that address safety instrumentation (e.g. "
"AddressSanitizer) should not be applied."
msgstr ""

#: ../../../AttributeReference.rst:1919
msgid "no_sanitize_memory"
msgstr ""

#: ../../../AttributeReference.rst:1927
msgid ""
"Use ``__attribute__((no_sanitize_memory))`` on a function declaration to "
"specify that checks for uninitialized memory should not be inserted (e.g. by "
"MemorySanitizer). The function may still be instrumented by the tool to "
"avoid false positives in other places."
msgstr ""

#: ../../../AttributeReference.rst:1934
msgid "no_sanitize_thread"
msgstr ""

#: ../../../AttributeReference.rst:1942
msgid ""
"Use ``__attribute__((no_sanitize_thread))`` on a function declaration to "
"specify that checks for data races on plain (non-atomic) memory accesses "
"should not be inserted by ThreadSanitizer. The function is still "
"instrumented by the tool to avoid false positives and provide meaningful "
"stack traces."
msgstr ""

#: ../../../AttributeReference.rst:1949
msgid "no_speculative_load_hardening"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_speculative_load_hardening``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_speculative_load_hardening``"
msgstr ""

#: ../../../AttributeReference.rst:1985 ../../../AttributeReference.rst:3361
msgid ""
"This attribute can be applied to a function declaration in order to indicate"
msgstr ""

#: ../../../AttributeReference.rst:1956
msgid ""
"that `Speculative Load Hardening <https://llvm.org/docs/"
"SpeculativeLoadHardening.html>`_ is *not* needed for the function body. This "
"can also be applied to a method in Objective C. This attribute will take "
"precedence over the command line flag in the case where `-mspeculative-load-"
"hardening <https://clang.llvm.org/docs/ClangCommandLineReference."
"html#cmdoption-clang-mspeculative-load-hardening>`_ is specified."
msgstr ""

#: ../../../AttributeReference.rst:1961
msgid ""
"Warning: This attribute may not prevent Speculative Load Hardening from "
"being enabled for a function which inlines a function that has the "
"'speculative_load_hardening' attribute. This is intended to provide a "
"maximally conservative model where the code that is marked with the "
"'speculative_load_hardening' attribute will always (even when inlined) be "
"hardened. A user of this attribute may want to mark functions called by a "
"function they do not want to be hardened with the 'noinline' attribute."
msgstr ""

#: ../../../AttributeReference.rst:1988
msgid "no_split_stack"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_split_stack``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::no_split_stack``"
msgstr ""

#: ../../../AttributeReference.rst:1994
msgid ""
"The ``no_split_stack`` attribute disables the emission of the split stack "
"preamble for a particular function. It has no effect if ``-fsplit-stack`` is "
"not specified."
msgstr ""

#: ../../../AttributeReference.rst:2000
msgid "no_stack_protector"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_stack_protector``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_stack_protector``"
msgstr ""

#: ../../../AttributeReference.rst:2006
msgid ""
"Clang supports the ``__attribute__((no_stack_protector))`` attribute which "
"disables the stack protector on the specified function. This attribute is "
"useful for selectively disabling the stack protector on some functions when "
"building with ``-fstack-protector`` compiler option."
msgstr ""

#: ../../../AttributeReference.rst:2011
msgid ""
"For example, it disables the stack protector for the function ``foo`` but "
"function ``bar`` will still be built with the stack protector with the ``-"
"fstack-protector`` option."
msgstr ""

#: ../../../AttributeReference.rst:2024
msgid "noalias"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``noalias``"
msgstr ""

#: ../../../AttributeReference.rst:2030
msgid ""
"The ``noalias`` attribute indicates that the only memory accesses inside "
"function are loads and stores from objects pointed to by its pointer-typed "
"arguments, with arbitrary offsets."
msgstr ""

#: ../../../AttributeReference.rst:2036
msgid "nocf_check"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nocf_check``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::nocf_check``"
msgstr ""

#: ../../../AttributeReference.rst:2042
msgid ""
"Jump Oriented Programming attacks rely on tampering with addresses used by "
"indirect call / jmp, e.g. redirect control-flow to non-programmer intended "
"bytes in the binary. X86 Supports Indirect Branch Tracking (IBT) as part of "
"Control-Flow Enforcement Technology (CET). IBT instruments ENDBR "
"instructions used to specify valid targets of indirect call / jmp. The "
"``nocf_check`` attribute has two roles: 1. Appertains to a function - do not "
"add ENDBR instruction at the beginning of the function. 2. Appertains to a "
"function pointer - do not track the target function of this pointer (by "
"adding nocf_check prefix to the indirect-call instruction)."
msgstr ""

#: ../../../AttributeReference.rst:2056
msgid "nodiscard, warn_unused_result"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``warn_unused_result``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``nodiscard`` |br| ``clang::warn_unused_result`` |br| ``gnu::"
"warn_unused_result``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nodiscard``"
msgstr ""

#: ../../../AttributeReference.rst:2062
msgid ""
"Clang supports the ability to diagnose when the results of a function call "
"expression are discarded under suspicious circumstances. A diagnostic is "
"generated when a function or its return type is marked with "
"``[[nodiscard]]`` (or ``__attribute__((warn_unused_result))``) and the "
"function call appears as a potentially-evaluated discarded-value expression "
"that is not explicitly cast to `void`."
msgstr ""

#: ../../../AttributeReference.rst:2069
msgid ""
"A string literal may optionally be provided to the attribute, which will be "
"reproduced in any resulting diagnostics. Redeclarations using different "
"forms of the attribute (with or without the string literal or with different "
"string literal contents) are allowed. If there are redeclarations of the "
"entity with differing string literals, it is unspecified which one will be "
"used by Clang in any resulting diagnostics."
msgstr ""

#: ../../../AttributeReference.rst:2088
msgid ""
"Additionally, discarded temporaries resulting from a call to a constructor "
"marked with ``[[nodiscard]]`` or a constructor of a type marked "
"``[[nodiscard]]`` will also diagnose. This also applies to type conversions "
"that use the annotated ``[[nodiscard]]`` constructor or result in an "
"annotated type."
msgstr ""

#: ../../../AttributeReference.rst:2117
msgid "noduplicate"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``noduplicate``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::noduplicate``"
msgstr ""

#: ../../../AttributeReference.rst:2123
msgid ""
"The ``noduplicate`` attribute can be placed on function declarations to "
"control whether function calls to this function can be duplicated or not as "
"a result of optimizations. This is required for the implementation of "
"functions with certain special requirements, like the OpenCL \"barrier\" "
"function, that might need to be run concurrently by all the threads that are "
"executing in lockstep on the hardware. For example this attribute applied on "
"the function \"nodupfunc\" in the code below avoids that:"
msgstr ""

#: ../../../AttributeReference.rst:2146
msgid "gets possibly modified by some optimizations into code similar to this:"
msgstr ""

#: ../../../AttributeReference.rst:2158
msgid ""
"where the call to \"nodupfunc\" is duplicated and sunk into the two branches "
"of the condition."
msgstr ""

#: ../../../AttributeReference.rst:2163
msgid "nomicromips"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nomicromips``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::nomicromips``"
msgstr ""

#: ../../../AttributeReference.rst:2179
msgid "noreturn"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``noreturn``"
msgstr ""

#: ../../../AttributeReference.rst:2185
msgid ""
"A function declared as ``[[noreturn]]`` shall not return to its caller. The "
"compiler will generate a diagnostic for a function declared as "
"``[[noreturn]]`` that appears to be capable of returning to its caller."
msgstr ""

#: ../../../AttributeReference.rst:2191
msgid "not_tail_called"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``not_tail_called``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::not_tail_called``"
msgstr ""

#: ../../../AttributeReference.rst:2197
msgid ""
"The ``not_tail_called`` attribute prevents tail-call optimization on "
"statically bound calls. It has no effect on indirect calls. Virtual "
"functions, objective-c methods, and functions marked as ``always_inline`` "
"cannot be marked as ``not_tail_called``."
msgstr ""

#: ../../../AttributeReference.rst:2199
msgid "For example, it prevents tail-call optimization in the following case:"
msgstr ""

#: ../../../AttributeReference.rst:2209
msgid "However, it doesn't prevent tail-call optimization in this case:"
msgstr ""

#: ../../../AttributeReference.rst:2223
msgid "Marking virtual functions as ``not_tail_called`` is an error:"
msgstr ""

#: ../../../AttributeReference.rst:2248
msgid "nothrow"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nothrow``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::nothrow``"
msgstr ""

#: ../../../AttributeReference.rst:2254
msgid ""
"Clang supports the GNU style ``__attribute__((nothrow))`` and Microsoft "
"style ``__declspec(nothrow)`` attribute as an equivalent of `noexcept` on "
"function declarations. This attribute informs the compiler that the "
"annotated function does not throw an exception. This prevents exception-"
"unwinding. This attribute is particularly useful on functions in the C "
"Standard Library that are guaranteed to not throw an exception."
msgstr ""

#: ../../../AttributeReference.rst:2263
msgid "ns_consumed"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ns_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::ns_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:2331
msgid "ns_consumes_self"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ns_consumes_self``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::ns_consumes_self``"
msgstr ""

#: ../../../AttributeReference.rst:2399
msgid "ns_returns_autoreleased"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ns_returns_autoreleased``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::ns_returns_autoreleased``"
msgstr ""

#: ../../../AttributeReference.rst:2467
msgid "ns_returns_not_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ns_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::ns_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:2535
msgid "ns_returns_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ns_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::ns_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:2603
msgid "objc_method_family"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_method_family``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_method_family``"
msgstr ""

#: ../../../AttributeReference.rst:2609
msgid ""
"Many methods in Objective-C have conventional meanings determined by their "
"selectors. It is sometimes useful to be able to mark a method as having a "
"particular conventional meaning despite not having the right selector, or as "
"not having the conventional meaning that its selector would suggest. For "
"these use cases, we provide an attribute to specifically describe the "
"\"method family\" that a method belongs to."
msgstr ""

#: ../../../AttributeReference.rst:2616
msgid ""
"**Usage**: ``__attribute__((objc_method_family(X)))``, where ``X`` is one of "
"``none``, ``alloc``, ``copy``, ``init``, ``mutableCopy``, or ``new``.  This "
"attribute can only be placed at the end of a method declaration:"
msgstr ""

#: ../../../AttributeReference.rst:2624
msgid ""
"Users who do not wish to change the conventional meaning of a method, and "
"who merely want to document its non-standard retain and release semantics, "
"should use the retaining behavior attributes (``ns_returns_retained``, "
"``ns_returns_not_retained``, etc)."
msgstr ""

#: ../../../AttributeReference.rst:2629
msgid "Query for this feature with ``__has_attribute(objc_method_family)``."
msgstr ""

#: ../../../AttributeReference.rst:2633
msgid "objc_requires_super"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_requires_super``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_requires_super``"
msgstr ""

#: ../../../AttributeReference.rst:2639
msgid ""
"Some Objective-C classes allow a subclass to override a particular method in "
"a parent class but expect that the overriding method also calls the "
"overridden method in the parent class. For these cases, we provide an "
"attribute to designate that a method requires a \"call to ``super``\" in the "
"overriding method in the subclass."
msgstr ""

#: ../../../AttributeReference.rst:2645
msgid ""
"**Usage**: ``__attribute__((objc_requires_super))``.  This attribute can "
"only be placed at the end of a method declaration:"
msgstr ""

#: ../../../AttributeReference.rst:2652
msgid ""
"This attribute can only be applied the method declarations within a class, "
"and not a protocol.  Currently this attribute does not enforce any placement "
"of where the call occurs in the overriding method (such as in the case of ``-"
"dealloc`` where the call must appear at the end).  It checks only that it "
"exists."
msgstr ""

#: ../../../AttributeReference.rst:2658
msgid ""
"Note that on both OS X and iOS that the Foundation framework provides a "
"convenience macro ``NS_REQUIRES_SUPER`` that provides syntactic sugar for "
"this attribute:"
msgstr ""

#: ../../../AttributeReference.rst:2666
msgid ""
"This macro is conditionally defined depending on the compiler's support for "
"this attribute.  If the compiler does not support the attribute the macro "
"expands to nothing."
msgstr ""

#: ../../../AttributeReference.rst:2670
msgid ""
"Operationally, when a method has this annotation the compiler will warn if "
"the implementation of an override in a subclass does not call super.  For "
"example:"
msgstr ""

#: ../../../AttributeReference.rst:2681
msgid "optnone"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``optnone``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::optnone``"
msgstr ""

#: ../../../AttributeReference.rst:2687
msgid ""
"The ``optnone`` attribute suppresses essentially all optimizations on a "
"function or method, regardless of the optimization level applied to the "
"compilation unit as a whole.  This is particularly useful when you need to "
"debug a particular function, but it is infeasible to build the entire "
"application without optimization.  Avoiding optimization on the specified "
"function can improve the quality of the debugging information for that "
"function."
msgstr ""

#: ../../../AttributeReference.rst:2695
msgid ""
"This attribute is incompatible with the ``always_inline`` and ``minsize`` "
"attributes."
msgstr ""

#: ../../../AttributeReference.rst:2700
msgid "os_consumed"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_consumed``"
msgstr ""

#: ../../../AttributeReference.rst:2768
msgid "os_consumes_this"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_consumes_this``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_consumes_this``"
msgstr ""

#: ../../../AttributeReference.rst:2836
msgid "os_returns_not_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_returns_not_retained``"
msgstr ""

#: ../../../AttributeReference.rst:2904
msgid "os_returns_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_returns_retained``"
msgstr ""

#: ../../../AttributeReference.rst:2972
msgid "os_returns_retained_on_non_zero"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_returns_retained_on_non_zero``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_returns_retained_on_non_zero``"
msgstr ""

#: ../../../AttributeReference.rst:3040
msgid "os_returns_retained_on_zero"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``os_returns_retained_on_zero``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::os_returns_retained_on_zero``"
msgstr ""

#: ../../../AttributeReference.rst:3108
msgid "overloadable"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``overloadable``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::overloadable``"
msgstr ""

#: ../../../AttributeReference.rst:3114
msgid ""
"Clang provides support for C++ function overloading in C.  Function "
"overloading in C is introduced using the ``overloadable`` attribute.  For "
"example, one might provide several overloaded versions of a ``tgsin`` "
"function that invokes the appropriate standard function computing the sine "
"of a value with ``float``, ``double``, or ``long double`` precision:"
msgstr ""

#: ../../../AttributeReference.rst:3127
msgid ""
"Given these declarations, one can call ``tgsin`` with a ``float`` value to "
"receive a ``float`` result, with a ``double`` to receive a ``double`` "
"result, etc.  Function overloading in C follows the rules of C++ function "
"overloading to pick the best overload given the call arguments, with a few C-"
"specific semantics:"
msgstr ""

#: ../../../AttributeReference.rst:3133
msgid ""
"Conversion from ``float`` or ``double`` to ``long double`` is ranked as a "
"floating-point promotion (per C99) rather than as a floating-point "
"conversion (as in C++)."
msgstr ""

#: ../../../AttributeReference.rst:3137
msgid ""
"A conversion from a pointer of type ``T*`` to a pointer of type ``U*`` is "
"considered a pointer conversion (with conversion rank) if ``T`` and ``U`` "
"are compatible types."
msgstr ""

#: ../../../AttributeReference.rst:3141
msgid ""
"A conversion from type ``T`` to a value of type ``U`` is permitted if ``T`` "
"and ``U`` are compatible types.  This conversion is given \"conversion\" "
"rank."
msgstr ""

#: ../../../AttributeReference.rst:3144
msgid ""
"If no viable candidates are otherwise available, we allow a conversion from "
"a pointer of type ``T*`` to a pointer of type ``U*``, where ``T`` and ``U`` "
"are incompatible. This conversion is ranked below all other types of "
"conversions. Please note: ``U`` lacking qualifiers that are present on ``T`` "
"is sufficient for ``T`` and ``U`` to be incompatible."
msgstr ""

#: ../../../AttributeReference.rst:3150
msgid ""
"The declaration of ``overloadable`` functions is restricted to function "
"declarations and definitions.  If a function is marked with the "
"``overloadable`` attribute, then all declarations and definitions of "
"functions with that name, except for at most one (see the note below about "
"unmarked overloads), must have the ``overloadable`` attribute.  In addition, "
"redeclarations of a function with the ``overloadable`` attribute must have "
"the ``overloadable`` attribute, and redeclarations of a function without the "
"``overloadable`` attribute must *not* have the ``overloadable`` attribute. e."
"g.,"
msgstr ""

#: ../../../AttributeReference.rst:3172
msgid ""
"Functions marked ``overloadable`` must have prototypes.  Therefore, the "
"following code is ill-formed:"
msgstr ""

#: ../../../AttributeReference.rst:3179
msgid ""
"However, ``overloadable`` functions are allowed to use a ellipsis even if "
"there are no named parameters (as is permitted in C++).  This feature is "
"particularly useful when combined with the ``unavailable`` attribute:"
msgstr ""

#: ../../../AttributeReference.rst:3187
msgid ""
"Functions declared with the ``overloadable`` attribute have their names "
"mangled according to the same rules as C++ function names.  For example, the "
"three ``tgsin`` functions in our motivating example get the mangled names "
"``_Z5tgsinf``, ``_Z5tgsind``, and ``_Z5tgsine``, respectively.  There are "
"two caveats to this use of name mangling:"
msgstr ""

#: ../../../AttributeReference.rst:3193
msgid ""
"Future versions of Clang may change the name mangling of functions "
"overloaded in C, so you should not depend on an specific mangling.  To be "
"completely safe, we strongly urge the use of ``static inline`` with "
"``overloadable`` functions."
msgstr ""

#: ../../../AttributeReference.rst:3198
msgid ""
"The ``overloadable`` attribute has almost no meaning when used in C++, "
"because names will already be mangled and functions are already "
"overloadable. However, when an ``overloadable`` function occurs within an "
"``extern \"C\"`` linkage specification, it's name *will* be mangled in the "
"same way as it would in C."
msgstr ""

#: ../../../AttributeReference.rst:3204
msgid ""
"For the purpose of backwards compatibility, at most one function with the "
"same name as other ``overloadable`` functions may omit the ``overloadable`` "
"attribute. In this case, the function without the ``overloadable`` attribute "
"will not have its name mangled."
msgstr ""

#: ../../../AttributeReference.rst:3222
msgid ""
"Support for unmarked overloads is not present in some versions of clang. You "
"may query for it using ``__has_extension(overloadable_unmarked)``."
msgstr ""

#: ../../../AttributeReference.rst:3225
msgid "Query for this attribute with ``__has_attribute(overloadable)``."
msgstr ""

#: ../../../AttributeReference.rst:3229
msgid "patchable_function_entry"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``patchable_function_entry``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::patchable_function_entry``"
msgstr ""

#: ../../../AttributeReference.rst:3235
msgid ""
"``__attribute__((patchable_function_entry(N,M)))`` is used to generate M "
"NOPs before the function entry and N-M NOPs after the function entry. This "
"attribute takes precedence over the command line option ``-fpatchable-"
"function-entry=N,M``. ``M`` defaults to 0 if omitted."
msgstr ""

#: ../../../AttributeReference.rst:3242
msgid "preserve_access_index"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``preserve_access_index``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::preserve_access_index``"
msgstr ""

#: ../../../AttributeReference.rst:3248
msgid ""
"Clang supports the ``__attribute__((preserve_access_index))`` attribute for "
"the BPF target. This attribute may be attached to a struct or union "
"declaration, where if -g is specified, it enables preserving struct or union "
"member access debuginfo indicies of this struct or union, similar to clang "
"``__builtin_preserve_acceess_index()``."
msgstr ""

#: ../../../AttributeReference.rst:3256
msgid "reinitializes"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``reinitializes``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::reinitializes``"
msgstr ""

#: ../../../AttributeReference.rst:3262
msgid ""
"The ``reinitializes`` attribute can be applied to a non-static, non-const C+"
"+ member function to indicate that this member function reinitializes the "
"entire object to a known state, independent of the previous state of the "
"object."
msgstr ""

#: ../../../AttributeReference.rst:3266
msgid ""
"This attribute can be interpreted by static analyzers that warn about uses "
"of an object that has been left in an indeterminate state by a move "
"operation. If a member function marked with the ``reinitializes`` attribute "
"is called on a moved-from object, the analyzer can conclude that the object "
"is no longer in an indeterminate state."
msgstr ""

#: ../../../AttributeReference.rst:3272
msgid ""
"A typical example where this attribute would be used is on functions that "
"clear a container class:"
msgstr ""

#: ../../../AttributeReference.rst:3287
msgid "release_capability, release_shared_capability"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``release_capability`` |br| ``release_shared_capability`` |br| "
"``release_generic_capability`` |br| ``unlock_function``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``clang::release_capability`` |br| ``clang::release_shared_capability`` |br| "
"``clang::release_generic_capability`` |br| ``clang::unlock_function``"
msgstr ""

#: ../../../AttributeReference.rst:3293
msgid "Marks a function as releasing a capability."
msgstr ""

#: ../../../AttributeReference.rst:3297
msgid "short_call, near"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``short_call`` |br| ``near``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::short_call`` |br| ``gnu::near``"
msgstr ""

#: ../../../AttributeReference.rst:3303
msgid ""
"Clang supports the ``__attribute__((long_call))``, ``__attribute__((far))``, "
"``__attribute__((short__call))``, and ``__attribute__((near))`` attributes "
"on MIPS targets. These attributes may only be added to function declarations "
"and change the code generated by the compiler when directly calling the "
"function. The ``short_call`` and ``near`` attributes are synonyms and allow "
"calls to the function to be made using the ``jal`` instruction, which "
"requires the function to be located in the same naturally aligned 256MB "
"segment as the caller.  The ``long_call`` and ``far`` attributes are "
"synonyms and require the use of a different call sequence that works "
"regardless of the distance between the functions."
msgstr ""

#: ../../../AttributeReference.rst:3321
msgid "signal"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``signal``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::signal``"
msgstr ""

#: ../../../AttributeReference.rst:3327
msgid ""
"Clang supports the GNU style ``__attribute__((signal))`` attribute on AVR "
"targets. This attribute may be attached to a function definition and "
"instructs the backend to generate appropriate function entry/exit code so "
"that it can be used directly as an interrupt service routine."
msgstr ""

#: ../../../AttributeReference.rst:3332
msgid ""
"Interrupt handler functions defined with the signal attribute do not re-"
"enable interrupts."
msgstr ""

#: ../../../AttributeReference.rst:3336
msgid "speculative_load_hardening"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``speculative_load_hardening``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::speculative_load_hardening``"
msgstr ""

#: ../../../AttributeReference.rst:3343
msgid ""
"that `Speculative Load Hardening <https://llvm.org/docs/"
"SpeculativeLoadHardening.html>`_ should be enabled for the function body. "
"This can also be applied to a method in Objective C. This attribute will "
"take precedence over the command line flag in the case where `-mno-"
"speculative-load-hardening <https://clang.llvm.org/docs/"
"ClangCommandLineReference.html#cmdoption-clang-mspeculative-load-"
"hardening>`_ is specified."
msgstr ""

#: ../../../AttributeReference.rst:3348
msgid ""
"Speculative Load Hardening is a best-effort mitigation against information "
"leak attacks that make use of control flow miss-speculation - specifically "
"miss-speculation of whether a branch is taken or not. Typically "
"vulnerabilities enabling such attacks are classified as \"Spectre variant "
"#1\". Notably, this does not attempt to mitigate against miss-speculation of "
"branch target, classified as \"Spectre variant #2\" vulnerabilities."
msgstr ""

#: ../../../AttributeReference.rst:3356
msgid ""
"When inlining, the attribute is sticky. Inlining a function that carries "
"this attribute will cause the caller to gain the attribute. This is intended "
"to provide a maximally conservative model where the code in a function "
"annotated with this attribute will always (even after inlining) end up "
"hardened."
msgstr ""

#: ../../../AttributeReference.rst:3364
msgid "sycl_kernel"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``sycl_kernel``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::sycl_kernel``"
msgstr ""

#: ../../../AttributeReference.rst:3370
msgid ""
"The ``sycl_kernel`` attribute specifies that a function template will be "
"used to outline device code and to generate an OpenCL kernel. Here is a code "
"example of the SYCL program, which demonstrates the compiler's outlining "
"job: .. code-block:: c++"
msgstr ""

#: ../../../AttributeReference.rst:3376
msgid "int foo(int x) { return ++x; }"
msgstr ""

#: ../../../AttributeReference.rst:3378
msgid ""
"using namespace cl::sycl; queue Q; buffer<int, 1> a(range<1>{1024}); Q."
"submit([&](handler& cgh) {"
msgstr ""

#: ../../../AttributeReference.rst:3382
msgid ""
"auto A = a.get_access<access::mode::write>(cgh); cgh."
"parallel_for<init_a>(range<1>{1024}, [=](id<1> index) {"
msgstr ""

#: ../../../AttributeReference.rst:3384
msgid "A[index] = index[0] + foo(42);"
msgstr ""

#: ../../../AttributeReference.rst:3385
msgid "});"
msgstr ""

#: ../../../AttributeReference.rst:3386 ../../../AttributeReference.rst:3404
#: ../../../AttributeReference.rst:3413
msgid "}"
msgstr ""

#: ../../../AttributeReference.rst:3388
msgid ""
"A C++ function object passed to the ``parallel_for`` is called a \"SYCL "
"kernel\". A SYCL kernel defines the entry point to the \"device part\" of "
"the code. The compiler will emit all symbols accessible from a \"kernel\". "
"In this code example, the compiler will emit \"foo\" function.  More details "
"about the compilation of functions for the device part can be found in the "
"SYCL 1.2.1 specification Section 6.4. To show to the compiler entry point to "
"the \"device part\" of the code, the SYCL runtime can use the "
"``sycl_kernel`` attribute in the following way: .. code-block:: c++ "
"namespace cl { namespace sycl { class handler {"
msgstr ""

#: ../../../AttributeReference.rst:3400
msgid ""
"template <typename KernelName, typename KernelType/*, ...*/> "
"__attribute__((sycl_kernel)) void sycl_kernel_function(KernelType "
"KernelFuncObj) {"
msgstr ""

#: ../../../AttributeReference.rst:3402
msgid "// ... KernelFuncObj();"
msgstr ""

#: ../../../AttributeReference.rst:3406
msgid ""
"template <typename KernelName, typename KernelType, int Dims> void "
"parallel_for(range<Dims> NumWorkItems, KernelType KernelFunc) {"
msgstr ""

#: ../../../AttributeReference.rst:3408
msgid "#ifdef __SYCL_DEVICE_ONLY__"
msgstr ""

#: ../../../AttributeReference.rst:3409
msgid "sycl_kernel_function<KernelName, KernelType, Dims>(KernelFunc);"
msgstr ""

#: ../../../AttributeReference.rst:3410
msgid "#else"
msgstr ""

#: ../../../AttributeReference.rst:3411
msgid "// Host implementation"
msgstr ""

#: ../../../AttributeReference.rst:3412
msgid "#endif"
msgstr ""

#: ../../../AttributeReference.rst:3414
msgid "}; } // namespace sycl } // namespace cl"
msgstr ""

#: ../../../AttributeReference.rst:3418
msgid ""
"The compiler will also generate an OpenCL kernel using the function marked "
"with the ``sycl_kernel`` attribute. Here is the list of SYCL device compiler "
"expectations with regard to the function marked with the ``sycl_kernel`` "
"attribute:"
msgstr ""

#: ../../../AttributeReference.rst:3423
msgid ""
"The function must be a template with at least two type template parameters. "
"The compiler generates an OpenCL kernel and uses the first template "
"parameter as a unique name for the generated OpenCL kernel. The host "
"application uses this unique name to invoke the OpenCL kernel generated for "
"the SYCL kernel specialized by this name and second template parameter "
"``KernelType`` (which might be an unnamed function object type)."
msgstr ""

#: ../../../AttributeReference.rst:3429
msgid ""
"The function must have at least one parameter. The first parameter is "
"required to be a function object type (named or unnamed i.e. lambda). The "
"compiler uses function object type fields to generate OpenCL kernel "
"parameters."
msgstr ""

#: ../../../AttributeReference.rst:3433
msgid ""
"The function must return void. The compiler reuses the body of marked "
"functions to generate the OpenCL kernel body, and the OpenCL kernel must "
"return `void`."
msgstr ""

#: ../../../AttributeReference.rst:3436
msgid "The SYCL kernel in the previous code sample meets these expectations."
msgstr ""

#: ../../../AttributeReference.rst:3440
msgid "target"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``target``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::target``"
msgstr ""

#: ../../../AttributeReference.rst:3446
msgid ""
"Clang supports the GNU style ``__attribute__((target(\"OPTIONS\")))`` "
"attribute. This attribute may be attached to a function definition and "
"instructs the backend to use different code generation options than were "
"passed on the command line."
msgstr ""

#: ../../../AttributeReference.rst:3451
msgid ""
"The current set of options correspond to the existing \"subtarget features\" "
"for the target with or without a \"-mno-\" in front corresponding to the "
"absence of the feature, as well as ``arch=\"CPU\"`` which will change the "
"default \"CPU\" for the function."
msgstr ""

#: ../../../AttributeReference.rst:3456
msgid ""
"For AArch64, the attribute also allows the \"branch-protection=<args>\" "
"option, where the permissible arguments and their effect on code generation "
"are the same as for the command-line option ``-mbranch-protection``."
msgstr ""

#: ../../../AttributeReference.rst:3460
msgid ""
"Example \"subtarget features\" from the x86 backend include: \"mmx\", "
"\"sse\", \"sse4.2\", \"avx\", \"xop\" and largely correspond to the machine "
"specific options handled by the front end."
msgstr ""

#: ../../../AttributeReference.rst:3464
msgid ""
"Additionally, this attribute supports function multiversioning for ELF based "
"x86/x86-64 targets, which can be used to create multiple implementations of "
"the same function that will be resolved at runtime based on the priority of "
"their ``target`` attribute strings. A function is considered a "
"multiversioned function if either two declarations of the function have "
"different ``target`` attribute strings, or if it has a ``target`` attribute "
"string of ``default``.  For example:"
msgstr ""

#: ../../../AttributeReference.rst:3479
msgid ""
"All multiversioned functions must contain a ``default`` (fallback) "
"implementation, otherwise usages of the function are considered invalid. "
"Additionally, a function may not become multiversioned after its first use."
msgstr ""

#: ../../../AttributeReference.rst:3485
msgid "try_acquire_capability, try_acquire_shared_capability"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``try_acquire_capability`` |br| ``try_acquire_shared_capability``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``clang::try_acquire_capability`` |br| ``clang::"
"try_acquire_shared_capability``"
msgstr ""

#: ../../../AttributeReference.rst:3491
msgid ""
"Marks a function that attempts to acquire a capability. This function may "
"fail to actually acquire the capability; they accept a Boolean value "
"determining whether acquiring the capability means success (true), or "
"failing to acquire the capability means success (false)."
msgstr ""

#: ../../../AttributeReference.rst:3498 ../../../AttributeReference.rst:3514
msgid "xray_always_instrument, xray_never_instrument, xray_log_args"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``xray_always_instrument`` |br| ``xray_never_instrument``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::xray_always_instrument`` |br| ``clang::xray_never_instrument``"
msgstr ""

#: ../../../AttributeReference.rst:3504 ../../../AttributeReference.rst:3520
msgid ""
"``__attribute__((xray_always_instrument))`` or ``[[clang::"
"xray_always_instrument]]`` is used to mark member functions (in C++), "
"methods (in Objective C), and free functions (in C, C++, and Objective C) to "
"be instrumented with XRay. This will cause the function to always have space "
"at the beginning and exit points to allow for runtime patching."
msgstr ""

#: ../../../AttributeReference.rst:3506 ../../../AttributeReference.rst:3522
msgid ""
"Conversely, ``__attribute__((xray_never_instrument))`` or ``[[clang::"
"xray_never_instrument]]`` will inhibit the insertion of these "
"instrumentation points."
msgstr ""

#: ../../../AttributeReference.rst:3508 ../../../AttributeReference.rst:3524
msgid ""
"If a function has neither of these attributes, they become subject to the "
"XRay heuristics used to determine whether a function should be instrumented "
"or otherwise."
msgstr ""

#: ../../../AttributeReference.rst:3510 ../../../AttributeReference.rst:3526
msgid ""
"``__attribute__((xray_log_args(N)))`` or ``[[clang::xray_log_args(N)]]`` is "
"used to preserve N function arguments for the logging function.  Currently, "
"only N==1 is supported."
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``xray_log_args``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::xray_log_args``"
msgstr ""

#: ../../../AttributeReference.rst:3530
msgid "Variable Attributes"
msgstr ""

#: ../../../AttributeReference.rst:3534
msgid "always_destroy"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``always_destroy``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::always_destroy``"
msgstr ""

#: ../../../AttributeReference.rst:3540
msgid ""
"The ``always_destroy`` attribute specifies that a variable with static or "
"thread storage duration should have its exit-time destructor run. This "
"attribute is the default unless clang was invoked with -fno-c++-static-"
"destructors."
msgstr ""

#: ../../../AttributeReference.rst:3546
msgid "dllexport"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``dllexport``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::dllexport``"
msgstr ""

#: ../../../AttributeReference.rst:3552
msgid ""
"The ``__declspec(dllexport)`` attribute declares a variable, function, or "
"Objective-C interface to be exported from the module.  It is available under "
"the ``-fdeclspec`` flag for compatibility with various compilers.  The "
"primary use is for COFF object files which explicitly specify what "
"interfaces are available for external use.  See the dllexport_ documentation "
"on MSDN for more information."
msgstr ""

#: ../../../AttributeReference.rst:3563
msgid "dllimport"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``dllimport``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::dllimport``"
msgstr ""

#: ../../../AttributeReference.rst:3569
msgid ""
"The ``__declspec(dllimport)`` attribute declares a variable, function, or "
"Objective-C interface to be imported from an external module.  It is "
"available under the ``-fdeclspec`` flag for compatibility with various "
"compilers.  The primary use is for COFF object files which explicitly "
"specify what interfaces are imported from external modules.  See the "
"dllimport_ documentation on MSDN for more information."
msgstr ""

#: ../../../AttributeReference.rst:3580
msgid "init_seg"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``init_seg``"
msgstr ""

#: ../../../AttributeReference.rst:3586
msgid ""
"The attribute applied by ``pragma init_seg()`` controls the section into "
"which global initialization function pointers are emitted.  It is only "
"available with ``-fms-extensions``.  Typically, this function pointer is "
"emitted into ``.CRT$XCU`` on Windows.  The user can change the order of "
"initialization by using a different section name with the same ``.CRT$XC`` "
"prefix and a suffix that sorts lexicographically before or after the "
"standard ``.CRT$XCU`` sections.  See the init_seg_ documentation on MSDN for "
"more information."
msgstr ""

#: ../../../AttributeReference.rst:3599
msgid "maybe_unused, unused"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``unused``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``maybe_unused`` |br| ``gnu::unused``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``maybe_unused``"
msgstr ""

#: ../../../AttributeReference.rst:3605
msgid ""
"When passing the ``-Wunused`` flag to Clang, entities that are unused by the "
"program may be diagnosed. The ``[[maybe_unused]]`` (or "
"``__attribute__((unused))``) attribute can be used to silence such "
"diagnostics when the entity cannot be removed. For instance, a local "
"variable may exist solely for use in an ``assert()`` statement, which makes "
"the local variable unused when ``NDEBUG`` is defined."
msgstr ""

#: ../../../AttributeReference.rst:3612
msgid ""
"The attribute may be applied to the declaration of a class, a typedef, a "
"variable, a function or method, a function parameter, an enumeration, an "
"enumerator, a non-static data member, or a label."
msgstr ""

#: ../../../AttributeReference.rst:3627
msgid "no_destroy"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_destroy``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::no_destroy``"
msgstr ""

#: ../../../AttributeReference.rst:3633
msgid ""
"The ``no_destroy`` attribute specifies that a variable with static or thread "
"storage duration shouldn't have its exit-time destructor run. Annotating "
"every static and thread duration variable with this attribute is equivalent "
"to invoking clang with -fno-c++-static-destructors."
msgstr ""

#: ../../../AttributeReference.rst:3638
msgid ""
"If a variable is declared with this attribute, clang doesn't access check or "
"generate the type's destructor. If you have a type that you only want to be "
"annotated with ``no_destroy``, you can therefore declare the destructor "
"private:"
msgstr ""

#: ../../../AttributeReference.rst:3652
msgid ""
"Note that destructors are still required for subobjects of aggregates "
"annotated with this attribute. This is because previously constructed "
"subobjects need to be destroyed if an exception gets thrown before the "
"initialization of the complete object is complete. For instance:"
msgstr ""

#: ../../../AttributeReference.rst:3668
msgid ""
"Here, if the construction of `array[9]` fails with an exception, "
"`array[0..8]` will be destroyed, so the element's destructor needs to be "
"accessible."
msgstr ""

#: ../../../AttributeReference.rst:3673
msgid "nodebug"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nodebug``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::nodebug``"
msgstr ""

#: ../../../AttributeReference.rst:3679
msgid ""
"The ``nodebug`` attribute allows you to suppress debugging information for a "
"function or method, or for a variable that is not a parameter or a non-"
"static data member."
msgstr ""

#: ../../../AttributeReference.rst:3685
msgid "noescape"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``noescape``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::noescape``"
msgstr ""

#: ../../../AttributeReference.rst:3691
msgid ""
"``noescape`` placed on a function parameter of a pointer type is used to "
"inform the compiler that the pointer cannot escape: that is, no reference to "
"the object the pointer points to that is derived from the parameter value "
"will survive after the function returns. Users are responsible for making "
"sure parameters annotated with ``noescape`` do not actuallly escape."
msgstr ""

#: ../../../AttributeReference.rst:3711
msgid ""
"Additionally, when the parameter is a `block pointer <https://clang.llvm.org/"
"docs/BlockLanguageSpec.html>`, the same restriction applies to copies of the "
"block. For example:"
msgstr ""

#: ../../../AttributeReference.rst:3731
msgid "nosvm"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nosvm``"
msgstr ""

#: ../../../AttributeReference.rst:3737
msgid ""
"OpenCL 2.0 supports the optional ``__attribute__((nosvm))`` qualifier for "
"pointer variable. It informs the compiler that the pointer does not refer to "
"a shared virtual memory region. See OpenCL v2.0 s6.7.2 for details."
msgstr ""

#: ../../../AttributeReference.rst:3741
msgid ""
"Since it is not widely used and has been removed from OpenCL 2.1, it is "
"ignored by Clang."
msgstr ""

#: ../../../AttributeReference.rst:3746
msgid "objc_externally_retained"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_externally_retained``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_externally_retained``"
msgstr ""

#: ../../../AttributeReference.rst:3752
msgid ""
"The ``objc_externally_retained`` attribute can be applied to strong local "
"variables, functions, methods, or blocks to opt into `externally-retained "
"semantics <https://clang.llvm.org/docs/AutomaticReferenceCounting."
"html#externally-retained-variables>`_."
msgstr ""

#: ../../../AttributeReference.rst:3757
msgid ""
"When applied to the definition of a function, method, or block, every "
"parameter of the function with implicit strong retainable object pointer "
"type is considered externally-retained, and becomes ``const``. By explicitly "
"annotating a parameter with ``__strong``, you can opt back into the default "
"non-externally-retained behaviour for that parameter. For instance, "
"``first_param`` is externally-retained below, but not ``second_param``:"
msgstr ""

#: ../../../AttributeReference.rst:3771
msgid ""
"Likewise, when applied to a strong local variable, that variable becomes "
"``const`` and is considered externally-retained."
msgstr ""

#: ../../../AttributeReference.rst:3774
msgid "When compiled without ``-fobjc-arc``, this attribute is ignored."
msgstr ""

#: ../../../AttributeReference.rst:3778
msgid "pass_object_size, pass_dynamic_object_size"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``pass_object_size`` |br| ``pass_dynamic_object_size``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::pass_object_size`` |br| ``clang::pass_dynamic_object_size``"
msgstr ""

#: ../../../AttributeReference.rst:3784
msgid ""
"The mangling of functions with parameters that are annotated with "
"``pass_object_size`` is subject to change. You can get around this by using "
"``__asm__(\"foo\")`` to explicitly name your functions, thus preserving your "
"ABI; also, non-overloadable C functions with ``pass_object_size`` are not "
"mangled."
msgstr ""

#: ../../../AttributeReference.rst:3790
msgid ""
"The ``pass_object_size(Type)`` attribute can be placed on function "
"parameters to instruct clang to call ``__builtin_object_size(param, Type)`` "
"at each callsite of said function, and implicitly pass the result of this "
"call in as an invisible argument of type ``size_t`` directly after the "
"parameter annotated with ``pass_object_size``. Clang will also replace any "
"calls to ``__builtin_object_size(param, Type)`` in the function by said "
"implicit parameter."
msgstr ""

#: ../../../AttributeReference.rst:3798 ../../../AttributeReference.rst:4170
msgid "Example usage:"
msgstr ""

#: ../../../AttributeReference.rst:3818
msgid ""
"If successfully evaluating ``__builtin_object_size(param, Type)`` at the "
"callsite is not possible, then the \"failed\" value is passed in. So, using "
"the definition of ``bzero1`` from above, the following code would exit "
"cleanly:"
msgstr ""

#: ../../../AttributeReference.rst:3830
msgid ""
"``pass_object_size`` plays a part in overload resolution. If two overload "
"candidates are otherwise equally good, then the overload with one or more "
"parameters with ``pass_object_size`` is preferred. This implies that the "
"choice between two identical overloads both with ``pass_object_size`` on one "
"or more parameters will always be ambiguous; for this reason, having two "
"such overloads is illegal. For example:"
msgstr ""

#: ../../../AttributeReference.rst:3864
msgid ""
"Currently, ``pass_object_size`` is a bit restricted in terms of its usage:"
msgstr ""

#: ../../../AttributeReference.rst:3866
msgid "Only one use of ``pass_object_size`` is allowed per parameter."
msgstr ""

#: ../../../AttributeReference.rst:3868
msgid ""
"It is an error to take the address of a function with ``pass_object_size`` "
"on any of its parameters. If you wish to do this, you can create an overload "
"without ``pass_object_size`` on any parameters."
msgstr ""

#: ../../../AttributeReference.rst:3872
msgid ""
"It is an error to apply the ``pass_object_size`` attribute to parameters "
"that are not pointers. Additionally, any parameter that ``pass_object_size`` "
"is applied to must be marked ``const`` at its function's definition."
msgstr ""

#: ../../../AttributeReference.rst:3876
msgid ""
"Clang also supports the ``pass_dynamic_object_size`` attribute, which "
"behaves identically to ``pass_object_size``, but evaluates a call to "
"``__builtin_dynamic_object_size`` at the callee instead of "
"``__builtin_object_size``. ``__builtin_dynamic_object_size`` provides some "
"extra runtime checks when the object size can't be determined at compile-"
"time. You can read more about ``__builtin_dynamic_object_size`` `here "
"<https://clang.llvm.org/docs/LanguageExtensions.html#evaluating-object-size-"
"dynamically>`_."
msgstr ""

#: ../../../AttributeReference.rst:3886
msgid "require_constant_initialization, constinit (C++20)"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``require_constant_initialization``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::require_constant_initialization``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``constinit``"
msgstr ""

#: ../../../AttributeReference.rst:3892
msgid ""
"This attribute specifies that the variable to which it is attached is "
"intended to have a `constant initializer <http://en.cppreference.com/w/cpp/"
"language/constant_initialization>`_ according to the rules of [basic.start."
"static]. The variable is required to have static or thread storage duration. "
"If the initialization of the variable is not a constant initializer an error "
"will be produced. This attribute may only be used in C++; the ``constinit`` "
"spelling is only accepted in C++20 onwards."
msgstr ""

#: ../../../AttributeReference.rst:3900
msgid ""
"Note that in C++03 strict constant expression checking is not done. Instead "
"the attribute reports if Clang can emit the variable as a constant, even if "
"it's not technically a 'constant initializer'. This behavior is non-portable."
msgstr ""

#: ../../../AttributeReference.rst:3904
msgid ""
"Static storage duration variables with constant initializers avoid hard-to-"
"find bugs caused by the indeterminate order of dynamic initialization. They "
"can also be safely used during dynamic initialization across translation "
"units."
msgstr ""

#: ../../../AttributeReference.rst:3908
msgid ""
"This attribute acts as a compile time assertion that the requirements for "
"constant initialization have been met. Since these requirements change "
"between dialects and have subtle pitfalls it's important to fail fast "
"instead of silently falling back on dynamic initialization."
msgstr ""

#: ../../../AttributeReference.rst:3913
msgid ""
"The first use of the attribute on a variable must be part of, or precede, "
"the initializing declaration of the variable. C++20 requires the "
"``constinit`` spelling of the attribute to be present on the initializing "
"declaration if it is used anywhere. The other spellings can be specified on "
"a forward declaration and omitted on a later initializing declaration."
msgstr ""

#: ../../../AttributeReference.rst:3933
msgid "section, __declspec(allocate)"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``section``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::section``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``allocate``"
msgstr ""

#: ../../../AttributeReference.rst:3939
msgid ""
"The ``section`` attribute allows you to specify a specific section a global "
"variable or function should be in after translation."
msgstr ""

#: ../../../AttributeReference.rst:3944
msgid "swift_context"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``swift_context``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::swift_context``"
msgstr ""

#: ../../../AttributeReference.rst:3950
msgid ""
"The ``swift_context`` attribute marks a parameter of a ``swiftcall`` "
"function as having the special context-parameter ABI treatment."
msgstr ""

#: ../../../AttributeReference.rst:3953
msgid ""
"This treatment generally passes the context value in a special register "
"which is normally callee-preserved."
msgstr ""

#: ../../../AttributeReference.rst:3956
msgid ""
"A ``swift_context`` parameter must either be the last parameter or must be "
"followed by a ``swift_error_result`` parameter (which itself must always be "
"the last parameter)."
msgstr ""

#: ../../../AttributeReference.rst:3960
msgid "A context parameter must have pointer or reference type."
msgstr ""

#: ../../../AttributeReference.rst:3964
msgid "swift_error_result"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``swift_error_result``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::swift_error_result``"
msgstr ""

#: ../../../AttributeReference.rst:3970
msgid ""
"The ``swift_error_result`` attribute marks a parameter of a ``swiftcall`` "
"function as having the special error-result ABI treatment."
msgstr ""

#: ../../../AttributeReference.rst:3973
msgid ""
"This treatment generally passes the underlying error value in and out of the "
"function through a special register which is normally callee-preserved. This "
"is modeled in C by pretending that the register is addressable memory:"
msgstr ""

#: ../../../AttributeReference.rst:3977
msgid ""
"The caller appears to pass the address of a variable of pointer type. The "
"current value of this variable is copied into the register before the call; "
"if the call returns normally, the value is copied back into the variable."
msgstr ""

#: ../../../AttributeReference.rst:3982
msgid ""
"The callee appears to receive the address of a variable.  This address is "
"actually a hidden location in its own stack, initialized with the value of "
"the register upon entry.  When the function returns normally, the value in "
"that hidden location is written back to the register."
msgstr ""

#: ../../../AttributeReference.rst:3987
msgid ""
"A ``swift_error_result`` parameter must be the last parameter, and it must "
"be preceded by a ``swift_context`` parameter."
msgstr ""

#: ../../../AttributeReference.rst:3990
msgid ""
"A ``swift_error_result`` parameter must have type ``T**`` or ``T*&`` for "
"some type T.  Note that no qualifiers are permitted on the intermediate "
"level."
msgstr ""

#: ../../../AttributeReference.rst:3993
msgid ""
"It is undefined behavior if the caller does not pass a pointer or reference "
"to a valid object."
msgstr ""

#: ../../../AttributeReference.rst:3996
msgid ""
"The standard convention is that the error value itself (that is, the value "
"stored in the apparent argument) will be null upon function entry, but this "
"is not enforced by the ABI."
msgstr ""

#: ../../../AttributeReference.rst:4002
msgid "swift_indirect_result"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``swift_indirect_result``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::swift_indirect_result``"
msgstr ""

#: ../../../AttributeReference.rst:4008
msgid ""
"The ``swift_indirect_result`` attribute marks a parameter of a ``swiftcall`` "
"function as having the special indirect-result ABI treatment."
msgstr ""

#: ../../../AttributeReference.rst:4011
msgid ""
"This treatment gives the parameter the target's normal indirect-result ABI "
"treatment, which may involve passing it differently from an ordinary "
"parameter.  However, only the first indirect result will receive this "
"treatment.  Furthermore, low-level lowering may decide that a direct result "
"must be returned indirectly; if so, this will take priority over the "
"``swift_indirect_result`` parameters."
msgstr ""

#: ../../../AttributeReference.rst:4018
msgid ""
"A ``swift_indirect_result`` parameter must either be the first parameter or "
"follow another ``swift_indirect_result`` parameter."
msgstr ""

#: ../../../AttributeReference.rst:4021
msgid ""
"A ``swift_indirect_result`` parameter must have type ``T*`` or ``T&`` for "
"some object type ``T``.  If ``T`` is a complete type at the point of "
"definition of a function, it is undefined behavior if the argument value "
"does not point to storage of adequate size and alignment for a value of type "
"``T``."
msgstr ""

#: ../../../AttributeReference.rst:4027
msgid ""
"Making indirect results explicit in the signature allows C functions to "
"directly construct objects into them without relying on language "
"optimizations like C++'s named return value optimization (NRVO)."
msgstr ""

#: ../../../AttributeReference.rst:4033
msgid "swiftcall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``swiftcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::swiftcall``"
msgstr ""

#: ../../../AttributeReference.rst:4039
msgid ""
"The ``swiftcall`` attribute indicates that a function should be called using "
"the Swift calling convention for a function or function pointer."
msgstr ""

#: ../../../AttributeReference.rst:4042
msgid ""
"The lowering for the Swift calling convention, as described by the Swift ABI "
"documentation, occurs in multiple phases.  The first, \"high-level\" phase "
"breaks down the formal parameters and results into innately direct and "
"indirect components, adds implicit paraameters for the generic signature, "
"and assigns the context and error ABI treatments to parameters where "
"applicable.  The second phase breaks down the direct parameters and results "
"from the first phase and assigns them to registers or the stack.  The "
"``swiftcall`` convention only handles this second phase of lowering; the C "
"function type must accurately reflect the results of the first phase, as "
"follows:"
msgstr ""

#: ../../../AttributeReference.rst:4053
msgid ""
"Results classified as indirect by high-level lowering should be represented "
"as parameters with the ``swift_indirect_result`` attribute."
msgstr ""

#: ../../../AttributeReference.rst:4056
msgid ""
"Results classified as direct by high-level lowering should be represented as "
"follows:"
msgstr ""

#: ../../../AttributeReference.rst:4059
msgid "First, remove any empty direct results."
msgstr ""

#: ../../../AttributeReference.rst:4061
msgid "If there are no direct results, the C result type should be ``void``."
msgstr ""

#: ../../../AttributeReference.rst:4063
msgid ""
"If there is one direct result, the C result type should be a type with the "
"exact layout of that result type."
msgstr ""

#: ../../../AttributeReference.rst:4066
msgid ""
"If there are a multiple direct results, the C result type should be a struct "
"type with the exact layout of a tuple of those results."
msgstr ""

#: ../../../AttributeReference.rst:4069
msgid ""
"Parameters classified as indirect by high-level lowering should be "
"represented as parameters of pointer type."
msgstr ""

#: ../../../AttributeReference.rst:4072
msgid ""
"Parameters classified as direct by high-level lowering should be omitted if "
"they are empty types; otherwise, they should be represented as a parameter "
"type with a layout exactly matching the layout of the Swift parameter type."
msgstr ""

#: ../../../AttributeReference.rst:4077
msgid ""
"The context parameter, if present, should be represented as a trailing "
"parameter with the ``swift_context`` attribute."
msgstr ""

#: ../../../AttributeReference.rst:4080
msgid ""
"The error result parameter, if present, should be represented as a trailing "
"parameter (always following a context parameter) with the "
"``swift_error_result`` attribute."
msgstr ""

#: ../../../AttributeReference.rst:4084
msgid ""
"``swiftcall`` does not support variadic arguments or unprototyped functions."
msgstr ""

#: ../../../AttributeReference.rst:4086
msgid ""
"The parameter ABI treatment attributes are aspects of the function type. A "
"function type which which applies an ABI treatment attribute to a parameter "
"is a different type from an otherwise-identical function type that does "
"not.  A single parameter may not have multiple ABI treatment attributes."
msgstr ""

#: ../../../AttributeReference.rst:4092
msgid ""
"Support for this feature is target-dependent, although it should be "
"supported on every target that Swift supports.  Query for this support with "
"``__has_attribute(swiftcall)``.  This implies support for the "
"``swift_context``, ``swift_error_result``, and ``swift_indirect_result`` "
"attributes."
msgstr ""

#: ../../../AttributeReference.rst:4100
msgid "thread"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``thread``"
msgstr ""

#: ../../../AttributeReference.rst:4106
msgid ""
"The ``__declspec(thread)`` attribute declares a variable with thread local "
"storage.  It is available under the ``-fms-extensions`` flag for MSVC "
"compatibility.  See the documentation for `__declspec(thread)`_ on MSDN."
msgstr ""

#: ../../../AttributeReference.rst:4112
msgid ""
"In Clang, ``__declspec(thread)`` is generally equivalent in functionality to "
"the GNU ``__thread`` keyword.  The variable must not have a destructor and "
"must have a constant initializer, if any.  The attribute only applies to "
"variables declared with static storage duration, such as globals, class "
"static data members, and static locals."
msgstr ""

#: ../../../AttributeReference.rst:4120
msgid "tls_model"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``tls_model``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::tls_model``"
msgstr ""

#: ../../../AttributeReference.rst:4126
msgid ""
"The ``tls_model`` attribute allows you to specify which thread-local storage "
"model to use. It accepts the following strings:"
msgstr ""

#: ../../../AttributeReference.rst:4129
msgid "global-dynamic"
msgstr ""

#: ../../../AttributeReference.rst:4130
msgid "local-dynamic"
msgstr ""

#: ../../../AttributeReference.rst:4131
msgid "initial-exec"
msgstr ""

#: ../../../AttributeReference.rst:4132
msgid "local-exec"
msgstr ""

#: ../../../AttributeReference.rst:4134
msgid "TLS models are mutually exclusive."
msgstr ""

#: ../../../AttributeReference.rst:4138
msgid "uninitialized"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``uninitialized``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::uninitialized``"
msgstr ""

#: ../../../AttributeReference.rst:4144
msgid ""
"The command-line parameter ``-ftrivial-auto-var-init=*`` can be used to "
"initialize trivial automatic stack variables. By default, trivial automatic "
"stack variables are uninitialized. This attribute is used to override the "
"command-line parameter, forcing variables to remain uninitialized. It has no "
"semantic meaning in that using uninitialized values is undefined behavior, "
"it rather documents the programmer's intent."
msgstr ""

#: ../../../AttributeReference.rst:4153
msgid "Field Attributes"
msgstr ""

#: ../../../AttributeReference.rst:4157
msgid "no_unique_address"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``no_unique_address``"
msgstr ""

#: ../../../AttributeReference.rst:4163
msgid ""
"The ``no_unique_address`` attribute allows tail padding in a non-static data "
"member to overlap other members of the enclosing class (and in the special "
"case when the type is empty, permits it to fully overlap other members). The "
"field is laid out as if a base class were encountered at the corresponding "
"point within the class (except that it does not share a vptr with the "
"enclosing object)."
msgstr ""

#: ../../../AttributeReference.rst:4181
msgid ""
"``[[no_unique_address]]`` is a standard C++20 attribute. Clang supports its "
"use in C++11 onwards."
msgstr ""

#: ../../../AttributeReference.rst:4186
msgid "Type Attributes"
msgstr ""

#: ../../../AttributeReference.rst:4190
msgid "__ptr32"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__ptr32``"
msgstr ""

#: ../../../AttributeReference.rst:4196
msgid ""
"The ``__ptr32`` qualifier represents a native pointer on a 32-bit system. On "
"a 64-bit system, a pointer with ``__ptr32`` is extended to a 64-bit pointer. "
"The ``__sptr`` and ``__uptr`` qualifiers can be used to specify whether the "
"pointer is sign extended or zero extended. This qualifier is enabled under "
"``-fms-extensions``."
msgstr ""

#: ../../../AttributeReference.rst:4204
msgid "__ptr64"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__ptr64``"
msgstr ""

#: ../../../AttributeReference.rst:4210
msgid ""
"The ``__ptr64`` qualifier represents a native pointer on a 64-bit system. On "
"a 32-bit system, a ``__ptr64`` pointer is truncated to a 32-bit pointer. "
"This qualifier is enabled under ``-fms-extensions``."
msgstr ""

#: ../../../AttributeReference.rst:4216
msgid "__sptr"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__sptr``"
msgstr ""

#: ../../../AttributeReference.rst:4222
msgid ""
"The ``__sptr`` qualifier specifies that a 32-bit pointer should be sign "
"extended when converted to a 64-bit pointer."
msgstr ""

#: ../../../AttributeReference.rst:4227
msgid "__uptr"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__uptr``"
msgstr ""

#: ../../../AttributeReference.rst:4233
msgid ""
"The ``__uptr`` qualifier specifies that a 32-bit pointer should be zero "
"extended when converted to a 64-bit pointer."
msgstr ""

#: ../../../AttributeReference.rst:4238
msgid "align_value"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``align_value``"
msgstr ""

#: ../../../AttributeReference.rst:4244
msgid ""
"The align_value attribute can be added to the typedef of a pointer type or "
"the declaration of a variable of pointer or reference type. It specifies "
"that the pointer will point to, or the reference will bind to, only objects "
"with at least the provided alignment. This alignment value must be some "
"positive power of 2."
msgstr ""

#: ../../../AttributeReference.rst:4256
msgid ""
"If the pointer value does not have the specified alignment at runtime, the "
"behavior of the program is undefined."
msgstr ""

#: ../../../AttributeReference.rst:4261
msgid "hip_pinned_shadow"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``hip_pinned_shadow``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__hip_pinned_shadow__``"
msgstr ""

#: ../../../AttributeReference.rst:4267
msgid ""
"The GNU style attribute __attribute__((hip_pinned_shadow)) or MSVC style "
"attribute __declspec(hip_pinned_shadow) can be added to the definition of a "
"global variable to indicate it is a HIP pinned shadow variable. A HIP pinned "
"shadow variable can be accessed on both device side and host side. It has "
"external linkage and is not initialized on device side. It has internal "
"linkage and is initialized by the initializer on host side."
msgstr ""

#: ../../../AttributeReference.rst:4276
msgid "noderef"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``noderef``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::noderef``"
msgstr ""

#: ../../../AttributeReference.rst:4282
msgid ""
"The ``noderef`` attribute causes clang to diagnose dereferences of annotated "
"pointer types. This is ideally used with pointers that point to special "
"memory which cannot be read from or written to, but allowing for the pointer "
"to be used in pointer arithmetic. The following are examples of valid "
"expressions where dereferences are diagnosed:"
msgstr ""

#: ../../../AttributeReference.rst:4305
msgid ""
"Not all dereferences may diagnose a warning if the value directed by the "
"pointer may not be accessed. The following are examples of valid expressions "
"where may not be diagnosed:"
msgstr ""

#: ../../../AttributeReference.rst:4322
msgid ""
"``noderef`` is currently only supported for pointers and arrays and not "
"usable for references or Objective-C object pointers."
msgstr ""

#: ../../../AttributeReference.rst:4336
msgid "objc_class_stub"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_class_stub``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_class_stub``"
msgstr ""

#: ../../../AttributeReference.rst:4342
msgid ""
"This attribute specifies that the Objective-C class to which it applies is "
"instantiated at runtime."
msgstr ""

#: ../../../AttributeReference.rst:4345
msgid ""
"Unlike ``__attribute__((objc_runtime_visible))``, a class having this "
"attribute still has a \"class stub\" that is visible to the linker. This "
"allows categories to be defined. Static message sends with the class as a "
"receiver use a special access pattern to ensure the class is lazily "
"instantiated from the class stub."
msgstr ""

#: ../../../AttributeReference.rst:4350
msgid ""
"Classes annotated with this attribute cannot be subclassed and cannot have "
"implementations defined for them. This attribute is intended for use in "
"Swift-generated headers for classes defined in Swift."
msgstr ""

#: ../../../AttributeReference.rst:4354
msgid "Adding or removing this attribute to a class is an ABI-breaking change."
msgstr ""

#: ../../../AttributeReference.rst:4358
msgid "Statement Attributes"
msgstr ""

#: ../../../AttributeReference.rst:4362
msgid "#pragma clang loop"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``clang loop`` |br| ``unroll`` |br| ``nounroll`` |br| ``unroll_and_jam`` |"
"br| ``nounroll_and_jam``"
msgstr ""

#: ../../../AttributeReference.rst:4368
msgid ""
"The ``#pragma clang loop`` directive allows loop optimization hints to be "
"specified for the subsequent loop. The directive allows pipelining to be "
"disabled, or vectorization, vector predication, interleaving, and unrolling "
"to be enabled or disabled. Vector width, vector predication, interleave "
"count, unrolling count, and the initiation interval for pipelining can be "
"explicitly specified. See `language extensions <http://clang.llvm.org/docs/"
"LanguageExtensions.html#extensions-for-loop-hint-optimizations>`_ for "
"details."
msgstr ""

#: ../../../AttributeReference.rst:4379
msgid "#pragma unroll, #pragma nounroll"
msgstr ""

#: ../../../AttributeReference.rst:4385
msgid ""
"Loop unrolling optimization hints can be specified with ``#pragma unroll`` "
"and ``#pragma nounroll``. The pragma is placed immediately before a for, "
"while, do-while, or c++11 range-based for loop."
msgstr ""

#: ../../../AttributeReference.rst:4389
msgid ""
"Specifying ``#pragma unroll`` without a parameter directs the loop unroller "
"to attempt to fully unroll the loop if the trip count is known at compile "
"time and attempt to partially unroll the loop if the trip count is not known "
"at compile time:"
msgstr ""

#: ../../../AttributeReference.rst:4401
msgid ""
"Specifying the optional parameter, ``#pragma unroll _value_``, directs the "
"unroller to unroll the loop ``_value_`` times.  The parameter may optionally "
"be enclosed in parentheses:"
msgstr ""

#: ../../../AttributeReference.rst:4417
msgid ""
"Specifying ``#pragma nounroll`` indicates that the loop should not be "
"unrolled:"
msgstr ""

#: ../../../AttributeReference.rst:4426
msgid ""
"``#pragma unroll`` and ``#pragma unroll _value_`` have identical semantics "
"to ``#pragma clang loop unroll(full)`` and ``#pragma clang loop "
"unroll_count(_value_)`` respectively. ``#pragma nounroll`` is equivalent to "
"``#pragma clang loop unroll(disable)``.  See `language extensions <http://"
"clang.llvm.org/docs/LanguageExtensions.html#extensions-for-loop-hint-"
"optimizations>`_ for further details including limitations of the unroll "
"hints."
msgstr ""

#: ../../../AttributeReference.rst:4436
msgid ""
"__read_only, __write_only, __read_write (read_only, write_only, read_write)"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``__read_only`` |br| ``read_only`` |br| ``__write_only`` |br| ``write_only`` "
"|br| ``__read_write`` |br| ``read_write``"
msgstr ""

#: ../../../AttributeReference.rst:4442
msgid ""
"The access qualifiers must be used with image object arguments or pipe "
"arguments to declare if they are being read or written by a kernel or "
"function."
msgstr ""

#: ../../../AttributeReference.rst:4445
msgid ""
"The read_only/__read_only, write_only/__write_only and read_write/"
"__read_write names are reserved for use as access qualifiers and shall not "
"be used otherwise."
msgstr ""

#: ../../../AttributeReference.rst:4456
msgid ""
"In the above example imageA is a read-only 2D image object, and imageB is a "
"write-only 2D image object."
msgstr ""

#: ../../../AttributeReference.rst:4459
msgid "The read_write (or __read_write) qualifier can not be used with pipe."
msgstr ""

#: ../../../AttributeReference.rst:4461
msgid ""
"More details can be found in the OpenCL C language Spec v2.0, Section 6.6."
msgstr ""

#: ../../../AttributeReference.rst:4465
msgid "fallthrough"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``fallthrough``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``fallthrough`` |br| ``clang::fallthrough`` |br| ``gnu::fallthrough``"
msgstr ""

#: ../../../AttributeReference.rst:4471
msgid ""
"The ``fallthrough`` (or ``clang::fallthrough``) attribute is used to "
"annotate intentional fall-through between switch labels.  It can only be "
"applied to a null statement placed at a point of execution between any "
"statement and the next switch label.  It is common to mark these places with "
"a specific comment, but this attribute is meant to replace comments with a "
"more strict annotation, which can be checked by the compiler.  This "
"attribute doesn't change semantics of the code and can be used wherever an "
"intended fall-through occurs.  It is designed to mimic control-flow "
"statements like ``break;``, so it can be placed in most places where ``break;"
"`` can, but only if there are no statements on the execution path between it "
"and the next switch label."
msgstr ""

#: ../../../AttributeReference.rst:4483
msgid ""
"By default, Clang does not warn on unannotated fallthrough from one "
"``switch`` case to another. Diagnostics on fallthrough without a "
"corresponding annotation can be enabled with the ``-Wimplicit-fallthrough`` "
"argument."
msgstr ""

#: ../../../AttributeReference.rst:4487
msgid "Here is an example:"
msgstr ""

#: ../../../AttributeReference.rst:4519
msgid "intel_reqd_sub_group_size"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``intel_reqd_sub_group_size``"
msgstr ""

#: ../../../AttributeReference.rst:4525
msgid ""
"The optional attribute intel_reqd_sub_group_size can be used to indicate "
"that the kernel must be compiled and executed with the specified subgroup "
"size. When this attribute is present, get_max_sub_group_size() is guaranteed "
"to return the specified integer value. This is important for the correctness "
"of many subgroup algorithms, and in some cases may be used by the compiler "
"to generate more optimal code. See `cl_intel_required_subgroup_size <https://"
"www.khronos.org/registry/OpenCL/extensions/intel/"
"cl_intel_required_subgroup_size.txt>` for details."
msgstr ""

#: ../../../AttributeReference.rst:4536
msgid "opencl_unroll_hint"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_unroll_hint``"
msgstr ""

#: ../../../AttributeReference.rst:4542
msgid ""
"The opencl_unroll_hint attribute qualifier can be used to specify that a "
"loop (for, while and do loops) can be unrolled. This attribute qualifier can "
"be used to specify full unrolling or partial unrolling by a specified "
"amount. This is a compiler hint and the compiler may ignore this directive. "
"See `OpenCL v2.0 <https://www.khronos.org/registry/cl/specs/opencl-2.0."
"pdf>`_ s6.11.5 for details."
msgstr ""

#: ../../../AttributeReference.rst:4551
msgid "suppress"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gsl::suppress``"
msgstr ""

#: ../../../AttributeReference.rst:4557
msgid ""
"The ``[[gsl::suppress]]`` attribute suppresses specific clang-tidy "
"diagnostics for rules of the `C++ Core Guidelines`_ in a portable way. The "
"attribute can be attached to declarations, statements, and at namespace "
"scope."
msgstr ""

#: ../../../AttributeReference.rst:4580
msgid "Declaration Attributes"
msgstr ""

#: ../../../AttributeReference.rst:4584
msgid "Owner"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gsl::Owner``"
msgstr ""

#: ../../../AttributeReference.rst:4590 ../../../AttributeReference.rst:4619
msgid ""
"This attribute is experimental and its effect on analysis is subject to "
"change in a future version of clang."
msgstr ""

#: ../../../AttributeReference.rst:4593
msgid ""
"The attribute ``[[gsl::Owner(T)]]`` applies to structs and classes that own "
"an object of type ``T``:"
msgstr ""

#: ../../../AttributeReference.rst:4605
msgid ""
"The argument ``T`` is optional and is ignored. This attribute may be used by "
"analysis tools and has no effect on code generation. A ``void`` argument "
"means that the class can own any type."
msgstr ""

#: ../../../AttributeReference.rst:4609
msgid "See Pointer_ for an example."
msgstr ""

#: ../../../AttributeReference.rst:4613
msgid "Pointer"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gsl::Pointer``"
msgstr ""

#: ../../../AttributeReference.rst:4622
msgid ""
"The attribute ``[[gsl::Pointer(T)]]`` applies to structs and classes that "
"behave like pointers to an object of type ``T``:"
msgstr ""

#: ../../../AttributeReference.rst:4634
msgid ""
"The argument ``T`` is optional and is ignored. This attribute may be used by "
"analysis tools and has no effect on code generation. A ``void`` argument "
"means that the pointer can point to any type."
msgstr ""

#: ../../../AttributeReference.rst:4638
msgid ""
"Example: When constructing an instance of a class annotated like this (a "
"Pointer) from an instance of a class annotated with ``[[gsl::Owner]]`` (an "
"Owner), then the analysis will consider the Pointer to point inside the "
"Owner. When the Owner's lifetime ends, it will consider the Pointer to be "
"dangling."
msgstr ""

#: ../../../AttributeReference.rst:4657
msgid "__single_inhertiance, __multiple_inheritance, __virtual_inheritance"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid ""
"``__single_inheritance`` |br| ``__multiple_inheritance`` |br| "
"``__virtual_inheritance`` |br| ``__unspecified_inheritance``"
msgstr ""

#: ../../../AttributeReference.rst:4663
msgid ""
"This collection of keywords is enabled under ``-fms-extensions`` and "
"controls the pointer-to-member representation used on ``*-*-win32`` targets."
msgstr ""

#: ../../../AttributeReference.rst:4666
msgid ""
"The ``*-*-win32`` targets utilize a pointer-to-member representation which "
"varies in size and alignment depending on the definition of the underlying "
"class."
msgstr ""

#: ../../../AttributeReference.rst:4670
msgid ""
"However, this is problematic when a forward declaration is only available "
"and no definition has been made yet.  In such cases, Clang is forced to "
"utilize the most general representation that is available to it."
msgstr ""

#: ../../../AttributeReference.rst:4674
msgid ""
"These keywords make it possible to use a pointer-to-member representation "
"other than the most general one regardless of whether or not the definition "
"will ever be present in the current translation unit."
msgstr ""

#: ../../../AttributeReference.rst:4678
msgid ""
"This family of keywords belong between the ``class-key`` and ``class-name``:"
msgstr ""

#: ../../../AttributeReference.rst:4686
msgid ""
"This keyword can be applied to class templates but only has an effect when "
"used on full specializations:"
msgstr ""

#: ../../../AttributeReference.rst:4695
msgid ""
"Note that choosing an inheritance model less general than strictly necessary "
"is an error:"
msgstr ""

#: ../../../AttributeReference.rst:4706
msgid "asm"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``asm`` |br| ``__asm__``"
msgstr ""

#: ../../../AttributeReference.rst:4712
msgid ""
"This attribute can be used on a function or variable to specify its symbol "
"name."
msgstr ""

#: ../../../AttributeReference.rst:4714
msgid ""
"On some targets, all C symbols are prefixed by default with a single "
"character, typically ``_``.  This was done historically to distinguish them "
"from symbols used by other languages.  (This prefix is also added to the "
"standard Itanium C++ ABI prefix on \"mangled\" symbol names, so that e.g. on "
"such targets the true symbol name for a C++ variable declared as ``int "
"cppvar;`` would be ``__Z6cppvar``; note the two underscores.)  This prefix "
"is *not* added to the symbol names specified by the ``asm`` attribute; "
"programmers wishing to match a C symbol name must compensate for this."
msgstr ""

#: ../../../AttributeReference.rst:4716
msgid "For example, consider the following C code:"
msgstr ""

#: ../../../AttributeReference.rst:4727
msgid ""
"Clang's implementation of this attribute is compatible with GCC's, "
"`documented here <https://gcc.gnu.org/onlinedocs/gcc/Asm-Labels.html>`_."
msgstr ""

#: ../../../AttributeReference.rst:4729
msgid ""
"While it is possible to use this attribute to name a special symbol used "
"internally by the compiler, such as an LLVM intrinsic, this is neither "
"recommended nor supported and may cause the compiler to crash or "
"miscompile.  Users who wish to gain access to intrinsic behavior are "
"strongly encouraged to request new builtin functions."
msgstr ""

#: ../../../AttributeReference.rst:4733
msgid "deprecated"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``deprecated``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::deprecated`` |br| ``deprecated``"
msgstr ""

#: ../../../AttributeReference.rst:4739
msgid ""
"The ``deprecated`` attribute can be applied to a function, a variable, or a "
"type. This is useful when identifying functions, variables, or types that "
"are expected to be removed in a future version of a program."
msgstr ""

#: ../../../AttributeReference.rst:4743
msgid "Consider the function declaration for a hypothetical function ``f``:"
msgstr ""

#: ../../../AttributeReference.rst:4749
msgid ""
"When spelled as `__attribute__((deprecated))`, the deprecated attribute can "
"have two optional string arguments. The first one is the message to display "
"when emitting the warning; the second one enables the compiler to provide a "
"Fix-It to replace the deprecated name with a new name. Otherwise, when "
"spelled as `[[gnu::deprecated]] or [[deprecated]]`, the attribute can have "
"one optional string argument which is the message to display when emitting "
"the warning."
msgstr ""

#: ../../../AttributeReference.rst:4758
msgid "empty_bases"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``empty_bases``"
msgstr ""

#: ../../../AttributeReference.rst:4764
msgid ""
"The empty_bases attribute permits the compiler to utilize the empty-base-"
"optimization more frequently. This attribute only applies to struct, class, "
"and union types. It is only supported when using the Microsoft C++ ABI."
msgstr ""

#: ../../../AttributeReference.rst:4771
msgid "enum_extensibility"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``enum_extensibility``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::enum_extensibility``"
msgstr ""

#: ../../../AttributeReference.rst:4777
msgid ""
"Attribute ``enum_extensibility`` is used to distinguish between enum "
"definitions that are extensible and those that are not. The attribute can "
"take either ``closed`` or ``open`` as an argument. ``closed`` indicates a "
"variable of the enum type takes a value that corresponds to one of the "
"enumerators listed in the enum definition or, when the enum is annotated "
"with ``flag_enum``, a value that can be constructed using values "
"corresponding to the enumerators. ``open`` indicates a variable of the enum "
"type can take any values allowed by the standard and instructs clang to be "
"more lenient when issuing warnings."
msgstr ""

#: ../../../AttributeReference.rst:4822
msgid "external_source_symbol"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``external_source_symbol``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::external_source_symbol``"
msgstr ""

#: ../../../AttributeReference.rst:4828
msgid ""
"The ``external_source_symbol`` attribute specifies that a declaration "
"originates from an external source and describes the nature of that source."
msgstr ""

#: ../../../AttributeReference.rst:4831
msgid ""
"The fact that Clang is capable of recognizing declarations that were defined "
"externally can be used to provide better tooling support for mixed-language "
"projects or projects that rely on auto-generated code. For instance, an IDE "
"that uses Clang and that supports mixed-language projects can use this "
"attribute to provide a correct 'jump-to-definition' feature. For a concrete "
"example, consider a protocol that's defined in a Swift file:"
msgstr ""

#: ../../../AttributeReference.rst:4844
msgid ""
"This protocol can be used from Objective-C code by including a header file "
"that was generated by the Swift compiler. The declarations in that header "
"can use the ``external_source_symbol`` attribute to make Clang aware of the "
"fact that ``SwiftProtocol`` actually originates from a Swift module:"
msgstr ""

#: ../../../AttributeReference.rst:4857
msgid ""
"Consequently, when 'jump-to-definition' is performed at a location that "
"references ``SwiftProtocol``, the IDE can jump to the original definition in "
"the Swift source file rather than jumping to the Objective-C declaration in "
"the auto-generated header file."
msgstr ""

#: ../../../AttributeReference.rst:4862
msgid ""
"The ``external_source_symbol`` attribute is a comma-separated list that "
"includes clauses that describe the origin and the nature of the particular "
"declaration. Those clauses can be:"
msgstr ""

#: ../../../AttributeReference.rst:4867
msgid "language=\\ *string-literal*"
msgstr ""

#: ../../../AttributeReference.rst:4867
msgid "The name of the source language in which this declaration was defined."
msgstr ""

#: ../../../AttributeReference.rst:4873
msgid "defined_in=\\ *string-literal*"
msgstr ""

#: ../../../AttributeReference.rst:4870
msgid ""
"The name of the source container in which the declaration was defined. The "
"exact definition of source container is language-specific, e.g. Swift's "
"source containers are modules, so ``defined_in`` should specify the Swift "
"module name."
msgstr ""

#: ../../../AttributeReference.rst:4876
msgid "generated_declaration"
msgstr ""

#: ../../../AttributeReference.rst:4876
msgid "This declaration was automatically generated by some tool."
msgstr ""

#: ../../../AttributeReference.rst:4878
msgid ""
"The clauses can be specified in any order. The clauses that are listed above "
"are all optional, but the attribute has to have at least one clause."
msgstr ""

#: ../../../AttributeReference.rst:4883
msgid "flag_enum"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``flag_enum``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::flag_enum``"
msgstr ""

#: ../../../AttributeReference.rst:4889
msgid ""
"This attribute can be added to an enumerator to signal to the compiler that "
"it is intended to be used as a flag type. This will cause the compiler to "
"assume that the range of the type includes all of the values that you can "
"get by manipulating bits of the enumerator when issuing warnings."
msgstr ""

#: ../../../AttributeReference.rst:4896
msgid "layout_version"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``layout_version``"
msgstr ""

#: ../../../AttributeReference.rst:4902
msgid ""
"The layout_version attribute requests that the compiler utilize the class "
"layout rules of a particular compiler version. This attribute only applies "
"to struct, class, and union types. It is only supported when using the "
"Microsoft C++ ABI."
msgstr ""

#: ../../../AttributeReference.rst:4909
msgid "lto_visibility_public"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``lto_visibility_public``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::lto_visibility_public``"
msgstr ""

#: ../../../AttributeReference.rst:4915
msgid "See :doc:`LTOVisibility`."
msgstr ""

#: ../../../AttributeReference.rst:4919
msgid "novtable"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``novtable``"
msgstr ""

#: ../../../AttributeReference.rst:4925
msgid ""
"This attribute can be added to a class declaration or definition to signal "
"to the compiler that constructors and destructors will not reference the "
"virtual function table. It is only supported when using the Microsoft C++ "
"ABI."
msgstr ""

#: ../../../AttributeReference.rst:4931
msgid "objc_boxable"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_boxable``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_boxable``"
msgstr ""

#: ../../../AttributeReference.rst:4937
msgid ""
"Structs and unions marked with the ``objc_boxable`` attribute can be used "
"with the Objective-C boxed expression syntax, ``@(...)``."
msgstr ""

#: ../../../AttributeReference.rst:4940
msgid ""
"**Usage**: ``__attribute__((objc_boxable))``. This attribute can only be "
"placed on a declaration of a trivially-copyable struct or union:"
msgstr ""

#: ../../../AttributeReference.rst:4961
msgid "objc_direct"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_direct``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_direct``"
msgstr ""

#: ../../../AttributeReference.rst:4967
msgid ""
"The ``objc_direct`` attribute can be used to mark an Objective-C method as "
"being *direct*.  A direct method is treated statically like an ordinary "
"method, but dynamically it behaves more like a C function.  This lowers some "
"of the costs associated with the method but also sacrifices some of the "
"ordinary capabilities of Objective-C methods."
msgstr ""

#: ../../../AttributeReference.rst:4973
msgid ""
"A message send of a direct method calls the implementation directly, as if "
"it were a C function, rather than using ordinary Objective-C method "
"dispatch. This is substantially faster and potentially allows the "
"implementation to be inlined, but it also means the method cannot be "
"overridden in subclasses or replaced dynamically, as ordinary Objective-C "
"methods can."
msgstr ""

#: ../../../AttributeReference.rst:4979
msgid ""
"Furthermore, a direct method is not listed in the class's method lists. This "
"substantially reduces the code-size overhead of the method but also means it "
"cannot be called dynamically using ordinary Objective-C method dispatch at "
"all; in particular, this means that it cannot override a superclass method "
"or satisfy a protocol requirement."
msgstr ""

#: ../../../AttributeReference.rst:4985
msgid ""
"Because a direct method cannot be overridden, it is an error to perform a "
"``super`` message send of one."
msgstr ""

#: ../../../AttributeReference.rst:4988
msgid ""
"Although a message send of a direct method causes the method to be called "
"directly as if it were a C function, it still obeys Objective-C semantics in "
"other ways:"
msgstr ""

#: ../../../AttributeReference.rst:4992
msgid ""
"If the receiver is ``nil``, the message send does nothing and returns the "
"zero value for the return type."
msgstr ""

#: ../../../AttributeReference.rst:4995
msgid ""
"A message send of a direct class method will cause the class to be "
"initialized, including calling the ``+initialize`` method if present."
msgstr ""

#: ../../../AttributeReference.rst:4998
msgid ""
"The implicit ``_cmd`` parameter containing the method's selector is still "
"defined."
msgstr ""

#: ../../../AttributeReference.rst:4999
msgid ""
"In order to minimize code-size costs, the implementation will not emit a "
"reference to the selector if the parameter is unused within the method."
msgstr ""

#: ../../../AttributeReference.rst:5002
msgid ""
"Symbols for direct method implementations are implicitly given hidden "
"visibility, meaning that they can only be called within the same linkage "
"unit."
msgstr ""

#: ../../../AttributeReference.rst:5005
msgid "It is an error to do any of the following:"
msgstr ""

#: ../../../AttributeReference.rst:5007
msgid "declare a direct method in a protocol,"
msgstr ""

#: ../../../AttributeReference.rst:5008
msgid "declare an override of a direct method with a method in a subclass,"
msgstr ""

#: ../../../AttributeReference.rst:5009
msgid ""
"declare an override of a non-direct method with a direct method in a "
"subclass,"
msgstr ""

#: ../../../AttributeReference.rst:5010
msgid ""
"declare a method with different directness in different class interfaces, or"
msgstr ""

#: ../../../AttributeReference.rst:5011
msgid ""
"implement a non-direct method (as declared in any class interface) with a "
"direct method."
msgstr ""

#: ../../../AttributeReference.rst:5013
msgid ""
"If any of these rules would be violated if every method defined in an "
"``@implementation`` within a single linkage unit were declared in an "
"appropriate class interface, the program is ill-formed with no diagnostic "
"required.  If a violation of this rule is not diagnosed, behavior remains "
"well-defined; this paragraph is simply reserving the right to diagnose such "
"conflicts in the future, not to treat them as undefined behavior."
msgstr ""

#: ../../../AttributeReference.rst:5020
msgid ""
"Additionally, Clang will warn about any ``@selector`` expression that names "
"a selector that is only known to be used for direct methods."
msgstr ""

#: ../../../AttributeReference.rst:5023
msgid ""
"For the purpose of these rules, a \"class interface\" includes a class's "
"primary ``@interface`` block, its class extensions, its categories, its "
"declared protocols, and all the class interfaces of its superclasses."
msgstr ""

#: ../../../AttributeReference.rst:5027
msgid ""
"An Objective-C property can be declared with the ``direct`` property "
"attribute.  If a direct property declaration causes an implicit declaration "
"of a getter or setter method (that is, if the given method is not explicitly "
"declared elsewhere), the method is declared to be direct."
msgstr ""

#: ../../../AttributeReference.rst:5032
msgid ""
"Some programmers may wish to make many methods direct at once.  In order to "
"simplify this, the ``objc_direct_members`` attribute is provided; see its "
"documentation for more information."
msgstr ""

#: ../../../AttributeReference.rst:5038
msgid "objc_direct_members"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_direct_members``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_direct_members``"
msgstr ""

#: ../../../AttributeReference.rst:5044
msgid ""
"The ``objc_direct_members`` attribute can be placed on an  Objective-C "
"``@interface`` or ``@implementation`` to mark that methods declared therein "
"should be considered direct by default.  See the documentation for "
"``objc_direct`` for more information about direct methods."
msgstr ""

#: ../../../AttributeReference.rst:5049
msgid ""
"When ``objc_direct_members`` is placed on an ``@interface`` block, every "
"method in the block is considered to be declared as direct.  This includes "
"any implicit method declarations introduced by property declarations.  If "
"the method redeclares a non-direct method, the declaration is ill-formed, "
"exactly as if the method was annotated with the ``objc_direct`` attribute.  "
"``objc_direct_members`` cannot be placed on the primary interface of a "
"class, only on category or class extension interfaces."
msgstr ""

#: ../../../AttributeReference.rst:5057
msgid ""
"When ``objc_direct_members`` is placed on an ``@implementation`` block, "
"methods defined in the block are considered to be declared as direct unless "
"they have been previously declared as non-direct in any interface of the "
"class. This includes the implicit method definitions introduced by "
"synthesized properties, including auto-synthesized properties."
msgstr ""

#: ../../../AttributeReference.rst:5065
msgid "objc_nonlazy_class"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_nonlazy_class``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_nonlazy_class``"
msgstr ""

#: ../../../AttributeReference.rst:5071
msgid ""
"This attribute can be added to an Objective-C ``@interface`` or "
"``@implementation`` declaration to add the class to the list of non-lazily "
"initialized classes. A non-lazy class will be initialized eagerly when the "
"Objective-C runtime is loaded. This is required for certain system classes "
"which have instances allocated in non-standard ways, such as the classes for "
"blocks and constant strings. Adding this attribute is essentially equivalent "
"to providing a trivial `+load` method but avoids the (fairly small) load-"
"time overheads associated with defining and calling such a method."
msgstr ""

#: ../../../AttributeReference.rst:5082
msgid "objc_runtime_name"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_runtime_name``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_runtime_name``"
msgstr ""

#: ../../../AttributeReference.rst:5088
msgid ""
"By default, the Objective-C interface or protocol identifier is used in the "
"metadata name for that object. The `objc_runtime_name` attribute allows "
"annotated interfaces or protocols to use the specified string argument in "
"the object's metadata name instead of the default name."
msgstr ""

#: ../../../AttributeReference.rst:5094
msgid ""
"**Usage**: ``__attribute__((objc_runtime_name(\"MyLocalName\")))``.  This "
"attribute can only be placed before an @protocol or @interface declaration:"
msgstr ""

#: ../../../AttributeReference.rst:5105
msgid "objc_runtime_visible"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_runtime_visible``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_runtime_visible``"
msgstr ""

#: ../../../AttributeReference.rst:5111
msgid ""
"This attribute specifies that the Objective-C class to which it applies is "
"visible to the Objective-C runtime but not to the linker. Classes annotated "
"with this attribute cannot be subclassed and cannot have categories defined "
"for them."
msgstr ""

#: ../../../AttributeReference.rst:5118
msgid "objc_subclassing_restricted"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``objc_subclassing_restricted``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::objc_subclassing_restricted``"
msgstr ""

#: ../../../AttributeReference.rst:5124
msgid ""
"This attribute can be added to an Objective-C ``@interface`` declaration to "
"ensure that this class cannot be subclassed."
msgstr ""

#: ../../../AttributeReference.rst:5129
msgid "selectany"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``selectany``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::selectany``"
msgstr ""

#: ../../../AttributeReference.rst:5135
msgid ""
"This attribute appertains to a global symbol, causing it to have a weak "
"definition ( `linkonce <https://llvm.org/docs/LangRef.html#linkage-"
"types>`_ ), allowing the linker to select any definition."
msgstr ""

#: ../../../AttributeReference.rst:5140
msgid ""
"For more information see `gcc documentation <https://gcc.gnu.org/onlinedocs/"
"gcc-7.2.0/gcc/Microsoft-Windows-Variable-Attributes.html>`_ or `msvc "
"documentation <https://docs.microsoft.com/pl-pl/cpp/cpp/selectany>`_."
msgstr ""

#: ../../../AttributeReference.rst:5146
msgid "transparent_union"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``transparent_union``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::transparent_union``"
msgstr ""

#: ../../../AttributeReference.rst:5152
msgid ""
"This attribute can be applied to a union to change the behaviour of calls to "
"functions that have an argument with a transparent union type. The compiler "
"behaviour is changed in the following manner:"
msgstr ""

#: ../../../AttributeReference.rst:5156
msgid ""
"A value whose type is any member of the transparent union can be passed as "
"an argument without the need to cast that value."
msgstr ""

#: ../../../AttributeReference.rst:5159
msgid ""
"The argument is passed to the function using the calling convention of the "
"first member of the transparent union. Consequently, all the members of the "
"transparent union should have the same calling convention as its first "
"member."
msgstr ""

#: ../../../AttributeReference.rst:5163
msgid "Transparent unions are not supported in C++."
msgstr ""

#: ../../../AttributeReference.rst:5167
msgid "trivial_abi"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``trivial_abi``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::trivial_abi``"
msgstr ""

#: ../../../AttributeReference.rst:5173
msgid ""
"The ``trivial_abi`` attribute can be applied to a C++ class, struct, or "
"union. It instructs the compiler to pass and return the type using the C ABI "
"for the underlying type when the type would otherwise be considered non-"
"trivial for the purpose of calls. A class annotated with `trivial_abi` can "
"have non-trivial destructors or copy/move constructors without automatically "
"becoming non-trivial for the purposes of calls. For example:"
msgstr ""

#: ../../../AttributeReference.rst:5196
msgid ""
"If a type is trivial for the purposes of calls, has a non-trivial "
"destructor, and is passed as an argument by value, the convention is that "
"the callee will destroy the object before returning."
msgstr ""

#: ../../../AttributeReference.rst:5200
msgid "Attribute ``trivial_abi`` has no effect in the following cases:"
msgstr ""

#: ../../../AttributeReference.rst:5202
msgid "The class directly declares a virtual base or virtual methods."
msgstr ""

#: ../../../AttributeReference.rst:5203
msgid ""
"The class has a base class that is non-trivial for the purposes of calls."
msgstr ""

#: ../../../AttributeReference.rst:5204
msgid ""
"The class has a non-static data member whose type is non-trivial for the "
"purposes of calls, which includes:"
msgstr ""

#: ../../../AttributeReference.rst:5206
msgid "classes that are non-trivial for the purposes of calls"
msgstr ""

#: ../../../AttributeReference.rst:5207
msgid "__weak-qualified types in Objective-C++"
msgstr ""

#: ../../../AttributeReference.rst:5208
msgid "arrays of any of the above"
msgstr ""

#: ../../../AttributeReference.rst:5212
msgid "AMD GPU Attributes"
msgstr ""

#: ../../../AttributeReference.rst:5216
msgid "amdgpu_flat_work_group_size"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``amdgpu_flat_work_group_size``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::amdgpu_flat_work_group_size``"
msgstr ""

#: ../../../AttributeReference.rst:5222
msgid ""
"The flat work-group size is the number of work-items in the work-group size "
"specified when the kernel is dispatched. It is the product of the sizes of "
"the x, y, and z dimension of the work-group."
msgstr ""

#: ../../../AttributeReference.rst:5226
msgid ""
"Clang supports the ``__attribute__((amdgpu_flat_work_group_size(<min>, "
"<max>)))`` attribute for the AMDGPU target. This attribute may be attached "
"to a kernel function definition and is an optimization hint."
msgstr ""

#: ../../../AttributeReference.rst:5231
msgid ""
"``<min>`` parameter specifies the minimum flat work-group size, and "
"``<max>`` parameter specifies the maximum flat work-group size (must be "
"greater than ``<min>``) to which all dispatches of the kernel will conform. "
"Passing ``0, 0`` as ``<min>, <max>`` implies the default behavior (``128, "
"256``)."
msgstr ""

#: ../../../AttributeReference.rst:5236
msgid ""
"If specified, the AMDGPU target backend might be able to produce better "
"machine code for barriers and perform scratch promotion by estimating "
"available group segment size."
msgstr ""

#: ../../../AttributeReference.rst:5244 ../../../AttributeReference.rst:5275
#: ../../../AttributeReference.rst:5306 ../../../AttributeReference.rst:5357
msgid "An error will be given if:"
msgstr ""

#: ../../../AttributeReference.rst:5241 ../../../AttributeReference.rst:5270
#: ../../../AttributeReference.rst:5301 ../../../AttributeReference.rst:5352
msgid "Specified values violate subtarget specifications;"
msgstr ""

#: ../../../AttributeReference.rst:5242
msgid ""
"Specified values are not compatible with values provided through other "
"attributes."
msgstr ""

#: ../../../AttributeReference.rst:5247
msgid "amdgpu_num_sgpr"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``amdgpu_num_sgpr``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::amdgpu_num_sgpr``"
msgstr ""

#: ../../../AttributeReference.rst:5253 ../../../AttributeReference.rst:5284
msgid ""
"Clang supports the ``__attribute__((amdgpu_num_sgpr(<num_sgpr>)))`` and "
"``__attribute__((amdgpu_num_vgpr(<num_vgpr>)))`` attributes for the AMDGPU "
"target. These attributes may be attached to a kernel function definition and "
"are an optimization hint."
msgstr ""

#: ../../../AttributeReference.rst:5258 ../../../AttributeReference.rst:5289
msgid ""
"If these attributes are specified, then the AMDGPU target backend will "
"attempt to limit the number of SGPRs and/or VGPRs used to the specified "
"value(s). The number of used SGPRs and/or VGPRs may further be rounded up to "
"satisfy the allocation requirements or constraints of the subtarget. Passing "
"``0`` as ``num_sgpr`` and/or ``num_vgpr`` implies the default behavior (no "
"limits)."
msgstr ""

#: ../../../AttributeReference.rst:5264 ../../../AttributeReference.rst:5295
msgid ""
"These attributes can be used to test the AMDGPU target backend. It is "
"recommended that the ``amdgpu_waves_per_eu`` attribute be used to control "
"resources such as SGPRs and VGPRs since it is aware of the limits for "
"different subtargets."
msgstr ""

#: ../../../AttributeReference.rst:5271 ../../../AttributeReference.rst:5302
#: ../../../AttributeReference.rst:5353
msgid ""
"Specified values are not compatible with values provided through other "
"attributes;"
msgstr ""

#: ../../../AttributeReference.rst:5273 ../../../AttributeReference.rst:5304
#: ../../../AttributeReference.rst:5355
msgid ""
"The AMDGPU target backend is unable to create machine code that can meet the "
"request."
msgstr ""

#: ../../../AttributeReference.rst:5278
msgid "amdgpu_num_vgpr"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``amdgpu_num_vgpr``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::amdgpu_num_vgpr``"
msgstr ""

#: ../../../AttributeReference.rst:5309
msgid "amdgpu_waves_per_eu"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``amdgpu_waves_per_eu``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::amdgpu_waves_per_eu``"
msgstr ""

#: ../../../AttributeReference.rst:5315
msgid ""
"A compute unit (CU) is responsible for executing the wavefronts of a work-"
"group. It is composed of one or more execution units (EU), which are "
"responsible for executing the wavefronts. An EU can have enough resources to "
"maintain the state of more than one executing wavefront. This allows an EU "
"to hide latency by switching between wavefronts in a similar way to "
"symmetric multithreading on a CPU. In order to allow the state for multiple "
"wavefronts to fit on an EU, the resources used by a single wavefront have to "
"be limited. For example, the number of SGPRs and VGPRs. Limiting such "
"resources can allow greater latency hiding, but can result in having to "
"spill some register state to memory."
msgstr ""

#: ../../../AttributeReference.rst:5325
msgid ""
"Clang supports the ``__attribute__((amdgpu_waves_per_eu(<min>[, <max>])))`` "
"attribute for the AMDGPU target. This attribute may be attached to a kernel "
"function definition and is an optimization hint."
msgstr ""

#: ../../../AttributeReference.rst:5329
msgid ""
"``<min>`` parameter specifies the requested minimum number of waves per EU, "
"and *optional* ``<max>`` parameter specifies the requested maximum number of "
"waves per EU (must be greater than ``<min>`` if specified). If ``<max>`` is "
"omitted, then there is no restriction on the maximum number of waves per EU "
"other than the one dictated by the hardware for which the kernel is "
"compiled. Passing ``0, 0`` as ``<min>, <max>`` implies the default behavior "
"(no limits)."
msgstr ""

#: ../../../AttributeReference.rst:5336
msgid ""
"If specified, this attribute allows an advanced developer to tune the number "
"of wavefronts that are capable of fitting within the resources of an EU. The "
"AMDGPU target backend can use this information to limit resources, such as "
"number of SGPRs, number of VGPRs, size of available group and private memory "
"segments, in such a way that guarantees that at least ``<min>`` wavefronts "
"and at most ``<max>`` wavefronts are able to fit within the resources of an "
"EU. Requesting more wavefronts can hide memory latency but limits available "
"registers which can result in spilling. Requesting fewer wavefronts can help "
"reduce cache thrashing, but can reduce memory latency hiding."
msgstr ""

#: ../../../AttributeReference.rst:5346
msgid ""
"This attribute controls the machine code generated by the AMDGPU target "
"backend to ensure it is capable of meeting the requested values. However, "
"when the kernel is executed, there may be other reasons that prevent meeting "
"the request, for example, there may be wavefronts from other kernels "
"executing on the EU."
msgstr ""

#: ../../../AttributeReference.rst:5360
msgid "Calling Conventions"
msgstr ""

#: ../../../AttributeReference.rst:5361
msgid ""
"Clang supports several different calling conventions, depending on the "
"target platform and architecture. The calling convention used for a function "
"determines how parameters are passed, how results are returned to the "
"caller, and other low-level details of calling a function."
msgstr ""

#: ../../../AttributeReference.rst:5367
msgid "aarch64_vector_pcs"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``aarch64_vector_pcs``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::aarch64_vector_pcs``"
msgstr ""

#: ../../../AttributeReference.rst:5373
msgid ""
"On AArch64 targets, this attribute changes the calling convention of a "
"function to preserve additional floating-point and Advanced SIMD registers "
"relative to the default calling convention used for AArch64."
msgstr ""

#: ../../../AttributeReference.rst:5377
msgid ""
"This means it is more efficient to call such functions from code that "
"performs extensive floating-point and vector calculations, because fewer "
"live SIMD and FP registers need to be saved. This property makes it well-"
"suited for e.g. floating-point or vector math library functions, which are "
"typically leaf functions that require a small number of registers."
msgstr ""

#: ../../../AttributeReference.rst:5383
msgid ""
"However, using this attribute also means that it is more expensive to call a "
"function that adheres to the default calling convention from within such a "
"function. Therefore, it is recommended that this attribute is only used for "
"leaf functions."
msgstr ""

#: ../../../AttributeReference.rst:5388
msgid ""
"For more information, see the documentation for `aarch64_vector_pcs`_ on the "
"Arm Developer website."
msgstr ""

#: ../../../AttributeReference.rst:5395
msgid "fastcall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``fastcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::fastcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__fastcall`` |br| ``_fastcall``"
msgstr ""

#: ../../../AttributeReference.rst:5401
msgid ""
"On 32-bit x86 targets, this attribute changes the calling convention of a "
"function to use ECX and EDX as register parameters and clear parameters off "
"of the stack on return. This convention does not support variadic calls or "
"unprototyped functions in C, and has no effect on x86_64 targets. This "
"calling convention is supported primarily for compatibility with existing "
"code. Users seeking register parameters should use the ``regparm`` "
"attribute, which does not require callee-cleanup.  See the documentation for "
"`__fastcall`_ on MSDN."
msgstr ""

#: ../../../AttributeReference.rst:5413
msgid "ms_abi"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``ms_abi``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::ms_abi``"
msgstr ""

#: ../../../AttributeReference.rst:5419
msgid ""
"On non-Windows x86_64 targets, this attribute changes the calling convention "
"of a function to match the default convention used on Windows x86_64. This "
"attribute has no effect on Windows targets or non-x86_64 targets."
msgstr ""

#: ../../../AttributeReference.rst:5425
msgid "pcs"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``pcs``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::pcs``"
msgstr ""

#: ../../../AttributeReference.rst:5431
msgid ""
"On ARM targets, this attribute can be used to select calling conventions "
"similar to ``stdcall`` on x86. Valid parameter values are \"aapcs\" and "
"\"aapcs-vfp\"."
msgstr ""

#: ../../../AttributeReference.rst:5437
msgid "preserve_all"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``preserve_all``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::preserve_all``"
msgstr ""

#: ../../../AttributeReference.rst:5443
msgid ""
"On X86-64 and AArch64 targets, this attribute changes the calling convention "
"of a function. The ``preserve_all`` calling convention attempts to make the "
"code in the caller even less intrusive than the ``preserve_most`` calling "
"convention. This calling convention also behaves identical to the ``C`` "
"calling convention on how arguments and return values are passed, but it "
"uses a different set of caller/callee-saved registers. This removes the "
"burden of saving and recovering a large register set before and after the "
"call in the caller. If the arguments are passed in callee-saved registers, "
"then they will be preserved by the callee across the call. This doesn't "
"apply for values returned in callee-saved registers."
msgstr ""

#: ../../../AttributeReference.rst:5454
msgid ""
"On X86-64 the callee preserves all general purpose registers, except for "
"R11. R11 can be used as a scratch register. Furthermore it also preserves "
"all floating-point registers (XMMs/YMMs)."
msgstr ""

#: ../../../AttributeReference.rst:5458
msgid ""
"The idea behind this convention is to support calls to runtime functions "
"that don't need to call out to any other functions."
msgstr ""

#: ../../../AttributeReference.rst:5461
msgid ""
"This calling convention, like the ``preserve_most`` calling convention, will "
"be used by a future version of the Objective-C runtime and should be "
"considered experimental at this time."
msgstr ""

#: ../../../AttributeReference.rst:5467
msgid "preserve_most"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``preserve_most``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::preserve_most``"
msgstr ""

#: ../../../AttributeReference.rst:5473
msgid ""
"On X86-64 and AArch64 targets, this attribute changes the calling convention "
"of a function. The ``preserve_most`` calling convention attempts to make the "
"code in the caller as unintrusive as possible. This convention behaves "
"identically to the ``C`` calling convention on how arguments and return "
"values are passed, but it uses a different set of caller/callee-saved "
"registers. This alleviates the burden of saving and recovering a large "
"register set before and after the call in the caller. If the arguments are "
"passed in callee-saved registers, then they will be preserved by the callee "
"across the call. This doesn't apply for values returned in callee-saved "
"registers."
msgstr ""

#: ../../../AttributeReference.rst:5483
msgid ""
"On X86-64 the callee preserves all general purpose registers, except for "
"R11. R11 can be used as a scratch register. Floating-point registers (XMMs/"
"YMMs) are not preserved and need to be saved by the caller."
msgstr ""

#: ../../../AttributeReference.rst:5487
msgid ""
"The idea behind this convention is to support calls to runtime functions "
"that have a hot path and a cold path. The hot path is usually a small piece "
"of code that doesn't use many registers. The cold path might need to call "
"out to another function and therefore only needs to preserve the caller-"
"saved registers, which haven't already been saved by the caller. The "
"`preserve_most` calling convention is very similar to the ``cold`` calling "
"convention in terms of caller/callee-saved registers, but they are used for "
"different types of function calls. ``coldcc`` is for function calls that are "
"rarely executed, whereas `preserve_most` function calls are intended to be "
"on the hot path and definitely executed a lot. Furthermore ``preserve_most`` "
"doesn't prevent the inliner from inlining the function call."
msgstr ""

#: ../../../AttributeReference.rst:5499
msgid ""
"This calling convention will be used by a future version of the Objective-C "
"runtime and should therefore still be considered experimental at this time. "
"Although this convention was created to optimize certain runtime calls to "
"the Objective-C runtime, it is not limited to this runtime and might be used "
"by other runtimes in the future too. The current implementation only "
"supports X86-64 and AArch64, but the intention is to support more "
"architectures in the future."
msgstr ""

#: ../../../AttributeReference.rst:5509
msgid "regcall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``regcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::regcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__regcall``"
msgstr ""

#: ../../../AttributeReference.rst:5515
msgid ""
"On x86 targets, this attribute changes the calling convention to "
"`__regcall`_ convention. This convention aims to pass as many arguments as "
"possible in registers. It also tries to utilize registers for the return "
"value whenever it is possible."
msgstr ""

#: ../../../AttributeReference.rst:5524
msgid "regparm"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``regparm``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::regparm``"
msgstr ""

#: ../../../AttributeReference.rst:5530
msgid ""
"On 32-bit x86 targets, the regparm attribute causes the compiler to pass the "
"first three integer parameters in EAX, EDX, and ECX instead of on the stack. "
"This attribute has no effect on variadic functions, and all parameters are "
"passed via the stack as normal."
msgstr ""

#: ../../../AttributeReference.rst:5537
msgid "stdcall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``stdcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::stdcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__stdcall`` |br| ``_stdcall``"
msgstr ""

#: ../../../AttributeReference.rst:5543
msgid ""
"On 32-bit x86 targets, this attribute changes the calling convention of a "
"function to clear parameters off of the stack on return. This convention "
"does not support variadic calls or unprototyped functions in C, and has no "
"effect on x86_64 targets. This calling convention is used widely by the "
"Windows API and COM applications.  See the documentation for `__stdcall`_ on "
"MSDN."
msgstr ""

#: ../../../AttributeReference.rst:5553
msgid "thiscall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``thiscall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::thiscall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__thiscall`` |br| ``_thiscall``"
msgstr ""

#: ../../../AttributeReference.rst:5559
msgid ""
"On 32-bit x86 targets, this attribute changes the calling convention of a "
"function to use ECX for the first parameter (typically the implicit ``this`` "
"parameter of C++ methods) and clear parameters off of the stack on return. "
"This convention does not support variadic calls or unprototyped functions in "
"C, and has no effect on x86_64 targets. See the documentation for "
"`__thiscall`_ on MSDN."
msgstr ""

#: ../../../AttributeReference.rst:5570
msgid "vectorcall"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``vectorcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::vectorcall``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__vectorcall`` |br| ``_vectorcall``"
msgstr ""

#: ../../../AttributeReference.rst:5576
msgid ""
"On 32-bit x86 *and* x86_64 targets, this attribute changes the calling "
"convention of a function to pass vector parameters in SSE registers."
msgstr ""

#: ../../../AttributeReference.rst:5579
msgid ""
"On 32-bit x86 targets, this calling convention is similar to ``__fastcall``. "
"The first two integer parameters are passed in ECX and EDX. Subsequent "
"integer parameters are passed in memory, and callee clears the stack.  On "
"x86_64 targets, the callee does *not* clear the stack, and integer "
"parameters are passed in RCX, RDX, R8, and R9 as is done for the default "
"Windows x64 calling convention."
msgstr ""

#: ../../../AttributeReference.rst:5586
msgid ""
"On both 32-bit x86 and x86_64 targets, vector and floating point arguments "
"are passed in XMM0-XMM5. Homogeneous vector aggregates of up to four "
"elements are passed in sequential SSE registers if enough are available. If "
"AVX is enabled, 256 bit vectors are passed in YMM0-YMM5. Any vector or "
"aggregate type that cannot be passed in registers for any reason is passed "
"by reference, which allows the caller to align the parameter memory."
msgstr ""

#: ../../../AttributeReference.rst:5593
msgid "See the documentation for `__vectorcall`_ on MSDN for more details."
msgstr ""

#: ../../../AttributeReference.rst:5599
msgid "Consumed Annotation Checking"
msgstr ""

#: ../../../AttributeReference.rst:5600
msgid ""
"Clang supports additional attributes for checking basic resource management "
"properties, specifically for unique objects that have a single owning "
"reference. The following attributes are currently supported, although **the "
"implementation for these annotations is currently in development and are "
"subject to change.**"
msgstr ""

#: ../../../AttributeReference.rst:5606
msgid "callable_when"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``callable_when``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::callable_when``"
msgstr ""

#: ../../../AttributeReference.rst:5612
msgid ""
"Use ``__attribute__((callable_when(...)))`` to indicate what states a method "
"may be called in.  Valid states are unconsumed, consumed, or unknown.  Each "
"argument to this attribute must be a quoted string.  E.g.:"
msgstr ""

#: ../../../AttributeReference.rst:5616
msgid "``__attribute__((callable_when(\"unconsumed\", \"unknown\")))``"
msgstr ""

#: ../../../AttributeReference.rst:5620
msgid "consumable"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``consumable``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::consumable``"
msgstr ""

#: ../../../AttributeReference.rst:5626
msgid ""
"Each ``class`` that uses any of the typestate annotations must first be "
"marked using the ``consumable`` attribute.  Failure to do so will result in "
"a warning."
msgstr ""

#: ../../../AttributeReference.rst:5629
msgid ""
"This attribute accepts a single parameter that must be one of the following: "
"``unknown``, ``consumed``, or ``unconsumed``."
msgstr ""

#: ../../../AttributeReference.rst:5634
msgid "param_typestate"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``param_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::param_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:5640
msgid ""
"This attribute specifies expectations about function parameters.  Calls to "
"an function with annotated parameters will issue a warning if the "
"corresponding argument isn't in the expected state.  The attribute is also "
"used to set the initial state of the parameter when analyzing the function's "
"body."
msgstr ""

#: ../../../AttributeReference.rst:5647
msgid "return_typestate"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``return_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::return_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:5653
msgid ""
"The ``return_typestate`` attribute can be applied to functions or "
"parameters. When applied to a function the attribute specifies the state of "
"the returned value.  The function's body is checked to ensure that it always "
"returns a value in the specified state.  On the caller side, values returned "
"by the annotated function are initialized to the given state."
msgstr ""

#: ../../../AttributeReference.rst:5659
msgid ""
"When applied to a function parameter it modifies the state of an argument "
"after a call to the function returns.  The function's body is checked to "
"ensure that the parameter is in the expected state before returning."
msgstr ""

#: ../../../AttributeReference.rst:5665
msgid "set_typestate"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``set_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::set_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:5671
msgid ""
"Annotate methods that transition an object into a new state with "
"``__attribute__((set_typestate(new_state)))``.  The new state must be "
"unconsumed, consumed, or unknown."
msgstr ""

#: ../../../AttributeReference.rst:5677
msgid "test_typestate"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``test_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::test_typestate``"
msgstr ""

#: ../../../AttributeReference.rst:5683
msgid ""
"Use ``__attribute__((test_typestate(tested_state)))`` to indicate that a "
"method returns true if the object is in the specified state.."
msgstr ""

#: ../../../AttributeReference.rst:5688
msgid "Type Safety Checking"
msgstr ""

#: ../../../AttributeReference.rst:5689
msgid ""
"Clang supports additional attributes to enable checking type safety "
"properties that can't be enforced by the C type system. To see warnings "
"produced by these checks, ensure that -Wtype-safety is enabled. Use cases "
"include:"
msgstr ""

#: ../../../AttributeReference.rst:5693
msgid ""
"MPI library implementations, where these attributes enable checking that the "
"buffer type matches the passed ``MPI_Datatype``;"
msgstr ""

#: ../../../AttributeReference.rst:5695
msgid "for HDF5 library there is a similar use case to MPI;"
msgstr ""

#: ../../../AttributeReference.rst:5696
msgid ""
"checking types of variadic functions' arguments for functions like "
"``fcntl()`` and ``ioctl()``."
msgstr ""

#: ../../../AttributeReference.rst:5699
msgid ""
"You can detect support for these attributes with ``__has_attribute()``.  For "
"example:"
msgstr ""

#: ../../../AttributeReference.rst:5721
msgid "argument_with_type_tag"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``argument_with_type_tag`` |br| ``pointer_with_type_tag``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::argument_with_type_tag`` |br| ``clang::pointer_with_type_tag``"
msgstr ""

#: ../../../AttributeReference.rst:5727
msgid ""
"Use ``__attribute__((argument_with_type_tag(arg_kind, arg_idx, "
"type_tag_idx)))`` on a function declaration to specify that the function "
"accepts a type tag that determines the type of some other argument."
msgstr ""

#: ../../../AttributeReference.rst:5731
msgid ""
"This attribute is primarily useful for checking arguments of variadic "
"functions (``pointer_with_type_tag`` can be used in most non-variadic cases)."
msgstr ""

#: ../../../AttributeReference.rst:5745 ../../../AttributeReference.rst:5781
#: ../../../AttributeReference.rst:5808
msgid "In the attribute prototype above:"
msgstr ""

#: ../../../AttributeReference.rst:5735
msgid ""
"``arg_kind`` is an identifier that should be used when annotating all "
"applicable type tags."
msgstr ""

#: ../../../AttributeReference.rst:5737
msgid ""
"``arg_idx`` provides the position of a function argument. The expected type "
"of this function argument will be determined by the function argument "
"specified by ``type_tag_idx``. In the code example below, \"3\" means that "
"the type of the function's third argument will be determined by "
"``type_tag_idx``."
msgstr ""

#: ../../../AttributeReference.rst:5741
msgid ""
"``type_tag_idx`` provides the position of a function argument. This function "
"argument will be a type tag. The type tag will determine the expected type "
"of the argument specified by ``arg_idx``. In the code example below, \"2\" "
"means that the type tag associated with the function's second argument "
"should agree with the type of the argument specified by ``arg_idx``."
msgstr ""

#: ../../../AttributeReference.rst:5758
msgid "pointer_with_type_tag"
msgstr ""

#: ../../../AttributeReference.rst:5764
msgid ""
"Use ``__attribute__((pointer_with_type_tag(ptr_kind, ptr_idx, "
"type_tag_idx)))`` on a function declaration to specify that the function "
"accepts a type tag that determines the pointee type of some other pointer "
"argument."
msgstr ""

#: ../../../AttributeReference.rst:5769
msgid ""
"``ptr_kind`` is an identifier that should be used when annotating all "
"applicable type tags."
msgstr ""

#: ../../../AttributeReference.rst:5771
msgid ""
"``ptr_idx`` provides the position of a function argument; this function "
"argument will have a pointer type. The expected pointee type of this pointer "
"type will be determined by the function argument specified by "
"``type_tag_idx``. In the code example below, \"1\" means that the pointee "
"type of the function's first argument will be determined by ``type_tag_idx``."
msgstr ""

#: ../../../AttributeReference.rst:5776
msgid ""
"``type_tag_idx`` provides the position of a function argument; this function "
"argument will be a type tag. The type tag will determine the expected "
"pointee type of the pointer argument specified by ``ptr_idx``. In the code "
"example below, \"3\" means that the type tag associated with the function's "
"third argument should agree with the pointee type of the pointer argument "
"specified by ``ptr_idx``."
msgstr ""

#: ../../../AttributeReference.rst:5795
msgid "type_tag_for_datatype"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``type_tag_for_datatype``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::type_tag_for_datatype``"
msgstr ""

#: ../../../AttributeReference.rst:5801
msgid ""
"When declaring a variable, use ``__attribute__((type_tag_for_datatype(kind, "
"type)))`` to create a type tag that is tied to the ``type`` argument given "
"to the attribute."
msgstr ""

#: ../../../AttributeReference.rst:5806
msgid ""
"``kind`` is an identifier that should be used when annotating all applicable "
"type tags."
msgstr ""

#: ../../../AttributeReference.rst:5808
msgid "``type`` indicates the name of the type."
msgstr ""

#: ../../../AttributeReference.rst:5810
msgid "Clang supports annotating type tags of two forms."
msgstr ""

#: ../../../AttributeReference.rst:5812
msgid ""
"**Type tag that is a reference to a declared identifier.** Use "
"``__attribute__((type_tag_for_datatype(kind, type)))`` when declaring that "
"identifier:"
msgstr ""

#: ../../../AttributeReference.rst:5824
msgid ""
"**Type tag that is an integral literal.** Declare a ``static const`` "
"variable with an initializer value and attach "
"``__attribute__((type_tag_for_datatype(kind, type)))`` on that declaration:"
msgstr ""

#: ../../../AttributeReference.rst:5837
msgid ""
"The ``type_tag_for_datatype`` attribute also accepts an optional third "
"argument that determines how the type of the function argument specified by "
"either ``arg_idx`` or ``ptr_idx`` is compared against the type associated "
"with the type tag. (Recall that for the ``argument_with_type_tag`` "
"attribute, the type of the function argument specified by ``arg_idx`` is "
"compared against the type associated with the type tag. Also recall that for "
"the ``pointer_with_type_tag`` attribute, the pointee type of the function "
"argument specified by ``ptr_idx`` is compared against the type associated "
"with the type tag.) There are two supported values for this optional third "
"argument:"
msgstr ""

#: ../../../AttributeReference.rst:5847
msgid ""
"``layout_compatible`` will cause types to be compared according to layout-"
"compatibility rules (In C++11 [class.mem] p 17, 18, see the layout-"
"compatibility rules for two standard-layout struct types and for two "
"standard-layout union types). This is useful when creating a type tag "
"associated with a struct or union type. For example:"
msgstr ""

#: ../../../AttributeReference.rst:5882
msgid ""
"``must_be_null`` specifies that the function argument specified by either "
"``arg_idx`` (for the ``argument_with_type_tag`` attribute) or ``ptr_idx`` "
"(for the ``pointer_with_type_tag`` attribute) should be a null pointer "
"constant. The second argument to the ``type_tag_for_datatype`` attribute is "
"ignored. For example:"
msgstr ""

#: ../../../AttributeReference.rst:5908
msgid "OpenCL Address Spaces"
msgstr ""

#: ../../../AttributeReference.rst:5909
msgid ""
"The address space qualifier may be used to specify the region of memory that "
"is used to allocate the object. OpenCL supports the following address "
"spaces: __generic(generic), __global(global), __local(local), "
"__private(private), __constant(constant)."
msgstr ""

#: ../../../AttributeReference.rst:5925
msgid ""
"More details can be found in the OpenCL C language Spec v2.0, Section 6.5."
msgstr ""

#: ../../../AttributeReference.rst:5928
msgid "__constant, constant, [[clang::opencl_constant]]"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_constant``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::opencl_constant``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__constant`` |br| ``constant``"
msgstr ""

#: ../../../AttributeReference.rst:5934
msgid ""
"The constant address space attribute signals that an object is located in a "
"constant (non-modifiable) memory region. It is available to all work items. "
"Any type can be annotated with the constant address space attribute. Objects "
"with the constant address space qualifier can be declared in any scope and "
"must have an initializer."
msgstr ""

#: ../../../AttributeReference.rst:5942
msgid "__generic, generic, [[clang::opencl_generic]]"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_generic``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::opencl_generic``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__generic`` |br| ``generic``"
msgstr ""

#: ../../../AttributeReference.rst:5948
msgid ""
"The generic address space attribute is only available with OpenCL v2.0 and "
"later. It can be used with pointer types. Variables in global and local "
"scope and function parameters in non-kernel functions can have the generic "
"address space type attribute. It is intended to be a placeholder for any "
"other address space except for '__constant' in OpenCL code which can be used "
"with multiple address spaces."
msgstr ""

#: ../../../AttributeReference.rst:5957
msgid "__global, global, [[clang::opencl_global]]"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_global``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::opencl_global``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__global`` |br| ``global``"
msgstr ""

#: ../../../AttributeReference.rst:5963
msgid ""
"The global address space attribute specifies that an object is allocated in "
"global memory, which is accessible by all work items. The content stored in "
"this memory area persists between kernel executions. Pointer types to the "
"global address space are allowed as function parameters or local variables. "
"Starting with OpenCL v2.0, the global address space can be used with global "
"(program scope) variables and static local variable as well."
msgstr ""

#: ../../../AttributeReference.rst:5972
msgid "__local, local, [[clang::opencl_local]]"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_local``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::opencl_local``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__local`` |br| ``local``"
msgstr ""

#: ../../../AttributeReference.rst:5978
msgid ""
"The local address space specifies that an object is allocated in the local "
"(work group) memory area, which is accessible to all work items in the same "
"work group. The content stored in this memory region is not accessible after "
"the kernel execution ends. In a kernel function scope, any variable can be "
"in the local address space. In other scopes, only pointer types to the local "
"address space are allowed. Local address space variables cannot have an "
"initializer."
msgstr ""

#: ../../../AttributeReference.rst:5987
msgid "__private, private, [[clang::opencl_private]]"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``opencl_private``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::opencl_private``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``__private`` |br| ``private``"
msgstr ""

#: ../../../AttributeReference.rst:5993
msgid ""
"The private address space specifies that an object is allocated in the "
"private (work item) memory. Other work items cannot access the same memory "
"area and its content is destroyed after work item execution ends. Local "
"variables can be declared in the private address space. Function arguments "
"are always in the private address space. Kernel function arguments of a "
"pointer or an array type cannot point to the private address space."
msgstr ""

#: ../../../AttributeReference.rst:6002
msgid "Nullability Attributes"
msgstr ""

#: ../../../AttributeReference.rst:6003
msgid ""
"Whether a particular pointer may be \"null\" is an important concern when "
"working with pointers in the C family of languages. The various nullability "
"attributes indicate whether a particular pointer can be null or not, which "
"makes APIs more expressive and can help static analysis tools identify bugs "
"involving null pointers. Clang supports several kinds of nullability "
"attributes: the ``nonnull`` and ``returns_nonnull`` attributes indicate "
"which function or method parameters and result types can never be null, "
"while nullability type qualifiers indicate which pointer types can be null "
"(``_Nullable``) or cannot be null (``_Nonnull``)."
msgstr ""

#: ../../../AttributeReference.rst:6005
msgid ""
"The nullability (type) qualifiers express whether a value of a given pointer "
"type can be null (the ``_Nullable`` qualifier), doesn't have a defined "
"meaning for null (the ``_Nonnull`` qualifier), or for which the purpose of "
"null is unclear (the ``_Null_unspecified`` qualifier). Because nullability "
"qualifiers are expressed within the type system, they are more general than "
"the ``nonnull`` and ``returns_nonnull`` attributes, allowing one to express "
"(for example) a nullable pointer to an array of nonnull pointers. "
"Nullability qualifiers are written to the right of the pointer to which they "
"apply. For example:"
msgstr ""

#: ../../../AttributeReference.rst:6020
msgid ""
"In Objective-C, there is an alternate spelling for the nullability "
"qualifiers that can be used in Objective-C methods and properties using "
"context-sensitive, non-underscored keywords. For example:"
msgstr ""

#: ../../../AttributeReference.rst:6031
msgid "_Nonnull"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``_Nonnull``"
msgstr ""

#: ../../../AttributeReference.rst:6037
msgid ""
"The ``_Nonnull`` nullability qualifier indicates that null is not a "
"meaningful value for a value of the ``_Nonnull`` pointer type. For example, "
"given a declaration such as:"
msgstr ""

#: ../../../AttributeReference.rst:6043
msgid ""
"a caller of ``fetch`` should not provide a null value, and the compiler will "
"produce a warning if it sees a literal null value passed to ``fetch``. Note "
"that, unlike the declaration attribute ``nonnull``, the presence of "
"``_Nonnull`` does not imply that passing null is undefined behavior: "
"``fetch`` is free to consider null undefined behavior or (perhaps for "
"backward-compatibility reasons) defensively handle null."
msgstr ""

#: ../../../AttributeReference.rst:6047
msgid "_Null_unspecified"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``_Null_unspecified``"
msgstr ""

#: ../../../AttributeReference.rst:6053
msgid ""
"The ``_Null_unspecified`` nullability qualifier indicates that neither the "
"``_Nonnull`` nor ``_Nullable`` qualifiers make sense for a particular "
"pointer type. It is used primarily to indicate that the role of null with "
"specific pointers in a nullability-annotated header is unclear, e.g., due to "
"overly-complex implementations or historical factors with a long-lived API."
msgstr ""

#: ../../../AttributeReference.rst:6057
msgid "_Nullable"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``_Nullable``"
msgstr ""

#: ../../../AttributeReference.rst:6063
msgid ""
"The ``_Nullable`` nullability qualifier indicates that a value of the "
"``_Nullable`` pointer type can be null. For example, given:"
msgstr ""

#: ../../../AttributeReference.rst:6069
msgid "a caller of ``fetch_or_zero`` can provide null."
msgstr ""

#: ../../../AttributeReference.rst:6073
msgid "nonnull"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``nonnull``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::nonnull``"
msgstr ""

#: ../../../AttributeReference.rst:6079
msgid ""
"The ``nonnull`` attribute indicates that some function parameters must not "
"be null, and can be used in several different ways. It's original usage "
"(`from GCC <https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes."
"html#Common-Function-Attributes>`_) is as a function (or Objective-C method) "
"attribute that specifies which parameters of the function are nonnull in a "
"comma-separated list. For example:"
msgstr ""

#: ../../../AttributeReference.rst:6086
msgid ""
"Here, the ``nonnull`` attribute indicates that parameters 1 and 2 cannot "
"have a null value. Omitting the parenthesized list of parameter indices "
"means that all parameters of pointer type cannot be null:"
msgstr ""

#: ../../../AttributeReference.rst:6094
msgid ""
"Clang also allows the ``nonnull`` attribute to be placed directly on a "
"function (or Objective-C method) parameter, eliminating the need to specify "
"the parameter index ahead of type. For example:"
msgstr ""

#: ../../../AttributeReference.rst:6101
msgid ""
"Note that the ``nonnull`` attribute indicates that passing null to a non-"
"null parameter is undefined behavior, which the optimizer may take advantage "
"of to, e.g., remove null checks. The ``_Nonnull`` type qualifier indicates "
"that a pointer cannot be null in a more general manner (because it is part "
"of the type system) and does not imply undefined behavior, making it more "
"widely applicable."
msgstr ""

#: ../../../AttributeReference.rst:6105
msgid "returns_nonnull"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``returns_nonnull``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``gnu::returns_nonnull``"
msgstr ""

#: ../../../AttributeReference.rst:6111
msgid ""
"The ``returns_nonnull`` attribute indicates that a particular function (or "
"Objective-C method) always returns a non-null pointer. For example, a "
"particular system ``malloc`` might be defined to terminate a process when "
"memory is not available rather than returning a null pointer:"
msgstr ""

#: ../../../AttributeReference.rst:6117
msgid ""
"The ``returns_nonnull`` attribute implies that returning a null pointer is "
"undefined behavior, which the optimizer may take advantage of. The "
"``_Nonnull`` type qualifier indicates that a pointer cannot be null in a "
"more general manner (because it is part of the type system) and does not "
"imply undefined behavior, making it more widely applicable"
msgstr ""

#: ../../../AttributeReference.rst:6121
msgid "Handle Attributes"
msgstr ""

#: ../../../AttributeReference.rst:6122
msgid ""
"Handles are a way to identify resources like files, sockets, and processes. "
"They are more opaque than pointers and widely used in system programming. "
"They have similar risks such as never releasing a resource associated with a "
"handle, attempting to use a handle that was already released, or trying to "
"release a handle twice. Using the annotations below it is possible to make "
"the ownership of the handles clear: whose responsibility is to release them. "
"They can also aid static analysis tools to find bugs."
msgstr ""

#: ../../../AttributeReference.rst:6131
msgid "acquire_handle"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``acquire_handle``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::acquire_handle``"
msgstr ""

#: ../../../AttributeReference.rst:6137
msgid ""
"If this annotation is on a function or a function type it is assumed to "
"return a new handle. In case this annotation is on an output parameter, the "
"function is assumed to fill the corresponding argument with a new handle."
msgstr ""

#: ../../../AttributeReference.rst:6156
msgid "release_handle"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``release_handle``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::release_handle``"
msgstr ""

#: ../../../AttributeReference.rst:6162
msgid ""
"If a function parameter is annotated with `release_handle` it is assumed to "
"close the handle. It is also assumed to require an open handle to work with."
msgstr ""

#: ../../../AttributeReference.rst:6171
msgid "use_handle"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``use_handle``"
msgstr ""

#: ../../../AttributeReference.rst:1
msgid "``clang::use_handle``"
msgstr ""

#: ../../../AttributeReference.rst:6177
msgid ""
"A function taking a handle by value might close the handle. If a function "
"parameter is annotated with `use_handle` it is assumed to not to change the "
"state of the handle. It is also assumed to require an open handle to work "
"with."
msgstr ""
