# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../APINotes.rst:3
msgid "API Notes: Annotations Without Modifying Headers"
msgstr ""

#: ../../../APINotes.rst:5
msgid ""
"**The Problem:** You have headers you want to use, but you also want to add "
"extra information to the API. You don't want to put that information in the "
"headers themselves --- perhaps because you want to keep them clean for other "
"clients, or perhaps because they're from some open source project and you "
"don't want to modify them at all."
msgstr ""

#: ../../../APINotes.rst:11
msgid ""
"**Incomplete solution:** Redeclare all the interesting parts of the API in "
"your own header and add the attributes you want. Unfortunately, this:"
msgstr ""

#: ../../../APINotes.rst:14
msgid "doesn't work with attributes that must be present on a definition"
msgstr ""

#: ../../../APINotes.rst:15
msgid "doesn't allow changing the definition in other ways"
msgstr ""

#: ../../../APINotes.rst:16
msgid "requires your header to be included in any client code to take effect"
msgstr ""

#: ../../../APINotes.rst:18
msgid ""
"**Better solution:** Provide a \"sidecar\" file with the information you "
"want to add, and have that automatically get picked up by the module-"
"building logic in the compiler."
msgstr ""

#: ../../../APINotes.rst:22
msgid "That's API notes."
msgstr ""

#: ../../../APINotes.rst:24
msgid ""
"API notes use a YAML-based file format. YAML is a format best explained by "
"example, so here is a `small example <https://github.com/llvm/llvm-project/"
"blob/main/clang/test/APINotes/Inputs/Frameworks/SomeKit.framework/Headers/"
"SomeKit.apinotes>`_ from the compiler test suite of API notes for a "
"hypothetical \"SomeKit\" framework."
msgstr ""

#: ../../../APINotes.rst:32
msgid "Usage"
msgstr ""

#: ../../../APINotes.rst:34
msgid ""
"API notes files are found relative to the module map that defines a module, "
"under the name \"SomeKit.apinotes\" for a module named \"SomeKit\". "
"Additionally, a file named \"SomeKit_private.apinotes\" will also be picked "
"up to go with a private module map. For bare modules these two files will be "
"in the same directory as the corresponding module map; for framework "
"modules, they should be placed in the Headers and PrivateHeaders "
"directories, respectively. The module map for a private top-level framework "
"module should be placed in the PrivateHeaders directory as well, though it "
"does not need an additional \"_private\" suffix on its name."
msgstr ""

#: ../../../APINotes.rst:44
msgid ""
"Clang will search for API notes files next to module maps only when passed "
"the ``-fapinotes-modules`` option."
msgstr ""

#: ../../../APINotes.rst:49
msgid "Limitations"
msgstr ""

#: ../../../APINotes.rst:51
msgid ""
"Since they're identified by module name, API notes cannot be used to modify "
"arbitrary textual headers."
msgstr ""

#: ../../../APINotes.rst:56
msgid "\"Versioned\" API Notes"
msgstr ""

#: ../../../APINotes.rst:58
msgid ""
"Many API notes affect how a C API is imported into Swift. In order to change "
"that behavior while still remaining backwards-compatible, API notes can be "
"selectively applied based on the Swift compatibility version provided to the "
"compiler (e.g. ``-fapi-notes-swift-version=5``). The rule is that an "
"explicitly-versioned API note applies to that version *and all earlier "
"versions,* and any applicable explicitly-versioned API note takes precedence "
"over an unversioned API note."
msgstr ""

#: ../../../APINotes.rst:68
msgid "Reference"
msgstr ""

#: ../../../APINotes.rst:70
msgid ""
"An API notes file contains a YAML dictionary with the following top-level "
"entries:"
msgstr ""

#: ../../../APINotes.rst:0
msgid "Name"
msgstr ""

#: ../../../APINotes.rst:75
msgid ""
"The name of the module (the framework name, for frameworks). Note that this "
"is always the name of a top-level module, even within a private API notes "
"file."
msgstr ""

#: ../../../APINotes.rst:0
msgid ""
"Classes, Protocols, Tags, Typedefs, Globals, Enumerators, Functions, "
"Namespaces"
msgstr ""

#: ../../../APINotes.rst:85
msgid ""
"Arrays of top-level declarations. Each entry in the array must have a 'Name' "
"key with its Objective-C or C++ name. \"Tags\" refers to structs, C++ "
"classes, enums, and unions; \"Classes\" refers to Objective-C classes; "
"\"Enumerators\" refers to enum cases."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftVersions"
msgstr ""

#: ../../../APINotes.rst:100
msgid ""
"Contains explicit information for backwards compatibility. Each entry in the "
"array contains a 'Version' key, which should be set to '4' for annotations "
"that only apply to Swift 4 mode and earlier. The other entries in this "
"dictionary are the same declaration entries as at the top level: Classes, "
"Protocols, Tags, Typedefs, Globals, Enumerators, and Functions."
msgstr ""

#: ../../../APINotes.rst:113
msgid ""
"Each entry under 'Classes' and 'Protocols' can contain \"Methods\" and "
"\"Properties\" arrays, in addition to the attributes described below:"
msgstr ""

#: ../../../APINotes.rst:0
msgid "Methods"
msgstr ""

#: ../../../APINotes.rst:118
msgid ""
"Identified by 'Selector' and 'MethodKind'; the MethodKind is either "
"\"Instance\" or \"Class\"."
msgstr ""

#: ../../../APINotes.rst:0
msgid "Properties"
msgstr ""

#: ../../../APINotes.rst:132
msgid ""
"Identified by 'Name' and 'PropertyKind'; the PropertyKind is also either "
"\"Instance\" or \"Class\"."
msgstr ""

#: ../../../APINotes.rst:144
msgid ""
"Each declaration supports the following annotations (if relevant to that "
"declaration kind), all of which are optional:"
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftName"
msgstr ""

#: ../../../APINotes.rst:149
msgid ""
"Equivalent to ``NS_SWIFT_NAME``. For a method, must include the full Swift "
"name with all arguments. Use \"_\" to omit an argument label."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftImportAs"
msgstr ""

#: ../../../APINotes.rst:163
msgid ""
"For a class, possible values are ``owned`` (equivalent to "
"``SWIFT_SELF_CONTAINED``) or ``reference`` (equivalent to "
"``SWIFT_SHARED_REFERENCE``, also requires specifying ``SwiftReleaseOp`` and "
"``SwiftRetainOp``)."
msgstr ""

#: ../../../APINotes.rst:168
msgid ""
"For a method, possible values are ``unsafe`` (equivalent to "
"``SWIFT_RETURNS_INDEPENDENT_VALUE``) or ``computed_property`` (equivalent to "
"``SWIFT_COMPUTED_PROPERTY``)."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftRetainOp, SwiftReleaseOp"
msgstr ""

#: ../../../APINotes.rst:180
msgid ""
"Controls the lifetime operations of a class which uses custom reference "
"counting. The class must be annotated as a reference type using "
"``SwiftImportAs: reference``. The values are either names of global "
"functions, each taking a single parameter of a pointer type, or ``immortal`` "
"for a type that is considered alive for the duration of the program."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftCopyable"
msgstr ""

#: ../../../APINotes.rst:200
msgid ""
"Allows annotating a C++ class as non-copyable in Swift. Equivalent to "
"``SWIFT_NONCOPYABLE``, or to an explicit conformance ``: ~Copyable``."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftConformsTo"
msgstr ""

#: ../../../APINotes.rst:211
msgid ""
"Allows annotating a C++ class as conforming to a Swift protocol. Equivalent "
"to ``SWIFT_CONFORMS_TO_PROTOCOL``. The value is a module-qualified name of a "
"Swift protocol."
msgstr ""

#: ../../../APINotes.rst:0
msgid "Availability, AvailabilityMsg"
msgstr ""

#: ../../../APINotes.rst:223
msgid ""
"A value of \"nonswift\" is equivalent to ``NS_SWIFT_UNAVAILABLE``. A value "
"of \"available\" can be used in the \"SwiftVersions\" section to undo the "
"effect of \"nonswift\"."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftPrivate"
msgstr ""

#: ../../../APINotes.rst:236
msgid "Equivalent to NS_REFINED_FOR_SWIFT."
msgstr ""

#: ../../../APINotes.rst:0
msgid "Nullability"
msgstr ""

#: ../../../APINotes.rst:245
msgid ""
"Used for properties and globals. There are four options, identified by their "
"initials:"
msgstr ""

#: ../../../APINotes.rst:248
msgid "``Nonnull`` or ``N`` (corresponding to ``_Nonnull``)"
msgstr ""

#: ../../../APINotes.rst:249
msgid "``Optional`` or ``O`` (corresponding to ``_Nullable``)"
msgstr ""

#: ../../../APINotes.rst:250
msgid "``Unspecified`` or ``U`` (corresponding to ``_Null_unspecified``)"
msgstr ""

#: ../../../APINotes.rst:251
msgid "``Scalar`` or ``S`` (deprecated)"
msgstr ""

#: ../../../APINotes.rst:253
msgid ""
"Note that 'Nullability' is overridden by 'Type', even in a \"SwiftVersions\" "
"section."
msgstr ""

#: ../../../APINotes.rst:258
msgid ""
"'Nullability' can also be used to describe the argument types of methods and "
"functions, but this usage is deprecated in favor of 'Parameters' (see below)."
msgstr ""

#: ../../../APINotes.rst:0
msgid "NullabilityOfRet"
msgstr ""

#: ../../../APINotes.rst:269
msgid ""
"Used for methods and functions. Describes the nullability of the return type."
msgstr ""

#: ../../../APINotes.rst:271
msgid ""
"Note that 'NullabilityOfRet' is overridden by 'ResultType', even in a "
"\"SwiftVersions\" section."
msgstr ""

#: ../../../APINotes.rst:276
msgid ""
"Due to a compiler bug, 'NullabilityOfRet' may change nullability of the "
"parameters as well (rdar://30544062). Avoid using it and instead use "
"'ResultType' and specify the return type along with a nullability annotation "
"(see documentation for 'ResultType')."
msgstr ""

#: ../../../APINotes.rst:0
msgid "Type"
msgstr ""

#: ../../../APINotes.rst:289
msgid ""
"Used for properties and globals. This completely overrides the type of the "
"declaration; it should ideally only be used for Swift backwards "
"compatibility, when existing type information has been made more precise in "
"a header. Prefer 'Nullability' and other annotations when possible."
msgstr ""

#: ../../../APINotes.rst:294 ../../../APINotes.rst:311
msgid ""
"We parse the specified type as if it appeared at the location of the "
"declaration whose type is being modified.  Macros are not available and "
"nullability must be applied explicitly (even in an "
"``NS_ASSUME_NONNULL_BEGIN`` section)."
msgstr ""

#: ../../../APINotes.rst:0
msgid "ResultType"
msgstr ""

#: ../../../APINotes.rst:307
msgid ""
"Used for methods and functions. This completely overrides the return type; "
"it should ideally only be used for Swift backwards compatibility, when "
"existing type information has been made more precise in a header."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftImportAsAccessors"
msgstr ""

#: ../../../APINotes.rst:324
msgid ""
"Used for properties. If true, the property will be exposed in Swift as its "
"accessor methods, rather than as a computed property using ``var``."
msgstr ""

#: ../../../APINotes.rst:0
msgid "NSErrorDomain"
msgstr ""

#: ../../../APINotes.rst:335
msgid ""
"Used for ``NSError`` code enums. The value is the name of the associated "
"domain ``NSString`` constant; an empty string (``\"\"``) means the enum is a "
"normal enum rather than an error code."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftWrapper"
msgstr ""

#: ../../../APINotes.rst:346
msgid ""
"Controls ``NS_STRING_ENUM`` and ``NS_EXTENSIBLE_STRING_ENUM``. There are "
"three options:"
msgstr ""

#: ../../../APINotes.rst:349
msgid "\"struct\" (extensible)"
msgstr ""

#: ../../../APINotes.rst:350
msgid "\"enum\""
msgstr ""

#: ../../../APINotes.rst:351 ../../../APINotes.rst:368
msgid "\"none\""
msgstr ""

#: ../../../APINotes.rst:353
msgid ""
"Note that even an \"enum\" wrapper is still presented as a struct in Swift; "
"it's just a \"more enum-like\" struct."
msgstr ""

#: ../../../APINotes.rst:0
msgid "EnumKind"
msgstr ""

#: ../../../APINotes.rst:363
msgid ""
"Has the same effect as ``NS_ENUM`` and ``NS_OPTIONS``. There are four "
"options:"
msgstr ""

#: ../../../APINotes.rst:365
msgid "\"NSEnum\" / \"CFEnum\""
msgstr ""

#: ../../../APINotes.rst:366
msgid "\"NSClosedEnum\" / \"CFClosedEnum\""
msgstr ""

#: ../../../APINotes.rst:367
msgid "\"NSOptions\" / \"CFOptions\""
msgstr ""

#: ../../../APINotes.rst:0
msgid "Parameters"
msgstr ""

#: ../../../APINotes.rst:377
msgid ""
"Used for methods and functions. Parameters are identified by a 0-based "
"'Position' and support the 'Nullability', 'NoEscape', and 'Type' keys."
msgstr ""

#: ../../../APINotes.rst:382
msgid ""
"Using 'Parameters' within a parameter entry to describe the parameters of a "
"block is not implemented. Use 'Type' on the entire parameter instead."
msgstr ""

#: ../../../APINotes.rst:0
msgid "NoEscape"
msgstr ""

#: ../../../APINotes.rst:395
msgid "Used only for block parameters. Equivalent to ``NS_NOESCAPE``."
msgstr ""

#: ../../../APINotes.rst:0
msgid "SwiftBridge"
msgstr ""

#: ../../../APINotes.rst:406
msgid ""
"Used for Objective-C class types bridged to Swift value types. An empty "
"string (\"\") means a type is not bridged. Not supported outside of Apple "
"frameworks (the Swift side of it requires conforming to implementation-"
"detail protocols that are subject to change)."
msgstr ""

#: ../../../APINotes.rst:0
msgid "DesignatedInit"
msgstr ""

#: ../../../APINotes.rst:418
msgid "Used for init methods. Equivalent to ``NS_DESIGNATED_INITIALIZER``."
msgstr ""
