# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../SanitizerSpecialCaseList.rst:3
msgid "Sanitizer special case list"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:9
msgid "Introduction"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:11
msgid ""
"This document describes the way to disable or alter the behavior of "
"sanitizer tools for certain source-level entities by providing a special "
"file at compile-time."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:16
msgid "Goal and usage"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:18
msgid ""
"Users of sanitizer tools, such as :doc:`AddressSanitizer`, :doc:"
"`ThreadSanitizer` or :doc:`MemorySanitizer` may want to disable or alter "
"some checks for certain source-level entities to:"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:22
msgid "speedup hot function, which is known to be correct;"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:23
msgid ""
"ignore a function that does some low-level magic (e.g. walks through the "
"thread stack, bypassing the frame boundaries);"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:25
msgid "ignore a known problem."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:27
msgid ""
"To achieve this, user may create a file listing the entities they want to "
"ignore, and pass it to clang at compile-time using ``-fsanitize-ignorelist`` "
"flag. See :doc:`UsersManual` for details."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:32
msgid "Example"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:52
msgid "Format"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:54
msgid ""
"Ignorelists consist of entries, optionally grouped into sections. Empty "
"lines and lines starting with \"#\" are ignored."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:59
msgid ""
"Prior to Clang 18, section names and entries described below use a variant "
"of regex where ``*`` is translated to ``.*``. Clang 18 (`D154014 <https://"
"reviews.llvm.org/D154014>`) switches to glob and plans to remove regex "
"support in Clang 19."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:64
msgid ""
"For Clang 18, regex is supported if ``#!special-case-list-v1`` is the first "
"line of the file."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:67
msgid ""
"Many special case lists use ``.`` to indicate the literal character and do "
"not use regex metacharacters such as ``(``, ``)``. They are unaffected by "
"the regex to glob transition. For more details, see `this discourse post "
"<https://discourse.llvm.org/t/use-glob-instead-of-regex-for-"
"specialcaselists/71666>`_."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:72
msgid ""
"Section names are globs written in square brackets that denote which "
"sanitizer the following entries apply to. For example, ``[address]`` "
"specifies AddressSanitizer while ``[{cfi-vcall,cfi-icall}]`` specifies "
"Control Flow Integrity virtual and indirect call checking. Entries without a "
"section will be placed under the ``[*]`` section applying to all enabled "
"sanitizers."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:78
msgid ""
"Entries contain an entity type, followed by a colon and a glob, specifying "
"the names of the entities, optionally followed by an equals sign and a tool-"
"specific category, e.g. ``fun:*ExampleFunc=example_category``. Two generic "
"entity types are ``src`` and ``fun``, which allow users to specify source "
"files and functions, respectively. Some sanitizer tools may introduce custom "
"entity types and categories - refer to tool-specific docs."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:114
msgid ""
"``mainfile`` is similar to applying ``-fno-sanitize=`` to a set of files but "
"does not need plumbing into the build system. This works well for internal "
"linkage functions but has a caveat for C++ vague linkage functions."
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:118
msgid ""
"C++ vague linkage functions (e.g. inline functions, template instantiations) "
"are deduplicated at link time. A function (in an included file) ignored by a "
"specific ``mainfile`` pattern may not be the prevailing copy picked by the "
"linker. Therefore, using ``mainfile`` requires caution. It may still be "
"useful, e.g. when patterns are picked in a way to ensure the prevailing one "
"is ignored. (There is action-at-a-distance risk.)"
msgstr ""

#: ../../../SanitizerSpecialCaseList.rst:125
msgid ""
"``mainfile`` can be useful enabling a ubsan check for a large code base when "
"finding the direct stack frame triggering the failure for every failure is "
"difficult."
msgstr ""
