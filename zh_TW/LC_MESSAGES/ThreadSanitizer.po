# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ThreadSanitizer.rst:2
msgid "ThreadSanitizer"
msgstr ""

#: ../../../ThreadSanitizer.rst:5
msgid "Introduction"
msgstr ""

#: ../../../ThreadSanitizer.rst:7
msgid ""
"ThreadSanitizer is a tool that detects data races.  It consists of a "
"compiler instrumentation module and a run-time library.  Typical slowdown "
"introduced by ThreadSanitizer is about **5x-15x**.  Typical memory overhead "
"introduced by ThreadSanitizer is about **5x-10x**."
msgstr ""

#: ../../../ThreadSanitizer.rst:13
msgid "How to build"
msgstr ""

#: ../../../ThreadSanitizer.rst:15
msgid "Build LLVM/Clang with `CMake <https://llvm.org/docs/CMake.html>`_."
msgstr ""

#: ../../../ThreadSanitizer.rst:18
msgid "Supported Platforms"
msgstr ""

#: ../../../ThreadSanitizer.rst:20
msgid "ThreadSanitizer is supported on the following OS:"
msgstr ""

#: ../../../ThreadSanitizer.rst:22
msgid "Android aarch64, x86_64"
msgstr ""

#: ../../../ThreadSanitizer.rst:23
msgid "Darwin arm64, x86_64"
msgstr ""

#: ../../../ThreadSanitizer.rst:24
msgid "FreeBSD"
msgstr ""

#: ../../../ThreadSanitizer.rst:25
msgid "Linux aarch64, x86_64, powerpc64, powerpc64le"
msgstr ""

#: ../../../ThreadSanitizer.rst:26
msgid "NetBSD"
msgstr ""

#: ../../../ThreadSanitizer.rst:28
msgid ""
"Support for other 64-bit architectures is possible, contributions are "
"welcome. Support for 32-bit platforms is problematic and is not planned."
msgstr ""

#: ../../../ThreadSanitizer.rst:32
msgid "Usage"
msgstr ""

#: ../../../ThreadSanitizer.rst:34
msgid ""
"Simply compile and link your program with ``-fsanitize=thread``.  To get a "
"reasonable performance add ``-O1`` or higher.  Use ``-g`` to get file names "
"and line numbers in the warning messages."
msgstr ""

#: ../../../ThreadSanitizer.rst:38
msgid "Example:"
msgstr ""

#: ../../../ThreadSanitizer.rst:59
msgid ""
"If a bug is detected, the program will print an error message to stderr. "
"Currently, ThreadSanitizer symbolizes its output using an external "
"``addr2line`` process (this will be fixed in future)."
msgstr ""

#: ../../../ThreadSanitizer.rst:78
msgid "``__has_feature(thread_sanitizer)``"
msgstr ""

#: ../../../ThreadSanitizer.rst:80
msgid ""
"In some cases one may need to execute different code depending on whether "
"ThreadSanitizer is enabled. :ref:`\\_\\_has\\_feature <langext-__has_feature-"
"__has_extension>` can be used for this purpose."
msgstr ""

#: ../../../ThreadSanitizer.rst:94
msgid "``__attribute__((no_sanitize(\"thread\")))``"
msgstr ""

#: ../../../ThreadSanitizer.rst:96
msgid ""
"Some code should not be instrumented by ThreadSanitizer.  One may use the "
"function attribute ``no_sanitize(\"thread\")`` to disable instrumentation of "
"plain (non-atomic) loads/stores in a particular function.  ThreadSanitizer "
"still instruments such functions to avoid false positives and provide "
"meaningful stack traces.  This attribute may not be supported by other "
"compilers, so we suggest to use it together with "
"``__has_feature(thread_sanitizer)``."
msgstr ""

#: ../../../ThreadSanitizer.rst:104
msgid "Blacklist"
msgstr ""

#: ../../../ThreadSanitizer.rst:106
msgid ""
"ThreadSanitizer supports ``src`` and ``fun`` entity types in :doc:"
"`SanitizerSpecialCaseList`, that can be used to suppress data race reports "
"in the specified source files or functions. Unlike functions marked with "
"``no_sanitize(\"thread\")`` attribute, blacklisted functions are not "
"instrumented at all. This can lead to false positives due to missed "
"synchronization via atomic operations and missed stack frames in reports."
msgstr ""

#: ../../../ThreadSanitizer.rst:114
msgid "Limitations"
msgstr ""

#: ../../../ThreadSanitizer.rst:116
msgid ""
"ThreadSanitizer uses more real memory than a native run. At the default "
"settings the memory overhead is 5x plus 1Mb per each thread. Settings with "
"3x (less accurate analysis) and 9x (more accurate analysis) overhead are "
"also available."
msgstr ""

#: ../../../ThreadSanitizer.rst:120
msgid ""
"ThreadSanitizer maps (but does not reserve) a lot of virtual address space. "
"This means that tools like ``ulimit`` may not work as usually expected."
msgstr ""

#: ../../../ThreadSanitizer.rst:122
msgid "Libc/libstdc++ static linking is not supported."
msgstr ""

#: ../../../ThreadSanitizer.rst:123
msgid ""
"Non-position-independent executables are not supported.  Therefore, the "
"``fsanitize=thread`` flag will cause Clang to act as though the ``-fPIE`` "
"flag had been supplied if compiling without ``-fPIC``, and as though the ``-"
"pie`` flag had been supplied if linking an executable."
msgstr ""

#: ../../../ThreadSanitizer.rst:129
msgid "Current Status"
msgstr ""

#: ../../../ThreadSanitizer.rst:131
msgid ""
"ThreadSanitizer is in beta stage.  It is known to work on large C++ programs "
"using pthreads, but we do not promise anything (yet).  C++11 threading is "
"supported with llvm libc++.  The test suite is integrated into CMake build "
"and can be run with ``make check-tsan`` command."
msgstr ""

#: ../../../ThreadSanitizer.rst:136
msgid ""
"We are actively working on enhancing the tool --- stay tuned.  Any help, "
"especially in the form of minimized standalone tests is more than welcome."
msgstr ""

#: ../../../ThreadSanitizer.rst:140
msgid "More Information"
msgstr ""

#: ../../../ThreadSanitizer.rst:141
msgid "`<https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual>`_"
msgstr ""
