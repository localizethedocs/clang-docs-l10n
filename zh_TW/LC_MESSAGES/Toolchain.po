# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Toolchain.rst:3
msgid "Assembling a Complete Toolchain"
msgstr ""

#: ../../../Toolchain.rst:10
msgid "Introduction"
msgstr ""

#: ../../../Toolchain.rst:12
msgid ""
"Clang is only one component in a complete tool chain for C family "
"programming languages. In order to assemble a complete toolchain, additional "
"tools and runtime libraries are required. Clang is designed to interoperate "
"with existing tools and libraries for its target platforms, and the LLVM "
"project provides alternatives for a number of these components."
msgstr ""

#: ../../../Toolchain.rst:19
msgid ""
"This document describes the required and optional components in a complete "
"toolchain, where to find them, and the supported versions and limitations of "
"each option."
msgstr ""

#: ../../../Toolchain.rst:25
msgid ""
"This document currently describes Clang configurations on POSIX-like "
"operating systems with the GCC-compatible ``clang`` driver. When targeting "
"Windows with the MSVC-compatible ``clang-cl`` driver, some of the details "
"are different."
msgstr ""

#: ../../../Toolchain.rst:31
msgid "Tools"
msgstr ""

#: ../../../Toolchain.rst:35
msgid ""
"A complete compilation of C family programming languages typically involves "
"the following pipeline of tools, some of which are omitted in some "
"compilations:"
msgstr ""

#: ../../../Toolchain.rst:39
msgid ""
"**Preprocessor**: This performs the actions of the C preprocessor: expanding "
"#includes and #defines. The ``-E`` flag instructs Clang to stop after this "
"step."
msgstr ""

#: ../../../Toolchain.rst:43
msgid ""
"**Parsing**: This parses and semantically analyzes the source language and "
"builds a source-level intermediate representation (\"AST\"), producing a :"
"ref:`precompiled header (PCH) <usersmanual-precompiled-headers>`, preamble, "
"or :doc:`precompiled module file (PCM) <Modules>`, depending on the input. "
"The ``-precompile`` flag instructs Clang to stop after this step. This is "
"the default when the input is a header file."
msgstr ""

#: ../../../Toolchain.rst:52
msgid ""
"**IR generation**: This converts the source-level intermediate "
"representation into an optimizer-specific intermediate representation (IR); "
"for Clang, this is LLVM IR. The ``-emit-llvm`` flag instructs Clang to stop "
"after this step. If combined with ``-S``, Clang will produce textual LLVM "
"IR; otherwise, it will produce LLVM IR bitcode."
msgstr ""

#: ../../../Toolchain.rst:59
msgid ""
"**Compiler backend**: This converts the intermediate representation into "
"target-specific assembly code. The ``-S`` flag instructs Clang to stop after "
"this step."
msgstr ""

#: ../../../Toolchain.rst:63
msgid ""
"**Assembler**: This converts target-specific assembly code into target-"
"specific machine code object files. The ``-c`` flag instructs Clang to stop "
"after this step."
msgstr ""

#: ../../../Toolchain.rst:67
msgid ""
"**Linker**: This combines multiple object files into a single image (either "
"a shared object or an executable)."
msgstr ""

#: ../../../Toolchain.rst:70
msgid ""
"Clang provides all of these pieces other than the linker. When multiple "
"steps are performed by the same tool, it is common for the steps to be fused "
"together to avoid creating intermediate files."
msgstr ""

#: ../../../Toolchain.rst:74
msgid ""
"When given an output of one of the above steps as an input, earlier steps "
"are skipped (for instance, a ``.s`` file input will be assembled and linked)."
msgstr ""

#: ../../../Toolchain.rst:77
msgid ""
"The Clang driver can be invoked with the ``-###`` flag (this argument will "
"need to be escaped under most shells) to see which commands it would run for "
"the above steps, without running them. The ``-v`` (verbose) flag will print "
"the commands in addition to running them."
msgstr ""

#: ../../../Toolchain.rst:83
msgid "Clang frontend"
msgstr ""

#: ../../../Toolchain.rst:85
msgid ""
"The Clang frontend (``clang -cc1``) is used to compile C family languages. "
"The command-line interface of the frontend is considered to be an "
"implementation detail, intentionally has no external documentation, and is "
"subject to change without notice."
msgstr ""

#: ../../../Toolchain.rst:91
msgid "Language frontends for other languages"
msgstr ""

#: ../../../Toolchain.rst:93
msgid ""
"Clang can be provided with inputs written in non-C-family languages. In such "
"cases, an external tool will be used to compile the input. The currently-"
"supported languages are:"
msgstr ""

#: ../../../Toolchain.rst:97
msgid "Ada (``-x ada``, ``.ad[bs]``)"
msgstr ""

#: ../../../Toolchain.rst:98
msgid ""
"Fortran (``-x f95``, ``.f``, ``.f9[05]``, ``.for``, ``.fpp``, case-"
"insensitive)"
msgstr ""

#: ../../../Toolchain.rst:99
msgid "Java (``-x java``)"
msgstr ""

#: ../../../Toolchain.rst:101
msgid "In each case, GCC will be invoked to compile the input."
msgstr ""

#: ../../../Toolchain.rst:104
msgid "Assembler"
msgstr ""

#: ../../../Toolchain.rst:106
msgid ""
"Clang can either use LLVM's integrated assembler or an external system-"
"specific tool (for instance, the GNU Assembler on GNU OSes) to produce "
"machine code from assembly. By default, Clang uses LLVM's integrated "
"assembler on all targets where it is supported. If you wish to use the "
"system assembler instead, use the ``-fno-integrated-as`` option."
msgstr ""

#: ../../../Toolchain.rst:114
msgid "Linker"
msgstr ""

#: ../../../Toolchain.rst:116
msgid "Clang can be configured to use one of several different linkers:"
msgstr ""

#: ../../../Toolchain.rst:118
msgid "GNU ld"
msgstr ""

#: ../../../Toolchain.rst:119
msgid "GNU gold"
msgstr ""

#: ../../../Toolchain.rst:120
msgid "LLVM's `lld <https://lld.llvm.org>`_"
msgstr ""

#: ../../../Toolchain.rst:121
msgid "MSVC's link.exe"
msgstr ""

#: ../../../Toolchain.rst:123
msgid ""
"Link-time optimization is natively supported by lld, and supported via a "
"`linker plugin <https://llvm.org/docs/GoldPlugin.html>`_ when using gold."
msgstr ""

#: ../../../Toolchain.rst:126
msgid ""
"The default linker varies between targets, and can be overridden via the ``-"
"fuse-ld=<linker name>`` flag."
msgstr ""

#: ../../../Toolchain.rst:130
msgid "Runtime libraries"
msgstr ""

#: ../../../Toolchain.rst:132
msgid ""
"A number of different runtime libraries are required to provide different "
"layers of support for C family programs. Clang will implicitly link an "
"appropriate implementation of each runtime library, selected based on target "
"defaults or explicitly selected by the ``--rtlib=`` and ``--stdlib=`` flags."
msgstr ""

#: ../../../Toolchain.rst:138
msgid ""
"The set of implicitly-linked libraries depend on the language mode. As a "
"consequence, you should use ``clang++`` when linking C++ programs in order "
"to ensure the C++ runtimes are provided."
msgstr ""

#: ../../../Toolchain.rst:144
msgid ""
"There may exist other implementations for these components not described "
"below. Please let us know how well those other implementations work with "
"Clang so they can be added to this list!"
msgstr ""

#: ../../../Toolchain.rst:153
msgid "Compiler runtime"
msgstr ""

#: ../../../Toolchain.rst:155
msgid ""
"The compiler runtime library provides definitions of functions implicitly "
"invoked by the compiler to support operations not natively supported by the "
"underlying hardware (for instance, 128-bit integer multiplications), and "
"where inline expansion of the operation is deemed unsuitable."
msgstr ""

#: ../../../Toolchain.rst:160
msgid ""
"The default runtime library is target-specific. For targets where GCC is the "
"dominant compiler, Clang currently defaults to using libgcc_s. On most other "
"targets, compiler-rt is used by default."
msgstr ""

#: ../../../Toolchain.rst:165 ../../../Toolchain.rst:202
msgid "compiler-rt (LLVM)"
msgstr ""

#: ../../../Toolchain.rst:167
msgid ""
"`LLVM's compiler runtime library <https://compiler-rt.llvm.org/>`_ provides "
"a complete set of runtime library functions containing all functions that "
"Clang will implicitly call, in ``libclang_rt.builtins.<arch>.a``."
msgstr ""

#: ../../../Toolchain.rst:171
msgid ""
"You can instruct Clang to use compiler-rt with the ``--rtlib=compiler-rt`` "
"flag. This is not supported on every platform."
msgstr ""

#: ../../../Toolchain.rst:174
msgid ""
"If using libc++ and/or libc++abi, you may need to configure them to use "
"compiler-rt rather than libgcc_s by passing ``-DLIBCXX_USE_COMPILER_RT=YES`` "
"and/or ``-DLIBCXXABI_USE_COMPILER_RT=YES`` to ``cmake``. Otherwise, you may "
"end up with both runtime libraries linked into your program (this is "
"typically harmless, but wasteful)."
msgstr ""

#: ../../../Toolchain.rst:181 ../../../Toolchain.rst:242
msgid "libgcc_s (GNU)"
msgstr ""

#: ../../../Toolchain.rst:183
msgid ""
"`GCC's runtime library <https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html>`_ "
"can be used in place of compiler-rt. However, it lacks several functions "
"that LLVM may emit references to, particularly when using Clang's "
"``__builtin_*_overflow`` family of intrinsics."
msgstr ""

#: ../../../Toolchain.rst:188
msgid ""
"You can instruct Clang to use libgcc_s with the ``--rtlib=libgcc`` flag. "
"This is not supported on every platform."
msgstr ""

#: ../../../Toolchain.rst:192
msgid "Atomics library"
msgstr ""

#: ../../../Toolchain.rst:194
msgid ""
"If your program makes use of atomic operations and the compiler is not able "
"to lower them all directly to machine instructions (because there either is "
"no known suitable machine instruction or the operand is not known to be "
"suitably aligned), a call to a runtime library ``__atomic_*`` function will "
"be generated. A runtime library containing these atomics functions is "
"necessary for such programs."
msgstr ""

#: ../../../Toolchain.rst:204
msgid "compiler-rt contains an implementation of an atomics library."
msgstr ""

#: ../../../Toolchain.rst:207
msgid "libatomic (GNU)"
msgstr ""

#: ../../../Toolchain.rst:209
msgid ""
"libgcc_s does not provide an implementation of an atomics library. Instead, "
"`GCC's libatomic library <https://gcc.gnu.org/wiki/Atomic/GCCMM>`_ can be "
"used to supply these when using libgcc_s."
msgstr ""

#: ../../../Toolchain.rst:215
msgid ""
"Clang does not currently automatically link against libatomic when using "
"libgcc_s. You may need to manually add ``-latomic`` to support this "
"configuration when using non-native atomic operations (if you see link "
"errors referring to ``__atomic_*`` functions)."
msgstr ""

#: ../../../Toolchain.rst:221
msgid "Unwind library"
msgstr ""

#: ../../../Toolchain.rst:223
msgid ""
"The unwind library provides a family of ``_Unwind_*`` functions implementing "
"the language-neutral stack unwinding portion of the Itanium C++ ABI (`Level "
"I <https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-abi>`_). It is "
"a dependency of the C++ ABI library, and sometimes is a dependency of other "
"runtimes."
msgstr ""

#: ../../../Toolchain.rst:230
msgid "libunwind (LLVM)"
msgstr ""

#: ../../../Toolchain.rst:232
msgid ""
"LLVM's unwinder library is part of the llvm-project git repository. To build "
"it, pass ``-DLLVM_ENABLE_RUNTIMES=libunwind`` to the cmake invocation."
msgstr ""

#: ../../../Toolchain.rst:235
msgid ""
"If using libc++abi, you may need to configure it to use libunwind rather "
"than libgcc_s by passing ``-DLIBCXXABI_USE_LLVM_UNWINDER=YES`` to ``cmake``. "
"If libc++abi is configured to use some version of libunwind, that library "
"will be implicitly linked into binaries that link to libc++abi."
msgstr ""

#: ../../../Toolchain.rst:244
msgid ""
"libgcc_s has an integrated unwinder, and does not need an external unwind "
"library to be provided."
msgstr ""

#: ../../../Toolchain.rst:248
msgid "libunwind (nongnu.org)"
msgstr ""

#: ../../../Toolchain.rst:250
msgid ""
"This is another implementation of the libunwind specification. See "
"`libunwind (nongnu.org) <https://www.nongnu.org/libunwind>`_."
msgstr ""

#: ../../../Toolchain.rst:254
msgid "libunwind (PathScale)"
msgstr ""

#: ../../../Toolchain.rst:256
msgid ""
"This is another implementation of the libunwind specification. See "
"`libunwind (pathscale) <https://github.com/pathscale/libunwind>`_."
msgstr ""

#: ../../../Toolchain.rst:260
msgid "Sanitizer runtime"
msgstr ""

#: ../../../Toolchain.rst:262
msgid ""
"The instrumentation added by Clang's sanitizers (``-fsanitize=...``) "
"implicitly makes calls to a runtime library, in order to maintain side state "
"about the execution of the program and to issue diagnostic messages when a "
"problem is detected."
msgstr ""

#: ../../../Toolchain.rst:267
msgid ""
"The only supported implementation of these runtimes is provided by LLVM's "
"compiler-rt, and the relevant portion of that library (``libclang_rt."
"<sanitizer>.<arch>.a``) will be implicitly linked when linking with a ``-"
"fsanitize=...`` flag."
msgstr ""

#: ../../../Toolchain.rst:273
msgid "C standard library"
msgstr ""

#: ../../../Toolchain.rst:275
msgid ""
"Clang supports a wide variety of `C standard library <https://en."
"cppreference.com/w/c>`_ implementations."
msgstr ""

#: ../../../Toolchain.rst:280
msgid "C++ ABI library"
msgstr ""

#: ../../../Toolchain.rst:282
msgid ""
"The C++ ABI library provides an implementation of the library portion of the "
"Itanium C++ ABI, covering both the `support functionality in the main "
"Itanium C++ ABI document <https://itanium-cxx-abi.github.io/cxx-abi/abi."
"html>`_ and `Level II of the exception handling support <https://itanium-cxx-"
"abi.github.io/cxx-abi/abi-eh.html#cxx-abi>`_. References to the functions "
"and objects in this library are implicitly generated by Clang when compiling "
"C++ code."
msgstr ""

#: ../../../Toolchain.rst:291
msgid ""
"While it is possible to link C++ code using libstdc++ and code using libc++ "
"together into the same program (so long as you do not attempt to pass C++ "
"standard library objects across the boundary), it is not generally possible "
"to have more than one C++ ABI library in a program."
msgstr ""

#: ../../../Toolchain.rst:296
msgid ""
"The version of the C++ ABI library used by Clang will be the one that the "
"chosen C++ standard library was linked against. Several implementations are "
"available:"
msgstr ""

#: ../../../Toolchain.rst:301
msgid "libc++abi (LLVM)"
msgstr ""

#: ../../../Toolchain.rst:303
msgid ""
"`libc++abi <https://libcxxabi.llvm.org/>`_ is LLVM's implementation of this "
"specification."
msgstr ""

#: ../../../Toolchain.rst:307
msgid "libsupc++ (GNU)"
msgstr ""

#: ../../../Toolchain.rst:309
msgid ""
"libsupc++ is GCC's implementation of this specification. However, this "
"library is only used when libstdc++ is linked statically. The dynamic "
"library version of libstdc++ contains a copy of libsupc++."
msgstr ""

#: ../../../Toolchain.rst:315
msgid ""
"Clang does not currently automatically link against libsupc++ when "
"statically linking libstdc++. You may need to manually add ``-lsupc++`` to "
"support this configuration when using ``-static`` or ``-static-libstdc++``."
msgstr ""

#: ../../../Toolchain.rst:320
msgid "libcxxrt (PathScale)"
msgstr ""

#: ../../../Toolchain.rst:322
msgid ""
"This is another implementation of the Itanium C++ ABI specification. See "
"`libcxxrt <https://github.com/pathscale/libcxxrt>`_."
msgstr ""

#: ../../../Toolchain.rst:326
msgid "C++ standard library"
msgstr ""

#: ../../../Toolchain.rst:328
msgid ""
"Clang supports use of either LLVM's libc++ or GCC's libstdc++ implementation "
"of the `C++ standard library <https://en.cppreference.com/w/cpp>`_."
msgstr ""

#: ../../../Toolchain.rst:332
msgid "libc++ (LLVM)"
msgstr ""

#: ../../../Toolchain.rst:334
msgid ""
"`libc++ <https://libcxx.llvm.org/>`_ is LLVM's implementation of the C++ "
"standard library, aimed at being a complete implementation of the C++ "
"standards from C++11 onwards."
msgstr ""

#: ../../../Toolchain.rst:338
msgid "You can instruct Clang to use libc++ with the ``-stdlib=libc++`` flag."
msgstr ""

#: ../../../Toolchain.rst:341
msgid "libstdc++ (GNU)"
msgstr ""

#: ../../../Toolchain.rst:343
msgid ""
"`libstdc++ <https://gcc.gnu.org/onlinedocs/libstdc++/>`_ is GCC's "
"implementation of the C++ standard library. Clang supports libstdc++ 4.8.3 "
"(released 2014-05-22) and later. Historically Clang implemented workarounds "
"for issues discovered in libstdc++, and these are removed as fixed libstdc++ "
"becomes sufficiently old."
msgstr ""

#: ../../../Toolchain.rst:349
msgid ""
"You can instruct Clang to use libstdc++ with the ``-stdlib=libstdc++`` flag."
msgstr ""
