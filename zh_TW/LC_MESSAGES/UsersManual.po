# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../UsersManual.rst:3
msgid "Clang Compiler User's Manual"
msgstr ""

#: ../../../UsersManual.rst:9
msgid "Introduction"
msgstr ""

#: ../../../UsersManual.rst:11
msgid ""
"The Clang Compiler is an open-source compiler for the C family of "
"programming languages, aiming to be the best in class implementation of "
"these languages. Clang builds on the LLVM optimizer and code generator, "
"allowing it to provide high-quality optimization and code generation support "
"for many targets. For more general information, please see the `Clang Web "
"Site <http://clang.llvm.org>`_ or the `LLVM Web Site <http://llvm.org>`_."
msgstr ""

#: ../../../UsersManual.rst:19
msgid ""
"This document describes important notes about using Clang as a compiler for "
"an end-user, documenting the supported features, command line options, etc. "
"If you are interested in using Clang to build a tool that processes code, "
"please see :doc:`InternalsManual`. If you are interested in the `Clang "
"Static Analyzer <http://clang-analyzer.llvm.org>`_, please see its web page."
msgstr ""

#: ../../../UsersManual.rst:26
msgid ""
"Clang is designed to support the C family of programming languages, which "
"includes :ref:`C <c>`, :ref:`Objective-C <objc>`, :ref:`C++ <cxx>`, and :ref:"
"`Objective-C++ <objcxx>` as well as many dialects of those. For language-"
"specific information, please see the corresponding language specific section:"
msgstr ""

#: ../../../UsersManual.rst:32
msgid ""
":ref:`C Language <c>`: K&R C, ANSI C89, ISO C90, ISO C94 (C89+AMD1), ISO C99 "
"(+TC1, TC2, TC3)."
msgstr ""

#: ../../../UsersManual.rst:34
msgid ""
":ref:`Objective-C Language <objc>`: ObjC 1, ObjC 2, ObjC 2.1, plus variants "
"depending on base language."
msgstr ""

#: ../../../UsersManual.rst:36
msgid ":ref:`C++ Language <cxx>`"
msgstr ""

#: ../../../UsersManual.rst:37
msgid ":ref:`Objective C++ Language <objcxx>`"
msgstr ""

#: ../../../UsersManual.rst:39
msgid ""
"In addition to these base languages and their dialects, Clang supports a "
"broad variety of language extensions, which are documented in the "
"corresponding language section. These extensions are provided to be "
"compatible with the GCC, Microsoft, and other popular compilers as well as "
"to improve functionality through Clang-specific features. The Clang driver "
"and language features are intentionally designed to be as compatible with "
"the GNU GCC compiler as reasonably possible, easing migration from GCC to "
"Clang. In most cases, code \"just works\". Clang also provides an "
"alternative driver, :ref:`clang-cl`, that is designed to be compatible with "
"the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:50
msgid ""
"In addition to language specific features, Clang has a variety of features "
"that depend on what CPU architecture or operating system is being compiled "
"for. Please see the :ref:`Target-Specific Features and Limitations "
"<target_features>` section for more details."
msgstr ""

#: ../../../UsersManual.rst:55
msgid ""
"The rest of the introduction introduces some basic :ref:`compiler "
"terminology <terminology>` that is used throughout this manual and contains "
"a basic :ref:`introduction to using Clang <basicusage>` as a command line "
"compiler."
msgstr ""

#: ../../../UsersManual.rst:63
msgid "Terminology"
msgstr ""

#: ../../../UsersManual.rst:65
msgid ""
"Front end, parser, backend, preprocessor, undefined behavior, diagnostic, "
"optimizer"
msgstr ""

#: ../../../UsersManual.rst:71
msgid "Basic Usage"
msgstr ""

#: ../../../UsersManual.rst:73
msgid "Intro to how to use a C compiler for newbies."
msgstr ""

#: ../../../UsersManual.rst:75
msgid ""
"compile + link compile then link debug info enabling optimizations picking a "
"language to use, defaults to C11 by default. Autosenses based on extension. "
"using a makefile"
msgstr ""

#: ../../../UsersManual.rst:80
msgid "Command Line Options"
msgstr ""

#: ../../../UsersManual.rst:82
msgid ""
"This section is generally an index into other sections. It does not go into "
"depth on the ones that are covered by other sections. However, the first "
"part introduces the language selection and other high level options like :"
"option:`-c`, :option:`-g`, etc."
msgstr ""

#: ../../../UsersManual.rst:88
msgid "Options to Control Error and Warning Messages"
msgstr ""

#: ../../../UsersManual.rst:92
msgid "Turn warnings into errors."
msgstr ""

#: ../../../UsersManual.rst:97
msgid "``-Werror=foo``"
msgstr ""

#: ../../../UsersManual.rst:99
msgid "Turn warning \"foo\" into an error."
msgstr ""

#: ../../../UsersManual.rst:103
msgid ""
"Turn warning \"foo\" into an warning even if :option:`-Werror` is specified."
msgstr ""

#: ../../../UsersManual.rst:107
msgid "Enable warning \"foo\"."
msgstr ""

#: ../../../UsersManual.rst:111
msgid "Disable warning \"foo\"."
msgstr ""

#: ../../../UsersManual.rst:115
msgid "Disable all diagnostics."
msgstr ""

#: ../../../UsersManual.rst:119
msgid ":ref:`Enable all diagnostics. <diagnostics_enable_everything>`"
msgstr ""

#: ../../../UsersManual.rst:123
msgid "Warn on language extensions."
msgstr ""

#: ../../../UsersManual.rst:127
msgid "Error on language extensions."
msgstr ""

#: ../../../UsersManual.rst:131
msgid "Enable warnings from system headers."
msgstr ""

#: ../../../UsersManual.rst:135
msgid ""
"Stop emitting diagnostics after 123 errors have been produced. The default "
"is 20, and the error limit can be disabled with `-ferror-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:140
msgid ""
"Only emit up to 123 template instantiation notes within the template "
"instantiation backtrace for a single warning or error. The default is 10, "
"and the limit can be disabled with `-ftemplate-backtrace-limit=0`."
msgstr ""

#: ../../../UsersManual.rst:147
msgid "Formatting of Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:149
msgid ""
"Clang aims to produce beautiful diagnostics by default, particularly for new "
"users that first come to Clang. However, different people have different "
"preferences, and sometimes Clang is driven not by a human, but by a program "
"that wants consistent and easily parsable output. For these cases, Clang "
"provides a wide range of options to control the exact output format of the "
"diagnostics that it generates."
msgstr ""

#: ../../../UsersManual.rst:176
msgid "**-f[no-]show-column**"
msgstr ""

#: ../../../UsersManual.rst:159
msgid "Print column number in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:161
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"column number of a diagnostic. For example, when this is enabled, Clang will "
"print something like:"
msgstr ""

#: ../../../UsersManual.rst:172
msgid ""
"When this is disabled, Clang will print \"test.c:28: warning...\" with no "
"column number."
msgstr ""

#: ../../../UsersManual.rst:175 ../../../UsersManual.rst:354
#: ../../../UsersManual.rst:378
msgid ""
"The printed column numbers count bytes from the beginning of the line; take "
"care if your source contains multibyte characters."
msgstr ""

#: ../../../UsersManual.rst:195
msgid "**-f[no-]show-source-location**"
msgstr ""

#: ../../../UsersManual.rst:181
msgid "Print source file/line/column information in diagnostic."
msgstr ""

#: ../../../UsersManual.rst:183
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"filename, line number and column number of a diagnostic. For example, when "
"this is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:194
msgid "When this is disabled, Clang will not print the \"test.c:28:8: \" part."
msgstr ""

#: ../../../UsersManual.rst:211
msgid "**-f[no-]caret-diagnostics**"
msgstr ""

#: ../../../UsersManual.rst:200
msgid ""
"Print source line and ranges from source code in diagnostic. This option, "
"which defaults to on, controls whether or not Clang prints the source line, "
"source ranges, and caret when emitting a diagnostic. For example, when this "
"is enabled, Clang will print something like:"
msgstr ""

#: ../../../UsersManual.rst:238
msgid "**-f[no-]color-diagnostics**"
msgstr ""

#: ../../../UsersManual.rst:214
msgid ""
"This option, which defaults to on when a color-capable terminal is detected, "
"controls whether or not Clang prints diagnostics in color."
msgstr ""

#: ../../../UsersManual.rst:217
msgid ""
"When this option is enabled, Clang will use colors to highlight specific "
"parts of the diagnostic, e.g.,"
msgstr ""

#: ../../../UsersManual.rst:222
msgid ""
"<pre>\n"
"  <b><span style=\"color:black\">test.c:28:8: <span style=\"color:"
"magenta\">warning</span>: extra tokens at end of #endif directive [-Wextra-"
"tokens]</span></b>\n"
"  #endif bad\n"
"         <span style=\"color:green\">^</span>\n"
"         <span style=\"color:green\">//</span>\n"
"</pre>"
msgstr ""

#: ../../../UsersManual.rst:231
msgid "When this is disabled, Clang will just print:"
msgstr ""

#: ../../../UsersManual.rst:243
msgid "**-fansi-escape-codes**"
msgstr ""

#: ../../../UsersManual.rst:241
msgid ""
"Controls whether ANSI escape codes are used instead of the Windows Console "
"API to output colored diagnostics. This option is only used on Windows and "
"defaults to off."
msgstr ""

#: ../../../UsersManual.rst:247
msgid ""
"Changes diagnostic output format to better match IDEs and command line tools."
msgstr ""

#: ../../../UsersManual.rst:249
msgid ""
"This option controls the output format of the filename, line number, and "
"column printed in diagnostic messages. The options, and their affect on "
"formatting a simple conversion diagnostic, follow:"
msgstr ""

#: ../../../UsersManual.rst:256
msgid "**clang** (default)"
msgstr ""

#: ../../../UsersManual.rst:261
msgid "**msvc**"
msgstr ""

#: ../../../UsersManual.rst:265
msgid "**vi**"
msgstr ""

#: ../../../UsersManual.rst:289
msgid "**-f[no-]diagnostics-show-option**"
msgstr ""

#: ../../../UsersManual.rst:271
msgid "Enable ``[-Woption]`` information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:273
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"associated :ref:`warning group <cl_diag_warning_groups>` option name when "
"outputting a warning diagnostic. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:285
msgid ""
"Passing **-fno-diagnostics-show-option** will prevent Clang from printing "
"the [:ref:`-Wextra-tokens <opt_Wextra-tokens>`] information in the "
"diagnostic. This information tells you the flag needed to enable or disable "
"the diagnostic, either from the command line or through :ref:`#pragma GCC "
"diagnostic <pragma_GCC_diagnostic>`."
msgstr ""

#: ../../../UsersManual.rst:295
msgid "Enable printing category information in diagnostic line."
msgstr ""

#: ../../../UsersManual.rst:297
msgid ""
"This option, which defaults to \"none\", controls whether or not Clang "
"prints the category associated with a diagnostic when emitting it. Each "
"diagnostic may or many not have an associated category, if it has one, it is "
"listed in the diagnostic categorization field of the diagnostic line (in the "
"[]'s)."
msgstr ""

#: ../../../UsersManual.rst:303
msgid ""
"For example, a format string warning will produce these three renditions "
"based on the setting of this option:"
msgstr ""

#: ../../../UsersManual.rst:312
msgid ""
"This category can be used by clients that want to group diagnostics by "
"category, so it should be a high level category. We want dozens of these, "
"not hundreds or thousands of them."
msgstr ""

#: ../../../UsersManual.rst:335
msgid "**-f[no-]diagnostics-fixit-info**"
msgstr ""

#: ../../../UsersManual.rst:319
msgid "Enable \"FixIt\" information in the diagnostics output."
msgstr ""

#: ../../../UsersManual.rst:321
msgid ""
"This option, which defaults to on, controls whether or not Clang prints the "
"information on how to fix a specific diagnostic underneath it when it knows. "
"For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:332
msgid ""
"Passing **-fno-diagnostics-fixit-info** will prevent Clang from printing the "
"\"//\" line at the end of the message. This information is useful for users "
"who may not understand what is wrong, but can be confusing for machine "
"parsing."
msgstr ""

#: ../../../UsersManual.rst:355
msgid "**-fdiagnostics-print-source-range-info**"
msgstr ""

#: ../../../UsersManual.rst:340
msgid ""
"Print machine parsable information about source ranges. This option makes "
"Clang print information about source ranges in a machine parsable format "
"after the file/line/column number information. The information is a simple "
"sequence of brace enclosed ranges, where each range lists the start and end "
"line/column locations. For example, in this output:"
msgstr ""

#: ../../../UsersManual.rst:352
msgid "The {}'s are generated by -fdiagnostics-print-source-range-info."
msgstr ""

#: ../../../UsersManual.rst:359
msgid "Print Fix-Its in a machine parseable form."
msgstr ""

#: ../../../UsersManual.rst:361
msgid ""
"This option makes Clang print available Fix-Its in a machine parseable "
"format at the end of diagnostics. The following example illustrates the "
"format:"
msgstr ""

#: ../../../UsersManual.rst:369
msgid ""
"The range printed is a half-open range, so in this example the characters at "
"column 25 up to but not including column 29 on line 7 in t.cpp should be "
"replaced with the string \"Gamma\". Either the range or the replacement "
"string may be empty (representing strict insertions and strict erasures, "
"respectively). Both the file name and the insertion string escape backslash "
"(as \"\\\\\\\\\"), tabs (as \"\\\\t\"), newlines (as \"\\\\n\"), double "
"quotes(as \"\\\\\"\") and non-printable characters (as octal \"\\\\xxx\")."
msgstr ""

#: ../../../UsersManual.rst:383
msgid "Turns off elision in template type printing."
msgstr ""

#: ../../../UsersManual.rst:385
msgid ""
"The default for template type printing is to elide as many template "
"arguments as possible, removing those which are the same in both template "
"types, leaving only the differences. Adding this flag will print all the "
"template arguments. If supported by the terminal, highlighting will still "
"appear on differing arguments."
msgstr ""

#: ../../../UsersManual.rst:391 ../../../UsersManual.rst:412
msgid "Default:"
msgstr ""

#: ../../../UsersManual.rst:397
msgid "-fno-elide-type:"
msgstr ""

#: ../../../UsersManual.rst:405
msgid "Template type diffing prints a text tree."
msgstr ""

#: ../../../UsersManual.rst:407
msgid ""
"For diffing large templated types, this option will cause Clang to display "
"the templates as an indented text tree, one argument per line, with "
"differences marked inline. This is compatible with -fno-elide-type."
msgstr ""

#: ../../../UsersManual.rst:418
msgid "With :option:`-fdiagnostics-show-template-tree`:"
msgstr ""

#: ../../../UsersManual.rst:433
msgid "Individual Warning Groups"
msgstr ""

#: ../../../UsersManual.rst:435
msgid "TODO: Generate this from tblgen. Define one anchor per warning group."
msgstr ""

#: ../../../UsersManual.rst:441
msgid "Warn about excess tokens at the end of a preprocessor directive."
msgstr ""

#: ../../../UsersManual.rst:443
msgid ""
"This option, which defaults to on, enables warnings about extra tokens at "
"the end of preprocessor directives. For example:"
msgstr ""

#: ../../../UsersManual.rst:452
msgid ""
"These extra tokens are not strictly conforming, and are usually best handled "
"by commenting them out."
msgstr ""

#: ../../../UsersManual.rst:457
msgid ""
"Warn about unqualified uses of a member template whose name resolves to "
"another template at the location of the use."
msgstr ""

#: ../../../UsersManual.rst:460
msgid ""
"This option, which defaults to on, enables a warning in the following code:"
msgstr ""

#: ../../../UsersManual.rst:475
msgid ""
"C++ [basic.lookup.classref] requires this to be an error, but, because it's "
"hard to work around, Clang downgrades it to a warning as an extension."
msgstr ""

#: ../../../UsersManual.rst:481
msgid ""
"Warn about an unusable copy constructor when binding a reference to a "
"temporary."
msgstr ""

#: ../../../UsersManual.rst:484
msgid ""
"This option enables warnings about binding a reference to a temporary when "
"the temporary doesn't have a usable copy constructor. For example:"
msgstr ""

#: ../../../UsersManual.rst:511
msgid ""
"Note that if ``NonCopyable2::NonCopyable2()`` has a default argument whose "
"instantiation produces a compile error, that error will still be a hard "
"error in C++98 mode even if this warning is turned off."
msgstr ""

#: ../../../UsersManual.rst:516
msgid "Options to Control Clang Crash Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:518
msgid ""
"As unbelievable as it may sound, Clang does crash from time to time. "
"Generally, this only occurs to those living on the `bleeding edge <http://"
"llvm.org/releases/download.html#svn>`_. Clang goes to great lengths to "
"assist you in filing a bug report. Specifically, Clang generates "
"preprocessed source file(s) and associated run script(s) upon a crash. These "
"files should be attached to a bug report to ease reproducibility of the "
"failure. Below are the command line options to control the crash diagnostics."
msgstr ""

#: ../../../UsersManual.rst:529
msgid ""
"Disable auto-generation of preprocessed source files during a clang crash."
msgstr ""

#: ../../../UsersManual.rst:531
msgid ""
"The -fno-crash-diagnostics flag can be helpful for speeding the process of "
"generating a delta reduced test case."
msgstr ""

#: ../../../UsersManual.rst:535
msgid "Options to Emit Optimization Reports"
msgstr ""

#: ../../../UsersManual.rst:537
msgid ""
"Optimization reports trace, at a high-level, all the major decisions done by "
"compiler transformations. For instance, when the inliner decides to inline "
"function ``foo()`` into ``bar()``, or the loop unroller decides to unroll a "
"loop N times, or the vectorizer decides to vectorize a loop body."
msgstr ""

#: ../../../UsersManual.rst:543
msgid ""
"Clang offers a family of flags which the optimizers can use to emit a "
"diagnostic in three cases:"
msgstr ""

#: ../../../UsersManual.rst:546
msgid "When the pass makes a transformation (`-Rpass`)."
msgstr ""

#: ../../../UsersManual.rst:548
msgid "When the pass fails to make a transformation (`-Rpass-missed`)."
msgstr ""

#: ../../../UsersManual.rst:550
msgid ""
"When the pass determines whether or not to make a transformation (`-Rpass-"
"analysis`)."
msgstr ""

#: ../../../UsersManual.rst:553
msgid ""
"NOTE: Although the discussion below focuses on `-Rpass`, the exact same "
"options apply to `-Rpass-missed` and `-Rpass-analysis`."
msgstr ""

#: ../../../UsersManual.rst:556
msgid ""
"Since there are dozens of passes inside the compiler, each of these flags "
"take a regular expression that identifies the name of the pass which should "
"emit the associated diagnostic. For example, to get a report from the "
"inliner, compile the code with:"
msgstr ""

#: ../../../UsersManual.rst:568
msgid ""
"Note that remarks from the inliner are identified with `[-Rpass=inline]`. To "
"request a report from every optimization pass, you should use `-Rpass=.*` "
"(in fact, you can use any valid POSIX regular expression). However, do not "
"expect a report from every transformation made by the compiler. Optimization "
"remarks do not really make sense outside of the major transformations (e.g., "
"inlining, vectorization, loop optimizations) and not every optimization pass "
"supports this feature."
msgstr ""

#: ../../../UsersManual.rst:578
msgid "Current limitations"
msgstr ""

#: ../../../UsersManual.rst:580
msgid ""
"Optimization remarks that refer to function names will display the mangled "
"name of the function. Since these remarks are emitted by the back end of the "
"compiler, it does not know anything about the input language, nor its "
"mangling rules."
msgstr ""

#: ../../../UsersManual.rst:585
msgid ""
"Some source locations are not displayed correctly. The front end has a more "
"detailed source location tracking than the locations included in the debug "
"info (e.g., the front end can locate code inside macro expansions). However, "
"the locations used by `-Rpass` are translated from debug annotations. That "
"translation can be lossy, which results in some remarks having no location "
"information."
msgstr ""

#: ../../../UsersManual.rst:593
msgid "Other Options"
msgstr ""

#: ../../../UsersManual.rst:594
msgid "Clang options that that don't fit neatly into other categories."
msgstr ""

#: ../../../UsersManual.rst:598
msgid ""
"When emitting a dependency file, use formatting conventions appropriate for "
"NMake or Jom. Ignored unless another option causes Clang to emit a "
"dependency file."
msgstr ""

#: ../../../UsersManual.rst:602
msgid ""
"When Clang emits a dependency file (e.g., you supplied the -M option) most "
"filenames can be written to the file without any special formatting. "
"Different Make tools will treat different sets of characters as \"special\" "
"and use different conventions for telling the Make tool that the character "
"is actually part of the filename. Normally Clang uses backslash to "
"\"escape\" a special character, which is the convention used by GNU Make. "
"The -MV option tells Clang to put double-quotes around the entire filename, "
"which is the convention used by NMake and Jom."
msgstr ""

#: ../../../UsersManual.rst:613
msgid "Language and Target-Independent Features"
msgstr ""

#: ../../../UsersManual.rst:616
msgid "Controlling Errors and Warnings"
msgstr ""

#: ../../../UsersManual.rst:618
msgid ""
"Clang provides a number of ways to control which code constructs cause it to "
"emit errors and warning messages, and how they are displayed to the console."
msgstr ""

#: ../../../UsersManual.rst:623
msgid "Controlling How Clang Displays Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:625
msgid ""
"When Clang emits a diagnostic, it includes rich information in the output, "
"and gives you fine-grain control over which information is printed. Clang "
"has the ability to print this information, and these are the options that "
"control it:"
msgstr ""

#: ../../../UsersManual.rst:630
msgid ""
"A file/line/column indicator that shows exactly where the diagnostic occurs "
"in your code [:ref:`-fshow-column <opt_fshow-column>`, :ref:`-fshow-source-"
"location <opt_fshow-source-location>`]."
msgstr ""

#: ../../../UsersManual.rst:633
msgid ""
"A categorization of the diagnostic as a note, warning, error, or fatal error."
msgstr ""

#: ../../../UsersManual.rst:635
msgid "A text string that describes what the problem is."
msgstr ""

#: ../../../UsersManual.rst:636
msgid ""
"An option that indicates how to control the diagnostic (for diagnostics that "
"support it) [:ref:`-fdiagnostics-show-option <opt_fdiagnostics-show-"
"option>`]."
msgstr ""

#: ../../../UsersManual.rst:639
msgid ""
"A :ref:`high-level category <diagnostics_categories>` for the diagnostic for "
"clients that want to group diagnostics by class (for diagnostics that "
"support it) [:ref:`-fdiagnostics-show-category <opt_fdiagnostics-show-"
"category>`]."
msgstr ""

#: ../../../UsersManual.rst:643
msgid ""
"The line of source code that the issue occurs on, along with a caret and "
"ranges that indicate the important locations [:ref:`-fcaret-diagnostics "
"<opt_fcaret-diagnostics>`]."
msgstr ""

#: ../../../UsersManual.rst:646
msgid ""
"\"FixIt\" information, which is a concise explanation of how to fix the "
"problem (when Clang is certain it knows) [:ref:`-fdiagnostics-fixit-info "
"<opt_fdiagnostics-fixit-info>`]."
msgstr ""

#: ../../../UsersManual.rst:649
msgid ""
"A machine-parsable representation of the ranges involved (off by default) [:"
"ref:`-fdiagnostics-print-source-range-info <opt_fdiagnostics-print-source-"
"range-info>`]."
msgstr ""

#: ../../../UsersManual.rst:653
msgid ""
"For more information please see :ref:`Formatting of Diagnostics "
"<cl_diag_formatting>`."
msgstr ""

#: ../../../UsersManual.rst:657
msgid "Diagnostic Mappings"
msgstr ""

#: ../../../UsersManual.rst:659
msgid "All diagnostics are mapped into one of these 6 classes:"
msgstr ""

#: ../../../UsersManual.rst:661
msgid "Ignored"
msgstr ""

#: ../../../UsersManual.rst:662
msgid "Note"
msgstr ""

#: ../../../UsersManual.rst:663
msgid "Remark"
msgstr ""

#: ../../../UsersManual.rst:664
msgid "Warning"
msgstr ""

#: ../../../UsersManual.rst:665
msgid "Error"
msgstr ""

#: ../../../UsersManual.rst:666
msgid "Fatal"
msgstr ""

#: ../../../UsersManual.rst:671
msgid "Diagnostic Categories"
msgstr ""

#: ../../../UsersManual.rst:673
msgid ""
"Though not shown by default, diagnostics may each be associated with a high-"
"level category. This category is intended to make it possible to triage "
"builds that produce a large number of errors or warnings in a grouped way."
msgstr ""

#: ../../../UsersManual.rst:678
msgid ""
"Categories are not shown by default, but they can be turned on with the :ref:"
"`-fdiagnostics-show-category <opt_fdiagnostics-show-category>` option. When "
"set to \"``name``\", the category is printed textually in the diagnostic "
"output. When it is set to \"``id``\", a category number is printed. The "
"mapping of category names to category id's can be obtained by running "
"'``clang   --print-diagnostic-categories``'."
msgstr ""

#: ../../../UsersManual.rst:686
msgid "Controlling Diagnostics via Command Line Flags"
msgstr ""

#: ../../../UsersManual.rst:688
msgid "TODO: -W flags, -pedantic, etc"
msgstr ""

#: ../../../UsersManual.rst:693
msgid "Controlling Diagnostics via Pragmas"
msgstr ""

#: ../../../UsersManual.rst:695
msgid ""
"Clang can also control what diagnostics are enabled through the use of "
"pragmas in the source code. This is useful for turning off specific warnings "
"in a section of source code. Clang supports GCC's pragma for compatibility "
"with existing source code, as well as several extensions."
msgstr ""

#: ../../../UsersManual.rst:700
msgid ""
"The pragma may control any warning that can be used from the command line. "
"Warnings may be set to ignored, warning, error, or fatal. The following "
"example code will tell Clang or GCC to ignore the -Wall warnings:"
msgstr ""

#: ../../../UsersManual.rst:709
msgid ""
"In addition to all of the functionality provided by GCC's pragma, Clang also "
"allows you to push and pop the current warning state. This is particularly "
"useful when writing a header file that will be compiled by other people, "
"because you don't know what warning flags they build with."
msgstr ""

#: ../../../UsersManual.rst:714
msgid ""
"In the below example :option:`-Wextra-tokens` is ignored for only a single "
"line of code, after which the diagnostics return to whatever state had "
"previously existed."
msgstr ""

#: ../../../UsersManual.rst:730
msgid ""
"The push and pop pragmas will save and restore the full diagnostic state of "
"the compiler, regardless of how it was set. That means that it is possible "
"to use push and pop around GCC compatible diagnostics and Clang will push "
"and pop them appropriately, while GCC will ignore the pushes and pops as "
"unknown pragmas. It should be noted that while Clang supports the GCC "
"pragma, Clang and GCC do not support the exact same set of warnings, so even "
"when using GCC compatible #pragmas there is no guarantee that they will have "
"identical behaviour on both compilers."
msgstr ""

#: ../../../UsersManual.rst:739
msgid ""
"In addition to controlling warnings and errors generated by the compiler, it "
"is possible to generate custom warning and error messages through the "
"following pragmas:"
msgstr ""

#: ../../../UsersManual.rst:752
msgid ""
"These pragmas operate similarly to the ``#warning`` and ``#error`` "
"preprocessor directives, except that they may also be embedded into "
"preprocessor macros via the C99 ``_Pragma`` operator, for example:"
msgstr ""

#: ../../../UsersManual.rst:765
msgid "Controlling Diagnostics in System Headers"
msgstr ""

#: ../../../UsersManual.rst:767
msgid ""
"Warnings are suppressed when they occur in system headers. By default, an "
"included file is treated as a system header if it is found in an include "
"path specified by ``-isystem``, but this can be overridden in several ways."
msgstr ""

#: ../../../UsersManual.rst:772
msgid ""
"The ``system_header`` pragma can be used to mark the current file as being a "
"system header. No warnings will be produced from the location of the pragma "
"onwards within the same file."
msgstr ""

#: ../../../UsersManual.rst:786
msgid ""
"The `--system-header-prefix=` and `--no-system-header-prefix=` command-line "
"arguments can be used to override whether subsets of an include path are "
"treated as system headers. When the name in a ``#include`` directive is "
"found within a header search path and starts with a system prefix, the "
"header is treated as a system header. The last prefix on the command-line "
"which matches the specified header name takes precedence. For instance:"
msgstr ""

#: ../../../UsersManual.rst:799
msgid ""
"Here, ``#include \"x/a.h\"`` is treated as including a system header, even "
"if the header is found in ``foo``, and ``#include \"x/y/b.h\"`` is treated "
"as not including a system header, even if the header is found in ``bar``."
msgstr ""

#: ../../../UsersManual.rst:804
msgid ""
"A ``#include`` directive which finds a file relative to the current "
"directory is treated as including a system header if the including file is "
"treated as a system header."
msgstr ""

#: ../../../UsersManual.rst:811
msgid "Enabling All Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:813
msgid ""
"In addition to the traditional ``-W`` flags, one can enable **all** "
"diagnostics by passing :option:`-Weverything`. This works as expected with :"
"option:`-Werror`, and also includes the warnings from :option:`-pedantic`."
msgstr ""

#: ../../../UsersManual.rst:818
msgid ""
"Note that when combined with :option:`-w` (which disables all warnings), "
"that flag wins."
msgstr ""

#: ../../../UsersManual.rst:822
msgid "Controlling Static Analyzer Diagnostics"
msgstr ""

#: ../../../UsersManual.rst:824
msgid ""
"While not strictly part of the compiler, the diagnostics from Clang's "
"`static analyzer <http://clang-analyzer.llvm.org>`_ can also be influenced "
"by the user via changes to the source code. See the available `annotations "
"<http://clang-analyzer.llvm.org/annotations.html>`_ and the analyzer's `FAQ "
"page <http://clang-analyzer.llvm.org/faq.html#exclude_code>`_ for more "
"information."
msgstr ""

#: ../../../UsersManual.rst:835
msgid "Precompiled Headers"
msgstr ""

#: ../../../UsersManual.rst:837
msgid ""
"`Precompiled headers <http://en.wikipedia.org/wiki/Precompiled_header>`__ "
"are a general approach employed by many compilers to reduce compilation "
"time. The underlying motivation of the approach is that it is common for the "
"same (and often large) header files to be included by multiple source files. "
"Consequently, compile times can often be greatly improved by caching some of "
"the (redundant) work done by a compiler to process headers. Precompiled "
"header files, which represent one of many ways to implement this "
"optimization, are literally files that represent an on-disk cache that "
"contains the vital information necessary to reduce some of the work needed "
"to process a corresponding header file. While details of precompiled headers "
"vary between compilers, precompiled headers have been shown to be highly "
"effective at speeding up program compilation on systems with very large "
"system headers (e.g., Mac OS X)."
msgstr ""

#: ../../../UsersManual.rst:852
msgid "Generating a PCH File"
msgstr ""

#: ../../../UsersManual.rst:854
msgid ""
"To generate a PCH file using Clang, one invokes Clang with the `-x "
"<language>-header` option. This mirrors the interface in GCC for generating "
"PCH files:"
msgstr ""

#: ../../../UsersManual.rst:864
msgid "Using a PCH File"
msgstr ""

#: ../../../UsersManual.rst:866
msgid ""
"A PCH file can then be used as a prefix header when a :option:`-include` "
"option is passed to ``clang``:"
msgstr ""

#: ../../../UsersManual.rst:873
msgid ""
"The ``clang`` driver will first check if a PCH file for ``test.h`` is "
"available; if so, the contents of ``test.h`` (and the files it includes) "
"will be processed from the PCH file. Otherwise, Clang falls back to directly "
"processing the content of ``test.h``. This mirrors the behavior of GCC."
msgstr ""

#: ../../../UsersManual.rst:881
msgid ""
"Clang does *not* automatically use PCH files for headers that are directly "
"included within a source file. For example:"
msgstr ""

#: ../../../UsersManual.rst:891
msgid ""
"In this example, ``clang`` will not automatically use the PCH file for "
"``test.h`` since ``test.h`` was included directly in the source file and not "
"specified on the command line using :option:`-include`."
msgstr ""

#: ../../../UsersManual.rst:896
msgid "Relocatable PCH Files"
msgstr ""

#: ../../../UsersManual.rst:898
msgid ""
"It is sometimes necessary to build a precompiled header from headers that "
"are not yet in their final, installed locations. For example, one might "
"build a precompiled header within the build tree that is then meant to be "
"installed alongside the headers. Clang permits the creation of "
"\"relocatable\" precompiled headers, which are built with a given path (into "
"the build directory) and can later be used from an installed location."
msgstr ""

#: ../../../UsersManual.rst:906
msgid ""
"To build a relocatable precompiled header, place your headers into a "
"subdirectory whose structure mimics the installed location. For example, if "
"you want to build a precompiled header for the header ``mylib.h`` that will "
"be installed into ``/usr/include``, create a subdirectory ``build/usr/"
"include`` and place the header ``mylib.h`` into that subdirectory. If "
"``mylib.h`` depends on other headers, then they can be stored within ``build/"
"usr/include`` in a way that mimics the installed location."
msgstr ""

#: ../../../UsersManual.rst:915
msgid ""
"Building a relocatable precompiled header requires two additional arguments. "
"First, pass the ``--relocatable-pch`` flag to indicate that the resulting "
"PCH file should be relocatable. Second, pass `-isysroot /path/to/build`, "
"which makes all includes for your library relative to the build directory. "
"For example:"
msgstr ""

#: ../../../UsersManual.rst:925
msgid ""
"When loading the relocatable PCH file, the various headers used in the PCH "
"file are found from the system header root. For example, ``mylib.h`` can be "
"found in ``/usr/include/mylib.h``. If the headers are installed in some "
"other system root, the `-isysroot` option can be used provide a different "
"system root from which the headers will be based. For example, `-isysroot /"
"Developer/SDKs/MacOSX10.4u.sdk` will look for ``mylib.h`` in ``/Developer/"
"SDKs/MacOSX10.4u.sdk/usr/include/mylib.h``."
msgstr ""

#: ../../../UsersManual.rst:933
msgid ""
"Relocatable precompiled headers are intended to be used in a limited number "
"of cases where the compilation environment is tightly controlled and the "
"precompiled header cannot be generated after headers have been installed."
msgstr ""

#: ../../../UsersManual.rst:941
msgid "Controlling Code Generation"
msgstr ""

#: ../../../UsersManual.rst:943
msgid ""
"Clang provides a number of ways to control code generation. The options are "
"listed below."
msgstr ""

#: ../../../UsersManual.rst:990
msgid "**-f[no-]sanitize=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:947
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious behavior."
msgstr ""

#: ../../../UsersManual.rst:950
msgid ""
"This option controls whether Clang adds runtime checks for various forms of "
"undefined or suspicious behavior, and is disabled by default. If a check "
"fails, a diagnostic message is produced at runtime explaining the problem. "
"The main checks are:"
msgstr ""

#: ../../../UsersManual.rst:957
msgid ""
"``-fsanitize=address``: :doc:`AddressSanitizer`, a memory error detector."
msgstr ""

#: ../../../UsersManual.rst:962
msgid "``-fsanitize=thread``: :doc:`ThreadSanitizer`, a data race detector."
msgstr ""

#: ../../../UsersManual.rst:965
msgid ""
"``-fsanitize=memory``: :doc:`MemorySanitizer`, a detector of uninitialized "
"reads. Requires instrumentation of all program code."
msgstr ""

#: ../../../UsersManual.rst:970
msgid ""
"``-fsanitize=undefined``: :doc:`UndefinedBehaviorSanitizer`, a fast and "
"compatible undefined behavior checker."
msgstr ""

#: ../../../UsersManual.rst:973
msgid ""
"``-fsanitize=dataflow``: :doc:`DataFlowSanitizer`, a general data flow "
"analysis."
msgstr ""

#: ../../../UsersManual.rst:975
msgid ""
"``-fsanitize=cfi``: :doc:`control flow integrity <ControlFlowIntegrity>` "
"checks. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:977
msgid ""
"``-fsanitize=safe-stack``: :doc:`safe stack <SafeStack>` protection against "
"stack-based memory corruption errors."
msgstr ""

#: ../../../UsersManual.rst:980
msgid ""
"There are more fine-grained checks available: see the :ref:`list <ubsan-"
"checks>` of specific kinds of undefined behavior that can be detected and "
"the :ref:`list <cfi-schemes>` of control flow integrity schemes."
msgstr ""

#: ../../../UsersManual.rst:985
msgid ""
"The ``-fsanitize=`` argument must also be provided when linking, in order to "
"link to the appropriate runtime library."
msgstr ""

#: ../../../UsersManual.rst:988
msgid ""
"It is not possible to combine more than one of the ``-fsanitize=address``, "
"``-fsanitize=thread``, and ``-fsanitize=memory`` checkers in the same "
"program."
msgstr ""

#: ../../../UsersManual.rst:992
msgid "**-f[no-]sanitize-recover=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:994
msgid "**-f[no-]sanitize-recover=all**"
msgstr ""

#: ../../../UsersManual.rst:996
msgid ""
"Controls which checks enabled by ``-fsanitize=`` flag are non-fatal. If the "
"check is fatal, program will halt after the first error of this kind is "
"detected and error report is printed."
msgstr ""

#: ../../../UsersManual.rst:1000
msgid ""
"By default, non-fatal checks are those enabled by :doc:"
"`UndefinedBehaviorSanitizer`, except for ``-fsanitize=return`` and ``-"
"fsanitize=unreachable``. Some sanitizers may not support recovery (or not "
"support it by default e.g. :doc:`AddressSanitizer`), and always crash the "
"program after the issue is detected."
msgstr ""

#: ../../../UsersManual.rst:1007
msgid ""
"Note that the ``-fsanitize-trap`` flag has precedence over this flag. This "
"means that if a check has been configured to trap elsewhere on the command "
"line, or if the check traps by default, this flag will not have any effect "
"unless that sanitizer's trapping behavior is disabled with ``-fno-sanitize-"
"trap``."
msgstr ""

#: ../../../UsersManual.rst:1013
msgid ""
"For example, if a command line contains the flags ``-fsanitize=undefined -"
"fsanitize-trap=undefined``, the flag ``-fsanitize-recover=alignment`` will "
"have no effect on its own; it will need to be accompanied by ``-fno-sanitize-"
"trap=alignment``."
msgstr ""

#: ../../../UsersManual.rst:1018
msgid "**-f[no-]sanitize-trap=check1,check2,...**"
msgstr ""

#: ../../../UsersManual.rst:1020
msgid ""
"Controls which checks enabled by the ``-fsanitize=`` flag trap. This option "
"is intended for use in cases where the sanitizer runtime cannot be used (for "
"instance, when building libc or a kernel module), or where the binary size "
"increase caused by the sanitizer runtime is a concern."
msgstr ""

#: ../../../UsersManual.rst:1025
msgid ""
"This flag is only compatible with :doc:`control flow integrity "
"<ControlFlowIntegrity>` schemes and :doc:`UndefinedBehaviorSanitizer` checks "
"other than ``vptr``. If this flag is supplied together with ``-"
"fsanitize=undefined``, the ``vptr`` sanitizer will be implicitly disabled."
msgstr ""

#: ../../../UsersManual.rst:1031
msgid "This flag is enabled by default for sanitizers in the ``cfi`` group."
msgstr ""

#: ../../../UsersManual.rst:1035
msgid ""
"Disable or modify sanitizer checks for objects (source files, functions, "
"variables, types) listed in the file. See :doc:`SanitizerSpecialCaseList` "
"for file format description."
msgstr ""

#: ../../../UsersManual.rst:1041
msgid ""
"Don't use blacklist file, if it was specified earlier in the command line."
msgstr ""

#: ../../../UsersManual.rst:1043
msgid "**-f[no-]sanitize-coverage=[type,features,...]**"
msgstr ""

#: ../../../UsersManual.rst:1045
msgid ""
"Enable simple code coverage in addition to certain sanitizers. See :doc:"
"`SanitizerCoverage` for more details."
msgstr ""

#: ../../../UsersManual.rst:1048
msgid "**-f[no-]sanitize-stats**"
msgstr ""

#: ../../../UsersManual.rst:1050
msgid ""
"Enable simple statistics gathering for the enabled sanitizers. See :doc:"
"`SanitizerStats` for more details."
msgstr ""

#: ../../../UsersManual.rst:1055
msgid "Deprecated alias for ``-fsanitize-trap=undefined``."
msgstr ""

#: ../../../UsersManual.rst:1059
msgid ""
"Enable cross-DSO control flow integrity checks. This flag modifies the "
"behavior of sanitizers in the ``cfi`` group to allow checking of cross-DSO "
"virtual and indirect calls."
msgstr ""

#: ../../../UsersManual.rst:1065
msgid ""
"Enable fast-math mode. This defines the ``__FAST_MATH__`` preprocessor "
"macro, and lets the compiler make aggressive, potentially-lossy assumptions "
"about floating-point math.  These include:"
msgstr ""

#: ../../../UsersManual.rst:1069
msgid ""
"Floating-point math obeys regular algebraic rules for real numbers (e.g. "
"``+`` and ``*`` are associative, ``x/y == x * (1/y)``, and ``(a + b) * c == "
"a * c + b * c``),"
msgstr ""

#: ../../../UsersManual.rst:1072
msgid ""
"operands to floating-point operations are not equal to ``NaN`` and ``Inf``, "
"and"
msgstr ""

#: ../../../UsersManual.rst:1074
msgid "``+0`` and ``-0`` are interchangeable."
msgstr ""

#: ../../../UsersManual.rst:1078
msgid ""
"Enable whole-program vtable optimizations, such as single-implementation "
"devirtualization and virtual constant propagation, for classes with :doc:"
"`hidden LTO visibility <LTOVisibility>`. Requires ``-flto``."
msgstr ""

#: ../../../UsersManual.rst:1084
msgid "Don't assume that the C++'s new operator is sane."
msgstr ""

#: ../../../UsersManual.rst:1086
msgid ""
"This option tells the compiler to do not assume that C++'s global new "
"operator will always return a pointer that does not alias any other pointer "
"when the function returns."
msgstr ""

#: ../../../UsersManual.rst:1092
msgid ""
"Instruct code generator to emit a function call to the specified function "
"name for ``__builtin_trap()``."
msgstr ""

#: ../../../UsersManual.rst:1095
msgid ""
"LLVM code generator translates ``__builtin_trap()`` to a trap instruction if "
"it is supported by the target ISA. Otherwise, the builtin is translated into "
"a call to ``abort``. If this option is set, then the code generator will "
"always lower the builtin to a call to the specified function regardless of "
"whether the target ISA has a trap instruction. This option is useful for "
"environments (e.g. deeply embedded) where a trap cannot be properly handled, "
"or when some custom behavior is desired."
msgstr ""

#: ../../../UsersManual.rst:1106
msgid "Select which TLS model to use."
msgstr ""

#: ../../../UsersManual.rst:1108
msgid ""
"Valid values are: ``global-dynamic``, ``local-dynamic``, ``initial-exec`` "
"and ``local-exec``. The default value is ``global-dynamic``. The compiler "
"may use a different model if the selected model is not supported by the "
"target, or if a more efficient model can be used. The TLS model can be "
"overridden per variable using the ``tls_model`` attribute."
msgstr ""

#: ../../../UsersManual.rst:1117
msgid "Select emulated TLS model, which overrides all -ftls-model choices."
msgstr ""

#: ../../../UsersManual.rst:1119
msgid ""
"In emulated TLS mode, all access to TLS variables are converted to calls to "
"__emutls_get_address in the runtime library."
msgstr ""

#: ../../../UsersManual.rst:1124
msgid ""
"Select the ARM modes (arm or thumb) that support hardware division "
"instructions."
msgstr ""

#: ../../../UsersManual.rst:1127
msgid ""
"Valid values are: ``arm``, ``thumb`` and ``arm,thumb``. This option is used "
"to indicate which mode (arm or thumb) supports hardware division "
"instructions. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:1134
msgid "Enable or disable CRC instructions."
msgstr ""

#: ../../../UsersManual.rst:1136
msgid ""
"This option is used to indicate whether CRC instructions are to be "
"generated. This only applies to the ARM architecture."
msgstr ""

#: ../../../UsersManual.rst:1139
msgid "CRC instructions are enabled by default on ARMv8."
msgstr ""

#: ../../../UsersManual.rst:1143
msgid "Generate code which only uses the general purpose registers."
msgstr ""

#: ../../../UsersManual.rst:1145
msgid ""
"This option restricts the generated code to use general registers only. This "
"only applies to the AArch64 architecture."
msgstr ""

#: ../../../UsersManual.rst:1150
msgid "Control the usage of compact branches for MIPSR6."
msgstr ""

#: ../../../UsersManual.rst:1152
msgid ""
"Valid values are: ``never``, ``optimal`` and ``always``. The default value "
"is ``optimal`` which generates compact branches when a delay slot cannot be "
"filled. ``never`` disables the usage of compact branches and ``always`` "
"generates compact branches whenever possible."
msgstr ""

#: ../../../UsersManual.rst:1188
msgid "**-f[no-]max-type-align=[number]**"
msgstr ""

#: ../../../UsersManual.rst:1159
msgid ""
"Instruct the code generator to not enforce a higher alignment than the given "
"number (of bytes) when accessing memory via an opaque pointer or reference. "
"This cap is ignored when directly accessing a variable or when the pointee "
"type has an explicit “aligned” attribute."
msgstr ""

#: ../../../UsersManual.rst:1164
msgid ""
"The value should usually be determined by the properties of the system "
"allocator. Some builtin types, especially vector types, have very high "
"natural alignments; when working with values of those types, Clang usually "
"wants to use instructions that take advantage of that alignment.  However, "
"many system allocators do not promise to return memory that is more than 8-"
"byte or 16-byte-aligned.  Use this option to limit the alignment that the "
"compiler can assume for an arbitrary pointer, which may point onto the heap."
msgstr ""

#: ../../../UsersManual.rst:1172
msgid ""
"This option does not affect the ABI alignment of types; the layout of "
"structs and unions and the value returned by the alignof operator remain the "
"same."
msgstr ""

#: ../../../UsersManual.rst:1175
msgid ""
"This option can be overridden on a case-by-case basis by putting an explicit "
"“aligned” alignment on a struct, union, or typedef.  For example:"
msgstr ""

#: ../../../UsersManual.rst:1191
msgid "Profile Guided Optimization"
msgstr ""

#: ../../../UsersManual.rst:1193
msgid ""
"Profile information enables better optimization. For example, knowing that a "
"branch is taken very frequently helps the compiler make better decisions "
"when ordering basic blocks. Knowing that a function ``foo`` is called more "
"frequently than another function ``bar`` helps the inliner."
msgstr ""

#: ../../../UsersManual.rst:1198
msgid ""
"Clang supports profile guided optimization with two different kinds of "
"profiling. A sampling profiler can generate a profile with very low runtime "
"overhead, or you can build an instrumented version of the code that collects "
"more detailed profile information. Both kinds of profiles can provide "
"execution counts for instructions in the code and information on branches "
"taken and function invocation."
msgstr ""

#: ../../../UsersManual.rst:1205
msgid ""
"Regardless of which kind of profiling you use, be careful to collect "
"profiles by running your code with inputs that are representative of the "
"typical behavior. Code that is not exercised in the profile will be "
"optimized as if it is unimportant, and the compiler may make poor "
"optimization choices for code that is disproportionately used while "
"profiling."
msgstr ""

#: ../../../UsersManual.rst:1212
msgid "Differences Between Sampling and Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1214
msgid ""
"Although both techniques are used for similar purposes, there are important "
"differences between the two:"
msgstr ""

#: ../../../UsersManual.rst:1217
msgid ""
"Profile data generated with one cannot be used by the other, and there is no "
"conversion tool that can convert one to the other. So, a profile generated "
"via ``-fprofile-instr-generate`` must be used with ``-fprofile-instr-use``. "
"Similarly, sampling profiles generated by external profilers must be "
"converted and used with ``-fprofile-sample-use``."
msgstr ""

#: ../../../UsersManual.rst:1223
msgid ""
"Instrumentation profile data can be used for code coverage analysis and "
"optimization."
msgstr ""

#: ../../../UsersManual.rst:1226
msgid ""
"Sampling profiles can only be used for optimization. They cannot be used for "
"code coverage analysis. Although it would be technically possible to use "
"sampling profiles for code coverage, sample-based profiles are too coarse-"
"grained for code coverage purposes; it would yield poor results."
msgstr ""

#: ../../../UsersManual.rst:1231
msgid ""
"Sampling profiles must be generated by an external tool. The profile "
"generated by that tool must then be converted into a format that can be read "
"by LLVM. The section on sampling profilers describes one of the supported "
"sampling profile formats."
msgstr ""

#: ../../../UsersManual.rst:1238
msgid "Using Sampling Profilers"
msgstr ""

#: ../../../UsersManual.rst:1240
msgid ""
"Sampling profilers are used to collect runtime information, such as hardware "
"counters, while your application executes. They are typically very efficient "
"and do not incur a large runtime overhead. The sample data collected by the "
"profiler can be used during compilation to determine what the most executed "
"areas of the code are."
msgstr ""

#: ../../../UsersManual.rst:1246
msgid ""
"Using the data from a sample profiler requires some changes in the way a "
"program is built. Before the compiler can use profiling information, the "
"code needs to execute under the profiler. The following is the usual build "
"cycle when using sample profilers for optimization:"
msgstr ""

#: ../../../UsersManual.rst:1251
msgid ""
"Build the code with source line table information. You can use all the usual "
"build flags that you always build your application with. The only "
"requirement is that you add ``-gline-tables-only`` or ``-g`` to the command "
"line. This is important for the profiler to be able to map instructions back "
"to source line locations."
msgstr ""

#: ../../../UsersManual.rst:1261
msgid ""
"Run the executable under a sampling profiler. The specific profiler you use "
"does not really matter, as long as its output can be converted into the "
"format that the LLVM optimizer understands. Currently, there exists a "
"conversion tool for the Linux Perf profiler (https://perf.wiki.kernel.org/), "
"so these examples assume that you are using Linux Perf to profile your code."
msgstr ""

#: ../../../UsersManual.rst:1272
msgid ""
"Note the use of the ``-b`` flag. This tells Perf to use the Last Branch "
"Record (LBR) to record call chains. While this is not strictly required, it "
"provides better call information, which improves the accuracy of the profile "
"data."
msgstr ""

#: ../../../UsersManual.rst:1277
msgid ""
"Convert the collected profile data to LLVM's sample profile format. This is "
"currently supported via the AutoFDO converter ``create_llvm_prof``. It is "
"available at http://github.com/google/autofdo. Once built and installed, you "
"can convert the ``perf.data`` file to LLVM using the command:"
msgstr ""

#: ../../../UsersManual.rst:1287
msgid ""
"This will read ``perf.data`` and the binary file ``./code`` and emit the "
"profile data in ``code.prof``. Note that if you ran ``perf`` without the ``-"
"b`` flag, you need to use ``--use_lbr=false`` when calling "
"``create_llvm_prof``."
msgstr ""

#: ../../../UsersManual.rst:1292
msgid ""
"Build the code again using the collected profile. This step feeds the "
"profile back to the optimizers. This should result in a binary that executes "
"faster than the original one. Note that you are not required to build the "
"code with the exact same arguments that you used in the first step. The only "
"requirement is that you build the code with ``-gline-tables-only`` and ``-"
"fprofile-sample-use``."
msgstr ""

#: ../../../UsersManual.rst:1305
msgid "Sample Profile Formats"
msgstr ""

#: ../../../UsersManual.rst:1307
msgid ""
"Since external profilers generate profile data in a variety of custom "
"formats, the data generated by the profiler must be converted into a format "
"that can be read by the backend. LLVM supports three different sample "
"profile formats:"
msgstr ""

#: ../../../UsersManual.rst:1311
msgid ""
"ASCII text. This is the easiest one to generate. The file is divided into "
"sections, which correspond to each of the functions with profile "
"information. The format is described below. It can also be generated from "
"the binary or gcov formats using the ``llvm-profdata`` tool."
msgstr ""

#: ../../../UsersManual.rst:1316
msgid ""
"Binary encoding. This uses a more efficient encoding that yields smaller "
"profile files. This is the format generated by the ``create_llvm_prof`` tool "
"in http://github.com/google/autofdo."
msgstr ""

#: ../../../UsersManual.rst:1320
msgid ""
"GCC encoding. This is based on the gcov format, which is accepted by GCC. It "
"is only interesting in environments where GCC and Clang co-exist. This "
"encoding is only generated by the ``create_gcov`` tool in http://github.com/"
"google/autofdo. It can be read by LLVM and ``llvm-profdata``, but it cannot "
"be generated by either."
msgstr ""

#: ../../../UsersManual.rst:1326
msgid ""
"If you are using Linux Perf to generate sampling profiles, you can use the "
"conversion tool ``create_llvm_prof`` described in the previous section. "
"Otherwise, you will need to write a conversion tool that converts your "
"profiler's native format into one of these three."
msgstr ""

#: ../../../UsersManual.rst:1333
msgid "Sample Profile Text Format"
msgstr ""

#: ../../../UsersManual.rst:1335
msgid ""
"This section describes the ASCII text format for sampling profiles. It is, "
"arguably, the easiest one to generate. If you are interested in generating "
"any of the other two, consult the ``ProfileData`` library in in LLVM's "
"source tree (specifically, ``include/llvm/ProfileData/SampleProfReader.h``)."
msgstr ""

#: ../../../UsersManual.rst:1353
msgid ""
"This is a nested tree in which the identation represents the nesting level "
"of the inline stack. There are no blank lines in the file. And the spacing "
"within a single line is fixed. Additional spaces will result in an error "
"while reading the file."
msgstr ""

#: ../../../UsersManual.rst:1358
msgid "Any line starting with the '#' character is completely ignored."
msgstr ""

#: ../../../UsersManual.rst:1360
msgid ""
"Inlined calls are represented with indentation. The Inline stack is a stack "
"of source locations in which the top of the stack represents the leaf "
"function, and the bottom of the stack represents the actual symbol to which "
"the instruction belongs."
msgstr ""

#: ../../../UsersManual.rst:1365
msgid ""
"Function names must be mangled in order for the profile loader to match them "
"in the current translation unit. The two numbers in the function header "
"specify how many total samples were accumulated in the function (first "
"number), and the total number of samples accumulated in the prologue of the "
"function (second number). This head sample count provides an indicator of "
"how frequently the function is invoked."
msgstr ""

#: ../../../UsersManual.rst:1372
msgid "There are two types of lines in the function body."
msgstr ""

#: ../../../UsersManual.rst:1374
msgid ""
"Sampled line represents the profile information of a source location. "
"``offsetN[.discriminator]: number_of_samples [fn5:num fn6:num ... ]``"
msgstr ""

#: ../../../UsersManual.rst:1377
msgid ""
"Callsite line represents the profile information of an inlined callsite. "
"``offsetA[.discriminator]: fnA:num_of_total_samples``"
msgstr ""

#: ../../../UsersManual.rst:1380
msgid ""
"Each sampled line may contain several items. Some are optional (marked "
"below):"
msgstr ""

#: ../../../UsersManual.rst:1383
msgid ""
"Source line offset. This number represents the line number in the function "
"where the sample was collected. The line number is always relative to the "
"line where symbol of the function is defined. So, if the function has its "
"header at line 280, the offset 13 is at line 293 in the file."
msgstr ""

#: ../../../UsersManual.rst:1389
msgid ""
"Note that this offset should never be a negative number. This could happen "
"in cases like macros. The debug machinery will register the line number at "
"the point of macro expansion. So, if the macro was expanded in a line before "
"the start of the function, the profile converter should emit a 0 as the "
"offset (this means that the optimizers will not be able to associate a "
"meaningful weight to the instructions in the macro)."
msgstr ""

#: ../../../UsersManual.rst:1397
msgid ""
"[OPTIONAL] Discriminator. This is used if the sampled program was compiled "
"with DWARF discriminator support (http://wiki.dwarfstd.org/index.php?"
"title=Path_Discriminators). DWARF discriminators are unsigned integer values "
"that allow the compiler to distinguish between multiple execution paths on "
"the same source line location."
msgstr ""

#: ../../../UsersManual.rst:1404
msgid ""
"For example, consider the line of code ``if (cond) foo(); else bar();``. If "
"the predicate ``cond`` is true 80% of the time, then the edge into function "
"``foo`` should be considered to be taken most of the time. But both calls to "
"``foo`` and ``bar`` are at the same source line, so a sample count at that "
"line is not sufficient. The compiler needs to know which part of that line "
"is taken more frequently."
msgstr ""

#: ../../../UsersManual.rst:1412
msgid ""
"This is what discriminators provide. In this case, the calls to ``foo`` and "
"``bar`` will be at the same line, but will have different discriminator "
"values. This allows the compiler to correctly set edge weights into ``foo`` "
"and ``bar``."
msgstr ""

#: ../../../UsersManual.rst:1417
msgid ""
"Number of samples. This is an integer quantity representing the number of "
"samples collected by the profiler at this source location."
msgstr ""

#: ../../../UsersManual.rst:1421
msgid ""
"[OPTIONAL] Potential call targets and samples. If present, this line "
"contains a call instruction. This models both direct and number of samples. "
"For example,"
msgstr ""

#: ../../../UsersManual.rst:1429
msgid ""
"The above means that at relative line offset 130 there is a call instruction "
"that calls one of ``foo()``, ``bar()`` and ``baz()``, with ``baz()`` being "
"the relatively more frequently called target."
msgstr ""

#: ../../../UsersManual.rst:1433
msgid ""
"As an example, consider a program with the call chain ``main -> foo -> "
"bar``. When built with optimizations enabled, the compiler may inline the "
"calls to ``bar`` and ``foo`` inside ``main``. The generated profile could "
"then be something like this:"
msgstr ""

#: ../../../UsersManual.rst:1446
msgid ""
"This profile indicates that there were a total of 35,504 samples collected "
"in main. All of those were at line 1 (the call to ``foo``). Of those, 31,977 "
"were spent inside the body of ``bar``. The last line of the profile (``2: "
"0``) corresponds to line 2 inside ``main``. No samples were collected there."
msgstr ""

#: ../../../UsersManual.rst:1453
msgid "Profiling with Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1455
msgid ""
"Clang also supports profiling via instrumentation. This requires building a "
"special instrumented version of the code and has some runtime overhead "
"during the profiling, but it provides more detailed results than a sampling "
"profiler. It also provides reproducible results, at least to the extent that "
"the code behaves consistently across runs."
msgstr ""

#: ../../../UsersManual.rst:1461
msgid ""
"Here are the steps for using profile guided optimization with "
"instrumentation:"
msgstr ""

#: ../../../UsersManual.rst:1464
msgid ""
"Build an instrumented version of the code by compiling and linking with the "
"``-fprofile-instr-generate`` option."
msgstr ""

#: ../../../UsersManual.rst:1471
msgid ""
"Run the instrumented executable with inputs that reflect the typical usage. "
"By default, the profile data will be written to a ``default.profraw`` file "
"in the current directory. You can override that default by setting the "
"``LLVM_PROFILE_FILE`` environment variable to specify an alternate file. Any "
"instance of ``%p`` in that file name will be replaced by the process ID, so "
"that you can easily distinguish the profile output from multiple runs."
msgstr ""

#: ../../../UsersManual.rst:1483
msgid ""
"Combine profiles from multiple runs and convert the \"raw\" profile format "
"to the input expected by clang. Use the ``merge`` command of the ``llvm-"
"profdata`` tool to do this."
msgstr ""

#: ../../../UsersManual.rst:1491
msgid ""
"Note that this step is necessary even when there is only one \"raw\" "
"profile, since the merge operation also changes the file format."
msgstr ""

#: ../../../UsersManual.rst:1494
msgid ""
"Build the code again using the ``-fprofile-instr-use`` option to specify the "
"collected profile data."
msgstr ""

#: ../../../UsersManual.rst:1501
msgid ""
"You can repeat step 4 as often as you like without regenerating the profile. "
"As you make changes to your code, clang may no longer be able to use the "
"profile data. It will warn you when this happens."
msgstr ""

#: ../../../UsersManual.rst:1505
msgid ""
"Profile generation using an alternative instrumentation method can be "
"controlled by the GCC-compatible flags ``-fprofile-generate`` and ``-"
"fprofile-use``. Although these flags are semantically equivalent to their "
"GCC counterparts, they *do not* handle GCC-compatible profiles. They are "
"only meant to implement GCC's semantics with respect to profile creation and "
"use."
msgstr ""

#: ../../../UsersManual.rst:1514
msgid ""
"The ``-fprofile-generate`` and ``-fprofile-generate=`` flags will use an "
"alterantive instrumentation method for profile generation. When given a "
"directory name, it generates the profile file ``default.profraw`` in the "
"directory named ``dirname``. If ``dirname`` does not exist, it will be "
"created at runtime. The environment variable ``LLVM_PROFILE_FILE`` can be "
"used to override the directory and filename for the profile file at runtime. "
"For example,"
msgstr ""

#: ../../../UsersManual.rst:1526
msgid ""
"When ``code`` is executed, the profile will be written to the file ``yyy/zzz/"
"default.profraw``. This can be altered at runtime via the "
"``LLVM_PROFILE_FILE`` environment variable:"
msgstr ""

#: ../../../UsersManual.rst:1534
msgid ""
"The above invocation will produce the profile file ``/tmp/myprofile/code."
"profraw`` instead of ``yyy/zzz/default.profraw``. Notice that "
"``LLVM_PROFILE_FILE`` overrides the directory *and* the file name for the "
"profile file."
msgstr ""

#: ../../../UsersManual.rst:1541
msgid ""
"Without any other arguments, ``-fprofile-use`` behaves identically to ``-"
"fprofile-instr-use``. Otherwise, if ``pathname`` is the full path to a "
"profile file, it reads from that file. If ``pathname`` is a directory name, "
"it reads from ``pathname/default.profdata``."
msgstr ""

#: ../../../UsersManual.rst:1547
msgid "Disabling Instrumentation"
msgstr ""

#: ../../../UsersManual.rst:1549
msgid ""
"In certain situations, it may be useful to disable profile generation or use "
"for specific files in a build, without affecting the main compilation flags "
"used for the other files in the project."
msgstr ""

#: ../../../UsersManual.rst:1553
msgid ""
"In these cases, you can use the flag ``-fno-profile-instr-generate`` (or ``-"
"fno-profile-generate``) to disable profile generation, and ``-fno-profile-"
"instr-use`` (or ``-fno-profile-use``) to disable profile use."
msgstr ""

#: ../../../UsersManual.rst:1557
msgid ""
"Note that these flags should appear after the corresponding profile flags to "
"have an effect."
msgstr ""

#: ../../../UsersManual.rst:1561
msgid "Controlling Debug Information"
msgstr ""

#: ../../../UsersManual.rst:1564
msgid "Controlling Size of Debug Information"
msgstr ""

#: ../../../UsersManual.rst:1566
msgid ""
"Debug info kind generated by Clang can be set by one of the flags listed "
"below. If multiple flags are present, the last one is used."
msgstr ""

#: ../../../UsersManual.rst:1571
msgid "Don't generate any debug info (default)."
msgstr ""

#: ../../../UsersManual.rst:1575
msgid "Generate line number tables only."
msgstr ""

#: ../../../UsersManual.rst:1577
msgid ""
"This kind of debug info allows to obtain stack traces with function names, "
"file names and line numbers (by such tools as ``gdb`` or ``addr2line``).  It "
"doesn't contain any other data (e.g. description of local variables or "
"function parameters)."
msgstr ""

#: ../../../UsersManual.rst:1584
msgid ""
"Clang supports a number of optimizations to reduce the size of debug "
"information in the binary. They work based on the assumption that the debug "
"type information can be spread out over multiple compilation units.  For "
"instance, Clang will not emit type definitions for types that are not needed "
"by a module and could be replaced with a forward declaration.  Further, "
"Clang will only emit type info for a dynamic C++ class in the module that "
"contains the vtable for the class."
msgstr ""

#: ../../../UsersManual.rst:1593
msgid ""
"The **-fstandalone-debug** option turns off these optimizations. This is "
"useful when working with 3rd-party libraries that don't come with debug "
"information.  Note that Clang will never emit type information for types "
"that are not referenced at all by the program."
msgstr ""

#: ../../../UsersManual.rst:1600
msgid ""
"On Darwin **-fstandalone-debug** is enabled by default. The **-fno-"
"standalone-debug** option can be used to get to turn on the vtable-based "
"optimization described above."
msgstr ""

#: ../../../UsersManual.rst:1606
msgid "Generate complete debug info."
msgstr ""

#: ../../../UsersManual.rst:1609
msgid "Controlling Debugger \"Tuning\""
msgstr ""

#: ../../../UsersManual.rst:1611
msgid ""
"While Clang generally emits standard DWARF debug info (http://dwarfstd.org), "
"different debuggers may know how to take advantage of different specific "
"DWARF features. You can \"tune\" the debug info for one of several different "
"debuggers."
msgstr ""

#: ../../../UsersManual.rst:1617
msgid ""
"Tune the debug info for the ``gdb``, ``lldb``, or Sony Computer "
"Entertainment debugger, respectively. Each of these options implies **-g**. "
"(Therefore, if you want both **-gline-tables-only** and debugger tuning, the "
"tuning option must come first.)"
msgstr ""

#: ../../../UsersManual.rst:1624
msgid "Comment Parsing Options"
msgstr ""

#: ../../../UsersManual.rst:1626
msgid ""
"Clang parses Doxygen and non-Doxygen style documentation comments and "
"attaches them to the appropriate declaration nodes.  By default, it only "
"parses Doxygen-style comments and ignores ordinary comments starting with "
"``//`` and ``/*``."
msgstr ""

#: ../../../UsersManual.rst:1633
msgid ""
"Emit warnings about use of documentation comments.  This warning group is "
"off by default."
msgstr ""

#: ../../../UsersManual.rst:1636
msgid ""
"This includes checking that ``\\param`` commands name parameters that "
"actually present in the function signature, checking that ``\\returns`` is "
"used only on functions that actually return a value etc."
msgstr ""

#: ../../../UsersManual.rst:1642
msgid "Don't warn when encountering an unknown Doxygen command."
msgstr ""

#: ../../../UsersManual.rst:1646
msgid ""
"Parse all comments as documentation comments (including ordinary comments "
"starting with ``//`` and ``/*``)."
msgstr ""

#: ../../../UsersManual.rst:1651
msgid ""
"Define custom documentation commands as block commands.  This allows Clang "
"to construct the correct AST for these custom commands, and silences "
"warnings about unknown commands.  Several commands must be separated by a "
"comma *without trailing space*; e.g. ``-fcomment-block-commands=foo,bar`` "
"defines custom commands ``\\foo`` and ``\\bar``."
msgstr ""

#: ../../../UsersManual.rst:1657
msgid ""
"It is also possible to use ``-fcomment-block-commands`` several times; e.g. "
"``-fcomment-block-commands=foo -fcomment-block-commands=bar`` does the same "
"as above."
msgstr ""

#: ../../../UsersManual.rst:1664
msgid "C Language Features"
msgstr ""

#: ../../../UsersManual.rst:1666
msgid ""
"The support for standard C in clang is feature-complete except for the C99 "
"floating-point pragmas."
msgstr ""

#: ../../../UsersManual.rst:1670
msgid "Extensions supported by clang"
msgstr ""

#: ../../../UsersManual.rst:1672
msgid "See :doc:`LanguageExtensions`."
msgstr ""

#: ../../../UsersManual.rst:1675
msgid "Differences between various standard modes"
msgstr ""

#: ../../../UsersManual.rst:1677
msgid ""
"clang supports the -std option, which changes what language mode clang uses. "
"The supported modes for C are c89, gnu89, c94, c99, gnu99, c11, gnu11, and "
"various aliases for those modes. If no -std option is specified, clang "
"defaults to gnu11 mode. Many C99 and C11 features are supported in earlier "
"modes as a conforming extension, with a warning. Use ``-pedantic-errors`` to "
"request an error if a feature from a later standard revision is used in an "
"earlier mode."
msgstr ""

#: ../../../UsersManual.rst:1685
msgid "Differences between all ``c*`` and ``gnu*`` modes:"
msgstr ""

#: ../../../UsersManual.rst:1687
msgid "``c*`` modes define \"``__STRICT_ANSI__``\"."
msgstr ""

#: ../../../UsersManual.rst:1688
msgid ""
"Target-specific defines not prefixed by underscores, like \"linux\", are "
"defined in ``gnu*`` modes."
msgstr ""

#: ../../../UsersManual.rst:1690
msgid ""
"Trigraphs default to being off in ``gnu*`` modes; they can be enabled by the "
"-trigraphs option."
msgstr ""

#: ../../../UsersManual.rst:1692
msgid ""
"The parser recognizes \"asm\" and \"typeof\" as keywords in ``gnu*`` modes; "
"the variants \"``__asm__``\" and \"``__typeof__``\" are recognized in all "
"modes."
msgstr ""

#: ../../../UsersManual.rst:1695
msgid ""
"The Apple \"blocks\" extension is recognized by default in ``gnu*`` modes on "
"some platforms; it can be enabled in any mode with the \"-fblocks\" option."
msgstr ""

#: ../../../UsersManual.rst:1698
msgid ""
"Arrays that are VLA's according to the standard, but which can be constant "
"folded by the frontend are treated as fixed size arrays. This occurs for "
"things like \"int X[(1, 2)];\", which is technically a VLA. ``c*`` modes are "
"strictly compliant and treat these as VLAs."
msgstr ""

#: ../../../UsersManual.rst:1703
msgid "Differences between ``*89`` and ``*99`` modes:"
msgstr ""

#: ../../../UsersManual.rst:1705
msgid ""
"The ``*99`` modes default to implementing \"inline\" as specified in C99, "
"while the ``*89`` modes implement the GNU version. This can be overridden "
"for individual functions with the ``__gnu_inline__`` attribute."
msgstr ""

#: ../../../UsersManual.rst:1709
msgid "Digraphs are not recognized in c89 mode."
msgstr ""

#: ../../../UsersManual.rst:1710
msgid ""
"The scope of names defined inside a \"for\", \"if\", \"switch\", \"while\", "
"or \"do\" statement is different. (example: \"``if ((struct x {int x;}*)0) {}"
"``\".)"
msgstr ""

#: ../../../UsersManual.rst:1713
msgid "``__STDC_VERSION__`` is not defined in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:1714
msgid "\"inline\" is not recognized as a keyword in c89 mode."
msgstr ""

#: ../../../UsersManual.rst:1715
msgid "\"restrict\" is not recognized as a keyword in ``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:1716
msgid "Commas are allowed in integer constant expressions in ``*99`` modes."
msgstr ""

#: ../../../UsersManual.rst:1717
msgid ""
"Arrays which are not lvalues are not implicitly promoted to pointers in "
"``*89`` modes."
msgstr ""

#: ../../../UsersManual.rst:1719
msgid "Some warnings are different."
msgstr ""

#: ../../../UsersManual.rst:1721
msgid "Differences between ``*99`` and ``*11`` modes:"
msgstr ""

#: ../../../UsersManual.rst:1723
msgid "Warnings for use of C11 features are disabled."
msgstr ""

#: ../../../UsersManual.rst:1724
msgid "``__STDC_VERSION__`` is defined to ``201112L`` rather than ``199901L``."
msgstr ""

#: ../../../UsersManual.rst:1726
msgid ""
"c94 mode is identical to c89 mode except that digraphs are enabled in c94 "
"mode (FIXME: And ``__STDC_VERSION__`` should be defined!)."
msgstr ""

#: ../../../UsersManual.rst:1730
msgid "GCC extensions not implemented yet"
msgstr ""

#: ../../../UsersManual.rst:1732
msgid ""
"clang tries to be compatible with gcc as much as possible, but some gcc "
"extensions are not implemented yet:"
msgstr ""

#: ../../../UsersManual.rst:1735
msgid ""
"clang does not support decimal floating point types (``_Decimal32`` and "
"friends) or fixed-point types (``_Fract`` and friends); nobody has expressed "
"interest in these features yet, so it's hard to say when they will be "
"implemented."
msgstr ""

#: ../../../UsersManual.rst:1739
msgid ""
"clang does not support nested functions; this is a complex feature which is "
"infrequently used, so it is unlikely to be implemented anytime soon. In C+"
"+11 it can be emulated by assigning lambda functions to local variables, e.g:"
msgstr ""

#: ../../../UsersManual.rst:1752
msgid ""
"clang does not support static initialization of flexible array members. This "
"appears to be a rarely used extension, but could be implemented pending user "
"demand."
msgstr ""

#: ../../../UsersManual.rst:1755
msgid ""
"clang does not support ``__builtin_va_arg_pack``/"
"``__builtin_va_arg_pack_len``. This is used rarely, but in some potentially "
"interesting places, like the glibc headers, so it may be implemented pending "
"user demand. Note that because clang pretends to be like GCC 4.2, and this "
"extension was introduced in 4.3, the glibc headers will not try to use this "
"extension with clang at the moment."
msgstr ""

#: ../../../UsersManual.rst:1762
msgid ""
"clang does not support the gcc extension for forward-declaring function "
"parameters; this has not shown up in any real-world code yet, though, so it "
"might never be implemented."
msgstr ""

#: ../../../UsersManual.rst:1766
msgid ""
"This is not a complete list; if you find an unsupported extension missing "
"from this list, please send an e-mail to cfe-dev. This list currently "
"excludes C++; see :ref:`C++ Language Features <cxx>`. Also, this list does "
"not include bugs in mostly-implemented features; please see the `bug tracker "
"<http://llvm.org/bugs/buglist.cgi?quicksearch=product%3Aclang+component%3A-"
"New%2BBugs%2CAST%2CBasic%2CDriver%2CHeaders%2CLLVM%2BCodeGen%2Cparser%2Cpreprocessor%2CSemantic%2BAnalyzer>`_ "
"for known existing bugs (FIXME: Is there a section for bug-reporting "
"guidelines somewhere?)."
msgstr ""

#: ../../../UsersManual.rst:1776
msgid "Intentionally unsupported GCC extensions"
msgstr ""

#: ../../../UsersManual.rst:1778
msgid ""
"clang does not support the gcc extension that allows variable-length arrays "
"in structures. This is for a few reasons: one, it is tricky to implement, "
"two, the extension is completely undocumented, and three, the extension "
"appears to be rarely used. Note that clang *does* support flexible array "
"members (arrays with a zero or unspecified size at the end of a structure)."
msgstr ""

#: ../../../UsersManual.rst:1784
msgid ""
"clang does not have an equivalent to gcc's \"fold\"; this means that clang "
"doesn't accept some constructs gcc might accept in contexts where a constant "
"expression is required, like \"x-x\" where x is a variable."
msgstr ""

#: ../../../UsersManual.rst:1788
msgid ""
"clang does not support ``__builtin_apply`` and friends; this extension is "
"extremely obscure and difficult to implement reliably."
msgstr ""

#: ../../../UsersManual.rst:1794
msgid "Microsoft extensions"
msgstr ""

#: ../../../UsersManual.rst:1796
msgid ""
"clang has support for many extensions from Microsoft Visual C++. To enable "
"these extensions, use the ``-fms-extensions`` command-line option. This is "
"the default for Windows targets. Clang does not implement every pragma or "
"declspec provided by MSVC, but the popular ones, such as "
"``__declspec(dllexport)`` and ``#pragma comment(lib)`` are well supported."
msgstr ""

#: ../../../UsersManual.rst:1802
msgid ""
"clang has a ``-fms-compatibility`` flag that makes clang accept enough "
"invalid C++ to be able to parse most Microsoft headers. For example, it "
"allows `unqualified lookup of dependent base class members <http://clang."
"llvm.org/compatibility.html#dep_lookup_bases>`_, which is a common "
"compatibility issue with clang. This flag is enabled by default for Windows "
"targets."
msgstr ""

#: ../../../UsersManual.rst:1809
msgid ""
"``-fdelayed-template-parsing`` lets clang delay parsing of function template "
"definitions until the end of a translation unit. This flag is enabled by "
"default for Windows targets."
msgstr ""

#: ../../../UsersManual.rst:1813
msgid ""
"For compatibility with existing code that compiles with MSVC, clang defines "
"the ``_MSC_VER`` and ``_MSC_FULL_VER`` macros. These default to the values "
"of 1800 and 180000000 respectively, making clang look like an early release "
"of Visual C++ 2013. The ``-fms-compatibility-version=`` flag overrides these "
"values.  It accepts a dotted version tuple, such as 19.00.23506. Changing "
"the MSVC compatibility version makes clang behave more like that version of "
"MSVC. For example, ``-fms-compatibility-version=19`` will enable C++14 "
"features and define ``char16_t`` and ``char32_t`` as builtin types."
msgstr ""

#: ../../../UsersManual.rst:1825
msgid "C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:1827
msgid ""
"clang fully implements all of standard C++98 except for exported templates "
"(which were removed in C++11), and all of standard C++11 and the current "
"draft standard for C++1y."
msgstr ""

#: ../../../UsersManual.rst:1832 ../../../UsersManual.rst:1881
msgid "Controlling implementation limits"
msgstr ""

#: ../../../UsersManual.rst:1836
msgid ""
"Sets the limit for nested parentheses, brackets, and braces to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:1841
msgid ""
"Sets the limit for recursive constexpr function invocations to N.  The "
"default is 512."
msgstr ""

#: ../../../UsersManual.rst:1846
msgid ""
"Sets the limit for recursively nested template instantiations to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:1851
msgid ""
"Sets the limit for iterative calls to 'operator->' functions to N.  The "
"default is 256."
msgstr ""

#: ../../../UsersManual.rst:1857
msgid "Objective-C Language Features"
msgstr ""

#: ../../../UsersManual.rst:1862
msgid "Objective-C++ Language Features"
msgstr ""

#: ../../../UsersManual.rst:1867
msgid "OpenMP Features"
msgstr ""

#: ../../../UsersManual.rst:1869
msgid ""
"Clang supports all OpenMP 3.1 directives and clauses.  In addition, some "
"features of OpenMP 4.0 are supported.  For example, ``#pragma omp simd``, "
"``#pragma omp for simd``, ``#pragma omp parallel for simd`` directives, "
"extended set of atomic constructs, ``proc_bind`` clause for all parallel-"
"based directives, ``depend`` clause for ``#pragma omp task`` directive "
"(except for array sections), ``#pragma omp cancel`` and ``#pragma omp "
"cancellation point`` directives, and ``#pragma omp taskgroup`` directive."
msgstr ""

#: ../../../UsersManual.rst:1877
msgid ""
"Use `-fopenmp` to enable OpenMP. Support for OpenMP can be disabled with `-"
"fno-openmp`."
msgstr ""

#: ../../../UsersManual.rst:1885
msgid ""
"Controls code generation for OpenMP threadprivate variables. In presence of "
"this option all threadprivate variables are generated the same way as thread "
"local variables, using TLS support. If `-fno-openmp-use-tls` is provided or "
"target does not support TLS, code generation for threadprivate variables "
"relies on OpenMP runtime library."
msgstr ""

#: ../../../UsersManual.rst:1894
msgid "Target-Specific Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:1897
msgid "CPU Architectures Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:1900
msgid "X86"
msgstr ""

#: ../../../UsersManual.rst:1902
msgid ""
"The support for X86 (both 32-bit and 64-bit) is considered stable on Darwin "
"(Mac OS X), Linux, FreeBSD, and Dragonfly BSD: it has been tested to "
"correctly compile many large C, C++, Objective-C, and Objective-C++ "
"codebases."
msgstr ""

#: ../../../UsersManual.rst:1907
msgid ""
"On ``x86_64-mingw32``, passing i128(by value) is incompatible with the "
"Microsoft x64 calling convention. You might need to tweak "
"``WinX86_64ABIInfo::classify()`` in lib/CodeGen/TargetInfo.cpp."
msgstr ""

#: ../../../UsersManual.rst:1911
msgid ""
"For the X86 target, clang supports the `-m16` command line argument which "
"enables 16-bit code output. This is broadly similar to using ``asm(\"."
"code16gcc\")`` with the GNU toolchain. The generated code and the ABI "
"remains 32-bit but the assembler emits instructions appropriate for a CPU "
"running in 16-bit mode, with address-size and operand-size prefixes to "
"enable 32-bit addressing and operations."
msgstr ""

#: ../../../UsersManual.rst:1919
msgid "ARM"
msgstr ""

#: ../../../UsersManual.rst:1921
msgid ""
"The support for ARM (specifically ARMv6 and ARMv7) is considered stable on "
"Darwin (iOS): it has been tested to correctly compile many large C, C++, "
"Objective-C, and Objective-C++ codebases. Clang only supports a limited "
"number of ARM architectures. It does not yet fully support ARMv5, for "
"example."
msgstr ""

#: ../../../UsersManual.rst:1928
msgid "PowerPC"
msgstr ""

#: ../../../UsersManual.rst:1930
msgid ""
"The support for PowerPC (especially PowerPC64) is considered stable on Linux "
"and FreeBSD: it has been tested to correctly compile many large C and C++ "
"codebases. PowerPC (32bit) is still missing certain features (e.g. PIC code "
"on ELF platforms)."
msgstr ""

#: ../../../UsersManual.rst:1936
msgid "Other platforms"
msgstr ""

#: ../../../UsersManual.rst:1938
msgid ""
"clang currently contains some support for other architectures (e.g. Sparc); "
"however, significant pieces of code generation are still missing, and they "
"haven't undergone significant testing."
msgstr ""

#: ../../../UsersManual.rst:1942
msgid ""
"clang contains limited support for the MSP430 embedded processor, but both "
"the clang support and the LLVM backend support are highly experimental."
msgstr ""

#: ../../../UsersManual.rst:1946
msgid ""
"Other platforms are completely unsupported at the moment. Adding the minimal "
"support needed for parsing and semantic analysis on a new platform is quite "
"easy; see ``lib/Basic/Targets.cpp`` in the clang source tree. This level of "
"support is also sufficient for conversion to LLVM IR for simple programs. "
"Proper support for conversion to LLVM IR requires adding code to ``lib/"
"CodeGen/CGCall.cpp`` at the moment; this is likely to change soon, though. "
"Generating assembly requires a suitable LLVM backend."
msgstr ""

#: ../../../UsersManual.rst:1956
msgid "Operating System Features and Limitations"
msgstr ""

#: ../../../UsersManual.rst:1959
msgid "Darwin (Mac OS X)"
msgstr ""

#: ../../../UsersManual.rst:1961
msgid "Thread Sanitizer is not supported."
msgstr ""

#: ../../../UsersManual.rst:1964
msgid "Windows"
msgstr ""

#: ../../../UsersManual.rst:1966
msgid ""
"Clang has experimental support for targeting \"Cygming\" (Cygwin / MinGW) "
"platforms."
msgstr ""

#: ../../../UsersManual.rst:1969
msgid "See also :ref:`Microsoft Extensions <c_ms>`."
msgstr ""

#: ../../../UsersManual.rst:1972
msgid "Cygwin"
msgstr ""

#: ../../../UsersManual.rst:1974
msgid "Clang works on Cygwin-1.7."
msgstr ""

#: ../../../UsersManual.rst:1977
msgid "MinGW32"
msgstr ""

#: ../../../UsersManual.rst:1979
msgid ""
"Clang works on some mingw32 distributions. Clang assumes directories as "
"below;"
msgstr ""

#: ../../../UsersManual.rst:1982
msgid "``C:/mingw/include``"
msgstr ""

#: ../../../UsersManual.rst:1983
msgid "``C:/mingw/lib``"
msgstr ""

#: ../../../UsersManual.rst:1984
msgid "``C:/mingw/lib/gcc/mingw32/4.[3-5].0/include/c++``"
msgstr ""

#: ../../../UsersManual.rst:1986
msgid "On MSYS, a few tests might fail."
msgstr ""

#: ../../../UsersManual.rst:1989
msgid "MinGW-w64"
msgstr ""

#: ../../../UsersManual.rst:1991
msgid ""
"For 32-bit (i686-w64-mingw32), and 64-bit (x86\\_64-w64-mingw32), Clang "
"assumes as below;"
msgstr ""

#: ../../../UsersManual.rst:1994
msgid ""
"``GCC versions 4.5.0 to 4.5.3, 4.6.0 to 4.6.2, or 4.7.0 (for the C++ header "
"search path)``"
msgstr ""

#: ../../../UsersManual.rst:1995
msgid "``some_directory/bin/gcc.exe``"
msgstr ""

#: ../../../UsersManual.rst:1996
msgid "``some_directory/bin/clang.exe``"
msgstr ""

#: ../../../UsersManual.rst:1997
msgid "``some_directory/bin/clang++.exe``"
msgstr ""

#: ../../../UsersManual.rst:1998
msgid "``some_directory/bin/../include/c++/GCC_version``"
msgstr ""

#: ../../../UsersManual.rst:1999
msgid "``some_directory/bin/../include/c++/GCC_version/x86_64-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:2000
msgid "``some_directory/bin/../include/c++/GCC_version/i686-w64-mingw32``"
msgstr ""

#: ../../../UsersManual.rst:2001
msgid "``some_directory/bin/../include/c++/GCC_version/backward``"
msgstr ""

#: ../../../UsersManual.rst:2002
msgid "``some_directory/bin/../x86_64-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:2003
msgid "``some_directory/bin/../i686-w64-mingw32/include``"
msgstr ""

#: ../../../UsersManual.rst:2004
msgid "``some_directory/bin/../include``"
msgstr ""

#: ../../../UsersManual.rst:2006
msgid ""
"This directory layout is standard for any toolchain you will find on the "
"official `MinGW-w64 website <http://mingw-w64.sourceforge.net>`_."
msgstr ""

#: ../../../UsersManual.rst:2009
msgid ""
"Clang expects the GCC executable \"gcc.exe\" compiled for ``i686-w64-"
"mingw32`` (or ``x86_64-w64-mingw32``) to be present on PATH."
msgstr ""

#: ../../../UsersManual.rst:2012
msgid ""
"`Some tests might fail <http://llvm.org/bugs/show_bug.cgi?id=9072>`_ on "
"``x86_64-w64-mingw32``."
msgstr ""

#: ../../../UsersManual.rst:2018
msgid "clang-cl"
msgstr ""

#: ../../../UsersManual.rst:2020
msgid ""
"clang-cl is an alternative command-line interface to Clang driver, designed "
"for compatibility with the Visual C++ compiler, cl.exe."
msgstr ""

#: ../../../UsersManual.rst:2023
msgid ""
"To enable clang-cl to find system headers, libraries, and the linker when "
"run from the command-line, it should be executed inside a Visual Studio "
"Native Tools Command Prompt or a regular Command Prompt where the "
"environment has been set up using e.g. `vcvars32.bat <http://msdn.microsoft."
"com/en-us/library/f2ccy3wt.aspx>`_."
msgstr ""

#: ../../../UsersManual.rst:2028
msgid ""
"clang-cl can also be used from inside Visual Studio  by using an LLVM "
"Platform Toolset."
msgstr ""

#: ../../../UsersManual.rst:2032
msgid "Command-Line Options"
msgstr ""

#: ../../../UsersManual.rst:2034
msgid ""
"To be compatible with cl.exe, clang-cl supports most of the same command-"
"line options. Those options can start with either ``/`` or ``-``. It also "
"supports some of Clang's core options, such as the ``-W`` options."
msgstr ""

#: ../../../UsersManual.rst:2038
msgid ""
"Options that are known to clang-cl, but not currently supported, are ignored "
"with a warning. For example:"
msgstr ""

#: ../../../UsersManual.rst:2045
msgid ""
"To suppress warnings about unused arguments, use the ``-Qunused-arguments`` "
"option."
msgstr ""

#: ../../../UsersManual.rst:2047
msgid ""
"Options that are not known to clang-cl will be ignored by default. Use the "
"``-Werror=unknown-argument`` option in order to treat them as errors. If "
"these options are spelled with a leading ``/``, they will be mistaken for a "
"filename:"
msgstr ""

#: ../../../UsersManual.rst:2055
msgid ""
"Please `file a bug <http://llvm.org/bugs/enter_bug.cgi?"
"product=clang&component=Driver>`_ for any valid cl.exe flags that clang-cl "
"does not understand."
msgstr ""

#: ../../../UsersManual.rst:2058
msgid "Execute ``clang-cl /?`` to see a list of supported options:"
msgstr ""

#: ../../../UsersManual.rst:2207
msgid "The /fallback Option"
msgstr ""

#: ../../../UsersManual.rst:2209
msgid ""
"When clang-cl is run with the ``/fallback`` option, it will first try to "
"compile files itself. For any file that it fails to compile, it will fall "
"back and try to compile the file by invoking cl.exe."
msgstr ""

#: ../../../UsersManual.rst:2213
msgid ""
"This option is intended to be used as a temporary means to build projects "
"where clang-cl cannot successfully compile all the files. clang-cl may fail "
"to compile a file either because it cannot generate code for some C++ "
"feature, or because it cannot parse some Microsoft language extension."
msgstr ""
