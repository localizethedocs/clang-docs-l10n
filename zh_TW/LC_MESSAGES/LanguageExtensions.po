# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../LanguageExtensions.rst:3
msgid "Clang Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:18
msgid "Introduction"
msgstr ""

#: ../../../LanguageExtensions.rst:20
msgid ""
"This document describes the language extensions provided by Clang.  In "
"addition to the language extensions listed here, Clang aims to support a "
"broad range of GCC extensions.  Please see the `GCC manual <https://gcc.gnu."
"org/onlinedocs/gcc/C-Extensions.html>`_ for more information on these "
"extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:29
msgid "Feature Checking Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:31
msgid ""
"Language extensions can be very useful, but only if you know you can depend "
"on them.  In order to allow fine-grain features checks, we support three "
"builtin function-like macros.  This allows you to directly test for a "
"feature in your code without having to resort to something like autoconf or "
"fragile \"compiler version checks\"."
msgstr ""

#: ../../../LanguageExtensions.rst:38
msgid "``__has_builtin``"
msgstr ""

#: ../../../LanguageExtensions.rst:40
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of a builtin function, a builtin pseudo-function (taking one or more type "
"arguments), or a builtin template. It evaluates to 1 if the builtin is "
"supported or 0 if not. It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:62
msgid ""
"Prior to Clang 10, ``__has_builtin`` could not be used to detect most "
"builtin pseudo-functions."
msgstr ""

#: ../../../LanguageExtensions.rst:65
msgid ""
"``__has_builtin`` should not be used to detect support for a builtin macro; "
"use ``#ifdef`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:71
msgid "``__has_feature`` and ``__has_extension``"
msgstr ""

#: ../../../LanguageExtensions.rst:73
msgid ""
"These function-like macros take a single identifier argument that is the "
"name of a feature.  ``__has_feature`` evaluates to 1 if the feature is both "
"supported by Clang and standardized in the current language standard or 0 if "
"not (but see :ref:`below <langext-has-feature-back-compat>`), while "
"``__has_extension`` evaluates to 1 if the feature is supported by Clang in "
"the current language (either as a language extension or a standard language "
"feature) or 0 if not.  They can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:104
msgid ""
"For backward compatibility, ``__has_feature`` can also be used to test for "
"support for non-standardized features, i.e. features not prefixed ``c_``, "
"``cxx_`` or ``objc_``."
msgstr ""

#: ../../../LanguageExtensions.rst:108
msgid ""
"Another use of ``__has_feature`` is to check for compiler features not "
"related to the language standard, such as e.g. :doc:`AddressSanitizer "
"<AddressSanitizer>`."
msgstr ""

#: ../../../LanguageExtensions.rst:112
msgid ""
"If the ``-pedantic-errors`` option is given, ``__has_extension`` is "
"equivalent to ``__has_feature``."
msgstr ""

#: ../../../LanguageExtensions.rst:115
msgid "The feature tag is described along with the language feature below."
msgstr ""

#: ../../../LanguageExtensions.rst:117
msgid ""
"The feature name or extension name can also be specified with a preceding "
"and following ``__`` (double underscore) to avoid interference from a macro "
"with the same name.  For instance, ``__cxx_rvalue_references__`` can be used "
"instead of ``cxx_rvalue_references``."
msgstr ""

#: ../../../LanguageExtensions.rst:123
msgid "``__has_cpp_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:125
msgid ""
"This function-like macro is available in C++20 by default, and is provided "
"as an extension in earlier language standards. It takes a single argument "
"that is the name of a double-square-bracket-style attribute. The argument "
"can either be a single identifier or a scoped identifier. If the attribute "
"is supported, a nonzero value is returned. If the attribute is a standards-"
"based attribute, this macro returns a nonzero value based on the year and "
"month in which the attribute was voted into the working draft. See `WG21 "
"SD-6 <https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-"
"recommendations>`_ for the list of values returned for standards-based "
"attributes. If the attribute is not supported by the current compliation "
"target, this macro evaluates to 0. It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:151 ../../../LanguageExtensions.rst:180
msgid ""
"The attribute scope tokens ``clang`` and ``_Clang`` are interchangeable, as "
"are the attribute scope tokens ``gnu`` and ``__gnu__``. Attribute tokens in "
"either of these namespaces can be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name. For instance, ``gnu::__const__`` can be used instead of ``gnu::const``."
msgstr ""

#: ../../../LanguageExtensions.rst:158
msgid "``__has_c_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:160
msgid ""
"This function-like macro takes a single argument that is the name of an "
"attribute exposed with the double square-bracket syntax in C mode. The "
"argument can either be a single identifier or a scoped identifier. If the "
"attribute is supported, a nonzero value is returned. If the attribute is not "
"supported by the current compilation target, this macro evaluates to 0. It "
"can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:187
msgid "``__has_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:189
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of a GNU-style attribute.  It evaluates to 1 if the attribute is supported "
"by the current compilation target, or 0 if not.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:207
msgid ""
"The attribute name can also be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name.  For instance, ``__always_inline__`` can be used instead of "
"``always_inline``."
msgstr ""

#: ../../../LanguageExtensions.rst:213
msgid "``__has_declspec_attribute``"
msgstr ""

#: ../../../LanguageExtensions.rst:215
msgid ""
"This function-like macro takes a single identifier argument that is the name "
"of an attribute implemented as a Microsoft-style ``__declspec`` attribute.  "
"It evaluates to 1 if the attribute is supported by the current compilation "
"target, or 0 if not.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:234
msgid ""
"The attribute name can also be specified with a preceding and following "
"``__`` (double underscore) to avoid interference from a macro with the same "
"name.  For instance, ``__dllexport__`` can be used instead of ``dllexport``."
msgstr ""

#: ../../../LanguageExtensions.rst:239
msgid "``__is_identifier``"
msgstr ""

#: ../../../LanguageExtensions.rst:241
msgid ""
"This function-like macro takes a single identifier argument that might be "
"either a reserved word or a regular identifier. It evaluates to 1 if the "
"argument is just a regular identifier and not a reserved word, in the sense "
"that it can then be used as the name of a user-defined function or variable. "
"Otherwise it evaluates to 0.  It can be used like this:"
msgstr ""

#: ../../../LanguageExtensions.rst:260
msgid "Include File Checking Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:262
msgid ""
"Not all developments systems have the same include files.  The :ref:`langext-"
"__has_include` and :ref:`langext-__has_include_next` macros allow you to "
"check for the existence of an include file before doing a possibly failing "
"``#include`` directive.  Include file checking macros must be used as "
"expressions in ``#if`` or ``#elif`` preprocessing directives."
msgstr ""

#: ../../../LanguageExtensions.rst:271
msgid "``__has_include``"
msgstr ""

#: ../../../LanguageExtensions.rst:273
msgid ""
"This function-like macro takes a single file name string argument that is "
"the name of an include file.  It evaluates to 1 if the file can be found "
"using the include paths, or 0 otherwise:"
msgstr ""

#: ../../../LanguageExtensions.rst:284
msgid "To test for this feature, use ``#if defined(__has_include)``:"
msgstr ""

#: ../../../LanguageExtensions.rst:298
msgid "``__has_include_next``"
msgstr ""

#: ../../../LanguageExtensions.rst:300
msgid ""
"This function-like macro takes a single file name string argument that is "
"the name of an include file.  It is like ``__has_include`` except that it "
"looks for the second instance of the given file found in the include paths.  "
"It evaluates to 1 if the second instance of the file can be found using the "
"include paths, or 0 otherwise:"
msgstr ""

#: ../../../LanguageExtensions.rst:320
msgid ""
"Note that ``__has_include_next``, like the GNU extension ``#include_next`` "
"directive, is intended for use in headers only, and will issue a warning if "
"used in the top-level compilation file.  A warning will also be issued if an "
"absolute path is used in the file argument."
msgstr ""

#: ../../../LanguageExtensions.rst:326
msgid "``__has_warning``"
msgstr ""

#: ../../../LanguageExtensions.rst:328
msgid ""
"This function-like macro takes a string literal that represents a command "
"line option for a warning and returns true if that is a valid warning option."
msgstr ""

#: ../../../LanguageExtensions.rst:340
msgid "Builtin Macros"
msgstr ""

#: ../../../LanguageExtensions.rst:344
msgid "``__BASE_FILE__``"
msgstr ""

#: ../../../LanguageExtensions.rst:343
msgid ""
"Defined to a string that contains the name of the main input file passed to "
"Clang."
msgstr ""

#: ../../../LanguageExtensions.rst:349
msgid "``__FILE_NAME__``"
msgstr ""

#: ../../../LanguageExtensions.rst:347
msgid ""
"Clang-specific extension that functions similar to ``__FILE__`` but only "
"renders the last path component (the filename) instead of an invocation "
"dependent full path to that file."
msgstr ""

#: ../../../LanguageExtensions.rst:353
msgid "``__COUNTER__``"
msgstr ""

#: ../../../LanguageExtensions.rst:352
msgid ""
"Defined to an integer value that starts at zero and is incremented each time "
"the ``__COUNTER__`` macro is expanded."
msgstr ""

#: ../../../LanguageExtensions.rst:357
msgid "``__INCLUDE_LEVEL__``"
msgstr ""

#: ../../../LanguageExtensions.rst:356
msgid ""
"Defined to an integral value that is the include depth of the file currently "
"being translated.  For the main file, this value is zero."
msgstr ""

#: ../../../LanguageExtensions.rst:361
msgid "``__TIMESTAMP__``"
msgstr ""

#: ../../../LanguageExtensions.rst:360
msgid ""
"Defined to the date and time of the last modification of the current source "
"file."
msgstr ""

#: ../../../LanguageExtensions.rst:364
msgid "``__clang__``"
msgstr ""

#: ../../../LanguageExtensions.rst:364
msgid "Defined when compiling with Clang"
msgstr ""

#: ../../../LanguageExtensions.rst:370
msgid "``__clang_major__``"
msgstr ""

#: ../../../LanguageExtensions.rst:367
msgid ""
"Defined to the major marketing version number of Clang (e.g., the 2 in "
"2.0.1).  Note that marketing version numbers should not be used to check for "
"language features, as different vendors use different numbering schemes. "
"Instead, use the :ref:`langext-feature_check`."
msgstr ""

#: ../../../LanguageExtensions.rst:376
msgid "``__clang_minor__``"
msgstr ""

#: ../../../LanguageExtensions.rst:373
msgid ""
"Defined to the minor version number of Clang (e.g., the 0 in 2.0.1).  Note "
"that marketing version numbers should not be used to check for language "
"features, as different vendors use different numbering schemes.  Instead, "
"use the :ref:`langext-feature_check`."
msgstr ""

#: ../../../LanguageExtensions.rst:379
msgid "``__clang_patchlevel__``"
msgstr ""

#: ../../../LanguageExtensions.rst:379
msgid "Defined to the marketing patch level of Clang (e.g., the 1 in 2.0.1)."
msgstr ""

#: ../../../LanguageExtensions.rst:383
msgid "``__clang_version__``"
msgstr ""

#: ../../../LanguageExtensions.rst:382
msgid ""
"Defined to a string that captures the Clang marketing version, including the "
"Subversion tag or revision number, e.g., \"``1.5 (trunk 102332)``\"."
msgstr ""

#: ../../../LanguageExtensions.rst:388
msgid "Vectors and Extended Vectors"
msgstr ""

#: ../../../LanguageExtensions.rst:390
msgid "Supports the GCC, OpenCL, AltiVec and NEON vector extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:392
msgid ""
"OpenCL vector types are created using the ``ext_vector_type`` attribute.  It "
"supports the ``V.xyzw`` syntax and other tidbits as seen in OpenCL.  An "
"example is:"
msgstr ""

#: ../../../LanguageExtensions.rst:408
msgid "Query for this feature with ``__has_attribute(ext_vector_type)``."
msgstr ""

#: ../../../LanguageExtensions.rst:410
msgid ""
"Giving ``-maltivec`` option to clang enables support for AltiVec vector "
"syntax and functions.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:421
msgid ""
"NEON vector types are created using ``neon_vector_type`` and "
"``neon_polyvector_type`` attributes.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:436
msgid "Vector Literals"
msgstr ""

#: ../../../LanguageExtensions.rst:438
msgid ""
"Vector literals can be used to create vectors from a set of scalars, or "
"vectors.  Either parentheses or braces form can be used.  In the parentheses "
"form the number of literal values specified must be one, i.e. referring to a "
"scalar value, or must match the size of the vector type being created.  If a "
"single scalar literal value is specified, the scalar literal value will be "
"replicated to all the components of the vector type.  In the brackets form "
"any number of literals can be specified.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:462
msgid "Vector Operations"
msgstr ""

#: ../../../LanguageExtensions.rst:464
msgid ""
"The table below shows the support for each operation by vector extension.  A "
"dash indicates that an operation is not accepted according to a "
"corresponding specification."
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "Operator"
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "OpenCL"
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "AltiVec"
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "GCC"
msgstr ""

#: ../../../LanguageExtensions.rst:469
msgid "NEON"
msgstr ""

#: ../../../LanguageExtensions.rst:471
msgid "[]"
msgstr ""

#: ../../../LanguageExtensions.rst:471 ../../../LanguageExtensions.rst:472
#: ../../../LanguageExtensions.rst:473 ../../../LanguageExtensions.rst:474
#: ../../../LanguageExtensions.rst:475 ../../../LanguageExtensions.rst:476
#: ../../../LanguageExtensions.rst:477 ../../../LanguageExtensions.rst:478
#: ../../../LanguageExtensions.rst:479 ../../../LanguageExtensions.rst:480
#: ../../../LanguageExtensions.rst:481 ../../../LanguageExtensions.rst:482
#: ../../../LanguageExtensions.rst:483 ../../../LanguageExtensions.rst:484
msgid "yes"
msgstr ""

#: ../../../LanguageExtensions.rst:471 ../../../LanguageExtensions.rst:472
#: ../../../LanguageExtensions.rst:473 ../../../LanguageExtensions.rst:474
#: ../../../LanguageExtensions.rst:475 ../../../LanguageExtensions.rst:476
#: ../../../LanguageExtensions.rst:477 ../../../LanguageExtensions.rst:478
#: ../../../LanguageExtensions.rst:480
msgid "--"
msgstr ""

#: ../../../LanguageExtensions.rst:472
msgid "unary operators +, --"
msgstr ""

#: ../../../LanguageExtensions.rst:473
msgid "++, -- --"
msgstr ""

#: ../../../LanguageExtensions.rst:474
msgid "+,--,*,/,%"
msgstr ""

#: ../../../LanguageExtensions.rst:475
msgid "bitwise operators &,|,^,~"
msgstr ""

#: ../../../LanguageExtensions.rst:476
msgid ">>,<<"
msgstr ""

#: ../../../LanguageExtensions.rst:477
msgid "!, &&, ||"
msgstr ""

#: ../../../LanguageExtensions.rst:477
msgid "yes [#]_"
msgstr ""

#: ../../../LanguageExtensions.rst:478
msgid "==, !=, >, <, >=, <="
msgstr ""

#: ../../../LanguageExtensions.rst:479
msgid "="
msgstr ""

#: ../../../LanguageExtensions.rst:480
msgid ":? [#]_"
msgstr ""

#: ../../../LanguageExtensions.rst:481
msgid "sizeof"
msgstr ""

#: ../../../LanguageExtensions.rst:482
msgid "C-style cast"
msgstr ""

#: ../../../LanguageExtensions.rst:482 ../../../LanguageExtensions.rst:483
#: ../../../LanguageExtensions.rst:484 ../../../LanguageExtensions.rst:485
msgid "no"
msgstr ""

#: ../../../LanguageExtensions.rst:483
msgid "reinterpret_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:484
msgid "static_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:485
msgid "const_cast"
msgstr ""

#: ../../../LanguageExtensions.rst:488
msgid ""
"See also :ref:`langext-__builtin_shufflevector`, :ref:`langext-"
"__builtin_convertvector`."
msgstr ""

#: ../../../LanguageExtensions.rst:490
msgid "unary operator ! is not implemented, however && and || are."
msgstr ""

#: ../../../LanguageExtensions.rst:491
msgid ""
"While OpenCL and GCC vectors both implement the comparison operator(?:) as a "
"'select', they operate somewhat differently. OpenCL selects based on "
"signedness of the condition operands, but GCC vectors use normal bool "
"conversions (that is, != 0)."
msgstr ""

#: ../../../LanguageExtensions.rst:496
msgid "Half-Precision Floating Point"
msgstr ""

#: ../../../LanguageExtensions.rst:498
msgid ""
"Clang supports two half-precision (16-bit) floating point types: ``__fp16`` "
"and ``_Float16``.  These types are supported in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:501
msgid ""
"``__fp16`` is supported on every target, as it is purely a storage format; "
"see below. ``_Float16`` is currently only supported on the following "
"targets, with further targets pending ABI standardization:"
msgstr ""

#: ../../../LanguageExtensions.rst:505
msgid "32-bit ARM"
msgstr ""

#: ../../../LanguageExtensions.rst:506
msgid "64-bit ARM (AArch64)"
msgstr ""

#: ../../../LanguageExtensions.rst:507
msgid "SPIR"
msgstr ""

#: ../../../LanguageExtensions.rst:509
msgid ""
"``_Float16`` will be supported on more targets as they define ABIs for it."
msgstr ""

#: ../../../LanguageExtensions.rst:511
msgid ""
"``__fp16`` is a storage and interchange format only.  This means that values "
"of ``__fp16`` are immediately promoted to (at least) ``float`` when used in "
"arithmetic operations, so that e.g. the result of adding two ``__fp16`` "
"values has type ``float``. The behavior of ``__fp16`` is specified by the "
"ARM C Language Extensions (`ACLE <http://infocenter.arm.com/help/topic/com."
"arm.doc.ihi0053d/IHI0053D_acle_2_1.pdf>`_). Clang uses the ``binary16`` "
"format from IEEE 754-2008 for ``__fp16``, not the ARM alternative format."
msgstr ""

#: ../../../LanguageExtensions.rst:518
msgid ""
"``_Float16`` is an extended floating-point type.  This means that, just like "
"arithmetic on ``float`` or ``double``, arithmetic on ``_Float16`` operands "
"is formally performed in the ``_Float16`` type, so that e.g. the result of "
"adding two ``_Float16`` values has type ``_Float16``.  The behavior of "
"``_Float16`` is specified by ISO/IEC TS 18661-3:2015 (\"Floating-point "
"extensions for C\").  As with ``__fp16``, Clang uses the ``binary16`` format "
"from IEEE 754-2008 for ``_Float16``."
msgstr ""

#: ../../../LanguageExtensions.rst:525
msgid ""
"``_Float16`` arithmetic will be performed using native half-precision "
"support when available on the target (e.g. on ARMv8.2a); otherwise it will "
"be performed at a higher precision (currently always ``float``) and then "
"truncated down to ``_Float16``.  Note that C and C++ allow intermediate "
"floating-point operands of an expression to be computed with greater "
"precision than is expressible in their type, so Clang may avoid intermediate "
"truncations in certain cases; this may lead to results that are inconsistent "
"with native arithmetic."
msgstr ""

#: ../../../LanguageExtensions.rst:533
msgid ""
"It is recommended that portable code use ``_Float16`` instead of ``__fp16``, "
"as it has been defined by the C standards committee and has behavior that is "
"more familiar to most programmers."
msgstr ""

#: ../../../LanguageExtensions.rst:537
msgid ""
"Because ``__fp16`` operands are always immediately promoted to ``float``, "
"the common real type of ``__fp16`` and ``_Float16`` for the purposes of the "
"usual arithmetic conversions is ``float``."
msgstr ""

#: ../../../LanguageExtensions.rst:541
msgid ""
"A literal can be given ``_Float16`` type using the suffix ``f16``. For "
"example, ``3.14f16``."
msgstr ""

#: ../../../LanguageExtensions.rst:544
msgid ""
"Because default argument promotion only applies to the standard floating-"
"point types, ``_Float16`` values are not promoted to ``double`` when passed "
"as variadic or untyped arguments.  As a consequence, some caution must be "
"taken when using certain library facilities with ``_Float16``; for example, "
"there is no ``printf`` format specifier for ``_Float16``, and (unlike "
"``float``) it will not be implicitly promoted to ``double`` when passed to "
"``printf``, so the programmer must explicitly cast it to ``double`` before "
"using it with an ``%f`` or similar specifier."
msgstr ""

#: ../../../LanguageExtensions.rst:553
msgid "Messages on ``deprecated`` and ``unavailable`` Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:555
msgid ""
"An optional string message can be added to the ``deprecated`` and "
"``unavailable`` attributes.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:562
msgid ""
"If the deprecated or unavailable declaration is used, the message will be "
"incorporated into the appropriate diagnostic:"
msgstr ""

#: ../../../LanguageExtensions.rst:572
msgid ""
"Query for this feature with "
"``__has_extension(attribute_deprecated_with_message)`` and "
"``__has_extension(attribute_unavailable_with_message)``."
msgstr ""

#: ../../../LanguageExtensions.rst:577
msgid "Attributes on Enumerators"
msgstr ""

#: ../../../LanguageExtensions.rst:579
msgid ""
"Clang allows attributes to be written on individual enumerators.  This "
"allows enumerators to be deprecated, made unavailable, etc.  The attribute "
"must appear after the enumerator name and before any initializer, like so:"
msgstr ""

#: ../../../LanguageExtensions.rst:592
msgid ""
"Attributes on the ``enum`` declaration do not apply to individual "
"enumerators."
msgstr ""

#: ../../../LanguageExtensions.rst:594
msgid "Query for this feature with ``__has_extension(enumerator_attributes)``."
msgstr ""

#: ../../../LanguageExtensions.rst:597
msgid "'User-Specified' System Frameworks"
msgstr ""

#: ../../../LanguageExtensions.rst:599
msgid ""
"Clang provides a mechanism by which frameworks can be built in such a way "
"that they will always be treated as being \"system frameworks\", even if "
"they are not present in a system framework directory.  This can be useful to "
"system framework developers who want to be able to test building other "
"applications with development builds of their framework, including the "
"manner in which the compiler changes warning behavior for system headers."
msgstr ""

#: ../../../LanguageExtensions.rst:606
msgid ""
"Framework developers can opt-in to this mechanism by creating a \"``."
"system_framework``\" file at the top-level of their framework.  That is, the "
"framework should have contents like:"
msgstr ""

#: ../../../LanguageExtensions.rst:618
msgid ""
"Clang will treat the presence of this file as an indicator that the "
"framework should be treated as a system framework, regardless of how it was "
"found in the framework search path.  For consistency, we recommend that such "
"files never be included in installed versions of the framework."
msgstr ""

#: ../../../LanguageExtensions.rst:624
msgid "Checks for Standard Language Features"
msgstr ""

#: ../../../LanguageExtensions.rst:626
msgid ""
"The ``__has_feature`` macro can be used to query if certain standard "
"language features are enabled.  The ``__has_extension`` macro can be used to "
"query if language features are available as an extension when compiling for "
"a standard which does not provide them.  The features which can be tested "
"are listed here."
msgstr ""

#: ../../../LanguageExtensions.rst:631
msgid ""
"Since Clang 3.4, the C++ SD-6 feature test macros are also supported. These "
"are macros with names of the form ``__cpp_<feature_name>``, and are intended "
"to be a portable way to query the supported features of the compiler. See "
"`the C++ status page <https://clang.llvm.org/cxx_status.html#ts>`_ for "
"information on the version of SD-6 supported by each Clang release, and the "
"macros provided by that revision of the recommendations."
msgstr ""

#: ../../../LanguageExtensions.rst:639
msgid "C++98"
msgstr ""

#: ../../../LanguageExtensions.rst:641
msgid ""
"The features listed below are part of the C++98 standard.  These features "
"are enabled by default when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:645
msgid "C++ exceptions"
msgstr ""

#: ../../../LanguageExtensions.rst:647
msgid ""
"Use ``__has_feature(cxx_exceptions)`` to determine if C++ exceptions have "
"been enabled.  For example, compiling code with ``-fno-exceptions`` disables "
"C++ exceptions."
msgstr ""

#: ../../../LanguageExtensions.rst:652
msgid "C++ RTTI"
msgstr ""

#: ../../../LanguageExtensions.rst:654
msgid ""
"Use ``__has_feature(cxx_rtti)`` to determine if C++ RTTI has been enabled.  "
"For example, compiling code with ``-fno-rtti`` disables the use of RTTI."
msgstr ""

#: ../../../LanguageExtensions.rst:658
msgid "C++11"
msgstr ""

#: ../../../LanguageExtensions.rst:660
msgid ""
"The features listed below are part of the C++11 standard.  As a result, all "
"these features are enabled with the ``-std=c++11`` or ``-std=gnu++11`` "
"option when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:665
msgid "C++11 SFINAE includes access control"
msgstr ""

#: ../../../LanguageExtensions.rst:667
msgid ""
"Use ``__has_feature(cxx_access_control_sfinae)`` or "
"``__has_extension(cxx_access_control_sfinae)`` to determine whether access-"
"control errors (e.g., calling a private constructor) are considered to be "
"template argument deduction errors (aka SFINAE errors), per `C++ DR1170 "
"<http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1170>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:674
msgid "C++11 alias templates"
msgstr ""

#: ../../../LanguageExtensions.rst:676
msgid ""
"Use ``__has_feature(cxx_alias_templates)`` or "
"``__has_extension(cxx_alias_templates)`` to determine if support for C++11's "
"alias declarations and alias templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:681
msgid "C++11 alignment specifiers"
msgstr ""

#: ../../../LanguageExtensions.rst:683
msgid ""
"Use ``__has_feature(cxx_alignas)`` or ``__has_extension(cxx_alignas)`` to "
"determine if support for alignment specifiers using ``alignas`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:686
msgid ""
"Use ``__has_feature(cxx_alignof)`` or ``__has_extension(cxx_alignof)`` to "
"determine if support for the ``alignof`` keyword is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:690
msgid "C++11 attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:692
msgid ""
"Use ``__has_feature(cxx_attributes)`` or ``__has_extension(cxx_attributes)`` "
"to determine if support for attribute parsing with C++11's square bracket "
"notation is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:697
msgid "C++11 generalized constant expressions"
msgstr ""

#: ../../../LanguageExtensions.rst:699
msgid ""
"Use ``__has_feature(cxx_constexpr)`` to determine if support for generalized "
"constant expressions (e.g., ``constexpr``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:703
msgid "C++11 ``decltype()``"
msgstr ""

#: ../../../LanguageExtensions.rst:705
msgid ""
"Use ``__has_feature(cxx_decltype)`` or ``__has_extension(cxx_decltype)`` to "
"determine if support for the ``decltype()`` specifier is enabled.  C++11's "
"``decltype`` does not require type-completeness of a function call "
"expression. Use ``__has_feature(cxx_decltype_incomplete_return_types)`` or "
"``__has_extension(cxx_decltype_incomplete_return_types)`` to determine if "
"support for this feature is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:713
msgid "C++11 default template arguments in function templates"
msgstr ""

#: ../../../LanguageExtensions.rst:715
msgid ""
"Use ``__has_feature(cxx_default_function_template_args)`` or "
"``__has_extension(cxx_default_function_template_args)`` to determine if "
"support for default template arguments in function templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:720
msgid "C++11 ``default``\\ ed functions"
msgstr ""

#: ../../../LanguageExtensions.rst:722
msgid ""
"Use ``__has_feature(cxx_defaulted_functions)`` or "
"``__has_extension(cxx_defaulted_functions)`` to determine if support for "
"defaulted function definitions (with ``= default``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:727
msgid "C++11 delegating constructors"
msgstr ""

#: ../../../LanguageExtensions.rst:729
msgid ""
"Use ``__has_feature(cxx_delegating_constructors)`` to determine if support "
"for delegating constructors is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:733
msgid "C++11 ``deleted`` functions"
msgstr ""

#: ../../../LanguageExtensions.rst:735
msgid ""
"Use ``__has_feature(cxx_deleted_functions)`` or "
"``__has_extension(cxx_deleted_functions)`` to determine if support for "
"deleted function definitions (with ``= delete``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:740
msgid "C++11 explicit conversion functions"
msgstr ""

#: ../../../LanguageExtensions.rst:742
msgid ""
"Use ``__has_feature(cxx_explicit_conversions)`` to determine if support for "
"``explicit`` conversion functions is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:746
msgid "C++11 generalized initializers"
msgstr ""

#: ../../../LanguageExtensions.rst:748
msgid ""
"Use ``__has_feature(cxx_generalized_initializers)`` to determine if support "
"for generalized initializers (using braced lists and ``std::"
"initializer_list``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:753
msgid "C++11 implicit move constructors/assignment operators"
msgstr ""

#: ../../../LanguageExtensions.rst:755
msgid ""
"Use ``__has_feature(cxx_implicit_moves)`` to determine if Clang will "
"implicitly generate move constructors and move assignment operators where "
"needed."
msgstr ""

#: ../../../LanguageExtensions.rst:759
msgid "C++11 inheriting constructors"
msgstr ""

#: ../../../LanguageExtensions.rst:761
msgid ""
"Use ``__has_feature(cxx_inheriting_constructors)`` to determine if support "
"for inheriting constructors is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:765
msgid "C++11 inline namespaces"
msgstr ""

#: ../../../LanguageExtensions.rst:767
msgid ""
"Use ``__has_feature(cxx_inline_namespaces)`` or "
"``__has_extension(cxx_inline_namespaces)`` to determine if support for "
"inline namespaces is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:772
msgid "C++11 lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:774
msgid ""
"Use ``__has_feature(cxx_lambdas)`` or ``__has_extension(cxx_lambdas)`` to "
"determine if support for lambdas is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:778
msgid "C++11 local and unnamed types as template arguments"
msgstr ""

#: ../../../LanguageExtensions.rst:780
msgid ""
"Use ``__has_feature(cxx_local_type_template_args)`` or "
"``__has_extension(cxx_local_type_template_args)`` to determine if support "
"for local and unnamed types as template arguments is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:785
msgid "C++11 noexcept"
msgstr ""

#: ../../../LanguageExtensions.rst:787
msgid ""
"Use ``__has_feature(cxx_noexcept)`` or ``__has_extension(cxx_noexcept)`` to "
"determine if support for noexcept exception specifications is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:791
msgid "C++11 in-class non-static data member initialization"
msgstr ""

#: ../../../LanguageExtensions.rst:793
msgid ""
"Use ``__has_feature(cxx_nonstatic_member_init)`` to determine whether in-"
"class initialization of non-static data members is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:797
msgid "C++11 ``nullptr``"
msgstr ""

#: ../../../LanguageExtensions.rst:799
msgid ""
"Use ``__has_feature(cxx_nullptr)`` or ``__has_extension(cxx_nullptr)`` to "
"determine if support for ``nullptr`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:803
msgid "C++11 ``override control``"
msgstr ""

#: ../../../LanguageExtensions.rst:805
msgid ""
"Use ``__has_feature(cxx_override_control)`` or "
"``__has_extension(cxx_override_control)`` to determine if support for the "
"override control keywords is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:810
msgid "C++11 reference-qualified functions"
msgstr ""

#: ../../../LanguageExtensions.rst:812
msgid ""
"Use ``__has_feature(cxx_reference_qualified_functions)`` or "
"``__has_extension(cxx_reference_qualified_functions)`` to determine if "
"support for reference-qualified functions (e.g., member functions with ``&`` "
"or ``&&`` applied to ``*this``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:818
msgid "C++11 range-based ``for`` loop"
msgstr ""

#: ../../../LanguageExtensions.rst:820
msgid ""
"Use ``__has_feature(cxx_range_for)`` or ``__has_extension(cxx_range_for)`` "
"to determine if support for the range-based for loop is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:824
msgid "C++11 raw string literals"
msgstr ""

#: ../../../LanguageExtensions.rst:826
msgid ""
"Use ``__has_feature(cxx_raw_string_literals)`` to determine if support for "
"raw string literals (e.g., ``R\"x(foo\\bar)x\"``) is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:830
msgid "C++11 rvalue references"
msgstr ""

#: ../../../LanguageExtensions.rst:832
msgid ""
"Use ``__has_feature(cxx_rvalue_references)`` or "
"``__has_extension(cxx_rvalue_references)`` to determine if support for "
"rvalue references is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:837
msgid "C++11 ``static_assert()``"
msgstr ""

#: ../../../LanguageExtensions.rst:839
msgid ""
"Use ``__has_feature(cxx_static_assert)`` or "
"``__has_extension(cxx_static_assert)`` to determine if support for compile-"
"time assertions using ``static_assert`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:844
msgid "C++11 ``thread_local``"
msgstr ""

#: ../../../LanguageExtensions.rst:846
msgid ""
"Use ``__has_feature(cxx_thread_local)`` to determine if support for "
"``thread_local`` variables is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:850
msgid "C++11 type inference"
msgstr ""

#: ../../../LanguageExtensions.rst:852
msgid ""
"Use ``__has_feature(cxx_auto_type)`` or ``__has_extension(cxx_auto_type)`` "
"to determine C++11 type inference is supported using the ``auto`` "
"specifier.  If this is disabled, ``auto`` will instead be a storage class "
"specifier, as in C or C++98."
msgstr ""

#: ../../../LanguageExtensions.rst:858
msgid "C++11 strongly typed enumerations"
msgstr ""

#: ../../../LanguageExtensions.rst:860
msgid ""
"Use ``__has_feature(cxx_strong_enums)`` or "
"``__has_extension(cxx_strong_enums)`` to determine if support for strongly "
"typed, scoped enumerations is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:865
msgid "C++11 trailing return type"
msgstr ""

#: ../../../LanguageExtensions.rst:867
msgid ""
"Use ``__has_feature(cxx_trailing_return)`` or "
"``__has_extension(cxx_trailing_return)`` to determine if support for the "
"alternate function declaration syntax with trailing return type is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:872
msgid "C++11 Unicode string literals"
msgstr ""

#: ../../../LanguageExtensions.rst:874
msgid ""
"Use ``__has_feature(cxx_unicode_literals)`` to determine if support for "
"Unicode string literals is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:878
msgid "C++11 unrestricted unions"
msgstr ""

#: ../../../LanguageExtensions.rst:880
msgid ""
"Use ``__has_feature(cxx_unrestricted_unions)`` to determine if support for "
"unrestricted unions is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:884
msgid "C++11 user-defined literals"
msgstr ""

#: ../../../LanguageExtensions.rst:886
msgid ""
"Use ``__has_feature(cxx_user_literals)`` to determine if support for user-"
"defined literals is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:890
msgid "C++11 variadic templates"
msgstr ""

#: ../../../LanguageExtensions.rst:892
msgid ""
"Use ``__has_feature(cxx_variadic_templates)`` or "
"``__has_extension(cxx_variadic_templates)`` to determine if support for "
"variadic templates is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:897
msgid "C++14"
msgstr ""

#: ../../../LanguageExtensions.rst:899
msgid ""
"The features listed below are part of the C++14 standard.  As a result, all "
"these features are enabled with the ``-std=C++14`` or ``-std=gnu++14`` "
"option when compiling C++ code."
msgstr ""

#: ../../../LanguageExtensions.rst:904
msgid "C++14 binary literals"
msgstr ""

#: ../../../LanguageExtensions.rst:906
msgid ""
"Use ``__has_feature(cxx_binary_literals)`` or "
"``__has_extension(cxx_binary_literals)`` to determine whether binary "
"literals (for instance, ``0b10010``) are recognized. Clang supports this "
"feature as an extension in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:912
msgid "C++14 contextual conversions"
msgstr ""

#: ../../../LanguageExtensions.rst:914
msgid ""
"Use ``__has_feature(cxx_contextual_conversions)`` or "
"``__has_extension(cxx_contextual_conversions)`` to determine if the C++14 "
"rules are used when performing an implicit conversion for an array bound in "
"a *new-expression*, the operand of a *delete-expression*, an integral "
"constant expression, or a condition in a ``switch`` statement."
msgstr ""

#: ../../../LanguageExtensions.rst:921
msgid "C++14 decltype(auto)"
msgstr ""

#: ../../../LanguageExtensions.rst:923
msgid ""
"Use ``__has_feature(cxx_decltype_auto)`` or "
"``__has_extension(cxx_decltype_auto)`` to determine if support for the "
"``decltype(auto)`` placeholder type is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:928
msgid "C++14 default initializers for aggregates"
msgstr ""

#: ../../../LanguageExtensions.rst:930
msgid ""
"Use ``__has_feature(cxx_aggregate_nsdmi)`` or "
"``__has_extension(cxx_aggregate_nsdmi)`` to determine if support for default "
"initializers in aggregate members is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:935
msgid "C++14 digit separators"
msgstr ""

#: ../../../LanguageExtensions.rst:937
msgid ""
"Use ``__cpp_digit_separators`` to determine if support for digit separators "
"using single quotes (for instance, ``10'000``) is enabled. At this time, "
"there is no corresponding ``__has_feature`` name"
msgstr ""

#: ../../../LanguageExtensions.rst:942
msgid "C++14 generalized lambda capture"
msgstr ""

#: ../../../LanguageExtensions.rst:944
msgid ""
"Use ``__has_feature(cxx_init_captures)`` or "
"``__has_extension(cxx_init_captures)`` to determine if support for lambda "
"captures with explicit initializers is enabled (for instance, ``[n(0)] "
"{ return ++n; }``)."
msgstr ""

#: ../../../LanguageExtensions.rst:950
msgid "C++14 generic lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:952
msgid ""
"Use ``__has_feature(cxx_generic_lambdas)`` or "
"``__has_extension(cxx_generic_lambdas)`` to determine if support for generic "
"(polymorphic) lambdas is enabled (for instance, ``[] (auto x) { return x + "
"1; }``)."
msgstr ""

#: ../../../LanguageExtensions.rst:958
msgid "C++14 relaxed constexpr"
msgstr ""

#: ../../../LanguageExtensions.rst:960
msgid ""
"Use ``__has_feature(cxx_relaxed_constexpr)`` or "
"``__has_extension(cxx_relaxed_constexpr)`` to determine if variable "
"declarations, local variable modification, and control flow constructs are "
"permitted in ``constexpr`` functions."
msgstr ""

#: ../../../LanguageExtensions.rst:966
msgid "C++14 return type deduction"
msgstr ""

#: ../../../LanguageExtensions.rst:968
msgid ""
"Use ``__has_feature(cxx_return_type_deduction)`` or "
"``__has_extension(cxx_return_type_deduction)`` to determine if support for "
"return type deduction for functions (using ``auto`` as a return type) is "
"enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:974
msgid "C++14 runtime-sized arrays"
msgstr ""

#: ../../../LanguageExtensions.rst:976
msgid ""
"Use ``__has_feature(cxx_runtime_array)`` or "
"``__has_extension(cxx_runtime_array)`` to determine if support for arrays of "
"runtime bound (a restricted form of variable-length arrays) is enabled. "
"Clang's implementation of this feature is incomplete."
msgstr ""

#: ../../../LanguageExtensions.rst:983
msgid "C++14 variable templates"
msgstr ""

#: ../../../LanguageExtensions.rst:985
msgid ""
"Use ``__has_feature(cxx_variable_templates)`` or "
"``__has_extension(cxx_variable_templates)`` to determine if support for "
"templated variable declarations is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:990
msgid "C11"
msgstr ""

#: ../../../LanguageExtensions.rst:992
msgid ""
"The features listed below are part of the C11 standard.  As a result, all "
"these features are enabled with the ``-std=c11`` or ``-std=gnu11`` option "
"when compiling C code.  Additionally, because these features are all "
"backward-compatible, they are available as extensions in all language modes."
msgstr ""

#: ../../../LanguageExtensions.rst:998
msgid "C11 alignment specifiers"
msgstr ""

#: ../../../LanguageExtensions.rst:1000
msgid ""
"Use ``__has_feature(c_alignas)`` or ``__has_extension(c_alignas)`` to "
"determine if support for alignment specifiers using ``_Alignas`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1003
msgid ""
"Use ``__has_feature(c_alignof)`` or ``__has_extension(c_alignof)`` to "
"determine if support for the ``_Alignof`` keyword is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1007
msgid "C11 atomic operations"
msgstr ""

#: ../../../LanguageExtensions.rst:1009
msgid ""
"Use ``__has_feature(c_atomic)`` or ``__has_extension(c_atomic)`` to "
"determine if support for atomic types using ``_Atomic`` is enabled.  Clang "
"also provides :ref:`a set of builtins <langext-__c11_atomic>` which can be "
"used to implement the ``<stdatomic.h>`` operations on ``_Atomic`` types. Use "
"``__has_include(<stdatomic.h>)`` to determine if C11's ``<stdatomic.h>`` "
"header is available."
msgstr ""

#: ../../../LanguageExtensions.rst:1016
msgid ""
"Clang will use the system's ``<stdatomic.h>`` header when one is available, "
"and will otherwise use its own. When using its own, implementations of the "
"atomic operations are provided as macros. In the cases where C11 also "
"requires a real function, this header provides only the declaration of that "
"function (along with a shadowing macro implementation), and you must link to "
"a library which provides a definition of the function if you use it instead "
"of the macro."
msgstr ""

#: ../../../LanguageExtensions.rst:1024
msgid "C11 generic selections"
msgstr ""

#: ../../../LanguageExtensions.rst:1026
msgid ""
"Use ``__has_feature(c_generic_selections)`` or "
"``__has_extension(c_generic_selections)`` to determine if support for "
"generic selections is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1030
msgid ""
"As an extension, the C11 generic selection expression is available in all "
"languages supported by Clang.  The syntax is the same as that given in the "
"C11 standard."
msgstr ""

#: ../../../LanguageExtensions.rst:1034
msgid ""
"In C, type compatibility is decided according to the rules given in the "
"appropriate standard, but in C++, which lacks the type compatibility rules "
"used in C, types are considered compatible only if they are equivalent."
msgstr ""

#: ../../../LanguageExtensions.rst:1039
msgid "C11 ``_Static_assert()``"
msgstr ""

#: ../../../LanguageExtensions.rst:1041
msgid ""
"Use ``__has_feature(c_static_assert)`` or "
"``__has_extension(c_static_assert)`` to determine if support for compile-"
"time assertions using ``_Static_assert`` is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1046
msgid "C11 ``_Thread_local``"
msgstr ""

#: ../../../LanguageExtensions.rst:1048
msgid ""
"Use ``__has_feature(c_thread_local)`` or ``__has_extension(c_thread_local)`` "
"to determine if support for ``_Thread_local`` variables is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1052
msgid "Modules"
msgstr ""

#: ../../../LanguageExtensions.rst:1054
msgid ""
"Use ``__has_feature(modules)`` to determine if Modules have been enabled. "
"For example, compiling code with ``-fmodules`` enables the use of Modules."
msgstr ""

#: ../../../LanguageExtensions.rst:1057
msgid ""
"More information could be found `here <https://clang.llvm.org/docs/Modules."
"html>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1060
msgid "Type Trait Primitives"
msgstr ""

#: ../../../LanguageExtensions.rst:1062
msgid ""
"Type trait primitives are special builtin constant expressions that can be "
"used by the standard C++ library to facilitate or simplify the "
"implementation of user-facing type traits in the <type_traits> header."
msgstr ""

#: ../../../LanguageExtensions.rst:1066
msgid ""
"They are not intended to be used directly by user code because they are "
"implementation-defined and subject to change -- as such they're tied closely "
"to the supported set of system headers, currently:"
msgstr ""

#: ../../../LanguageExtensions.rst:1070
msgid "LLVM's own libc++"
msgstr ""

#: ../../../LanguageExtensions.rst:1071
msgid "GNU libstdc++"
msgstr ""

#: ../../../LanguageExtensions.rst:1072
msgid "The Microsoft standard C++ library"
msgstr ""

#: ../../../LanguageExtensions.rst:1074
msgid ""
"Clang supports the `GNU C++ type traits <https://gcc.gnu.org/onlinedocs/gcc/"
"Type-Traits.html>`_ and a subset of the `Microsoft Visual C++ type traits "
"<https://msdn.microsoft.com/en-us/library/ms177194(v=VS.100).aspx>`_, as "
"well as nearly all of the `Embarcadero C++ type traits <http://docwiki."
"embarcadero.com/RADStudio/Rio/en/Type_Trait_Functions_(C%2B%2B11)_Index>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1082
msgid ""
"The following type trait primitives are supported by Clang. Those traits "
"marked (C++) provide implementations for type traits specified by the C++ "
"standard; ``__X(...)`` has the same semantics and constraints as the "
"corresponding ``std::X_t<...>`` or ``std::X_v<...>`` type trait."
msgstr ""

#: ../../../LanguageExtensions.rst:1087
msgid ""
"``__array_rank(type)`` (Embarcadero): Returns the number of levels of array "
"in the type ``type``: ``0`` if ``type`` is not an array type, and "
"``__array_rank(element) + 1`` if ``type`` is an array of ``element``."
msgstr ""

#: ../../../LanguageExtensions.rst:1091
msgid ""
"``__array_extent(type, dim)`` (Embarcadero): The ``dim``'th array bound in "
"the type ``type``, or ``0`` if ``dim >= __array_rank(type)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1094
msgid ""
"``__has_nothrow_assign`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_nothrow_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1096
msgid ""
"``__has_nothrow_move_assign`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1098
msgid ""
"``__has_nothrow_copy`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1100
msgid ""
"``__has_nothrow_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_nothrow_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1102
msgid ""
"``__has_trivial_assign`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_trivially_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1104
msgid ""
"``__has_trivial_move_assign`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_assignable`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1106
msgid ""
"``__has_trivial_copy`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1108
msgid ""
"``__has_trivial_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1110
msgid ""
"``__has_trivial_move_constructor`` (GNU, Microsoft): Deprecated, use "
"``__is_trivially_constructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1112
msgid ""
"``__has_trivial_destructor`` (GNU, Microsoft, Embarcadero): Deprecated, use "
"``__is_trivially_destructible`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1114
msgid "``__has_unique_object_representations`` (C++, GNU)"
msgstr ""

#: ../../../LanguageExtensions.rst:1115
msgid "``__has_virtual_destructor`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1116
msgid "``__is_abstract`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1117
msgid "``__is_aggregate`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1118
msgid "``__is_arithmetic`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1119
msgid "``__is_array`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1120
msgid "``__is_assignable`` (C++, MSVC 2015)"
msgstr ""

#: ../../../LanguageExtensions.rst:1121
msgid "``__is_base_of`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1122
msgid "``__is_class`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1123
msgid ""
"``__is_complete_type(type)`` (Embarcadero): Return ``true`` if ``type`` is a "
"complete type. Warning: this trait is dangerous because it can return "
"different values at different points in the same program."
msgstr ""

#: ../../../LanguageExtensions.rst:1127
msgid "``__is_compound`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1128
msgid "``__is_const`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1129
msgid "``__is_constructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1130
msgid "``__is_convertible`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1131
msgid "``__is_convertible_to`` (Microsoft): Synonym for ``__is_convertible``."
msgstr ""

#: ../../../LanguageExtensions.rst:1133
msgid ""
"``__is_destructible`` (C++, MSVC 2013): Only available in ``-fms-"
"extensions`` mode."
msgstr ""

#: ../../../LanguageExtensions.rst:1135
msgid "``__is_empty`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1136
msgid "``__is_enum`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1137
msgid "``__is_final`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1138
msgid "``__is_floating_point`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1139
msgid "``__is_function`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1140
msgid "``__is_fundamental`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1141
msgid "``__is_integral`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1142
msgid ""
"``__is_interface_class`` (Microsoft): Returns ``false``, even for types "
"defined with ``__interface``."
msgstr ""

#: ../../../LanguageExtensions.rst:1144
msgid "``__is_literal`` (Clang): Synonym for ``__is_literal_type``."
msgstr ""

#: ../../../LanguageExtensions.rst:1146
msgid ""
"``__is_literal_type`` (C++, GNU, Microsoft): Note, the corresponding "
"standard trait was deprecated in C++17 and removed in C++20."
msgstr ""

#: ../../../LanguageExtensions.rst:1149
msgid "``__is_lvalue_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1150
msgid "``__is_member_object_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1151
msgid "``__is_member_function_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1152
msgid "``__is_member_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1153
msgid "``__is_nothrow_assignable`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1154
msgid "``__is_nothrow_constructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1155
msgid ""
"``__is_nothrow_destructible`` (C++, MSVC 2013) Only available in ``-fms-"
"extensions`` mode."
msgstr ""

#: ../../../LanguageExtensions.rst:1157
msgid "``__is_object`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1158
msgid ""
"``__is_pod`` (C++, GNU, Microsoft, Embarcadero): Note, the corresponding "
"standard trait was deprecated in C++20."
msgstr ""

#: ../../../LanguageExtensions.rst:1160
msgid "``__is_pointer`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1161
msgid "``__is_polymorphic`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1162
msgid "``__is_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1163
msgid "``__is_rvalue_reference`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1164
msgid "``__is_same`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1165
msgid "``__is_same_as`` (GCC): Synonym for ``__is_same``."
msgstr ""

#: ../../../LanguageExtensions.rst:1166
msgid "``__is_scalar`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1167
msgid "``__is_sealed`` (Microsoft): Synonym for ``__is_final``."
msgstr ""

#: ../../../LanguageExtensions.rst:1169
msgid ""
"``__is_signed`` (C++, Embarcadero): Returns false for enumeration types, and "
"returns true for floating-point types. Note, before Clang 10, returned true "
"for enumeration types if the underlying type was signed, and returned false "
"for floating-point types."
msgstr ""

#: ../../../LanguageExtensions.rst:1171
msgid "``__is_standard_layout`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1172
msgid "``__is_trivial`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1173
msgid "``__is_trivially_assignable`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1174
msgid "``__is_trivially_constructible`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1175
msgid "``__is_trivially_copyable`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1176
msgid "``__is_trivially_destructible`` (C++, MSVC 2013)"
msgstr ""

#: ../../../LanguageExtensions.rst:1177
msgid "``__is_union`` (C++, GNU, Microsoft, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1178
msgid ""
"``__is_unsigned`` (C++, Embarcadero) Note that this currently returns true "
"for enumeration types if the underlying type is unsigned, in violation of "
"the requirements for ``std::is_unsigned``. This behavior is likely to change "
"in a future version of Clang."
msgstr ""

#: ../../../LanguageExtensions.rst:1182
msgid "``__is_void`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1183
msgid "``__is_volatile`` (C++, Embarcadero)"
msgstr ""

#: ../../../LanguageExtensions.rst:1184
msgid ""
"``__reference_binds_to_temporary(T, U)`` (Clang):  Determines whether a "
"reference of type ``T`` bound to an expression of type ``U`` would bind to a "
"materialized temporary object. If ``T`` is not a reference type the result "
"is false. Note this trait will also return false when the initialization of "
"``T`` from ``U`` is ill-formed."
msgstr ""

#: ../../../LanguageExtensions.rst:1189
msgid "``__underlying_type`` (C++, GNU, Microsoft)"
msgstr ""

#: ../../../LanguageExtensions.rst:1191
msgid "In addition, the following expression traits are supported:"
msgstr ""

#: ../../../LanguageExtensions.rst:1193
msgid ""
"``__is_lvalue_expr(e)`` (Embarcadero): Returns true if ``e`` is an lvalue "
"expression. Deprecated, use ``__is_lvalue_reference(decltype((e)))`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1196
msgid ""
"``__is_rvalue_expr(e)`` (Embarcadero): Returns true if ``e`` is a prvalue "
"expression. Deprecated, use ``!__is_reference(decltype((e)))`` instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1200
msgid ""
"There are multiple ways to detect support for a type trait ``__X`` in the "
"compiler, depending on the oldest version of Clang you wish to support."
msgstr ""

#: ../../../LanguageExtensions.rst:1203
msgid "From Clang 10 onwards, ``__has_builtin(__X)`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:1204
msgid "From Clang 6 onwards, ``!__is_identifier(__X)`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:1205
msgid ""
"From Clang 3 onwards, ``__has_feature(X)`` can be used, but only supports "
"the following traits:"
msgstr ""

#: ../../../LanguageExtensions.rst:1208
msgid "``__has_nothrow_assign``"
msgstr ""

#: ../../../LanguageExtensions.rst:1209
msgid "``__has_nothrow_copy``"
msgstr ""

#: ../../../LanguageExtensions.rst:1210
msgid "``__has_nothrow_constructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1211
msgid "``__has_trivial_assign``"
msgstr ""

#: ../../../LanguageExtensions.rst:1212
msgid "``__has_trivial_copy``"
msgstr ""

#: ../../../LanguageExtensions.rst:1213
msgid "``__has_trivial_constructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1214
msgid "``__has_trivial_destructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1215
msgid "``__has_virtual_destructor``"
msgstr ""

#: ../../../LanguageExtensions.rst:1216
msgid "``__is_abstract``"
msgstr ""

#: ../../../LanguageExtensions.rst:1217
msgid "``__is_base_of``"
msgstr ""

#: ../../../LanguageExtensions.rst:1218
msgid "``__is_class``"
msgstr ""

#: ../../../LanguageExtensions.rst:1219
msgid "``__is_constructible``"
msgstr ""

#: ../../../LanguageExtensions.rst:1220
msgid "``__is_convertible_to``"
msgstr ""

#: ../../../LanguageExtensions.rst:1221
msgid "``__is_empty``"
msgstr ""

#: ../../../LanguageExtensions.rst:1222
msgid "``__is_enum``"
msgstr ""

#: ../../../LanguageExtensions.rst:1223
msgid "``__is_final``"
msgstr ""

#: ../../../LanguageExtensions.rst:1224
msgid "``__is_literal``"
msgstr ""

#: ../../../LanguageExtensions.rst:1225
msgid "``__is_standard_layout``"
msgstr ""

#: ../../../LanguageExtensions.rst:1226
msgid "``__is_pod``"
msgstr ""

#: ../../../LanguageExtensions.rst:1227
msgid "``__is_polymorphic``"
msgstr ""

#: ../../../LanguageExtensions.rst:1228
msgid "``__is_sealed``"
msgstr ""

#: ../../../LanguageExtensions.rst:1229
msgid "``__is_trivial``"
msgstr ""

#: ../../../LanguageExtensions.rst:1230
msgid "``__is_trivially_assignable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1231
msgid "``__is_trivially_constructible``"
msgstr ""

#: ../../../LanguageExtensions.rst:1232
msgid "``__is_trivially_copyable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1233
msgid "``__is_union``"
msgstr ""

#: ../../../LanguageExtensions.rst:1234
msgid "``__underlying_type``"
msgstr ""

#: ../../../LanguageExtensions.rst:1236
msgid ""
"A simplistic usage example as might be seen in standard C++ headers follows:"
msgstr ""

#: ../../../LanguageExtensions.rst:1250
msgid "Blocks"
msgstr ""

#: ../../../LanguageExtensions.rst:1252
msgid ""
"The syntax and high level language feature description is in :doc:"
"`BlockLanguageSpec<BlockLanguageSpec>`. Implementation and ABI details for "
"the clang implementation are in :doc:`Block-ABI-Apple<Block-ABI-Apple>`."
msgstr ""

#: ../../../LanguageExtensions.rst:1256
msgid "Query for this feature with ``__has_extension(blocks)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1259
msgid "Objective-C Features"
msgstr ""

#: ../../../LanguageExtensions.rst:1262
msgid "Related result types"
msgstr ""

#: ../../../LanguageExtensions.rst:1264
msgid ""
"According to Cocoa conventions, Objective-C methods with certain names "
"(\"``init``\", \"``alloc``\", etc.) always return objects that are an "
"instance of the receiving class's type.  Such methods are said to have a "
"\"related result type\", meaning that a message send to one of these methods "
"will have the same static type as an instance of the receiver class.  For "
"example, given the following classes:"
msgstr ""

#: ../../../LanguageExtensions.rst:1281
msgid "and this common initialization pattern"
msgstr ""

#: ../../../LanguageExtensions.rst:1287
msgid ""
"the type of the expression ``[NSArray alloc]`` is ``NSArray*`` because "
"``alloc`` implicitly has a related result type.  Similarly, the type of the "
"expression ``[[NSArray alloc] init]`` is ``NSArray*``, since ``init`` has a "
"related result type and its receiver is known to have the type ``NSArray "
"*``. If neither ``alloc`` nor ``init`` had a related result type, the "
"expressions would have had type ``id``, as declared in the method signature."
msgstr ""

#: ../../../LanguageExtensions.rst:1294
msgid ""
"A method with a related result type can be declared by using the type "
"``instancetype`` as its result type.  ``instancetype`` is a contextual "
"keyword that is only permitted in the result type of an Objective-C method, "
"e.g."
msgstr ""

#: ../../../LanguageExtensions.rst:1304
msgid ""
"The related result type can also be inferred for some methods.  To determine "
"whether a method has an inferred related result type, the first word in the "
"camel-case selector (e.g., \"``init``\" in \"``initWithObjects``\") is "
"considered, and the method will have a related result type if its return "
"type is compatible with the type of its class and if:"
msgstr ""

#: ../../../LanguageExtensions.rst:1310
msgid ""
"the first word is \"``alloc``\" or \"``new``\", and the method is a class "
"method, or"
msgstr ""

#: ../../../LanguageExtensions.rst:1313
msgid ""
"the first word is \"``autorelease``\", \"``init``\", \"``retain``\", or "
"\"``self``\", and the method is an instance method."
msgstr ""

#: ../../../LanguageExtensions.rst:1316
msgid ""
"If a method with a related result type is overridden by a subclass method, "
"the subclass method must also return a type that is compatible with the "
"subclass type.  For example:"
msgstr ""

#: ../../../LanguageExtensions.rst:1326
msgid ""
"Related result types only affect the type of a message send or property "
"access via the given method.  In all other respects, a method with a related "
"result type is treated the same way as method that returns ``id``."
msgstr ""

#: ../../../LanguageExtensions.rst:1330
msgid ""
"Use ``__has_feature(objc_instancetype)`` to determine whether the "
"``instancetype`` contextual keyword is available."
msgstr ""

#: ../../../LanguageExtensions.rst:1334
msgid "Automatic reference counting"
msgstr ""

#: ../../../LanguageExtensions.rst:1336
msgid ""
"Clang provides support for :doc:`automated reference counting "
"<AutomaticReferenceCounting>` in Objective-C, which eliminates the need for "
"manual ``retain``/``release``/``autorelease`` message sends.  There are "
"three feature macros associated with automatic reference counting: "
"``__has_feature(objc_arc)`` indicates the availability of automated "
"reference counting in general, while ``__has_feature(objc_arc_weak)`` "
"indicates that automated reference counting also includes support for "
"``__weak`` pointers to Objective-C objects. "
"``__has_feature(objc_arc_fields)`` indicates that C structs are allowed to "
"have fields that are pointers to Objective-C objects managed by automatic "
"reference counting."
msgstr ""

#: ../../../LanguageExtensions.rst:1350
msgid "Weak references"
msgstr ""

#: ../../../LanguageExtensions.rst:1352
msgid ""
"Clang supports ARC-style weak and unsafe references in Objective-C even "
"outside of ARC mode.  Weak references must be explicitly enabled with the ``-"
"fobjc-weak`` option; use ``__has_feature((objc_arc_weak))`` to test whether "
"they are enabled.  Unsafe references are enabled unconditionally.  ARC-style "
"weak and unsafe references cannot be used when Objective-C garbage "
"collection is enabled."
msgstr ""

#: ../../../LanguageExtensions.rst:1359
msgid ""
"Except as noted below, the language rules for the ``__weak`` and "
"``__unsafe_unretained`` qualifiers (and the ``weak`` and "
"``unsafe_unretained`` property attributes) are just as laid out in the :doc:"
"`ARC specification <AutomaticReferenceCounting>`. In particular, note that "
"some classes do not support forming weak references to their instances, and "
"note that special care must be taken when storing weak references in memory "
"where initialization and deinitialization are outside the responsibility of "
"the compiler (such as in ``malloc``-ed memory)."
msgstr ""

#: ../../../LanguageExtensions.rst:1369
msgid ""
"Loading from a ``__weak`` variable always implicitly retains the loaded "
"value.  In non-ARC modes, this retain is normally balanced by an implicit "
"autorelease.  This autorelease can be suppressed by performing the load in "
"the receiver position of a ``-retain`` message send (e.g. ``[weakReference "
"retain]``); note that this performs only a single retain (the retain done "
"when primitively loading from the weak reference)."
msgstr ""

#: ../../../LanguageExtensions.rst:1377
msgid ""
"For the most part, ``__unsafe_unretained`` in non-ARC modes is just the "
"default behavior of variables and therefore is not needed.  However, it does "
"have an effect on the semantics of block captures: normally, copying a block "
"which captures an Objective-C object or block pointer causes the captured "
"pointer to be retained or copied, respectively, but that behavior is "
"suppressed when the captured variable is qualified with "
"``__unsafe_unretained``."
msgstr ""

#: ../../../LanguageExtensions.rst:1385
msgid ""
"Note that the ``__weak`` qualifier formerly meant the GC qualifier in all "
"non-ARC modes and was silently ignored outside of GC modes.  It now means "
"the ARC-style qualifier in all non-GC modes and is no longer allowed if not "
"enabled by either ``-fobjc-arc`` or ``-fobjc-weak``. It is expected that ``-"
"fobjc-weak`` will eventually be enabled by default in all non-GC Objective-C "
"modes."
msgstr ""

#: ../../../LanguageExtensions.rst:1395
msgid "Enumerations with a fixed underlying type"
msgstr ""

#: ../../../LanguageExtensions.rst:1397
msgid ""
"Clang provides support for C++11 enumerations with a fixed underlying type "
"within Objective-C.  For example, one can write an enumeration type as:"
msgstr ""

#: ../../../LanguageExtensions.rst:1404
msgid ""
"This specifies that the underlying type, which is used to store the "
"enumeration value, is ``unsigned char``."
msgstr ""

#: ../../../LanguageExtensions.rst:1407
msgid ""
"Use ``__has_feature(objc_fixed_enum)`` to determine whether support for "
"fixed underlying types is available in Objective-C."
msgstr ""

#: ../../../LanguageExtensions.rst:1411
msgid "Interoperability with C++11 lambdas"
msgstr ""

#: ../../../LanguageExtensions.rst:1413
msgid ""
"Clang provides interoperability between C++11 lambdas and blocks-based APIs, "
"by permitting a lambda to be implicitly converted to a block pointer with "
"the corresponding signature.  For example, consider an API such as "
"``NSArray``'s array-sorting method:"
msgstr ""

#: ../../../LanguageExtensions.rst:1422
msgid ""
"``NSComparator`` is simply a typedef for the block pointer "
"``NSComparisonResult (^)(id, id)``, and parameters of this type are "
"generally provided with block literals as arguments.  However, one can also "
"use a C++11 lambda so long as it provides the same signature (in this case, "
"accepting two parameters of type ``id`` and returning an "
"``NSComparisonResult``):"
msgstr ""

#: ../../../LanguageExtensions.rst:1444
msgid ""
"This code relies on an implicit conversion from the type of the lambda "
"expression (an unnamed, local class type called the *closure type*) to the "
"corresponding block pointer type.  The conversion itself is expressed by a "
"conversion operator in that closure type that produces a block pointer with "
"the same signature as the lambda itself, e.g.,"
msgstr ""

#: ../../../LanguageExtensions.rst:1454
msgid ""
"This conversion function returns a new block that simply forwards the two "
"parameters to the lambda object (which it captures by copy), then returns "
"the result.  The returned block is first copied (with ``Block_copy``) and "
"then autoreleased.  As an optimization, if a lambda expression is "
"immediately converted to a block pointer (as in the first example, above), "
"then the block is not copied and autoreleased: rather, it is given the same "
"lifetime as a block literal written at that point in the program, which "
"avoids the overhead of copying a block to the heap in the common case."
msgstr ""

#: ../../../LanguageExtensions.rst:1463
msgid ""
"The conversion from a lambda to a block pointer is only available in "
"Objective-C++, and not in C++ with blocks, due to its use of Objective-C "
"memory management (autorelease)."
msgstr ""

#: ../../../LanguageExtensions.rst:1468
msgid "Object Literals and Subscripting"
msgstr ""

#: ../../../LanguageExtensions.rst:1470
msgid ""
"Clang provides support for :doc:`Object Literals and Subscripting "
"<ObjectiveCLiterals>` in Objective-C, which simplifies common Objective-C "
"programming patterns, makes programs more concise, and improves the safety "
"of container creation.  There are several feature macros associated with "
"object literals and subscripting: ``__has_feature(objc_array_literals)`` "
"tests the availability of array literals; "
"``__has_feature(objc_dictionary_literals)`` tests the availability of "
"dictionary literals; ``__has_feature(objc_subscripting)`` tests the "
"availability of object subscripting."
msgstr ""

#: ../../../LanguageExtensions.rst:1481
msgid "Objective-C Autosynthesis of Properties"
msgstr ""

#: ../../../LanguageExtensions.rst:1483
msgid ""
"Clang provides support for autosynthesis of declared properties.  Using this "
"feature, clang provides default synthesis of those properties not declared "
"@dynamic and not having user provided backing getter and setter methods. "
"``__has_feature(objc_default_synthesize_properties)`` checks for "
"availability of this feature in version of clang being used."
msgstr ""

#: ../../../LanguageExtensions.rst:1492
msgid "Objective-C retaining behavior attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:1494
msgid ""
"In Objective-C, functions and methods are generally assumed to follow the "
"`Cocoa Memory Management <https://developer.apple.com/library/mac/"
"#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html>`_ "
"conventions for ownership of object arguments and return values. However, "
"there are exceptions, and so Clang provides attributes to allow these "
"exceptions to be documented. This are used by ARC and the `static analyzer "
"<https://clang-analyzer.llvm.org>`_ Some exceptions may be better described "
"using the ``objc_method_family`` attribute instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1503
msgid ""
"**Usage**: The ``ns_returns_retained``, ``ns_returns_not_retained``, "
"``ns_returns_autoreleased``, ``cf_returns_retained``, and "
"``cf_returns_not_retained`` attributes can be placed on methods and "
"functions that return Objective-C or CoreFoundation objects. They are "
"commonly placed at the end of a function prototype or method declaration:"
msgstr ""

#: ../../../LanguageExtensions.rst:1515
msgid ""
"The ``*_returns_retained`` attributes specify that the returned object has a "
"+1 retain count.  The ``*_returns_not_retained`` attributes specify that the "
"return object has a +0 retain count, even if the normal convention for its "
"selector would be +1.  ``ns_returns_autoreleased`` specifies that the "
"returned object is +0, but is guaranteed to live at least as long as the "
"next flush of an autorelease pool."
msgstr ""

#: ../../../LanguageExtensions.rst:1522
msgid ""
"**Usage**: The ``ns_consumed`` and ``cf_consumed`` attributes can be placed "
"on an parameter declaration; they specify that the argument is expected to "
"have a +1 retain count, which will be balanced in some way by the function "
"or method. The ``ns_consumes_self`` attribute can only be placed on an "
"Objective-C method; it specifies that the method expects its ``self`` "
"parameter to have a +1 retain count, which it will balance in some way."
msgstr ""

#: ../../../LanguageExtensions.rst:1536
msgid ""
"Further examples of these attributes are available in the static analyzer's "
"`list of annotations for analysis <https://clang-analyzer.llvm.org/"
"annotations.html#cocoa_mem>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:1539
msgid ""
"Query for these features with ``__has_attribute(ns_consumed)``, "
"``__has_attribute(ns_returns_retained)``, etc."
msgstr ""

#: ../../../LanguageExtensions.rst:1543
msgid "Objective-C @available"
msgstr ""

#: ../../../LanguageExtensions.rst:1545
msgid ""
"It is possible to use the newest SDK but still build a program that can run "
"on older versions of macOS and iOS by passing ``-mmacosx-version-min=`` / ``-"
"miphoneos-version-min=``."
msgstr ""

#: ../../../LanguageExtensions.rst:1549
msgid ""
"Before LLVM 5.0, when calling a function that exists only in the OS that's "
"newer than the target OS (as determined by the minimum deployment version), "
"programmers had to carefully check if the function exists at runtime, using "
"null checks for weakly-linked C functions, ``+class`` for Objective-C "
"classes, and ``-respondsToSelector:`` or ``+instancesRespondToSelector:`` "
"for Objective-C methods.  If such a check was missed, the program would "
"compile fine, run fine on newer systems, but crash on older systems."
msgstr ""

#: ../../../LanguageExtensions.rst:1557
msgid ""
"As of LLVM 5.0, ``-Wunguarded-availability`` uses the `availability "
"attributes <https://clang.llvm.org/docs/AttributeReference."
"html#availability>`_ together with the new ``@available()`` keyword to "
"assist with this issue. When a method that's introduced in the OS newer than "
"the target OS is called, a -Wunguarded-availability warning is emitted if "
"that call is not guarded:"
msgstr ""

#: ../../../LanguageExtensions.rst:1572
msgid ""
"To fix the warning and to avoid the crash on macOS 10.11, wrap it in "
"``if(@available())``:"
msgstr ""

#: ../../../LanguageExtensions.rst:1586
msgid ""
"The ``*`` is required and means that platforms not explicitly listed will "
"take the true branch, and the compiler will emit ``-Wunguarded-"
"availability`` warnings for unlisted platforms based on those platform's "
"deployment target. More than one platform can be listed in ``@available()``:"
msgstr ""

#: ../../../LanguageExtensions.rst:1599
msgid ""
"If the caller of ``my_fun()`` already checks that ``my_fun()`` is only "
"called on 10.12, then add an `availability attribute <https://clang.llvm.org/"
"docs/AttributeReference.html#availability>`_ to it, which will also suppress "
"the warning and require that calls to my_fun() are checked:"
msgstr ""

#: ../../../LanguageExtensions.rst:1611
msgid ""
"``@available()`` is only available in Objective-C code.  To use the feature "
"in C and C++ code, use the ``__builtin_available()`` spelling instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1614
msgid ""
"If existing code uses null checks or ``-respondsToSelector:``, it should be "
"changed to use ``@available()`` (or ``__builtin_available``) instead."
msgstr ""

#: ../../../LanguageExtensions.rst:1617
msgid ""
"``-Wunguarded-availability`` is disabled by default, but ``-Wunguarded-"
"availability-new``, which only emits this warning for APIs that have been "
"introduced in macOS >= 10.13, iOS >= 11, watchOS >= 4 and tvOS >= 11, is "
"enabled by default."
msgstr ""

#: ../../../LanguageExtensions.rst:1625
msgid "Objective-C++ ABI: protocol-qualifier mangling of parameters"
msgstr ""

#: ../../../LanguageExtensions.rst:1627
msgid ""
"Starting with LLVM 3.4, Clang produces a new mangling for parameters whose "
"type is a qualified-``id`` (e.g., ``id<Foo>``).  This mangling allows such "
"parameters to be differentiated from those with the regular unqualified "
"``id`` type."
msgstr ""

#: ../../../LanguageExtensions.rst:1632
msgid ""
"This was a non-backward compatible mangling change to the ABI.  This change "
"allows proper overloading, and also prevents mangling conflicts with "
"template parameters of protocol-qualified type."
msgstr ""

#: ../../../LanguageExtensions.rst:1636
msgid ""
"Query the presence of this new mangling with "
"``__has_feature(objc_protocol_qualifier_mangling)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1640
msgid "Initializer lists for complex numbers in C"
msgstr ""

#: ../../../LanguageExtensions.rst:1642
msgid "clang supports an extension which allows the following in C:"
msgstr ""

#: ../../../LanguageExtensions.rst:1650
msgid ""
"This construct is useful because there is no way to separately initialize "
"the real and imaginary parts of a complex variable in standard C, given that "
"clang does not support ``_Imaginary``.  (Clang also supports the "
"``__real__`` and ``__imag__`` extensions from gcc, which help in some cases, "
"but are not usable in static initializers.)"
msgstr ""

#: ../../../LanguageExtensions.rst:1656
msgid ""
"Note that this extension does not allow eliding the braces; the meaning of "
"the following two lines is different:"
msgstr ""

#: ../../../LanguageExtensions.rst:1664
msgid ""
"This extension also works in C++ mode, as far as that goes, but does not "
"apply to the C++ ``std::complex``.  (In C++11, list initialization allows "
"the same syntax to be used with ``std::complex`` with the same meaning.)"
msgstr ""

#: ../../../LanguageExtensions.rst:1669
msgid "Builtin Functions"
msgstr ""

#: ../../../LanguageExtensions.rst:1671
msgid ""
"Clang supports a number of builtin library functions with the same syntax as "
"GCC, including things like ``__builtin_nan``, ``__builtin_constant_p``, "
"``__builtin_choose_expr``, ``__builtin_types_compatible_p``, "
"``__builtin_assume_aligned``, ``__sync_fetch_and_add``, etc.  In addition to "
"the GCC builtins, Clang supports a number of builtins that GCC does not, "
"which are listed here."
msgstr ""

#: ../../../LanguageExtensions.rst:1678
msgid ""
"Please note that Clang does not and will not support all of the GCC builtins "
"for vector operations.  Instead of using builtins, you should use the "
"functions defined in target-specific header files like ``<xmmintrin.h>``, "
"which define portable wrappers for these.  Many of the Clang versions of "
"these functions are implemented directly in terms of :ref:`extended vector "
"support <langext-vectors>` instead of builtins, in order to reduce the "
"number of builtins that we need to implement."
msgstr ""

#: ../../../LanguageExtensions.rst:1687
msgid "``__builtin_assume``"
msgstr ""

#: ../../../LanguageExtensions.rst:1689
msgid ""
"``__builtin_assume`` is used to provide the optimizer with a boolean "
"invariant that is defined to be true."
msgstr ""

#: ../../../LanguageExtensions.rst:1692 ../../../LanguageExtensions.rst:1728
#: ../../../LanguageExtensions.rst:1766 ../../../LanguageExtensions.rst:1820
#: ../../../LanguageExtensions.rst:1865 ../../../LanguageExtensions.rst:1894
#: ../../../LanguageExtensions.rst:1926 ../../../LanguageExtensions.rst:1960
#: ../../../LanguageExtensions.rst:1991 ../../../LanguageExtensions.rst:2017
#: ../../../LanguageExtensions.rst:2083 ../../../LanguageExtensions.rst:2397
#: ../../../LanguageExtensions.rst:2442 ../../../LanguageExtensions.rst:2470
#: ../../../LanguageExtensions.rst:2526 ../../../LanguageExtensions.rst:2706
msgid "**Syntax**:"
msgstr ""

#: ../../../LanguageExtensions.rst:1698 ../../../LanguageExtensions.rst:1734
#: ../../../LanguageExtensions.rst:2023 ../../../LanguageExtensions.rst:2089
#: ../../../LanguageExtensions.rst:2712
msgid "**Example of Use**:"
msgstr ""

#: ../../../LanguageExtensions.rst:1712 ../../../LanguageExtensions.rst:1743
#: ../../../LanguageExtensions.rst:1794 ../../../LanguageExtensions.rst:1845
#: ../../../LanguageExtensions.rst:1880 ../../../LanguageExtensions.rst:1909
#: ../../../LanguageExtensions.rst:1941 ../../../LanguageExtensions.rst:1976
#: ../../../LanguageExtensions.rst:2005 ../../../LanguageExtensions.rst:2029
#: ../../../LanguageExtensions.rst:2502 ../../../LanguageExtensions.rst:2567
msgid "**Description**:"
msgstr ""

#: ../../../LanguageExtensions.rst:1714
msgid ""
"The boolean argument to this function is defined to be true. The optimizer "
"may analyze the form of the expression provided as the argument and deduce "
"from that information used to optimize the program. If the condition is "
"violated during execution, the behavior is undefined. The argument itself is "
"never evaluated, so any side effects of the expression will be discarded."
msgstr ""

#: ../../../LanguageExtensions.rst:1720
msgid "Query for this feature with ``__has_builtin(__builtin_assume)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1723
msgid "``__builtin_readcyclecounter``"
msgstr ""

#: ../../../LanguageExtensions.rst:1725
msgid ""
"``__builtin_readcyclecounter`` is used to access the cycle counter register "
"(or a similar low-latency, high-accuracy clock) on those targets that "
"support it."
msgstr ""

#: ../../../LanguageExtensions.rst:1745
msgid ""
"The ``__builtin_readcyclecounter()`` builtin returns the cycle counter "
"value, which may be either global or process/thread-specific depending on "
"the target. As the backing counters often overflow quickly (on the order of "
"seconds) this should only be used for timing small intervals.  When not "
"supported by the target, the return value is always zero.  This builtin "
"takes no arguments and produces an unsigned long long result."
msgstr ""

#: ../../../LanguageExtensions.rst:1752
msgid ""
"Query for this feature with ``__has_builtin(__builtin_readcyclecounter)``. "
"Note that even if present, its use may depend on run-time privilege or other "
"OS controlled state."
msgstr ""

#: ../../../LanguageExtensions.rst:1759
msgid "``__builtin_shufflevector``"
msgstr ""

#: ../../../LanguageExtensions.rst:1761
msgid ""
"``__builtin_shufflevector`` is used to express generic vector permutation/"
"shuffle/swizzle operations.  This builtin is also very important for the "
"implementation of various target-specific header files like ``<xmmintrin."
"h>``."
msgstr ""

#: ../../../LanguageExtensions.rst:1772 ../../../LanguageExtensions.rst:1826
#: ../../../LanguageExtensions.rst:1871 ../../../LanguageExtensions.rst:1900
#: ../../../LanguageExtensions.rst:1932
msgid "**Examples**:"
msgstr ""

#: ../../../LanguageExtensions.rst:1796
msgid ""
"The first two arguments to ``__builtin_shufflevector`` are vectors that have "
"the same element type.  The remaining arguments are a list of integers that "
"specify the elements indices of the first two vectors that should be "
"extracted and returned in a new vector.  These element indices are numbered "
"sequentially starting with the first vector, continuing into the second "
"vector.  Thus, if ``vec1`` is a 4-element vector, index 5 would refer to the "
"second element of ``vec2``. An index of -1 can be used to indicate that the "
"corresponding element in the returned vector is a don't care and can be "
"optimized by the backend."
msgstr ""

#: ../../../LanguageExtensions.rst:1805
msgid ""
"The result of ``__builtin_shufflevector`` is a vector with the same element "
"type as ``vec1``/``vec2`` but that has an element count equal to the number "
"of indices specified."
msgstr ""

#: ../../../LanguageExtensions.rst:1809
msgid "Query for this feature with ``__has_builtin(__builtin_shufflevector)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1814
msgid "``__builtin_convertvector``"
msgstr ""

#: ../../../LanguageExtensions.rst:1816
msgid ""
"``__builtin_convertvector`` is used to express generic vector type-"
"conversion operations. The input vector and the output vector type must have "
"the same number of elements."
msgstr ""

#: ../../../LanguageExtensions.rst:1847
msgid ""
"The first argument to ``__builtin_convertvector`` is a vector, and the "
"second argument is a vector type with the same number of elements as the "
"first argument."
msgstr ""

#: ../../../LanguageExtensions.rst:1851
msgid ""
"The result of ``__builtin_convertvector`` is a vector with the same element "
"type as the second argument, with a value defined in terms of the action of "
"a C-style cast applied to each element of the first argument."
msgstr ""

#: ../../../LanguageExtensions.rst:1855
msgid "Query for this feature with ``__has_builtin(__builtin_convertvector)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1858
msgid "``__builtin_bitreverse``"
msgstr ""

#: ../../../LanguageExtensions.rst:1860
msgid "``__builtin_bitreverse8``"
msgstr ""

#: ../../../LanguageExtensions.rst:1861
msgid "``__builtin_bitreverse16``"
msgstr ""

#: ../../../LanguageExtensions.rst:1862
msgid "``__builtin_bitreverse32``"
msgstr ""

#: ../../../LanguageExtensions.rst:1863
msgid "``__builtin_bitreverse64``"
msgstr ""

#: ../../../LanguageExtensions.rst:1882
msgid ""
"The '``__builtin_bitreverse``' family of builtins is used to reverse the "
"bitpattern of an integer value; for example ``0b10110110`` becomes "
"``0b01101101``."
msgstr ""

#: ../../../LanguageExtensions.rst:1887
msgid "``__builtin_rotateleft``"
msgstr ""

#: ../../../LanguageExtensions.rst:1889
msgid "``__builtin_rotateleft8``"
msgstr ""

#: ../../../LanguageExtensions.rst:1890
msgid "``__builtin_rotateleft16``"
msgstr ""

#: ../../../LanguageExtensions.rst:1891
msgid "``__builtin_rotateleft32``"
msgstr ""

#: ../../../LanguageExtensions.rst:1892
msgid "``__builtin_rotateleft64``"
msgstr ""

#: ../../../LanguageExtensions.rst:1911
msgid ""
"The '``__builtin_rotateleft``' family of builtins is used to rotate the bits "
"in the first argument by the amount in the second argument. For example, "
"``0b10000110`` rotated left by 11 becomes ``0b00110100``. The shift value is "
"treated as an unsigned amount modulo the size of the arguments. Both "
"arguments and the result have the bitwidth specified by the name of the "
"builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:1919
msgid "``__builtin_rotateright``"
msgstr ""

#: ../../../LanguageExtensions.rst:1921
msgid "``__builtin_rotateright8``"
msgstr ""

#: ../../../LanguageExtensions.rst:1922
msgid "``__builtin_rotateright16``"
msgstr ""

#: ../../../LanguageExtensions.rst:1923
msgid "``__builtin_rotateright32``"
msgstr ""

#: ../../../LanguageExtensions.rst:1924
msgid "``__builtin_rotateright64``"
msgstr ""

#: ../../../LanguageExtensions.rst:1943
msgid ""
"The '``__builtin_rotateright``' family of builtins is used to rotate the "
"bits in the first argument by the amount in the second argument. For "
"example, ``0b10000110`` rotated right by 3 becomes ``0b11010000``. The shift "
"value is treated as an unsigned amount modulo the size of the arguments. "
"Both arguments and the result have the bitwidth specified by the name of the "
"builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:1951
msgid "``__builtin_unreachable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1953
msgid ""
"``__builtin_unreachable`` is used to indicate that a specific point in the "
"program cannot be reached, even if the compiler might otherwise think it "
"can. This is useful to improve optimization and eliminates certain "
"warnings.  For example, without the ``__builtin_unreachable`` in the example "
"below, the compiler assumes that the inline asm can fall through and prints "
"a \"function declared '``noreturn``' should not return\" warning."
msgstr ""

#: ../../../LanguageExtensions.rst:1966 ../../../LanguageExtensions.rst:1997
#: ../../../LanguageExtensions.rst:2047 ../../../LanguageExtensions.rst:2406
#: ../../../LanguageExtensions.rst:2479 ../../../LanguageExtensions.rst:2535
msgid "**Example of use**:"
msgstr ""

#: ../../../LanguageExtensions.rst:1978
msgid ""
"The ``__builtin_unreachable()`` builtin has completely undefined behavior. "
"Since it has undefined behavior, it is a statement that it is never reached "
"and the optimizer can take advantage of this to produce better code.  This "
"builtin takes no arguments and produces a void result."
msgstr ""

#: ../../../LanguageExtensions.rst:1983
msgid "Query for this feature with ``__has_builtin(__builtin_unreachable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:1986
msgid "``__builtin_unpredictable``"
msgstr ""

#: ../../../LanguageExtensions.rst:1988
msgid ""
"``__builtin_unpredictable`` is used to indicate that a branch condition is "
"unpredictable by hardware mechanisms such as branch prediction logic."
msgstr ""

#: ../../../LanguageExtensions.rst:2007
msgid ""
"The ``__builtin_unpredictable()`` builtin is expected to be used with "
"control flow conditions such as in ``if`` and ``switch`` statements."
msgstr ""

#: ../../../LanguageExtensions.rst:2010
msgid "Query for this feature with ``__has_builtin(__builtin_unpredictable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2013
msgid "``__sync_swap``"
msgstr ""

#: ../../../LanguageExtensions.rst:2015
msgid ""
"``__sync_swap`` is used to atomically swap integers or pointers in memory."
msgstr ""

#: ../../../LanguageExtensions.rst:2031
msgid ""
"The ``__sync_swap()`` builtin extends the existing ``__sync_*()`` family of "
"atomic intrinsics to allow code to atomically swap the current value with "
"the new value.  More importantly, it helps developers write more efficient "
"and correct code by avoiding expensive loops around "
"``__sync_bool_compare_and_swap()`` or relying on the platform specific "
"implementation details of ``__sync_lock_test_and_set()``.  The "
"``__sync_swap()`` builtin is a full barrier."
msgstr ""

#: ../../../LanguageExtensions.rst:2040
msgid "``__builtin_addressof``"
msgstr ""

#: ../../../LanguageExtensions.rst:2042
msgid ""
"``__builtin_addressof`` performs the functionality of the built-in ``&`` "
"operator, ignoring any ``operator&`` overload.  This is useful in constant "
"expressions in C++11, where there is no other way to take the address of an "
"object that overloads ``operator&``."
msgstr ""

#: ../../../LanguageExtensions.rst:2056
msgid "``__builtin_operator_new`` and ``__builtin_operator_delete``"
msgstr ""

#: ../../../LanguageExtensions.rst:2058
msgid ""
"``__builtin_operator_new`` allocates memory just like a non-placement non-"
"class *new-expression*. This is exactly like directly calling the normal non-"
"placement ``::operator new``, except that it allows certain optimizations "
"that the C++ standard does not permit for a direct function call to ``::"
"operator new`` (in particular, removing ``new`` / ``delete`` pairs and "
"merging allocations)."
msgstr ""

#: ../../../LanguageExtensions.rst:2065
msgid ""
"Likewise, ``__builtin_operator_delete`` deallocates memory just like a non-"
"class *delete-expression*, and is exactly like directly calling the normal "
"``::operator delete``, except that it permits optimizations. Only the "
"unsized form of ``__builtin_operator_delete`` is currently available."
msgstr ""

#: ../../../LanguageExtensions.rst:2070
msgid ""
"These builtins are intended for use in the implementation of ``std::"
"allocator`` and other similar allocation libraries, and are only available "
"in C++."
msgstr ""

#: ../../../LanguageExtensions.rst:2074
msgid "``__builtin_preserve_access_index``"
msgstr ""

#: ../../../LanguageExtensions.rst:2076
msgid ""
"``__builtin_preserve_access_index`` specifies a code section where array "
"subscript access and structure/union member access are relocatable under bpf "
"compile-once run-everywhere framework. Debuginfo (typically with ``-g``) is "
"needed, otherwise, the compiler will exit with an error. The return type for "
"the intrinsic is the same as the type of the argument."
msgstr ""

#: ../../../LanguageExtensions.rst:2106
msgid "Multiprecision Arithmetic Builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2108
msgid ""
"Clang provides a set of builtins which expose multiprecision arithmetic in a "
"manner amenable to C. They all have the following form:"
msgstr ""

#: ../../../LanguageExtensions.rst:2116
msgid ""
"Thus one can form a multiprecision addition chain in the following manner:"
msgstr ""

#: ../../../LanguageExtensions.rst:2129
msgid "The complete list of builtins are:"
msgstr ""

#: ../../../LanguageExtensions.rst:2145
msgid "Checked Arithmetic Builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2147
msgid ""
"Clang provides a set of builtins that implement checked arithmetic for "
"security critical applications in a manner that is fast and easily "
"expressable in C. As an example of their usage:"
msgstr ""

#: ../../../LanguageExtensions.rst:2163
msgid "Clang provides the following checked arithmetic builtins:"
msgstr ""

#: ../../../LanguageExtensions.rst:2189
msgid ""
"Each builtin performs the specified mathematical operation on the first two "
"arguments and stores the result in the third argument.  If possible, the "
"result will be equal to mathematically-correct result and the builtin will "
"return 0.  Otherwise, the builtin will return 1 and the result will be equal "
"to the unique value that is equivalent to the mathematically-correct result "
"modulo two raised to the *k* power, where *k* is the number of bits in the "
"result type.  The behavior of these builtins is well-defined for all "
"argument values."
msgstr ""

#: ../../../LanguageExtensions.rst:2198
msgid ""
"The first three builtins work generically for operands of any integer type, "
"including boolean types.  The operands need not have the same type as each "
"other, or as the result.  The other builtins may implicitly promote or "
"convert their operands before performing the operation."
msgstr ""

#: ../../../LanguageExtensions.rst:2203
msgid ""
"Query for this feature with ``__has_builtin(__builtin_add_overflow)``, etc."
msgstr ""

#: ../../../LanguageExtensions.rst:2206
msgid "Floating point builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2209
msgid "``__builtin_canonicalize``"
msgstr ""

#: ../../../LanguageExtensions.rst:2217
msgid ""
"Returns the platform specific canonical encoding of a floating point number. "
"This canonicalization is useful for implementing certain numeric primitives "
"such as frexp. See `LLVM canonicalize intrinsic <https://llvm.org/docs/"
"LangRef.html#llvm-canonicalize-intrinsic>`_ for more information on the "
"semantics."
msgstr ""

#: ../../../LanguageExtensions.rst:2224
msgid "String builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2226
msgid ""
"Clang provides constant expression evaluation support for builtins forms of "
"the following functions from the C standard library ``<string.h>`` header:"
msgstr ""

#: ../../../LanguageExtensions.rst:2229
msgid "``memchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:2230
msgid "``memcmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2231
msgid "``strchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:2232
msgid "``strcmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2233
msgid "``strlen``"
msgstr ""

#: ../../../LanguageExtensions.rst:2234
msgid "``strncmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2235
msgid "``wcschr``"
msgstr ""

#: ../../../LanguageExtensions.rst:2236
msgid "``wcscmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2237
msgid "``wcslen``"
msgstr ""

#: ../../../LanguageExtensions.rst:2238
msgid "``wcsncmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2239
msgid "``wmemchr``"
msgstr ""

#: ../../../LanguageExtensions.rst:2240
msgid "``wmemcmp``"
msgstr ""

#: ../../../LanguageExtensions.rst:2242
msgid ""
"In each case, the builtin form has the name of the C library function "
"prefixed by ``__builtin_``. Example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2249
msgid "In addition to the above, one further builtin is provided:"
msgstr ""

#: ../../../LanguageExtensions.rst:2255
msgid ""
"``__builtin_char_memchr(a, b, c)`` is identical to "
"``(char*)__builtin_memchr(a, b, c)`` except that its use is permitted within "
"constant expressions in C++11 onwards (where a cast from ``void*`` to "
"``char*`` is disallowed in general)."
msgstr ""

#: ../../../LanguageExtensions.rst:2260
msgid ""
"Support for constant expression evaluation for the above builtins be "
"detected with ``__has_feature(cxx_constexpr_string_builtins)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2264
msgid "Atomic Min/Max builtins with memory ordering"
msgstr ""

#: ../../../LanguageExtensions.rst:2266
msgid ""
"There are two atomic builtins with min/max in-memory comparison and swap. "
"The syntax and semantics are similar to GCC-compatible __atomic_* builtins."
msgstr ""

#: ../../../LanguageExtensions.rst:2269
msgid "``__atomic_fetch_min``"
msgstr ""

#: ../../../LanguageExtensions.rst:2270
msgid "``__atomic_fetch_max``"
msgstr ""

#: ../../../LanguageExtensions.rst:2272
msgid ""
"The builtins work with signed and unsigned integers and require to specify "
"memory ordering. The return value is the original value that was stored in "
"memory before comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:2275
msgid "Example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2281
msgid ""
"The third argument is one of the memory ordering specifiers "
"``__ATOMIC_RELAXED``, ``__ATOMIC_CONSUME``, ``__ATOMIC_ACQUIRE``, "
"``__ATOMIC_RELEASE``, ``__ATOMIC_ACQ_REL``, or ``__ATOMIC_SEQ_CST`` "
"following C++11 memory model semantics."
msgstr ""

#: ../../../LanguageExtensions.rst:2285
msgid ""
"In terms or aquire-release ordering barriers these two operations are always "
"considered as operations with *load-store* semantics, even when the original "
"value is not actually modified after comparison."
msgstr ""

#: ../../../LanguageExtensions.rst:2292
msgid "__c11_atomic builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2294
msgid ""
"Clang provides a set of builtins which are intended to be used to implement "
"C11's ``<stdatomic.h>`` header.  These builtins provide the semantics of the "
"``_explicit`` form of the corresponding C11 operation, and are named with a "
"``__c11_`` prefix.  The supported operations, and the differences from the "
"corresponding C11 operations, are:"
msgstr ""

#: ../../../LanguageExtensions.rst:2300
msgid "``__c11_atomic_init``"
msgstr ""

#: ../../../LanguageExtensions.rst:2301
msgid "``__c11_atomic_thread_fence``"
msgstr ""

#: ../../../LanguageExtensions.rst:2302
msgid "``__c11_atomic_signal_fence``"
msgstr ""

#: ../../../LanguageExtensions.rst:2303
msgid ""
"``__c11_atomic_is_lock_free`` (The argument is the size of the "
"``_Atomic(...)`` object, instead of its address)"
msgstr ""

#: ../../../LanguageExtensions.rst:2305
msgid "``__c11_atomic_store``"
msgstr ""

#: ../../../LanguageExtensions.rst:2306
msgid "``__c11_atomic_load``"
msgstr ""

#: ../../../LanguageExtensions.rst:2307
msgid "``__c11_atomic_exchange``"
msgstr ""

#: ../../../LanguageExtensions.rst:2308
msgid "``__c11_atomic_compare_exchange_strong``"
msgstr ""

#: ../../../LanguageExtensions.rst:2309
msgid "``__c11_atomic_compare_exchange_weak``"
msgstr ""

#: ../../../LanguageExtensions.rst:2310
msgid "``__c11_atomic_fetch_add``"
msgstr ""

#: ../../../LanguageExtensions.rst:2311
msgid "``__c11_atomic_fetch_sub``"
msgstr ""

#: ../../../LanguageExtensions.rst:2312
msgid "``__c11_atomic_fetch_and``"
msgstr ""

#: ../../../LanguageExtensions.rst:2313
msgid "``__c11_atomic_fetch_or``"
msgstr ""

#: ../../../LanguageExtensions.rst:2314
msgid "``__c11_atomic_fetch_xor``"
msgstr ""

#: ../../../LanguageExtensions.rst:2315
msgid "``__c11_atomic_fetch_max``"
msgstr ""

#: ../../../LanguageExtensions.rst:2316
msgid "``__c11_atomic_fetch_min``"
msgstr ""

#: ../../../LanguageExtensions.rst:2318
msgid ""
"The macros ``__ATOMIC_RELAXED``, ``__ATOMIC_CONSUME``, ``__ATOMIC_ACQUIRE``, "
"``__ATOMIC_RELEASE``, ``__ATOMIC_ACQ_REL``, and ``__ATOMIC_SEQ_CST`` are "
"provided, with values corresponding to the enumerators of C11's "
"``memory_order`` enumeration."
msgstr ""

#: ../../../LanguageExtensions.rst:2323
msgid ""
"(Note that Clang additionally provides GCC-compatible ``__atomic_*`` "
"builtins and OpenCL 2.0 ``__opencl_atomic_*`` builtins. The OpenCL 2.0 "
"atomic builtins are an explicit form of the corresponding OpenCL 2.0 builtin "
"function, and are named with a ``__opencl_`` prefix. The macros "
"``__OPENCL_MEMORY_SCOPE_WORK_ITEM``, ``__OPENCL_MEMORY_SCOPE_WORK_GROUP``, "
"``__OPENCL_MEMORY_SCOPE_DEVICE``, ``__OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES``, "
"and ``__OPENCL_MEMORY_SCOPE_SUB_GROUP`` are provided, with values "
"corresponding to the enumerators of OpenCL's ``memory_scope`` enumeration.)"
msgstr ""

#: ../../../LanguageExtensions.rst:2333
msgid "Low-level ARM exclusive memory builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2335
msgid ""
"Clang provides overloaded builtins giving direct access to the three key ARM "
"instructions for implementing atomic operations."
msgstr ""

#: ../../../LanguageExtensions.rst:2346 ../../../LanguageExtensions.rst:2377
msgid "The types ``T`` currently supported are:"
msgstr ""

#: ../../../LanguageExtensions.rst:2348
msgid "Integer types with width at most 64 bits (or 128 bits on AArch64)."
msgstr ""

#: ../../../LanguageExtensions.rst:2349
msgid "Floating-point types"
msgstr ""

#: ../../../LanguageExtensions.rst:2350
msgid "Pointer types."
msgstr ""

#: ../../../LanguageExtensions.rst:2352
msgid ""
"Note that the compiler does not guarantee it will not insert stores which "
"clear the exclusive monitor in between an ``ldrex`` type operation and its "
"paired ``strex``. In practice this is only usually a risk when the extra "
"store is on the same cache line as the variable being modified and Clang "
"will only insert stack stores on its own, so it is best not to use these "
"operations on variables with automatic storage duration."
msgstr ""

#: ../../../LanguageExtensions.rst:2359
msgid ""
"Also, loads and stores may be implicit in code written between the ``ldrex`` "
"and ``strex``. Clang will not necessarily mitigate the effects of these "
"either, so care should be exercised."
msgstr ""

#: ../../../LanguageExtensions.rst:2363
msgid ""
"For these reasons the higher level atomic primitives should be preferred "
"where possible."
msgstr ""

#: ../../../LanguageExtensions.rst:2367
msgid "Non-temporal load/store builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2369
msgid ""
"Clang provides overloaded builtins allowing generation of non-temporal "
"memory accesses."
msgstr ""

#: ../../../LanguageExtensions.rst:2379
msgid "Integer types."
msgstr ""

#: ../../../LanguageExtensions.rst:2380
msgid "Floating-point types."
msgstr ""

#: ../../../LanguageExtensions.rst:2381
msgid "Vector types."
msgstr ""

#: ../../../LanguageExtensions.rst:2383
msgid ""
"Note that the compiler does not guarantee that non-temporal loads or stores "
"will be used."
msgstr ""

#: ../../../LanguageExtensions.rst:2387
msgid "C++ Coroutines support builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2390
msgid ""
"This is a work in progress. Compatibility across Clang/LLVM releases is not "
"guaranteed."
msgstr ""

#: ../../../LanguageExtensions.rst:2393
msgid ""
"Clang provides experimental builtins to support C++ Coroutines as defined by "
"https://wg21.link/P0057. The following four are intended to be used by the "
"standard library to implement `std::experimental::coroutine_handle` type."
msgstr ""

#: ../../../LanguageExtensions.rst:2434
msgid ""
"Other coroutine builtins are either for internal clang use or for use during "
"development of the coroutine feature. See `Coroutines in LLVM <https://llvm."
"org/docs/Coroutines.html#intrinsics>`_ for more information on their "
"semantics. Note that builtins matching the intrinsics that take token as the "
"first parameter (llvm.coro.begin, llvm.coro.alloc, llvm.coro.free and llvm."
"coro.suspend) omit the token parameter and fill it to an appropriate value "
"during the emission."
msgstr ""

#: ../../../LanguageExtensions.rst:2457
msgid ""
"Note that there is no builtin matching the `llvm.coro.save` intrinsic. LLVM "
"automatically will insert one if the first argument to `llvm.coro.suspend` "
"is token `none`. If a user calls `__builin_suspend`, clang will insert "
"`token none` as the first argument to the intrinsic."
msgstr ""

#: ../../../LanguageExtensions.rst:2463
msgid "Source location builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2465
msgid ""
"Clang provides experimental builtins to support C++ standard library "
"implementation of ``std::experimental::source_location`` as specified in  "
"http://wg21.link/N4600. With the exception of ``__builtin_COLUMN``, these "
"builtins are also implemented by GCC."
msgstr ""

#: ../../../LanguageExtensions.rst:2504
msgid ""
"The builtins ``__builtin_LINE``, ``__builtin_FUNCTION``, and "
"``__builtin_FILE`` return the values, at the \"invocation point\", for "
"``__LINE__``, ``__FUNCTION__``, and ``__FILE__`` respectively. These "
"builtins are constant expressions."
msgstr ""

#: ../../../LanguageExtensions.rst:2508
msgid ""
"When the builtins appear as part of a default function argument the "
"invocation point is the location of the caller. When the builtins appear as "
"part of a default member initializer, the invocation point is the location "
"of the constructor or aggregate initialization used to create the object. "
"Otherwise the invocation point is the same as the location of the builtin."
msgstr ""

#: ../../../LanguageExtensions.rst:2514
msgid ""
"When the invocation point of ``__builtin_FUNCTION`` is not a function scope "
"the empty string is returned."
msgstr ""

#: ../../../LanguageExtensions.rst:2518
msgid "Alignment builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2519
msgid ""
"Clang provides builtins to support checking and adjusting alignment of "
"pointers and integers. These builtins can be used to avoid relying on "
"implementation-defined behavior of arithmetic on integers derived from "
"pointers. Additionally, these builtins retain type information and, unlike "
"bitwise arithmentic, they can perform semantic checking on the alignment "
"value."
msgstr ""

#: ../../../LanguageExtensions.rst:2569
msgid ""
"The builtins ``__builtin_align_up``, ``__builtin_align_down``, return their "
"first argument aligned up/down to the next multiple of the second argument. "
"If the value is already sufficiently aligned, it is returned unchanged. The "
"builtin ``__builtin_is_aligned`` returns whether the first argument is "
"aligned to a multiple of the second argument. All of these builtins expect "
"the alignment to be expressed as a number of bytes."
msgstr ""

#: ../../../LanguageExtensions.rst:2576
msgid ""
"These builtins can be used for all integer types as well as (non-function) "
"pointer types. For pointer types, these builtins operate in terms of the "
"integer address of the pointer and return a new pointer of the same type "
"(including qualifiers such as ``const``) with an adjusted address. When "
"aligning pointers up or down, the resulting value must be within the same "
"underlying allocation or one past the end (see C17 6.5.6p8, C++ [expr.add]). "
"This means that arbitrary integer values stored in pointer-type variables "
"must not be passed to these builtins. For those use cases, the builtins can "
"still be used, but the operation must be performed on the pointer cast to "
"``uintptr_t``."
msgstr ""

#: ../../../LanguageExtensions.rst:2586
msgid ""
"If Clang can determine that the alignment is not a power of two at compile "
"time, it will result in a compilation failure. If the alignment argument is "
"not a power of two at run time, the behavior of these builtins is undefined."
msgstr ""

#: ../../../LanguageExtensions.rst:2591
msgid "Non-standard C++11 Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:2593
msgid ""
"Clang's non-standard C++11 attributes live in the ``clang`` attribute "
"namespace."
msgstr ""

#: ../../../LanguageExtensions.rst:2596
msgid ""
"Clang supports GCC's ``gnu`` attribute namespace. All GCC attributes which "
"are accepted with the ``__attribute__((foo))`` syntax are also accepted as "
"``[[gnu::foo]]``. This only extends to attributes which are specified by GCC "
"(see the list of `GCC function attributes <https://gcc.gnu.org/onlinedocs/"
"gcc/Function-Attributes.html>`_, `GCC variable attributes <https://gcc.gnu."
"org/onlinedocs/gcc/Variable-Attributes.html>`_, and `GCC type attributes "
"<https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html>`_). As with the "
"GCC implementation, these attributes must appertain to the *declarator-id* "
"in a declaration, which means they must go either at the start of the "
"declaration or immediately after the name being declared."
msgstr ""

#: ../../../LanguageExtensions.rst:2608
msgid ""
"For example, this applies the GNU ``unused`` attribute to ``a`` and ``f``, "
"and also applies the GNU ``noreturn`` attribute to ``f``."
msgstr ""

#: ../../../LanguageExtensions.rst:2616
msgid "Target-Specific Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:2618
msgid "Clang supports some language features conditionally on some targets."
msgstr ""

#: ../../../LanguageExtensions.rst:2621
msgid "ARM/AArch64 Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:2624
msgid "Memory Barrier Intrinsics"
msgstr ""

#: ../../../LanguageExtensions.rst:2625
msgid ""
"Clang implements the ``__dmb``, ``__dsb`` and ``__isb`` intrinsics as "
"defined in the `ARM C Language Extensions Release 2.0 <http://infocenter.arm."
"com/help/topic/com.arm.doc.ihi0053c/IHI0053C_acle_2_0.pdf>`_. Note that "
"these intrinsics are implemented as motion barriers that block reordering of "
"memory accesses and side effect instructions. Other instructions like simple "
"arithmetic may be reordered around the intrinsic. If you expect to have no "
"reordering at all, use inline assembly instead."
msgstr ""

#: ../../../LanguageExtensions.rst:2634
msgid "X86/X86-64 Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:2636
msgid "The X86 backend has these language extensions:"
msgstr ""

#: ../../../LanguageExtensions.rst:2639
msgid "Memory references to specified segments"
msgstr ""

#: ../../../LanguageExtensions.rst:2641
msgid ""
"Annotating a pointer with address space #256 causes it to be code generated "
"relative to the X86 GS segment register, address space #257 causes it to be "
"relative to the X86 FS segment, and address space #258 causes it to be "
"relative to the X86 SS segment.  Note that this is a very very low-level "
"feature that should only be used if you know what you're doing (for example "
"in an OS kernel)."
msgstr ""

#: ../../../LanguageExtensions.rst:2648
msgid "Here is an example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2657
msgid "Which compiles to (on X86-32):"
msgstr ""

#: ../../../LanguageExtensions.rst:2666
msgid ""
"You can also use the GCC compatibility macros ``__seg_fs`` and ``__seg_gs`` "
"for the same purpose. The preprocessor symbols ``__SEG_FS`` and ``__SEG_GS`` "
"indicate their support."
msgstr ""

#: ../../../LanguageExtensions.rst:2671
msgid "PowerPC Language Extensions"
msgstr ""

#: ../../../LanguageExtensions.rst:2674
msgid "Set the Floating Point Rounding Mode"
msgstr ""

#: ../../../LanguageExtensions.rst:2675
msgid ""
"PowerPC64/PowerPC64le supports the builtin function ``__builtin_setrnd`` to "
"set the floating point rounding mode. This function will use the least "
"significant two bits of integer argument to set the floating point rounding "
"mode."
msgstr ""

#: ../../../LanguageExtensions.rst:2683
msgid "The effective values for mode are:"
msgstr ""

#: ../../../LanguageExtensions.rst:2685
msgid "0 - round to nearest"
msgstr ""

#: ../../../LanguageExtensions.rst:2686
msgid "1 - round to zero"
msgstr ""

#: ../../../LanguageExtensions.rst:2687
msgid "2 - round to +infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:2688
msgid "3 - round to -infinity"
msgstr ""

#: ../../../LanguageExtensions.rst:2690
msgid ""
"Note that the mode argument will modulo 4, so if the integer argument is "
"greater than 3, it will only use the least significant two bits of the mode. "
"Namely, ``__builtin_setrnd(102))`` is equal to ``__builtin_setrnd(2)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2695
msgid "PowerPC cache builtins"
msgstr ""

#: ../../../LanguageExtensions.rst:2697
msgid ""
"The PowerPC architecture specifies instructions implementing cache "
"operations. Clang provides builtins that give direct programmer access to "
"these cache instructions."
msgstr ""

#: ../../../LanguageExtensions.rst:2701
msgid "Currently the following builtins are implemented in clang:"
msgstr ""

#: ../../../LanguageExtensions.rst:2703
msgid ""
"``__builtin_dcbf`` copies the contents of a modified block from the data "
"cache to main memory and flushes the copy from the data cache."
msgstr ""

#: ../../../LanguageExtensions.rst:2720
msgid "Extensions for Static Analysis"
msgstr ""

#: ../../../LanguageExtensions.rst:2722
msgid ""
"Clang supports additional attributes that are useful for documenting program "
"invariants and rules for static analysis tools, such as the `Clang Static "
"Analyzer <https://clang-analyzer.llvm.org/>`_. These attributes are "
"documented in the analyzer's `list of source-level annotations <https://"
"clang-analyzer.llvm.org/annotations.html>`_."
msgstr ""

#: ../../../LanguageExtensions.rst:2730
msgid "Extensions for Dynamic Analysis"
msgstr ""

#: ../../../LanguageExtensions.rst:2732
msgid ""
"Use ``__has_feature(address_sanitizer)`` to check if the code is being built "
"with :doc:`AddressSanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:2735
msgid ""
"Use ``__has_feature(thread_sanitizer)`` to check if the code is being built "
"with :doc:`ThreadSanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:2738
msgid ""
"Use ``__has_feature(memory_sanitizer)`` to check if the code is being built "
"with :doc:`MemorySanitizer`."
msgstr ""

#: ../../../LanguageExtensions.rst:2741
msgid ""
"Use ``__has_feature(safe_stack)`` to check if the code is being built with :"
"doc:`SafeStack`."
msgstr ""

#: ../../../LanguageExtensions.rst:2746
msgid "Extensions for selectively disabling optimization"
msgstr ""

#: ../../../LanguageExtensions.rst:2748
msgid ""
"Clang provides a mechanism for selectively disabling optimizations in "
"functions and methods."
msgstr ""

#: ../../../LanguageExtensions.rst:2751
msgid ""
"To disable optimizations in a single function definition, the GNU-style or C+"
"+11 non-standard attribute ``optnone`` can be used."
msgstr ""

#: ../../../LanguageExtensions.rst:2766
msgid ""
"To facilitate disabling optimization for a range of function definitions, a "
"range-based pragma is provided. Its syntax is ``#pragma clang optimize`` "
"followed by ``off`` or ``on``."
msgstr ""

#: ../../../LanguageExtensions.rst:2770
msgid ""
"All function definitions in the region between an ``off`` and the following "
"``on`` will be decorated with the ``optnone`` attribute unless doing so "
"would conflict with explicit attributes already present on the function (e."
"g. the ones that control inlining)."
msgstr ""

#: ../../../LanguageExtensions.rst:2789
msgid ""
"If no ``on`` is found to close an ``off`` region, the end of the region is "
"the end of the compilation unit."
msgstr ""

#: ../../../LanguageExtensions.rst:2792
msgid ""
"Note that a stray ``#pragma clang optimize on`` does not selectively enable "
"additional optimizations when compiling at low optimization levels. This "
"feature can only be used to selectively disable optimizations."
msgstr ""

#: ../../../LanguageExtensions.rst:2796
msgid ""
"The pragma has an effect on functions only at the point of their definition; "
"for function templates, this means that the state of the pragma at the point "
"of an instantiation is not necessarily relevant. Consider the following "
"example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2816
msgid ""
"In this example, the definition of the template function ``twice`` is "
"outside the pragma region, whereas the definition of ``thrice`` is inside "
"the region. The ``container`` function is also in the region and will not be "
"optimized, but it causes the instantiation of ``twice`` and ``thrice`` with "
"an ``int`` type; of these two instantiations, ``twice`` will be optimized "
"(because its definition was outside the region) and ``thrice`` will not be "
"optimized."
msgstr ""

#: ../../../LanguageExtensions.rst:2824
msgid "Extensions for loop hint optimizations"
msgstr ""

#: ../../../LanguageExtensions.rst:2826
msgid ""
"The ``#pragma clang loop`` directive is used to specify hints for optimizing "
"the subsequent for, while, do-while, or c++11 range-based for loop. The "
"directive provides options for vectorization, interleaving, predication, "
"unrolling and distribution. Loop hints can be specified before any loop and "
"will be ignored if the optimization is not safe to apply."
msgstr ""

#: ../../../LanguageExtensions.rst:2832
msgid ""
"There are loop hints that control transformations (e.g. vectorization, loop "
"unrolling) and there are loop hints that set transformation options (e.g. "
"``vectorize_width``, ``unroll_count``).  Pragmas setting transformation "
"options imply the transformation is enabled, as if it was enabled via the "
"corresponding transformation pragma (e.g. ``vectorize(enable)``). If the "
"transformation is disabled  (e.g. ``vectorize(disable)``), that takes "
"precedence over transformations option pragmas implying that transformation."
msgstr ""

#: ../../../LanguageExtensions.rst:2841
msgid "Vectorization, Interleaving, and Predication"
msgstr ""

#: ../../../LanguageExtensions.rst:2843
msgid ""
"A vectorized loop performs multiple iterations of the original loop in "
"parallel using vector instructions. The instruction set of the target "
"processor determines which vector instructions are available and their "
"vector widths. This restricts the types of loops that can be vectorized. The "
"vectorizer automatically determines if the loop is safe and profitable to "
"vectorize. A vector instruction cost model is used to select the vector "
"width."
msgstr ""

#: ../../../LanguageExtensions.rst:2850
msgid ""
"Interleaving multiple loop iterations allows modern processors to further "
"improve instruction-level parallelism (ILP) using advanced hardware "
"features, such as multiple execution units and out-of-order execution. The "
"vectorizer uses a cost model that depends on the register pressure and "
"generated code size to select the interleaving count."
msgstr ""

#: ../../../LanguageExtensions.rst:2856
msgid ""
"Vectorization is enabled by ``vectorize(enable)`` and interleaving is "
"enabled by ``interleave(enable)``. This is useful when compiling with ``-"
"Os`` to manually enable vectorization or interleaving."
msgstr ""

#: ../../../LanguageExtensions.rst:2868
msgid ""
"The vector width is specified by ``vectorize_width(_value_)`` and the "
"interleave count is specified by ``interleave_count(_value_)``, where "
"_value_ is a positive integer. This is useful for specifying the optimal "
"width/count of the set of target architectures supported by your application."
msgstr ""

#: ../../../LanguageExtensions.rst:2881
msgid ""
"Specifying a width/count of 1 disables the optimization, and is equivalent "
"to ``vectorize(disable)`` or ``interleave(disable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2884
msgid ""
"Vector predication is enabled by ``vectorize_predicate(enable)``, for "
"example:"
msgstr ""

#: ../../../LanguageExtensions.rst:2894
msgid ""
"This predicates (masks) all instructions in the loop, which allows the "
"scalar remainder loop (the tail) to be folded into the main vectorized loop. "
"This might be more efficient when vector predication is efficiently "
"supported by the target platform."
msgstr ""

#: ../../../LanguageExtensions.rst:2900
msgid "Loop Unrolling"
msgstr ""

#: ../../../LanguageExtensions.rst:2902
msgid ""
"Unrolling a loop reduces the loop control overhead and exposes more "
"opportunities for ILP. Loops can be fully or partially unrolled. Full "
"unrolling eliminates the loop and replaces it with an enumerated sequence of "
"loop iterations. Full unrolling is only possible if the loop trip count is "
"known at compile time. Partial unrolling replicates the loop body within the "
"loop and reduces the trip count."
msgstr ""

#: ../../../LanguageExtensions.rst:2909
msgid ""
"If ``unroll(enable)`` is specified the unroller will attempt to fully unroll "
"the loop if the trip count is known at compile time. If the fully unrolled "
"code size is greater than an internal limit the loop will be partially "
"unrolled up to this limit. If the trip count is not known at compile time "
"the loop will be partially unrolled with a heuristically chosen unroll "
"factor."
msgstr ""

#: ../../../LanguageExtensions.rst:2922
msgid ""
"If ``unroll(full)`` is specified the unroller will attempt to fully unroll "
"the loop if the trip count is known at compile time identically to "
"``unroll(enable)``. However, with ``unroll(full)`` the loop will not be "
"unrolled if the loop count is not known at compile time."
msgstr ""

#: ../../../LanguageExtensions.rst:2934
msgid ""
"The unroll count can be specified explicitly with ``unroll_count(_value_)`` "
"where _value_ is a positive integer. If this value is greater than the trip "
"count the loop will be fully unrolled. Otherwise the loop is partially "
"unrolled subject to the same code size limit as with ``unroll(enable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2946
msgid "Unrolling of a loop can be prevented by specifying ``unroll(disable)``."
msgstr ""

#: ../../../LanguageExtensions.rst:2949
msgid "Loop Distribution"
msgstr ""

#: ../../../LanguageExtensions.rst:2951
msgid ""
"Loop Distribution allows splitting a loop into multiple loops.  This is "
"beneficial for example when the entire loop cannot be vectorized but some of "
"the resulting loops can."
msgstr ""

#: ../../../LanguageExtensions.rst:2955
msgid ""
"If ``distribute(enable))`` is specified and the loop has memory dependencies "
"that inhibit vectorization, the compiler will attempt to isolate the "
"offending operations into a new loop.  This optimization is not enabled by "
"default, only loops marked with the pragma are considered."
msgstr ""

#: ../../../LanguageExtensions.rst:2968
msgid ""
"This loop will be split into two loops between statements S1 and S2.  The "
"second loop containing S2 will be vectorized."
msgstr ""

#: ../../../LanguageExtensions.rst:2971
msgid ""
"Loop Distribution is currently not enabled by default in the optimizer "
"because it can hurt performance in some cases.  For example, instruction-"
"level parallelism could be reduced by sequentializing the execution of the "
"statements S1 and S2 above."
msgstr ""

#: ../../../LanguageExtensions.rst:2976
msgid ""
"If Loop Distribution is turned on globally with ``-mllvm -enable-loop-"
"distribution``, specifying ``distribute(disable)`` can be used the disable "
"it on a per-loop basis."
msgstr ""

#: ../../../LanguageExtensions.rst:2981
msgid "Additional Information"
msgstr ""

#: ../../../LanguageExtensions.rst:2983
msgid "For convenience multiple loop hints can be specified on a single line."
msgstr ""

#: ../../../LanguageExtensions.rst:2992
msgid ""
"If an optimization cannot be applied any hints that apply to it will be "
"ignored. For example, the hint ``vectorize_width(4)`` is ignored if the loop "
"is not proven safe to vectorize. To identify and diagnose optimization "
"issues use `-Rpass`, `-Rpass-missed`, and `-Rpass-analysis` command line "
"options. See the user guide for details."
msgstr ""

#: ../../../LanguageExtensions.rst:2999
msgid "Extensions to specify floating-point flags"
msgstr ""

#: ../../../LanguageExtensions.rst:3001
msgid ""
"The ``#pragma clang fp`` pragma allows floating-point options to be "
"specified for a section of the source code. This pragma can only appear at "
"file scope or at the start of a compound statement (excluding comments). "
"When using within a compound statement, the pragma is active within the "
"scope of the compound statement."
msgstr ""

#: ../../../LanguageExtensions.rst:3007
msgid ""
"Currently, only FP contraction can be controlled with the pragma. ``#pragma "
"clang fp contract`` specifies whether the compiler should contract a "
"multiply and an addition (or subtraction) into a fused FMA operation when "
"supported by the target."
msgstr ""

#: ../../../LanguageExtensions.rst:3012
msgid ""
"The pragma can take three values: ``on``, ``fast`` and ``off``.  The ``on`` "
"option is identical to using ``#pragma STDC FP_CONTRACT(ON)`` and it allows "
"fusion as specified the language standard.  The ``fast`` option allows "
"fusiong in cases when the language standard does not make this possible (e."
"g. across statements in C)"
msgstr ""

#: ../../../LanguageExtensions.rst:3027
msgid ""
"The pragma can also be used with ``off`` which turns FP contraction off for "
"a section of the code. This can be useful when fast contraction is otherwise "
"enabled for the translation unit with the ``-ffp-contract=fast`` flag."
msgstr ""

#: ../../../LanguageExtensions.rst:3032
msgid ""
"Specifying an attribute for multiple declarations (#pragma clang attribute)"
msgstr ""

#: ../../../LanguageExtensions.rst:3034
msgid ""
"The ``#pragma clang attribute`` directive can be used to apply an attribute "
"to multiple declarations. The ``#pragma clang attribute push`` variation of "
"the directive pushes a new \"scope\" of ``#pragma clang attribute`` that "
"attributes can be added to. The ``#pragma clang attribute (...)`` variation "
"adds an attribute to that scope, and the ``#pragma clang attribute pop`` "
"variation pops the scope. You can also use ``#pragma clang attribute push "
"(...)``, which is a shorthand for when you want to add one attribute to a "
"new scope. Multiple push directives can be nested inside each other."
msgstr ""

#: ../../../LanguageExtensions.rst:3043
msgid ""
"The attributes that are used in the ``#pragma clang attribute`` directives "
"can be written using the GNU-style syntax:"
msgstr ""

#: ../../../LanguageExtensions.rst:3054
msgid "The attributes can also be written using the C++11 style syntax:"
msgstr ""

#: ../../../LanguageExtensions.rst:3064
msgid "The ``__declspec`` style syntax is also supported:"
msgstr ""

#: ../../../LanguageExtensions.rst:3074
msgid ""
"A single push directive accepts only one attribute regardless of the syntax "
"used."
msgstr ""

#: ../../../LanguageExtensions.rst:3077
msgid ""
"Because multiple push directives can be nested, if you're writing a macro "
"that expands to ``_Pragma(\"clang attribute\")`` it's good hygiene (though "
"not required) to add a namespace to your push/pop directives. A pop "
"directive with a namespace will pop the innermost push that has that same "
"namespace. This will ensure that another macro's ``pop`` won't inadvertently "
"pop your attribute. Note that an ``pop`` without a namespace will pop the "
"innermost ``push`` without a namespace. ``push``es with a namespace can only "
"be popped by ``pop`` with the same namespace. For instance:"
msgstr ""

#: ../../../LanguageExtensions.rst:3102
msgid ""
"Without the namespaces on the macros, ``other_function`` will be annotated "
"with ``[[noreturn]]`` instead of ``__attribute__((unavailable))``. This may "
"seem like a contrived example, but its very possible for this kind of "
"situation to appear in real code if the pragmas are spread out across a "
"large file. You can test if your version of clang supports namespaces on "
"``#pragma clang attribute`` with "
"``__has_extension(pragma_clang_attribute_namespaces)``."
msgstr ""

#: ../../../LanguageExtensions.rst:3110
msgid "Subject Match Rules"
msgstr ""

#: ../../../LanguageExtensions.rst:3112
msgid ""
"The set of declarations that receive a single attribute from the attribute "
"stack depends on the subject match rules that were specified in the pragma. "
"Subject match rules are specified after the attribute. The compiler expects "
"an identifier that corresponds to the subject set specifier. The "
"``apply_to`` specifier is currently the only supported subject set "
"specifier. It allows you to specify match rules that form a subset of the "
"attribute's allowed subject set, i.e. the compiler doesn't require all of "
"the attribute's subjects. For example, an attribute like ``[[nodiscard]]`` "
"whose subject set includes ``enum``, ``record`` and "
"``hasType(functionType)``, requires the presence of at least one of these "
"rules after ``apply_to``:"
msgstr ""

#: ../../../LanguageExtensions.rst:3146
msgid ""
"Multiple match rules can be specified using the ``any`` match rule, as shown "
"in the example above. The ``any`` rule applies attributes to all "
"declarations that are matched by at least one of the rules in the ``any``. "
"It doesn't nest and can't be used inside the other match rules. Redundant "
"match rules or rules that conflict with one another should not be used "
"inside of ``any``."
msgstr ""

#: ../../../LanguageExtensions.rst:3152
msgid "Clang supports the following match rules:"
msgstr ""

#: ../../../LanguageExtensions.rst:3154
msgid ""
"``function``: Can be used to apply attributes to functions. This includes C+"
"+ member functions, static functions, operators, and constructors/"
"destructors."
msgstr ""

#: ../../../LanguageExtensions.rst:3157
msgid ""
"``function(is_member)``: Can be used to apply attributes to C++ member "
"functions. This includes members like static functions, operators, and "
"constructors/destructors."
msgstr ""

#: ../../../LanguageExtensions.rst:3161
msgid ""
"``hasType(functionType)``: Can be used to apply attributes to functions, C++ "
"member functions, and variables/fields whose type is a function pointer. It "
"does not apply attributes to Objective-C methods or blocks."
msgstr ""

#: ../../../LanguageExtensions.rst:3165
msgid ""
"``type_alias``: Can be used to apply attributes to ``typedef`` declarations "
"and C++11 type aliases."
msgstr ""

#: ../../../LanguageExtensions.rst:3168
msgid ""
"``record``: Can be used to apply attributes to ``struct``, ``class``, and "
"``union`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3171
msgid ""
"``record(unless(is_union))``: Can be used to apply attributes only to "
"``struct`` and ``class`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3174
msgid ""
"``enum``: Can be be used to apply attributes to enumeration declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3176
msgid "``enum_constant``: Can be used to apply attributes to enumerators."
msgstr ""

#: ../../../LanguageExtensions.rst:3178
msgid ""
"``variable``: Can be used to apply attributes to variables, including local "
"variables, parameters, global variables, and static member variables. It "
"does not apply attributes to instance member variables or Objective-C ivars."
msgstr ""

#: ../../../LanguageExtensions.rst:3183
msgid ""
"``variable(is_thread_local)``: Can be used to apply attributes to thread-"
"local variables only."
msgstr ""

#: ../../../LanguageExtensions.rst:3186
msgid ""
"``variable(is_global)``: Can be used to apply attributes to global variables "
"only."
msgstr ""

#: ../../../LanguageExtensions.rst:3189
msgid ""
"``variable(is_parameter)``: Can be used to apply attributes to parameters "
"only."
msgstr ""

#: ../../../LanguageExtensions.rst:3192
msgid ""
"``variable(unless(is_parameter))``: Can be used to apply attributes to all "
"the variables that are not parameters."
msgstr ""

#: ../../../LanguageExtensions.rst:3195
msgid ""
"``field``: Can be used to apply attributes to non-static member variables in "
"a record. This includes Objective-C ivars."
msgstr ""

#: ../../../LanguageExtensions.rst:3198
msgid ""
"``namespace``: Can be used to apply attributes to ``namespace`` declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3200
msgid ""
"``objc_interface``: Can be used to apply attributes to ``@interface`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3203
msgid ""
"``objc_protocol``: Can be used to apply attributes to ``@protocol`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3206
msgid ""
"``objc_category``: Can be used to apply attributes to category declarations, "
"including class extensions."
msgstr ""

#: ../../../LanguageExtensions.rst:3209
msgid ""
"``objc_method``: Can be used to apply attributes to Objective-C methods, "
"including instance and class methods. Implicit methods like implicit "
"property getters and setters do not receive the attribute."
msgstr ""

#: ../../../LanguageExtensions.rst:3213
msgid ""
"``objc_method(is_instance)``: Can be used to apply attributes to Objective-C "
"instance methods."
msgstr ""

#: ../../../LanguageExtensions.rst:3216
msgid ""
"``objc_property``: Can be used to apply attributes to ``@property`` "
"declarations."
msgstr ""

#: ../../../LanguageExtensions.rst:3219
msgid ""
"``block``: Can be used to apply attributes to block declarations. This does "
"not include variables/fields of block pointer type."
msgstr ""

#: ../../../LanguageExtensions.rst:3222
msgid ""
"The use of ``unless`` in match rules is currently restricted to a strict set "
"of sub-rules that are used by the supported attributes. That means that even "
"though ``variable(unless(is_parameter))`` is a valid match rule, "
"``variable(unless(is_thread_local))`` is not."
msgstr ""

#: ../../../LanguageExtensions.rst:3228
msgid "Supported Attributes"
msgstr ""

#: ../../../LanguageExtensions.rst:3230
msgid ""
"Not all attributes can be used with the ``#pragma clang attribute`` "
"directive. Notably, statement attributes like ``[[fallthrough]]`` or type "
"attributes like ``address_space`` aren't supported by this directive. You "
"can determine whether or not an attribute is supported by the pragma by "
"referring to the :doc:`individual documentation for that attribute "
"<AttributeReference>`."
msgstr ""

#: ../../../LanguageExtensions.rst:3236
msgid ""
"The attributes are applied to all matching declarations individually, even "
"when the attribute is semantically incorrect. The attributes that aren't "
"applied to any declaration are not verified semantically."
msgstr ""

#: ../../../LanguageExtensions.rst:3241
msgid "Specifying section names for global objects (#pragma clang section)"
msgstr ""

#: ../../../LanguageExtensions.rst:3243
msgid ""
"The ``#pragma clang section`` directive provides a means to assign section-"
"names to global variables, functions and static variables."
msgstr ""

#: ../../../LanguageExtensions.rst:3246
msgid "The section names can be specified as:"
msgstr ""

#: ../../../LanguageExtensions.rst:3252
msgid ""
"The section names can be reverted back to default name by supplying an empty "
"string to the section kind, for example:"
msgstr ""

#: ../../../LanguageExtensions.rst:3259
msgid "The ``#pragma clang section`` directive obeys the following rules:"
msgstr ""

#: ../../../LanguageExtensions.rst:3261
msgid ""
"The pragma applies to all global variable, statics and function declarations "
"from the pragma to the end of the translation unit."
msgstr ""

#: ../../../LanguageExtensions.rst:3264
msgid ""
"The pragma clang section is enabled automatically, without need of any flags."
msgstr ""

#: ../../../LanguageExtensions.rst:3266
msgid "This feature is only defined to work sensibly for ELF targets."
msgstr ""

#: ../../../LanguageExtensions.rst:3268
msgid ""
"If section name is specified through _attribute_((section(\"myname\"))), "
"then the attribute name gains precedence."
msgstr ""

#: ../../../LanguageExtensions.rst:3271
msgid ""
"Global variables that are initialized to zero will be placed in the named "
"bss section, if one is present."
msgstr ""

#: ../../../LanguageExtensions.rst:3274
msgid ""
"The ``#pragma clang section`` directive does not does try to infer section-"
"kind from the name. For example, naming a section \"``.bss.mySec``\" does "
"NOT mean it will be a bss section name."
msgstr ""

#: ../../../LanguageExtensions.rst:3278
msgid ""
"The decision about which section-kind applies to each global is taken in the "
"back-end. Once the section-kind is known, appropriate section name, as "
"specified by the user using ``#pragma clang section`` directive, is applied "
"to that global."
msgstr ""

#: ../../../LanguageExtensions.rst:3283
msgid "Specifying Linker Options on ELF Targets"
msgstr ""

#: ../../../LanguageExtensions.rst:3285
msgid ""
"The ``#pragma comment(lib, ...)`` directive is supported on all ELF targets. "
"The second parameter is the library name (without the traditional Unix "
"prefix of ``lib``).  This allows you to provide an implicit link of "
"dependent libraries."
msgstr ""

#: ../../../LanguageExtensions.rst:3290
msgid "Evaluating Object Size Dynamically"
msgstr ""

#: ../../../LanguageExtensions.rst:3292
msgid ""
"Clang supports the builtin ``__builtin_dynamic_object_size``, the semantics "
"are the same as GCC's ``__builtin_object_size`` (which Clang also supports), "
"but ``__builtin_dynamic_object_size`` can evaluate the object's size at "
"runtime. ``__builtin_dynamic_object_size`` is meant to be used as a drop-in "
"replacement for ``__builtin_object_size`` in libraries that support it."
msgstr ""

#: ../../../LanguageExtensions.rst:3298
msgid ""
"For instance, here is a program that ``__builtin_dynamic_object_size`` will "
"make safer:"
msgstr ""

#: ../../../LanguageExtensions.rst:3310
msgid ""
"Since the size of ``buffer`` can't be known at compile time, Clang will fold "
"``__builtin_object_size(buffer, 0)`` into ``-1``. However, if this was "
"written as ``__builtin_dynamic_object_size(buffer, 0)``, Clang will fold it "
"into ``size``, providing some extra runtime safety."
msgstr ""
