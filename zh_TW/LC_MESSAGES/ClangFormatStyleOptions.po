# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangFormatStyleOptions.rst:3
msgid "Clang-Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:5
msgid ""
":doc:`ClangFormatStyleOptions` describes configurable formatting style "
"options supported by :doc:`LibFormat` and :doc:`ClangFormat`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:8
msgid ""
"When using :program:`clang-format` command line utility or ``clang::format::"
"reformat(...)`` functions from code, one can either use one of the "
"predefined styles (LLVM, Google, Chromium, Mozilla, WebKit, Microsoft) or "
"create a custom style by configuring specific style options."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:15
msgid "Configuring Style with clang-format"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:17
msgid ""
":program:`clang-format` supports two ways to provide custom style options: "
"directly specify style configuration in the ``-style=`` command line option "
"or use ``-style=file`` and put style configuration in the ``.clang-format`` "
"or ``_clang-format`` file in the project directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:22
msgid ""
"When using ``-style=file``, :program:`clang-format` for each input file will "
"try to find the ``.clang-format`` file located in the closest parent "
"directory of the input file. When the standard input is used, the search is "
"started from the current directory."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:27
msgid "The ``.clang-format`` file uses YAML format:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:36
msgid ""
"The configuration file can consist of several sections each having different "
"``Language:`` parameter denoting the programming language this section of "
"the configuration is targeted at. See the description of the **Language** "
"option below for the list of supported languages. The first section may have "
"no language set, it will set the default style options for all lanugages. "
"Configuration sections for specific language will override options set in "
"the default section."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:44
msgid ""
"When :program:`clang-format` formats a file, it auto-detects the language "
"using the file name. When formatting standard input or a file that doesn't "
"have the extension corresponding to its language, ``-assume-filename=`` "
"option can be used to override the file name :program:`clang-format` uses to "
"detect the language."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:50
msgid "An example of a configuration file for multiple languages:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:77
msgid ""
"An easy way to get a valid ``.clang-format`` file containing all "
"configuration options of a certain predefined style is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:84
msgid ""
"When specifying configuration in the ``-style=`` option, the same "
"configuration is applied for all input files. The format of the "
"configuration is:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:93
msgid "Disabling Formatting on a Piece of Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:95
msgid ""
"Clang-format understands also special comments that switch formatting in a "
"delimited range. The code between a comment ``// clang-format off`` or ``/* "
"clang-format off */`` up to a comment ``// clang-format on`` or ``/* clang-"
"format on */`` will not be formatted. The comments themselves will be "
"formatted (aligned) normally."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:111
msgid "Configuring Style in Code"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:113
msgid ""
"When using ``clang::format::reformat(...)`` functions, the format is "
"specified by supplying the `clang::format::FormatStyle <https://clang.llvm."
"org/doxygen/structclang_1_1format_1_1FormatStyle.html>`_ structure."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:120
msgid "Configurable Format Style Options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:122
msgid ""
"This section lists the supported style options. Value type is specified for "
"each option. For enumeration types possible values are specified both as a C+"
"+ enumeration member (with a prefix, e.g. ``LS_Auto``), and as a value "
"usable in the configuration (without a prefix: ``Auto``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:153
msgid "**BasedOnStyle** (``string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:129
msgid ""
"The style used for all options not specifically set in the configuration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:131
msgid ""
"This option is supported only in the :program:`clang-format` configuration "
"(both within ``-style='{...}'`` and the ``.clang-format`` file)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:134
#: ../../../ClangFormatStyleOptions.rst:166
#: ../../../ClangFormatStyleOptions.rst:236
#: ../../../ClangFormatStyleOptions.rst:370
#: ../../../ClangFormatStyleOptions.rst:429
#: ../../../ClangFormatStyleOptions.rst:469
#: ../../../ClangFormatStyleOptions.rst:512
#: ../../../ClangFormatStyleOptions.rst:529
#: ../../../ClangFormatStyleOptions.rst:627
#: ../../../ClangFormatStyleOptions.rst:946
#: ../../../ClangFormatStyleOptions.rst:995
#: ../../../ClangFormatStyleOptions.rst:1169
#: ../../../ClangFormatStyleOptions.rst:1204
#: ../../../ClangFormatStyleOptions.rst:1415
#: ../../../ClangFormatStyleOptions.rst:1519
#: ../../../ClangFormatStyleOptions.rst:1620
#: ../../../ClangFormatStyleOptions.rst:1677
#: ../../../ClangFormatStyleOptions.rst:1759
#: ../../../ClangFormatStyleOptions.rst:1845
#: ../../../ClangFormatStyleOptions.rst:1905
#: ../../../ClangFormatStyleOptions.rst:2074
#: ../../../ClangFormatStyleOptions.rst:2217
#: ../../../ClangFormatStyleOptions.rst:2247
msgid "Possible values:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:136
msgid ""
"``LLVM`` A style complying with the `LLVM coding standards <https://llvm.org/"
"docs/CodingStandards.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:139
msgid ""
"``Google`` A style complying with `Google's C++ style guide <http://google-"
"styleguide.googlecode.com/svn/trunk/cppguide.xml>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:142
msgid ""
"``Chromium`` A style complying with `Chromium's style guide <https://www."
"chromium.org/developers/coding-style>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:145
msgid ""
"``Mozilla`` A style complying with `Mozilla's style guide <https://developer."
"mozilla.org/en-US/docs/Developer_Guide/Coding_Style>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:148
msgid ""
"``WebKit`` A style complying with `WebKit's style guide <https://www.webkit."
"org/coding/coding-style.html>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:151
msgid ""
"``Microsoft`` A style complying with `Microsoft's style guide <https://docs."
"microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-"
"reference?view=vs-2017>`_"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:158
msgid "**AccessModifierOffset** (``int``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:158
msgid "The extra indent or outdent of access modifiers, e.g. ``public:``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:193
msgid "**AlignAfterOpenBracket** (``BracketAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:161
msgid "If ``true``, horizontally aligns arguments after an open bracket."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:163
msgid ""
"This applies to round brackets (parentheses), angle brackets and square "
"brackets."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:168
msgid ""
"``BAS_Align`` (in configuration: ``Align``) Align parameters on the open "
"bracket, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:176
msgid ""
"``BAS_DontAlign`` (in configuration: ``DontAlign``) Don't align, instead use "
"``ContinuationIndentWidth``, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:184
msgid ""
"``BAS_AlwaysBreak`` (in configuration: ``AlwaysBreak``) Always break after "
"an open bracket, if the parameters don't fit on a single line, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:207
msgid "**AlignConsecutiveMacros** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:196
msgid "If ``true``, aligns consecutive C/C++ preprocessor macros."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:198
msgid ""
"This will align the C/C++ preprocessor macros of consecutive lines. This "
"will result in formattings like"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:219
msgid "**AlignConsecutiveAssignments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:210
msgid "If ``true``, aligns consecutive assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:212
msgid ""
"This will align the assignment operators of consecutive lines. This will "
"result in formattings like"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:231
msgid "**AlignConsecutiveDeclarations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:222
msgid "If ``true``, aligns consecutive declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:224
msgid ""
"This will align the declaration names of consecutive lines. This will result "
"in formattings like"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:271
msgid "**AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:234
msgid "Options for aligning backslashes in escaped newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:238
msgid ""
"``ENAS_DontAlign`` (in configuration: ``DontAlign``) Don't align escaped "
"newlines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:248
msgid ""
"``ENAS_Left`` (in configuration: ``Left``) Align escaped newlines as far "
"left as possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:261
msgid ""
"``ENAS_Right`` (in configuration: ``Right``) Align escaped newlines in the "
"right-most column."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:283
msgid "**AlignOperands** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:274
msgid ""
"If ``true``, horizontally align operands of binary and ternary expressions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:277
msgid ""
"Specifically, this aligns operands of a single expression that needs to be "
"split over multiple lines, e.g.:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:292
msgid "**AlignTrailingComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:286
msgid "If ``true``, aligns trailing comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:309
msgid "**AllowAllArgumentsOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:295
msgid ""
"If a function call or braced initializer list doesn't fit on a line, allow "
"putting all arguments onto the next line, even if ``BinPackArguments`` is "
"``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:327
msgid "**AllowAllConstructorInitializersOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:312
msgid ""
"If a constructor definition with a member initializer list doesn't fit on a "
"single line, allow putting all member initializers onto the next line, if "
"```ConstructorInitializerAllOnOneLineOrOnePerLine``` is true. Note that this "
"parameter has no effect if "
"```ConstructorInitializerAllOnOneLineOrOnePerLine``` is false."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:345
msgid "**AllowAllParametersOfDeclarationOnNextLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:330
msgid ""
"If the function declaration doesn't fit on a line, allow putting all "
"parameters of a function declaration onto the next line even if "
"``BinPackParameters`` is ``false``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:350
msgid "**AllowShortBlocksOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:348
msgid "Allows contracting simple braced statements to a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:350
msgid "E.g., this allows ``if (a) { return; }`` to be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:364
msgid "**AllowShortCaseLabelsOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:353
msgid "If ``true``, short case labels will be contracted to a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:424
msgid "**AllowShortFunctionsOnASingleLine** (``ShortFunctionStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:367
msgid ""
"Dependent on the value, ``int f() { return 0; }`` can be put on a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:372
msgid ""
"``SFS_None`` (in configuration: ``None``) Never merge functions into a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:375
msgid ""
"``SFS_InlineOnly`` (in configuration: ``InlineOnly``) Only merge functions "
"defined inside a class. Same as \"inline\", except it does not implies "
"\"empty\": i.e. top level empty functions are not merged either."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:391
msgid "``SFS_Empty`` (in configuration: ``Empty``) Only merge empty functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:401
msgid ""
"``SFS_Inline`` (in configuration: ``Inline``) Only merge functions defined "
"inside a class. Implies \"empty\"."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:414
msgid ""
"``SFS_All`` (in configuration: ``All``) Merge all functions fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:463
msgid "**AllowShortIfStatementsOnASingleLine** (``ShortIfStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:427
msgid "If ``true``, ``if (a) return;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:431
msgid ""
"``SIS_Never`` (in configuration: ``Never``) Never put short ifs on the same "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:442
msgid ""
"``SIS_WithoutElse`` (in configuration: ``WithoutElse``) Without else put "
"short ifs on the same line only if the else is not a compound statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:452
msgid ""
"``SIS_Always`` (in configuration: ``Always``) Always put short ifs on the "
"same line if the else is not a compound statement or not."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:502
msgid "**AllowShortLambdasOnASingleLine** (``ShortLambdaStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:466
msgid ""
"Dependent on the value, ``auto lambda []() { return 0; }`` can be put on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:471
msgid ""
"``SLS_None`` (in configuration: ``None``) Never merge lambdas into a single "
"line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:474
msgid "``SLS_Empty`` (in configuration: ``Empty``) Only merge empty lambdas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:484
msgid ""
"``SLS_Inline`` (in configuration: ``Inline``) Merge lambda into a single "
"line if argument of a function."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:494
msgid ""
"``SLS_All`` (in configuration: ``All``) Merge all lambdas fitting on a "
"single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:506
msgid "**AllowShortLoopsOnASingleLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:505
msgid "If ``true``, ``while (true) continue;`` can be put on a single line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:524
msgid ""
"**AlwaysBreakAfterDefinitionReturnType** "
"(``DefinitionReturnTypeBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:509
msgid ""
"The function definition return type breaking style to use.  This option is "
"**deprecated** and is retained for backwards compatibility."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:514
msgid ""
"``DRTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:518
msgid ""
"``DRTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:521
msgid ""
"``DRTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:607
msgid "**AlwaysBreakAfterReturnType** (``ReturnTypeBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:527
msgid "The function declaration return type breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:531
msgid ""
"``RTBS_None`` (in configuration: ``None``) Break after return type "
"automatically. ``PenaltyReturnTypeOnItsOwnLine`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:543
msgid ""
"``RTBS_All`` (in configuration: ``All``) Always break after the return type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:561
msgid ""
"``RTBS_TopLevel`` (in configuration: ``TopLevel``) Always break after the "
"return types of top-level functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:576
msgid ""
"``RTBS_AllDefinitions`` (in configuration: ``AllDefinitions``) Always break "
"after the return type of function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:593
msgid ""
"``RTBS_TopLevelDefinitions`` (in configuration: ``TopLevelDefinitions``) "
"Always break after the return type of top-level definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:622
msgid "**AlwaysBreakBeforeMultilineStrings** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:610
msgid "If ``true``, always break before multiline string literals."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:612
msgid ""
"This flag is mean to make cases where there are multiple multiline strings "
"in a file look more consistent. Thus, it will only take effect if wrapping "
"the string at that point leads to it being indented "
"``ContinuationIndentWidth`` spaces from the start of the line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:667
msgid ""
"**AlwaysBreakTemplateDeclarations** (``BreakTemplateDeclarationsStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:625
msgid "The template declaration breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:629
msgid ""
"``BTDS_No`` (in configuration: ``No``) Do not force break before "
"declaration. ``PenaltyBreakTemplateDeclaration`` is taken into account."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:641
msgid ""
"``BTDS_MultiLine`` (in configuration: ``MultiLine``) Force break after "
"template declaration only when the following declaration spans multiple "
"lines."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:654
msgid ""
"``BTDS_Yes`` (in configuration: ``Yes``) Always break after template "
"declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:686
msgid "**BinPackArguments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:670
msgid ""
"If ``false``, a function call's arguments will either be all on the same "
"line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:701
msgid "**BinPackParameters** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:689
msgid ""
"If ``false``, a function declaration's or function definition's parameters "
"will either all be on the same line or will have one line each."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:931
msgid "**BraceWrapping** (``BraceWrappingFlags``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:704
msgid "Control of individual brace wrapping cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:706
msgid ""
"If ``BreakBeforeBraces`` is set to ``BS_Custom``, use this to specify how "
"each individual brace case should be handled. Otherwise, this is ignored."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:718
msgid "Nested configuration flags:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:721
msgid "``bool AfterCaseLabel`` Wrap case labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:738
msgid "``bool AfterClass`` Wrap class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:749
msgid ""
"``bool AfterControlStatement`` Wrap control statements (``if``/``for``/"
"``while``/``switch``/..)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:768
msgid "``bool AfterEnum`` Wrap enum definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:781
msgid "``bool AfterFunction`` Wrap function definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:798
msgid "``bool AfterNamespace`` Wrap namespace definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:815
msgid ""
"``bool AfterObjCDeclaration`` Wrap ObjC definitions (interfaces, "
"implementations...). @autoreleasepool and @synchronized blocks are wrapped "
"according to `AfterControlStatement` flag."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:819
msgid "``bool AfterStruct`` Wrap struct definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:834
msgid "``bool AfterUnion`` Wrap union definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:849
msgid "``bool AfterExternBlock`` Wrap extern blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:864
msgid "``bool BeforeCatch`` Wrap before ``catch``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:881
msgid "``bool BeforeElse`` Wrap before ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:896
msgid "``bool IndentBraces`` Indent the wrapped braces themselves."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:898
msgid ""
"``bool SplitEmptyFunction`` If ``false``, empty function body can be put on "
"a single line. This option is used only if the opening brace of the function "
"has already been wrapped, i.e. the `AfterFunction` brace wrapping mode is "
"set, and the function could/should not be put on a single line (as per "
"`AllowShortFunctionsOnASingleLine` and constructor formatting options)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:910
msgid ""
"``bool SplitEmptyRecord`` If ``false``, empty record (e.g. class, struct or "
"union) body can be put on a single line. This option is used only if the "
"opening brace of the record has already been wrapped, i.e. the `AfterClass` "
"(for classes) brace wrapping mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:921
msgid ""
"``bool SplitEmptyNamespace`` If ``false``, empty namespace body can be put "
"on a single line. This option is used only if the opening brace of the "
"namespace has already been wrapped, i.e. the `AfterNamespace` brace wrapping "
"mode is set."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:941
msgid "**BreakAfterJavaFieldAnnotations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:934
msgid "Break after each annotation on a field in Java files."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:990
msgid "**BreakBeforeBinaryOperators** (``BinaryOperatorStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:944
msgid "The way to wrap binary operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:948
msgid "``BOS_None`` (in configuration: ``None``) Break after operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:962
msgid ""
"``BOS_NonAssignment`` (in configuration: ``NonAssignment``) Break before "
"operators that aren't assignments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:976
msgid "``BOS_All`` (in configuration: ``All``) Break before operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1149
msgid "**BreakBeforeBraces** (``BraceBreakingStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:993
msgid "The brace breaking style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:997
msgid ""
"``BS_Attach`` (in configuration: ``Attach``) Always attach braces to "
"surrounding context."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1013
msgid ""
"``BS_Linux`` (in configuration: ``Linux``) Like ``Attach``, but break before "
"braces on function, namespace and class definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1032
msgid ""
"``BS_Mozilla`` (in configuration: ``Mozilla``) Like ``Attach``, but break "
"before braces on enum, function, and record definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1051
msgid ""
"``BS_Stroustrup`` (in configuration: ``Stroustrup``) Like ``Attach``, but "
"break before function definitions, ``catch``, and ``else``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1071
msgid ""
"``BS_Allman`` (in configuration: ``Allman``) Always break before braces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1099
msgid ""
"``BS_GNU`` (in configuration: ``GNU``) Always break before braces and add an "
"extra level of indentation to braces of control statements, not to those of "
"class, function or other definitions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1129
msgid ""
"``BS_WebKit`` (in configuration: ``WebKit``) Like ``Attach``, but break "
"before functions."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1146
msgid ""
"``BS_Custom`` (in configuration: ``Custom``) Configure each individual brace "
"in `BraceWrapping`."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1164
msgid "**BreakBeforeTernaryOperators** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1152
msgid "If ``true``, ternary operators will be placed after line breaks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1199
msgid ""
"**BreakConstructorInitializers** (``BreakConstructorInitializersStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1167
msgid "The constructor initializers style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1171
msgid ""
"``BCIS_BeforeColon`` (in configuration: ``BeforeColon``) Break constructor "
"initializers before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1180
msgid ""
"``BCIS_BeforeComma`` (in configuration: ``BeforeComma``) Break constructor "
"initializers before the colon and commas, and align the commas with the "
"colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1190
msgid ""
"``BCIS_AfterColon`` (in configuration: ``AfterColon``) Break constructor "
"initializers after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1237
msgid "**BreakInheritanceList** (``BreakInheritanceListStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1202
msgid "The inheritance list style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1206
msgid ""
"``BILS_BeforeColon`` (in configuration: ``BeforeColon``) Break inheritance "
"list before the colon and after the commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1216
msgid ""
"``BILS_BeforeComma`` (in configuration: ``BeforeComma``) Break inheritance "
"list before the colon and commas, and align the commas with the colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1227
msgid ""
"``BILS_AfterColon`` (in configuration: ``AfterColon``) Break inheritance "
"list after the colon and commas."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1240
msgid "**BreakStringLiterals** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1240
msgid "Allow breaking string literals when formatting."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1247
msgid "**ColumnLimit** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1243
msgid "The column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1245
msgid ""
"A column limit of ``0`` means that there is no column limit. In this case, "
"clang-format will respect the input's line breaking decisions within "
"statements unless they contradict other rules."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1257
msgid "**CommentPragmas** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1250
msgid ""
"A regular expression that describes comments with special meaning, which "
"should not be split into lines or otherwise changed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1282
msgid "**CompactNamespaces** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1260
msgid ""
"If ``true``, consecutive namespace declarations will be on the same line. If "
"``false``, each namespace is declared on a new line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1275
msgid ""
"If it does not fit on a single line, the overflowing namespaces get wrapped:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1301
msgid "**ConstructorInitializerAllOnOneLineOrOnePerLine** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1285
msgid ""
"If the constructor initializers don't fit on a line, put each initializer on "
"its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1305
msgid "**ConstructorInitializerIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1304
msgid ""
"The number of characters to use for indentation of constructor initializer "
"lists as well as inheritance lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1316
msgid "**ContinuationIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1308
msgid "Indent width for line continuations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1339
msgid "**Cpp11BracedListStyle** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1319
msgid "If ``true``, format braced lists as best suited for C++11 braced lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1322
msgid ""
"Important differences: - No spaces inside the braced list. - No line break "
"before the closing brace. - Indentation with the continuation indent, not "
"with the block indent."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1327
msgid ""
"Fundamentally, C++11 braced lists are formatted exactly like function calls "
"would be formatted in their place. If the braced list follows a name (e.g. a "
"type or variable name), clang-format formats as if the ``{}`` were the "
"parentheses of a function call with that name. If there is no name, a zero-"
"length name is assumed."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1346
msgid "**DerivePointerAlignment** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1342
msgid ""
"If ``true``, analyze the formatted file for the most common alignment of "
"``&`` and ``*``. Pointer and reference alignment styles are going to be "
"updated according to the preferences found in the file. ``PointerAlignment`` "
"is then used only as fallback."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1349
msgid "**DisableFormat** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1349
msgid "Disables formatting completely."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1361
msgid "**ExperimentalAutoDetectBinPacking** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1352
msgid ""
"If ``true``, clang-format detects whether function calls and definitions are "
"formatted with one parameter per line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1355
msgid ""
"Each call can be bin-packed, one-per-line or inconclusive. If it is "
"inconclusive, e.g. completely on one line, but a decision needs to be made, "
"clang-format analyzes whether there are other bin-packed cases in the input "
"file and act accordingly."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1360
msgid ""
"NOTE: This is an experimental flag, that might go away or be renamed. Do not "
"use this in config files, etc. Use at your own risk."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1372
msgid "**FixNamespaceComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1364
msgid ""
"If ``true``, clang-format adds missing namespace end comments and fixes "
"invalid existing ones."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1391
msgid "**ForEachMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1375
msgid ""
"A vector of macros that should be interpreted as foreach loops instead of as "
"function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1378
#: ../../../ClangFormatStyleOptions.rst:1397
#: ../../../ClangFormatStyleOptions.rst:1802
msgid "These are expected to be macros of the form:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1385
#: ../../../ClangFormatStyleOptions.rst:1403
msgid "In the .clang-format configuration file, this can be configured like:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1391
msgid "For example: BOOST_FOREACH."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1409
msgid "**TypenameMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1394
msgid ""
"A vector of macros that should be interpreted as type declarations instead "
"of as function calls."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1409
msgid "For example: OpenSSL STACK_OF, BSD LIST_ENTRY."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1449
msgid "**IncludeBlocks** (``IncludeBlocksStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1412
msgid ""
"Dependent on the value, multiple ``#include`` blocks can be sorted as one "
"and divided based on category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1417
msgid ""
"``IBS_Preserve`` (in configuration: ``Preserve``) Sort each ``#include`` "
"block separately."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1427
msgid ""
"``IBS_Merge`` (in configuration: ``Merge``) Merge multiple ``#include`` "
"blocks together and sort as one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1437
msgid ""
"``IBS_Regroup`` (in configuration: ``Regroup``) Merge multiple ``#include`` "
"blocks together and sort as one. Then split into groups based on category "
"priority. See ``IncludeCategories``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1484
msgid "**IncludeCategories** (``std::vector<IncludeCategory>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1452
msgid ""
"Regular expressions denoting the different ``#include`` categories used for "
"ordering ``#includes``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1455
msgid ""
"`POSIX extended <https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/"
"V1_chap09.html>`_ regular expressions are supported."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1459
msgid ""
"These regular expressions are matched against the filename of an include "
"(including the <> or \"\") in order. The value belonging to the first "
"matching regular expression is assigned and ``#includes`` are sorted first "
"according to increasing category number and then alphabetically within each "
"category."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1465
msgid ""
"If none of the regular expressions match, INT_MAX is assigned as category. "
"The main header for a source file automatically gets category 0. so that it "
"is generally kept at the beginning of the ``#includes`` (https://llvm.org/"
"docs/CodingStandards.html#include-style). However, you can also assign "
"negative priorities if you have certain headers that always need to be first."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1472
#: ../../../ClangFormatStyleOptions.rst:1949
msgid "To configure this in the .clang-format file, use:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1497
msgid "**IncludeIsMainRegex** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1487
msgid ""
"Specify a regular expression of suffixes that are allowed in the file-to-"
"main-include mapping."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1490
msgid ""
"When guessing whether a #include is the \"main\" include (to assign category "
"0, see above), use this regex of allowed suffixes to the header stem. A "
"partial match is done, so that: - \"\" means \"arbitrary suffix\" - \"$\" "
"means \"no suffix\""
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1496
msgid ""
"For example, if configured to \"(_test)?$\", then a header a.h would be seen "
"as the \"main\" include in both a.cc and a_test.cc."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1514
msgid "**IndentCaseLabels** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1500
msgid "Indent case labels one level from the switch statement."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1502
msgid ""
"When ``false``, use the same indentation level as for the switch statement. "
"Switch statement body is always indented one level more than case labels."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1554
msgid "**IndentPPDirectives** (``PPDirectiveIndentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1517
msgid "The preprocessor directive indenting style to use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1521
msgid ""
"``PPDIS_None`` (in configuration: ``None``) Does not indent any directives."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1532
msgid ""
"``PPDIS_AfterHash`` (in configuration: ``AfterHash``) Indents directives "
"after the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1543
msgid ""
"``PPDIS_BeforeHash`` (in configuration: ``BeforeHash``) Indents directives "
"before the hash."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1568
msgid "**IndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1557
msgid "The number of columns to use for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1582
msgid "**IndentWrappedFunctionNames** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1571
msgid ""
"Indent if a function definition or declaration is wrapped after the type."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1615
msgid "**JavaImportGroups** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1585
msgid "A vector of prefixes ordered by the desired groups for Java imports."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1587
msgid ""
"Each group is separated by a newline. Static imports will also follow the "
"same grouping convention above all non-static imports. One group's prefix "
"can be a subset of another - the longest prefix is always matched. Within a "
"group, the imports are ordered lexicographically."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1592
msgid ""
"In the .clang-format configuration file, this can be configured like in the "
"following yaml example. This will result in imports being formatted as in "
"the Java example below."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1646
msgid "**JavaScriptQuotes** (``JavaScriptQuoteStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1618
msgid "The JavaScriptQuoteStyle to use for JavaScript strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1622
msgid ""
"``JSQS_Leave`` (in configuration: ``Leave``) Leave string quotes as they are."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1630
msgid ""
"``JSQS_Single`` (in configuration: ``Single``) Always use single quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1638
msgid ""
"``JSQS_Double`` (in configuration: ``Double``) Always use double quotes."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1661
msgid "**JavaScriptWrapImports** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1649
msgid "Whether to wrap JavaScript import/export statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1672
msgid "**KeepEmptyLinesAtTheStartOfBlocks** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1664
msgid "If true, the empty line at the start of blocks is kept."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1708
msgid "**Language** (``LanguageKind``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1675
msgid "Language, this format style is targeted at."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1679
msgid "``LK_None`` (in configuration: ``None``) Do not use."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1682
msgid "``LK_Cpp`` (in configuration: ``Cpp``) Should be used for C, C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1685
msgid "``LK_CSharp`` (in configuration: ``CSharp``) Should be used for C#."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1688
msgid "``LK_Java`` (in configuration: ``Java``) Should be used for Java."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1691
msgid ""
"``LK_JavaScript`` (in configuration: ``JavaScript``) Should be used for "
"JavaScript."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1694
msgid ""
"``LK_ObjC`` (in configuration: ``ObjC``) Should be used for Objective-C, "
"Objective-C++."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1697
msgid ""
"``LK_Proto`` (in configuration: ``Proto``) Should be used for Protocol "
"Buffers (https://developers.google.com/protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1701
msgid ""
"``LK_TableGen`` (in configuration: ``TableGen``) Should be used for TableGen "
"code."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1704
msgid ""
"``LK_TextProto`` (in configuration: ``TextProto``) Should be used for "
"Protocol Buffer messages in text format (https://developers.google.com/"
"protocol-buffers/)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1737
msgid "**MacroBlockBegin** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1711
msgid "A regular expression matching macros that start a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1740
msgid "**MacroBlockEnd** (``std::string``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1740
msgid "A regular expression matching macros that end a block."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1754
msgid "**MaxEmptyLinesToKeep** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1743
msgid "The maximum number of consecutive empty lines to keep."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1797
msgid "**NamespaceIndentation** (``NamespaceIndentationKind``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1757
msgid "The indentation used for namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1761
msgid "``NI_None`` (in configuration: ``None``) Don't indent in namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1773
msgid ""
"``NI_Inner`` (in configuration: ``Inner``) Indent only in inner namespaces "
"(nested in other namespaces)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1785
msgid "``NI_All`` (in configuration: ``All``) Indent in all namespaces."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1810
msgid "**NamespaceMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1800
msgid "A vector of macros which are used to open namespace blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1810
msgid "For example: TESTSUITE"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1856
msgid "**ObjCBinPackProtocolList** (``BinPackStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1813
msgid ""
"Controls bin-packing Objective-C protocol conformance list items into as few "
"lines as possible when they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1816
msgid ""
"If ``Auto`` (the default), delegates to the value in ``BinPackParameters``. "
"If that is ``true``, bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1821
msgid ""
"If ``Always``, always bin-packs Objective-C protocol conformance list items "
"into as few lines as possible whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1825
msgid ""
"If ``Never``, lays out Objective-C protocol conformance list items onto "
"individual lines whenever they go over ``ColumnLimit``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1847
msgid ""
"``BPS_Auto`` (in configuration: ``Auto``) Automatically determine parameter "
"bin-packing behavior."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1850
msgid ""
"``BPS_Always`` (in configuration: ``Always``) Always bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1853
msgid "``BPS_Never`` (in configuration: ``Never``) Never bin-pack parameters."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1867
msgid "**ObjCBlockIndentWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1859
msgid "The number of characters to use for indentation of ObjC blocks."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1871
msgid "**ObjCSpaceAfterProperty** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1870
msgid ""
"Add a space after ``@property`` in Objective-C, i.e. use ``@property "
"(readonly)`` instead of ``@property(readonly)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1875
msgid "**ObjCSpaceBeforeProtocolList** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1874
msgid ""
"Add a space in front of an Objective-C protocol list, i.e. use ``Foo "
"<Protocol>`` instead of ``Foo<Protocol>``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1878
msgid "**PenaltyBreakAssignment** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1878
msgid "The penalty for breaking around an assignment operator."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1881
msgid "**PenaltyBreakBeforeFirstCallParameter** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1881
msgid "The penalty for breaking a function call after ``call(``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1884
msgid "**PenaltyBreakComment** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1884
msgid "The penalty for each line break introduced inside a comment."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1887
msgid "**PenaltyBreakFirstLessLess** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1887
msgid "The penalty for breaking before the first ``<<``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1890
msgid "**PenaltyBreakString** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1890
msgid "The penalty for each line break introduced inside a string literal."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1893
msgid "**PenaltyBreakTemplateDeclaration** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1893
msgid "The penalty for breaking after template declaration."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1896
msgid "**PenaltyExcessCharacter** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1896
msgid "The penalty for each character outside of the column limit."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1900
msgid "**PenaltyReturnTypeOnItsOwnLine** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1899
msgid "Penalty for putting the return type of a function onto its own line."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1928
msgid "**PointerAlignment** (``PointerAlignmentStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1903
msgid "Pointer and reference alignment style."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1907
msgid "``PAS_Left`` (in configuration: ``Left``) Align pointer to the left."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1914
msgid "``PAS_Right`` (in configuration: ``Right``) Align pointer to the right."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1921
msgid ""
"``PAS_Middle`` (in configuration: ``Middle``) Align pointer in the middle."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1966
msgid "**RawStringFormats** (``std::vector<RawStringFormat>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1931
msgid ""
"Defines hints for detecting supported languages code blocks in raw strings."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1934
msgid ""
"A raw string with a matching delimiter or a matching enclosing function name "
"will be reformatted assuming the specified language based on the style for "
"that language defined in the .clang-format file. If no style has been "
"defined in the .clang-format file for the specific language, a predefined "
"style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not found, the "
"formatting is based on llvm style. A matching delimiter takes precedence "
"over a matching enclosing function name for determining the language of the "
"raw string contents."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1943
msgid ""
"If a canonical delimiter is specified, occurrences of other delimiters for "
"the same language will be updated to the canonical if possible."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1946
msgid ""
"There should be at most one specification per language and each delimiter "
"and enclosing function should not occur in multiple specifications."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1981
msgid "**ReflowComments** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1969
msgid "If ``true``, clang-format will attempt to re-flow comments."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1990
msgid "**SortIncludes** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1984
msgid "If ``true``, clang-format will sort ``#includes``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2007
msgid "**SortUsingDeclarations** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1993
msgid "If ``true``, clang-format will sort using declarations."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:1995
msgid ""
"The order of using declarations is defined as follows: Split the strings by "
"\"::\" and discard any initial empty strings. The last element of each list "
"is a non-namespace name; all others are namespace names. Sort the lists of "
"names lexicographically, where the sort order of individual names is that "
"all non-namespace names come before all namespace names, and within those "
"groups, names are in case-insensitive lexicographic order."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2015
msgid "**SpaceAfterCStyleCast** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2010
msgid "If ``true``, a space is inserted after C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2023
msgid "**SpaceAfterLogicalNot** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2018
msgid ""
"If ``true``, a space is inserted after the logical not operator (``!``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2031
msgid "**SpaceAfterTemplateKeyword** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2026
msgid "If ``true``, a space will be inserted after the 'template' keyword."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2040
msgid "**SpaceBeforeAssignmentOperators** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2034
msgid "If ``false``, spaces will be removed before assignment operators."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2052
msgid "**SpaceBeforeCpp11BracedList** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2043
msgid ""
"If ``true``, a space will be inserted before a C++11 braced list used to "
"initialize an object (after the preceding identifier or type)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2061
msgid "**SpaceBeforeCtorInitializerColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2055
msgid ""
"If ``false``, spaces will be removed before constructor initializer colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2069
msgid "**SpaceBeforeInheritanceColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2064
msgid "If ``false``, spaces will be removed before inheritance colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2126
msgid "**SpaceBeforeParens** (``SpaceBeforeParensOptions``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2072
msgid "Defines in which cases to put a space before opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2076
msgid ""
"``SBPO_Never`` (in configuration: ``Never``) Never put a space before "
"opening parentheses."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2087
msgid ""
"``SBPO_ControlStatements`` (in configuration: ``ControlStatements``) Put a "
"space before opening parentheses only after control statement keywords "
"(``for/if/while...``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2099
msgid ""
"``SBPO_NonEmptyParentheses`` (in configuration: ``NonEmptyParentheses``) Put "
"a space before opening parentheses only if the parentheses are not empty i."
"e. '()'"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2112
msgid ""
"``SBPO_Always`` (in configuration: ``Always``) Always put a space before "
"opening parentheses, except when it's prohibited by the syntax rules (in "
"function-like macro definitions) or when determined by other style rules "
"(after unary operators, opening parentheses, etc.)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2135
msgid "**SpaceBeforeRangeBasedForLoopColon** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2129
msgid "If ``false``, spaces will be removed before range-based for loop colon."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2148
msgid "**SpaceInEmptyParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2138
msgid "If ``true``, spaces may be inserted into ``()``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2165
msgid "**SpacesBeforeTrailingComments** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2151
msgid "The number of spaces before trailing line comments (``//`` - comments)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2154
msgid ""
"This does not affect trailing block comments (``/*`` - comments) as those "
"commonly have different usage patterns and a number of special cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2175
msgid "**SpacesInAngles** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2168
msgid ""
"If ``true``, spaces will be inserted after ``<`` and before ``>`` in "
"template argument lists."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2183
msgid "**SpacesInCStyleCastParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2178
msgid "If ``true``, spaces may be inserted into C style casts."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2193
msgid "**SpacesInContainerLiterals** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2186
msgid ""
"If ``true``, spaces are inserted inside container literals (e.g. ObjC and "
"Javascript array and dict literals)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2201
msgid "**SpacesInParentheses** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2196
msgid "If ``true``, spaces will be inserted after ``(`` and before ``)``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2211
msgid "**SpacesInSquareBrackets** (``bool``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2204
msgid ""
"If ``true``, spaces will be inserted after ``[`` and before ``]``. Lambdas "
"or unspecified size array declarations will not be affected."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2229
msgid "**Standard** (``LanguageStandard``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2214
msgid ""
"Format compatible with this standard, e.g. use ``A<A<int> >`` instead of "
"``A<A<int>>`` for ``LS_Cpp03``."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2219
msgid "``LS_Cpp03`` (in configuration: ``Cpp03``) Use C++03-compatible syntax."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2222
msgid ""
"``LS_Cpp11`` (in configuration: ``Cpp11``) Use features of C++11, C++14 and "
"C++1z (e.g. ``A<A<int>>`` instead of ``A<A<int> >``)."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2226
msgid ""
"``LS_Auto`` (in configuration: ``Auto``) Automatic detection based on the "
"input."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2239
msgid "**StatementMacros** (``std::vector<std::string>``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2232
msgid "A vector of macros that should be interpreted as complete statements."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2235
msgid ""
"Typical macros are expressions, and require a semi-colon to be added; "
"sometimes this is not the case, and this allows to make clang-format aware "
"of such cases."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2239
msgid "For example: Q_UNUSED"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2242
msgid "**TabWidth** (``unsigned``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2242
msgid "The number of columns used for tab stops."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2262
msgid "**UseTab** (``UseTabStyle``)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2245
msgid "The way to use tab characters in the resulting file."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2249
msgid "``UT_Never`` (in configuration: ``Never``) Never use tab."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2252
msgid ""
"``UT_ForIndentation`` (in configuration: ``ForIndentation``) Use tabs only "
"for indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2255
msgid ""
"``UT_ForContinuationAndIndentation`` (in configuration: "
"``ForContinuationAndIndentation``) Use tabs only for line continuation and "
"indentation."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2258
msgid ""
"``UT_Always`` (in configuration: ``Always``) Use tabs whenever we need to "
"fill whitespace that spans at least from one tab stop to the next one."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2267
msgid "Adding additional style options"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2269
msgid ""
"Each additional style option adds costs to the clang-format project. Some of "
"these costs affect the clang-format development itself, as we need to make "
"sure that any given combination of options work and that new features don't "
"break any of the existing options in any way. There are also costs for end "
"users as options become less discoverable and people have to think about and "
"make a decision on options they don't really care about."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2276
msgid ""
"The goal of the clang-format project is more on the side of supporting a "
"limited set of styles really well as opposed to supporting every single "
"style used by a codebase somewhere in the wild. Of course, we do want to "
"support all major projects and thus have established the following bar for "
"adding style options. Each new style option must .."
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2282
msgid "be used in a project of significant size (have dozens of contributors)"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2283
msgid "have a publicly accessible style guide"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2284
msgid "have a person willing to contribute and maintain patches"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2287
msgid "Examples"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2289
msgid ""
"A style similar to the `Linux Kernel style <https://www.kernel.org/doc/"
"Documentation/CodingStyle>`_:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2301
msgid "The result is (imagine that tabs are used for indentation here):"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2330
msgid "A style similar to the default Visual Studio formatting style:"
msgstr ""

#: ../../../ClangFormatStyleOptions.rst:2341
msgid "The result is:"
msgstr ""
