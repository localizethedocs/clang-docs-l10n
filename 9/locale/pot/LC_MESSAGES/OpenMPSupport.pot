# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../OpenMPSupport.rst:1
msgid ""
"<style type=\"text/css\">\n"
"  .none { background-color: #FFCCCC }\n"
"  .partial { background-color: #FFFF99 }\n"
"  .good { background-color: #CCFF99 }\n"
"</style>"
msgstr ""

#: ../../../OpenMPSupport.rst:18
msgid "OpenMP Support"
msgstr ""

#: ../../../OpenMPSupport.rst:20
msgid "Clang supports the following OpenMP 5.0 features"
msgstr ""

#: ../../../OpenMPSupport.rst:22
msgid ""
"The `reduction`-based clauses in the `task` and `target`-based directives."
msgstr ""

#: ../../../OpenMPSupport.rst:24
msgid ""
"Support relational-op != (not-equal) as one of the canonical forms of random "
"access iterator."
msgstr ""

#: ../../../OpenMPSupport.rst:27
msgid "Support for mapping of the lambdas in target regions."
msgstr ""

#: ../../../OpenMPSupport.rst:29
msgid "Parsing/sema analysis for the requires directive."
msgstr ""

#: ../../../OpenMPSupport.rst:31
msgid "Nested declare target directives."
msgstr ""

#: ../../../OpenMPSupport.rst:33
msgid "Make the `this` pointer implicitly mapped as `map(this[:1])`."
msgstr ""

#: ../../../OpenMPSupport.rst:35
msgid "The `close` *map-type-modifier*."
msgstr ""

#: ../../../OpenMPSupport.rst:37
msgid ""
"Clang fully supports OpenMP 4.5. Clang supports offloading to X86_64, "
"AArch64, PPC64[LE] and has `basic support for Cuda devices`_."
msgstr ""

#: ../../../OpenMPSupport.rst:40
msgid ""
"#pragma omp declare simd: :partial:`Partial`.  We support parsing/semantic "
"analysis + generation of special attributes for X86 target, but still "
"missing the LLVM pass for vectorization."
msgstr ""

#: ../../../OpenMPSupport.rst:44
msgid ""
"In addition, the LLVM OpenMP runtime `libomp` supports the OpenMP Tools "
"Interface (OMPT) on x86, x86_64, AArch64, and PPC64 on Linux, Windows, and "
"macOS."
msgstr ""

#: ../../../OpenMPSupport.rst:48
msgid "General improvements"
msgstr ""

#: ../../../OpenMPSupport.rst:49
msgid ""
"New collapse clause scheme to avoid expensive remainder operations. Compute "
"loop index variables after collapsing a loop nest via the collapse clause by "
"replacing the expensive remainder operation with multiplications and "
"additions."
msgstr ""

#: ../../../OpenMPSupport.rst:54
msgid ""
"The default schedules for the `distribute` and `for` constructs in a "
"parallel region and in SPMD mode have changed to ensure coalesced accesses. "
"For the `distribute` construct, a static schedule is used with a chunk size "
"equal to the number of threads per team (default value of threads or as "
"specified by the `thread_limit` clause if present). For the `for` construct, "
"the schedule is static with chunk size of one."
msgstr ""

#: ../../../OpenMPSupport.rst:62
msgid ""
"Simplified SPMD code generation for `distribute parallel for` when the new "
"default schedules are applicable."
msgstr ""

#: ../../../OpenMPSupport.rst:68
msgid "Cuda devices support"
msgstr ""

#: ../../../OpenMPSupport.rst:71
msgid "Directives execution modes"
msgstr ""

#: ../../../OpenMPSupport.rst:73
msgid ""
"Clang code generation for target regions supports two modes: the SPMD and "
"non-SPMD modes. Clang chooses one of these two modes automatically based on "
"the way directives and clauses on those directives are used. The SPMD mode "
"uses a simplified set of runtime functions thus increasing performance at "
"the cost of supporting some OpenMP features. The non-SPMD mode is the most "
"generic mode and supports all currently available OpenMP features. The "
"compiler will always attempt to use the SPMD mode wherever possible. SPMD "
"mode will not be used if:"
msgstr ""

#: ../../../OpenMPSupport.rst:81
msgid ""
"The target region contains an `if()` clause that refers to a `parallel` "
"directive."
msgstr ""

#: ../../../OpenMPSupport.rst:84
msgid ""
"The target region contains a `parallel` directive with a `num_threads()` "
"clause."
msgstr ""

#: ../../../OpenMPSupport.rst:87
msgid ""
"The target region contains user code (other than OpenMP-specific directives) "
"in between the `target` and the `parallel` directives."
msgstr ""

#: ../../../OpenMPSupport.rst:91
msgid "Data-sharing modes"
msgstr ""

#: ../../../OpenMPSupport.rst:93
msgid ""
"Clang supports two data-sharing models for Cuda devices: `Generic` and "
"`Cuda` modes. The default mode is `Generic`. `Cuda` mode can give an "
"additional performance and can be activated using the `-fopenmp-cuda-mode` "
"flag. In `Generic` mode all local variables that can be shared in the "
"parallel regions are stored in the global memory. In `Cuda` mode local "
"variables are not shared between the threads and it is user responsibility "
"to share the required data between the threads in the parallel regions."
msgstr ""

#: ../../../OpenMPSupport.rst:102
msgid "Collapsed loop nest counter"
msgstr ""

#: ../../../OpenMPSupport.rst:104
msgid ""
"When using the collapse clause on a loop nest the default behavior is to "
"automatically extend the representation of the loop counter to 64 bits for "
"the cases where the sizes of the collapsed loops are not known at compile "
"time. To prevent this conservative choice and use at most 32 bits, compile "
"your program with the `-fopenmp-optimistic-collapse`."
msgstr ""

#: ../../../OpenMPSupport.rst:112
msgid "Features not supported or with limited support for Cuda devices"
msgstr ""

#: ../../../OpenMPSupport.rst:114
msgid "Cancellation constructs are not supported."
msgstr ""

#: ../../../OpenMPSupport.rst:116
msgid "Doacross loop nest is not supported."
msgstr ""

#: ../../../OpenMPSupport.rst:118
msgid "User-defined reductions are supported only for trivial types."
msgstr ""

#: ../../../OpenMPSupport.rst:120
msgid "Nested parallelism: inner parallel regions are executed sequentially."
msgstr ""

#: ../../../OpenMPSupport.rst:122
msgid ""
"Static linking of libraries containing device code is not supported yet."
msgstr ""

#: ../../../OpenMPSupport.rst:124
msgid ""
"Automatic translation of math functions in target regions to device-specific "
"math functions is not implemented yet."
msgstr ""

#: ../../../OpenMPSupport.rst:127
msgid ""
"Debug information for OpenMP target regions is supported, but sometimes it "
"may be required to manually specify the address class of the inspected "
"variables. In some cases the local variables are actually allocated in the "
"global memory, but the debug info may be not aware of it."
msgstr ""
