# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:3
msgid "Cross Translation Unit (CTU) Analysis"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:5
msgid ""
"Normally, static analysis works in the boundary of one translation unit "
"(TU). However, with additional steps and configuration we can enable the "
"analysis to inline the definition of a function from another TU."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:13
msgid "Overview"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:14
msgid ""
"CTU analysis can be used in a variety of ways. The importing of external TU "
"definitions can work with pre-dumped PCH files or generating the necessary "
"AST structure on-demand, during the analysis of the main TU. Driving the "
"static analysis can also be implemented in multiple ways. The most direct "
"way is to specify the necessary commandline options of the Clang frontend "
"manually (and generate the prerequisite dependencies of the specific import "
"method by hand). This process can be automated by other tools, like "
"`CodeChecker <https://github.com/Ericsson/codechecker>`_ and scan-build-py "
"(preference for the former)."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:22
msgid "PCH-based analysis"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:23
msgid ""
"The analysis needs the PCH dumps of all the translations units used in the "
"project. These can be generated by the Clang Frontend itself, and must be "
"arranged in a specific way in the filesystem. The index, which maps symbols' "
"USR names to PCH dumps containing them must also be generated by the `clang-"
"extdef-mapping`. Entries in the index *must* have an `.ast` suffix if the "
"goal is to use PCH-based analysis, as the lack of that extension signals "
"that the entry is to be used as a source-file, and parsed on-demand. This "
"tool uses a :doc:`compilation database <../../JSONCompilationDatabase>` to "
"determine the compilation flags used. The analysis invocation must be "
"provided with the directory which contains the dumps and the mapping files."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:34
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:224
msgid "Manual CTU Analysis"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:35
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:226
msgid "Let's consider these source files in our minimal example:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:53
msgid "And a compilation database:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:70
msgid ""
"We'd like to analyze `main.cpp` and discover the division by zero bug. In "
"order to be able to inline the definition of `foo` from `foo.cpp` first we "
"have to generate the `AST` (or `PCH`) file of `foo.cpp`:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:83
msgid ""
"The next step is to create a CTU index file which holds the `USR` name and "
"location of external definitions in the source files in format `<USR-Length>:"
"<USR> <File-Path>`:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:92
msgid ""
"We have to modify `externalDefMap.txt` to contain the name of the `.ast` "
"files instead of the source files:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:98
msgid ""
"We still have to further modify the `externalDefMap.txt` file to contain "
"relative paths:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:104
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:289
msgid ""
"Now everything is available for the CTU analysis. We have to feed Clang with "
"CTU specific extra arguments:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:125
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:311
msgid ""
"This manual procedure is error-prone and not scalable, therefore to analyze "
"real projects it is recommended to use `CodeChecker` or `scan-build-py`."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:129
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:315
msgid "Automated CTU Analysis with CodeChecker"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:130
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:316
msgid ""
"The `CodeChecker <https://github.com/Ericsson/codechecker>`_ project fully "
"supports automated CTU analysis with Clang. Once we have set up the `PATH` "
"environment variable and we activated the python `venv` then it is all it "
"takes:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:150
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:336
msgid ""
"The `plist` files contain the results of the analysis, which may be viewed "
"with the regular analysis tools. E.g. one may use `CodeChecker parse` to "
"view the results in command line:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:178
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:364
msgid ""
"Or we can use `CodeChecker parse -e html` to export the results into HTML "
"format:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:186
#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:372
msgid "Automated CTU Analysis with scan-build-py (don't do it)"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:187
msgid ""
"We actively develop CTU with CodeChecker as the driver for this feature, "
"`scan-build-py` is not actively developed for CTU. `scan-build-py` has "
"various errors and issues, expect it to work only with the very basic "
"projects only."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:190
msgid "Example usage of scan-build-py:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:207
msgid "On-demand analysis"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:208
msgid ""
"The analysis produces the necessary AST structure of external TUs during "
"analysis. This requires the exact compiler invocations for each TU, which "
"can be generated by hand, or by tools driving the analyzer. The compiler "
"invocation is a shell command that could be used to compile the TU-s main "
"source file. The mapping from absolute source file paths of a TU to lists of "
"compilation command segments used to compile said TU are given in YAML "
"format referred to as `invocation list`, and must be passed as an analyzer-"
"config argument. The index, which maps function USR names to source files "
"containing them must also be generated by the `clang-extdef-mapping`. "
"Entries in the index must *not* have an `.ast` suffix if the goal is to use "
"On-demand analysis, as that extension signals that the entry is to be used "
"as an PCH-dump. The mapping of external definitions implicitly uses a :doc:"
"`compilation database <../../JSONCompilationDatabase>` to determine the "
"compilation flags used. The analysis invocation must be provided with the "
"directory which contains the mapping files, and the `invocation list` which "
"is used to determine compiler flags."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:244
msgid "The compilation database:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:261
msgid "The `invocation list`:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:279
msgid ""
"We'd like to analyze `main.cpp` and discover the division by zero bug. As we "
"are using On-demand mode, we only need to create a CTU index file which "
"holds the `USR` name and location of external definitions in the source "
"files in format `<USR-Length>:<USR> <File-Path>`:"
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:373
msgid ""
"We actively develop CTU with CodeChecker as the driver for feature, `scan-"
"build-py` is not actively developed for CTU. `scan-build-py` has various "
"errors and issues, expect it to work only with the very basic projects only."
msgstr ""

#: ../../../analyzer/user-docs/CrossTranslationUnit.rst:376
msgid "Currently On-demand analysis is not supported with `scan-build-py`."
msgstr ""
