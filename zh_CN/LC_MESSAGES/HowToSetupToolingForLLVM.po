# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToSetupToolingForLLVM.rst:3
msgid "How To Setup Clang Tooling For LLVM"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:5
msgid ""
"Clang Tooling provides infrastructure to write tools that need syntactic and "
"semantic information about a program. This term also relates to a set of "
"specific tools using this infrastructure (e.g. ``clang-check``). This "
"document provides information on how to set up and use Clang Tooling for the "
"LLVM source code."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:12
msgid "Introduction"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:14
msgid ""
"Clang Tooling needs a compilation database to figure out specific build "
"options for each file. Currently it can create a compilation database from "
"the ``compile_commands.json`` file, generated by CMake. When invoking clang "
"tools, you can either specify a path to a build directory using a command "
"line parameter ``-p`` or let Clang Tooling find this file in your source "
"tree. In either case you need to configure your build using CMake to use "
"clang tools."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:23
msgid "Setup Clang Tooling Using CMake and Make"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:25
msgid ""
"If you intend to use make to build LLVM, you should have CMake 2.8.6 or "
"later installed (can be found `here <https://cmake.org>`_)."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:28
msgid ""
"First, you need to generate Makefiles for LLVM with CMake. You need to make "
"a build directory and run CMake from it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:37
msgid ""
"If you want to use clang instead of GCC, you can add ``-DCMAKE_C_COMPILER=/"
"path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``. You can also use "
"``ccmake``, which provides a curses interface to configure CMake variables."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:42
#: ../../../HowToSetupToolingForLLVM.rst:185
msgid ""
"As a result, the new ``compile_commands.json`` file should appear in the "
"current directory. You should link it to the LLVM source tree so that Clang "
"Tooling is able to use it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:50
msgid "Now you are ready to build and test LLVM using make:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:57
msgid "Using Clang Tools"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:59
msgid ""
"After you completed the previous steps, you are ready to run clang tools. If "
"you have a recent clang installed, you should have ``clang-check`` in "
"``$PATH``. Try to run it on any ``.cpp`` file inside the LLVM source tree:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:67
msgid ""
"If you're using vim, it's convenient to have clang-check integrated. Put "
"this into your ``.vimrc``:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:98
msgid ""
"When editing a .cpp/.cxx/.cc/.c file, hit F5 to reparse the file. In case "
"the current file has a different extension (for example, .h), F5 will re-run "
"the last clang-check invocation made from this vim instance (if any). The "
"output will go into the error window, which is opened automatically when "
"clang-check finds errors, and can be re-opened with ``:cope``."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:105
msgid ""
"Other ``clang-check`` options that can be useful when working with clang AST:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:108
msgid "``-ast-print`` --- Build ASTs and then pretty-print them."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:109
msgid "``-ast-dump`` --- Build ASTs and then debug dump them."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:110
msgid ""
"``-ast-dump-filter=<string>`` --- Use with ``-ast-dump`` or ``-ast-print`` "
"to dump/print only AST declaration nodes having a certain substring in a "
"qualified name. Use ``-ast-list`` to list all filterable declaration node "
"names."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:114
msgid ""
"``-ast-list`` --- Build ASTs and print the list of declaration node "
"qualified names."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:117
msgid "Examples:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:144
msgid "Using Ninja Build System"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:146
msgid ""
"Optionally you can use the `Ninja <https://github.com/martine/ninja>`_ build "
"system instead of make. It is aimed at making your builds faster. Currently "
"this step will require building Ninja from sources."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:150
msgid ""
"To take advantage of using Clang Tools along with Ninja build you need at "
"least CMake 2.8.9."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:153
msgid "Clone the Ninja git repository and build Ninja from sources:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:161
msgid ""
"This will result in a single binary ``ninja`` in the current directory. It "
"doesn't require installation and can just be copied to any location inside "
"``$PATH``, say ``/usr/local/bin/``:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:170
msgid ""
"After doing all of this, you'll need to generate Ninja build files for LLVM "
"with CMake. You need to make a build directory and run CMake from it:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:180
msgid ""
"If you want to use clang instead of GCC, you can add ``-DCMAKE_C_COMPILER=/"
"path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``. You can also use "
"``ccmake``, which provides a curses interface to configure CMake variables "
"in an interactive manner."
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:193
msgid "Now you are ready to build and test LLVM using Ninja:"
msgstr ""

#: ../../../HowToSetupToolingForLLVM.rst:199
msgid "Other target names can be used in the same way as with make."
msgstr ""
