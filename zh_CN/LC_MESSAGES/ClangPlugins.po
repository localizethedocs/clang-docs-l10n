# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangPlugins.rst:3
msgid "Clang Plugins"
msgstr ""

#: ../../../ClangPlugins.rst:5
msgid ""
"Clang Plugins make it possible to run extra user defined actions during a "
"compilation. This document will provide a basic walkthrough of how to write "
"and run a Clang Plugin."
msgstr ""

#: ../../../ClangPlugins.rst:10
msgid "Introduction"
msgstr ""

#: ../../../ClangPlugins.rst:12
msgid ""
"Clang Plugins run FrontendActions over code. See the :doc:`FrontendAction "
"tutorial <RAVFrontendAction>` on how to write a ``FrontendAction`` using the "
"``RecursiveASTVisitor``. In this tutorial, we'll demonstrate how to write a "
"simple clang plugin."
msgstr ""

#: ../../../ClangPlugins.rst:18
msgid "Writing a ``PluginASTAction``"
msgstr ""

#: ../../../ClangPlugins.rst:20
msgid ""
"The main difference from writing normal ``FrontendActions`` is that you can "
"handle plugin command line options. The ``PluginASTAction`` base class "
"declares a ``ParseArgs`` method which you have to implement in your plugin."
msgstr ""

#: ../../../ClangPlugins.rst:37
msgid "Registering a plugin"
msgstr ""

#: ../../../ClangPlugins.rst:39
msgid ""
"A plugin is loaded from a dynamic library at runtime by the compiler. To "
"register a plugin in a library, use ``FrontendPluginRegistry::Add<>``:"
msgstr ""

#: ../../../ClangPlugins.rst:47
msgid "Defining pragmas"
msgstr ""

#: ../../../ClangPlugins.rst:49
msgid ""
"Plugins can also define pragmas by declaring a ``PragmaHandler`` and "
"registering it using ``PragmaHandlerRegistry::Add<>``:"
msgstr ""

#: ../../../ClangPlugins.rst:67
msgid "Defining attributes"
msgstr ""

#: ../../../ClangPlugins.rst:69
msgid ""
"Plugins can define attributes by declaring a ``ParsedAttrInfo`` and "
"registering it using ``ParsedAttrInfoRegister::Add<>``:"
msgstr ""

#: ../../../ClangPlugins.rst:88
msgid ""
"The members of ``ParsedAttrInfo`` that a plugin attribute must define are:"
msgstr ""

#: ../../../ClangPlugins.rst:90
msgid ""
"``Spellings``, which must be populated with every `Spelling </doxygen/"
"structclang_1_1ParsedAttrInfo_1_1Spelling.html>`_ of the attribute, each of "
"which consists of an attribute syntax and how the attribute name is spelled "
"for that syntax. If the syntax allows a scope then the spelling must be "
"\"scope::attr\" if a scope is present or \"::attr\" if not."
msgstr ""

#: ../../../ClangPlugins.rst:95
msgid ""
"``handleDeclAttribute``, which is the function that applies the attribute to "
"a declaration. It is responsible for checking that the attribute's arguments "
"are valid, and typically applies the attribute by adding an ``Attr`` to the "
"``Decl``. It returns either ``AttributeApplied``, to indicate that the "
"attribute was successfully applied, or ``AttributeNotApplied`` if it wasn't."
msgstr ""

#: ../../../ClangPlugins.rst:101
msgid ""
"The members of ``ParsedAttrInfo`` that may need to be defined, depending on "
"the attribute, are:"
msgstr ""

#: ../../../ClangPlugins.rst:104
msgid ""
"``NumArgs`` and ``OptArgs``, which set the number of required and optional "
"arguments to the attribute."
msgstr ""

#: ../../../ClangPlugins.rst:106
msgid ""
"``diagAppertainsToDecl``, which checks if the attribute has been used on the "
"right kind of declaration and issues a diagnostic if not."
msgstr ""

#: ../../../ClangPlugins.rst:108
msgid ""
"``diagLangOpts``, which checks if the attribute is permitted for the current "
"language mode and issues a diagnostic if not."
msgstr ""

#: ../../../ClangPlugins.rst:110
msgid ""
"``existsInTarget``, which checks if the attribute is permitted for the given "
"target."
msgstr ""

#: ../../../ClangPlugins.rst:113
msgid ""
"To see a working example of an attribute plugin, see `the Attribute.cpp "
"example <https://github.com/llvm/llvm-project/blob/main/clang/examples/"
"Attribute/Attribute.cpp>`_."
msgstr ""

#: ../../../ClangPlugins.rst:117
msgid "Putting it all together"
msgstr ""

#: ../../../ClangPlugins.rst:119
msgid ""
"Let's look at an example plugin that prints top-level function names.  This "
"example is checked into the clang repository; please take a look at the "
"`latest version of PrintFunctionNames.cpp <https://github.com/llvm/llvm-"
"project/blob/main/clang/examples/PrintFunctionNames/PrintFunctionNames."
"cpp>`_."
msgstr ""

#: ../../../ClangPlugins.rst:125
msgid "Running the plugin"
msgstr ""

#: ../../../ClangPlugins.rst:129
msgid "Using the compiler driver"
msgstr ""

#: ../../../ClangPlugins.rst:131
msgid ""
"The Clang driver accepts the `-fplugin` option to load a plugin. Clang "
"plugins can receive arguments from the compiler driver command line via the "
"`fplugin-arg-<plugin name>-<argument>` option. Using this method, the plugin "
"name cannot contain dashes itself, but the argument passed to the plugin can."
msgstr ""

#: ../../../ClangPlugins.rst:146
msgid ""
"If your plugin name contains dashes, either rename the plugin or used the "
"cc1 command line options listed below."
msgstr ""

#: ../../../ClangPlugins.rst:151
msgid "Using the cc1 command line"
msgstr ""

#: ../../../ClangPlugins.rst:153
msgid ""
"To run a plugin, the dynamic library containing the plugin registry must be "
"loaded via the `-load` command line option. This will load all plugins that "
"are registered, and you can select the plugins to run by specifying the `-"
"plugin` option. Additional parameters for the plugins can be passed with `-"
"plugin-arg-<plugin-name>`."
msgstr ""

#: ../../../ClangPlugins.rst:159
msgid ""
"Note that those options must reach clang's cc1 process. There are two ways "
"to do so:"
msgstr ""

#: ../../../ClangPlugins.rst:162
msgid ""
"Directly call the parsing process by using the `-cc1` option; this has the "
"downside of not configuring the default header search paths, so you'll need "
"to specify the full system path configuration on the command line."
msgstr ""

#: ../../../ClangPlugins.rst:166
msgid ""
"Use clang as usual, but prefix all arguments to the cc1 process with `-"
"Xclang`."
msgstr ""

#: ../../../ClangPlugins.rst:169
msgid ""
"For example, to run the ``print-function-names`` plugin over a source file "
"in clang, first build the plugin, and then call clang with the plugin from "
"the source tree:"
msgstr ""

#: ../../../ClangPlugins.rst:184
msgid ""
"Also see the print-function-name plugin example's `README <https://github."
"com/llvm/llvm-project/blob/main/clang/examples/PrintFunctionNames/README."
"txt>`_"
msgstr ""

#: ../../../ClangPlugins.rst:189
msgid "Using the clang command line"
msgstr ""

#: ../../../ClangPlugins.rst:191
msgid ""
"Using `-fplugin=plugin` on the clang command line passes the plugin through "
"as an argument to `-load` on the cc1 command line. If the plugin class "
"implements the ``getActionType`` method then the plugin is run "
"automatically. For example, to run the plugin automatically after the main "
"AST action (i.e. the same as using `-add-plugin`):"
msgstr ""

#: ../../../ClangPlugins.rst:205
msgid "Interaction with ``-clear-ast-before-backend``"
msgstr ""

#: ../../../ClangPlugins.rst:207
msgid ""
"To reduce peak memory usage of the compiler, plugins are recommended to run "
"*before* the main action, which is usually code generation. This is because "
"having any plugins that run after the codegen action automatically turns off "
"``-clear-ast-before-backend``.  ``-clear-ast-before-backend`` reduces peak "
"memory by clearing the Clang AST after generating IR and before running IR "
"optimizations. Use ``CmdlineBeforeMainAction`` or ``AddBeforeMainAction`` as "
"``getActionType`` to run plugins while still benefitting from ``-clear-ast-"
"before-backend``. Plugins must make sure not to modify the AST, otherwise "
"they should run after the main action."
msgstr ""
