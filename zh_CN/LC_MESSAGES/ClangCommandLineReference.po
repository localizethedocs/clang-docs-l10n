# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangCommandLineReference.rst:9
msgid "Clang command line argument reference"
msgstr ""

#: ../../../ClangCommandLineReference.rst:14
msgid "Introduction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:16
msgid ""
"This page lists the command line arguments currently supported by the GCC-"
"compatible ``clang`` and ``clang++`` drivers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:23
msgid ""
"Search $prefix/$triple-$file and $prefix$file for executables, libraries, "
"includes, and data files used by the compiler. $prefix may or may not be a "
"directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:27
msgid "Add directory to framework include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:31
msgid "Treat source input files as Objective-C inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:37
msgid "Treat source input files as Objective-C++ inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:41
msgid "Do not emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:45
msgid "Don't emit warning for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:49
msgid "Emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:53
msgid "Pass the comma separated arguments in <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:63
msgid "Pass <arg> to the CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:69
msgid "Pass <arg> to the CUDA/HIP host compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:73
msgid "Pass <arg> to fatbinary invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:77
msgid "Pass <arg> to the ptxas assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:81
msgid "Pass <arg> to the target offloading toolchain."
msgstr ""

#: ../../../ClangCommandLineReference.rst:87
msgid "Pass <arg> to the target offloading toolchain identified by <triple>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:99
msgid "Run the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:105
msgid ""
"Static analyzer report output format (html\\|plist\\|plist-multi-file\\|"
"plist-html\\|sarif\\|sarif-html\\|text)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:119
msgid "Emit ARC errors even if the migrator can fix them"
msgstr ""

#: ../../../ClangCommandLineReference.rst:123
msgid "Output path for the plist report"
msgstr ""

#: ../../../ClangCommandLineReference.rst:141
msgid "Specifies configuration file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:147
msgid ""
"Compile CUDA code for both host and device (default).  Has no effect on non-"
"CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:151
msgid "Compile CUDA code for device only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:155
msgid ""
"Compile CUDA code for host only.  Has no effect on non-CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:159
msgid ""
"Include PTX for the following GPU architecture (e.g. sm\\_35) or 'all'. May "
"be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:163
msgid "Enable device-side debug info generation. Disables ptxas optimizations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:167
msgid ""
"An ID for compilation unit, which should be the same for the same "
"compilation unit but different for different compilation units. It is used "
"to externalize device-side static variables for single source offloading "
"languages CUDA and HIP so that they can be accessed by the host code of the "
"same compilation unit."
msgstr ""

#: ../../../ClangCommandLineReference.rst:175
msgid "Filename to write DOT-formatted header dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:179
msgid "Filename (or -) to write dependency output to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:183
msgid "Directory to output dSYM's (if any) to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:205
msgid "Emit Clang AST files for source inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:209
msgid "Enable linker job to emit a static library."
msgstr ""

#: ../../../ClangCommandLineReference.rst:213
msgid ""
"Trivial automatic variable initialization to zero is only here for "
"benchmarks, it'll eventually be removed, and I'm OK with that because I'm "
"only using it to benchmark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:217
msgid "Start emitting warnings for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:227
msgid "Reserve register r19 (Hexagon only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:231
msgid "Flush denormal floating point values to zero in CUDA/HIP device mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:239
msgid ""
"Specify comma-separated list of triples OpenMP offloading targets to be "
"supported"
msgstr ""

#: ../../../ClangCommandLineReference.rst:253
msgid "Pass <arg> to plugin <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:259
msgid ""
"Add -rpath with architecture-specific resource directory to the linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:263
msgid "Path to system ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:268
msgid "#include files may be \"skipped\" due to include guard optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:268
msgid "or #pragma once. This flag makes -H show also such includes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:272
msgid "Build this module as a system module. Only used with -emit-module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:276
msgid ""
"Method to generate ID's for compilation units for single source offloading "
"languages CUDA and HIP: 'hash' (ID's generated by hashing file path and "
"command line options) \\| 'random' (ID's generated as random numbers) \\| "
"'none' (disabled). Default is 'hash'. This option will be overridden by "
"option '-cuid=\\[ID\\]' if it is specified."
msgstr ""

#: ../../../ClangCommandLineReference.rst:280
msgid ""
"Search for GCC installation in the specified directory on targets which "
"commonly use GCC. The directory usually contains 'lib{,32,64}/gcc{,-cross}/"
"$triple' and 'include'. If specified, sysroot is skipped for GCC detection. "
"Note: executables (e.g. ld) used by the compiler are not overridden by the "
"selected GCC installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:284
msgid "Generate CodeView debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:288
msgid "Emit type record hashes in a .debug$H section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:292
msgid ""
"Instrument device library for HIP, which is a LLVM bitcode containing "
"\\_\\_cyg\\_profile\\_func\\_enter and \\_\\_cyg\\_profile\\_func\\_exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:296
msgid "Default max threads per block for kernel launch bounds for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:302
msgid "Display available options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:306
msgid "Display help for hidden options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:310
msgid "Link clang-offload-bundler bundles for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:314
msgid "HIP version in the format of major.minor.patch"
msgstr ""

#: ../../../ClangCommandLineReference.rst:318
msgid ""
"Enable builtin #include directories even when -nostdinc is used before or "
"after -ibuiltininc. Using -nobuiltininc after the option disables it"
msgstr ""

#: ../../../ClangCommandLineReference.rst:324
msgid "Make the next included directory (-I or -F) an indexer header map"
msgstr ""

#: ../../../ClangCommandLineReference.rst:344
msgid "Enforce targets of indirect branches and function returns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:348
msgid ""
"Allow unsafe floating-point math optimizations which may decrease precision"
msgstr ""

#: ../../../ClangCommandLineReference.rst:352
msgid "Select straight-line speculation hardening scope"
msgstr ""

#: ../../../ClangCommandLineReference.rst:356
msgid "Run the migrator"
msgstr ""

#: ../../../ClangCommandLineReference.rst:366
msgid "Additional arguments to forward to LLVM's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:370
msgid "Directory to dump module dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:386
msgid ""
"Don't error out if the detected version of the CUDA install is too low for "
"the requested CUDA gpu architecture."
msgstr ""

#: ../../../ClangCommandLineReference.rst:394
msgid "Disable builtin #include directories"
msgstr ""

#: ../../../ClangCommandLineReference.rst:402
msgid ""
"Do not add include paths for CUDA/HIP and do not include the default CUDA/"
"HIP wrapper headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:406
msgid "Do not link device library for CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:410
msgid "Do not include the default HIP wrapper headers and include paths"
msgstr ""

#: ../../../ClangCommandLineReference.rst:430
msgid "Disable standard #include directories for the C++ standard library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:438
msgid "Write output to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:442
msgid ""
"Only modify files with a filename contained in the provided directory path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:446
msgid "Make migration to 'atomic' properties"
msgstr ""

#: ../../../ClangCommandLineReference.rst:450
msgid "Enable migration to modern ObjC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:454
msgid "Enable migration to property and method annotations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:458
msgid ""
"Enable migration to infer NS\\_DESIGNATED\\_INITIALIZER for initializer "
"methods"
msgstr ""

#: ../../../ClangCommandLineReference.rst:462
msgid "Enable migration to infer instancetype for method result type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:466
msgid "Enable migration to modern ObjC literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:470
msgid "Enable migration to NS\\_ENUM/NS\\_OPTIONS macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:474
msgid "Enable migration to modern ObjC property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:478
msgid "Enable migration of setter/getter messages to property-dot syntax"
msgstr ""

#: ../../../ClangCommandLineReference.rst:482
msgid "Enable migration to add protocol conformance on classes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:486
msgid "Enable migration to modern ObjC readonly property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:490
msgid "Enable migration to modern ObjC readwrite property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:494
msgid "Enable migration to modern ObjC subscripting"
msgstr ""

#: ../../../ClangCommandLineReference.rst:498
msgid ""
"Enable migration to use NS\\_NONATOMIC\\_IOSONLY macro for setting "
"property's 'atomic' attribute"
msgstr ""

#: ../../../ClangCommandLineReference.rst:502
msgid ""
"Enable migration to annotate property with NS\\_RETURNS\\_INNER\\_POINTER"
msgstr ""

#: ../../../ClangCommandLineReference.rst:508
msgid "Set the output <file> for debug infos"
msgstr ""

#: ../../../ClangCommandLineReference.rst:512
msgid ""
"CUDA offloading device architecture (e.g. sm\\_35), or HIP offloading target "
"ID in the form of a device architecture followed by target ID features "
"delimited by a colon. Each target ID feature is a pre-defined string "
"followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be "
"specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:516
msgid "Specify comma-separated list of offloading target triples (HIP only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:524
msgid "Enable mcount instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:528
msgid "Use pipes between commands, when possible"
msgstr ""

#: ../../../ClangCommandLineReference.rst:542
msgid "Print the effective target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:546
msgid "Print the full library path of <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:550
msgid "Enable Objective-C Ivar layout bitmap print trace"
msgstr ""

#: ../../../ClangCommandLineReference.rst:554
msgid ""
"Print the library path for the currently used compiler runtime library "
"(\"libgcc.a\" or \"libclang\\_rt.builtins.\\*.a\")"
msgstr ""

#: ../../../ClangCommandLineReference.rst:562
msgid "Print the multiarch target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:566
msgid "Print the full program path of <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:570
msgid "Print the resource directory pathname"
msgstr ""

#: ../../../ClangCommandLineReference.rst:574
msgid "Print the paths used for finding ROCm installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:578
msgid "Print the directory pathname containing clangs runtime libraries"
msgstr ""

#: ../../../ClangCommandLineReference.rst:582
msgid "Print the paths used for finding libraries and programs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:586
msgid "Print the normalized target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:590
msgid "Print the registered targets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:596
msgid "Support POSIX threads in generated code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:604
msgid "Whether to build a relocatable precompiled header"
msgstr ""

#: ../../../ClangCommandLineReference.rst:610
msgid "Rewrite Legacy Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:614
msgid "Compiler runtime library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:618
msgid "Save llvm statistics."
msgstr ""

#: ../../../ClangCommandLineReference.rst:622
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../ClangCommandLineReference.rst:660
msgid "Serialize compiler diagnostics to a file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:666
msgid "Dynamically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:672
msgid "Don't emit warnings about unused arguments for the following arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:678
msgid "Statically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:684
msgid "Use the static host OpenMP runtime while linking."
msgstr ""

#: ../../../ClangCommandLineReference.rst:690
msgid "C++ standard library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:704
msgid "Generate code for the given target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:708
msgid "Time individual commands"
msgstr ""

#: ../../../ClangCommandLineReference.rst:714
msgid "Enable some traditional CPP emulation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:728
msgid "Unwind library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:732
msgid "Show commands to run and use verbose output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:736
msgid "Verify the binary representation of debug output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:740
msgid "Print version information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:744
msgid "Suppress all warnings"
msgstr ""

#: ../../../ClangCommandLineReference.rst:764
msgid "Resolve file paths relative to the specified directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:768
msgid "Treat subsequent input files as having type <language>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:773
msgid "Actions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:774
msgid "The action to perform on the input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:778
msgid "Only run the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:782
msgid "Only run preprocess and compilation steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:786
msgid "Only run preprocess, compile, and assemble steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:790
msgid "Generate Interface Stub Files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:794
msgid "Use the LLVM representation for assembler and object files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:798
msgid "Generate Interface Stub Files, emit merged text not binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:804
msgid "Provide information about a particular module file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:808
msgid "Only precompile the input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:812
msgid "Rewrite Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:816
msgid "Load and verify that a pre-compiled header file is not stale"
msgstr ""

#: ../../../ClangCommandLineReference.rst:819
msgid "Compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:821
msgid ""
"Flags controlling the behavior of Clang during compilation. These flags have "
"no effect during actions that do not perform compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:826
msgid "Pass <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:830
msgid "Pass <arg> to the clang compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:836
msgid "C++ ABI to use. This will override the target C++ ABI."
msgstr ""

#: ../../../ClangCommandLineReference.rst:840
msgid "Attempt to match the ABI of Clang <version>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:844
msgid ""
"Treat each comma separated argument in <arg> as a documentation comment "
"block command"
msgstr ""

#: ../../../ClangCommandLineReference.rst:848
msgid ""
"Require member pointer base types to be complete if they would be "
"significant under the Microsoft ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:852
msgid "Put crash-report files in <dir>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:856
msgid "Allow \\_\\_declspec as a keyword"
msgstr ""

#: ../../../ClangCommandLineReference.rst:866
msgid "Print fix-its in machine parseable form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:870
msgid "Print source range spans in numeric form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:876
msgid "Discard value names in LLVM IR"
msgstr ""

#: ../../../ClangCommandLineReference.rst:880
msgid "Use the experimental C++ class ABI for classes with virtual tables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:884
msgid "Enables experimental strict floating point in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:888
msgid ""
"Use separate accesses for consecutive bitfield runs with legal widths and "
"alignments."
msgstr ""

#: ../../../ClangCommandLineReference.rst:892
msgid "Enables the global instruction selector"
msgstr ""

#: ../../../ClangCommandLineReference.rst:896
msgid "Inline suitable functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:900
msgid "Inline functions which are (explicitly or implicitly) marked inline"
msgstr ""

#: ../../../ClangCommandLineReference.rst:904
msgid ""
"Use the legacy pass manager in LLVM (deprecated, to be removed in a future "
"release)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:908
msgid ""
"Disable auto-generation of preprocessed source files and a script for "
"reproduction during a clang crash"
msgstr ""

#: ../../../ClangCommandLineReference.rst:912
msgid "Don't use ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:920
msgid "Set destructor type used in ASan instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:924
msgid "Level of field padding for AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:928
msgid "Enable linker dead stripping of globals in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:932
msgid "Always generate function calls for address sanitizer instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:936
msgid ""
"Enable poisoning array cookies when using custom operator new\\[\\] in "
"AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:940
msgid ""
"Select the mode of detecting stack use-after-return in AddressSanitizer: "
"never \\| runtime (default) \\| always"
msgstr ""

#: ../../../ClangCommandLineReference.rst:944
msgid "Enable use-after-scope detection in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:948
msgid ""
"Enable ODR indicator globals to avoid false ODR violation reports in "
"partially sanitized programs at the cost of an increase in binary size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:952
msgid "Make the jump table addresses canonical in the symbol table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:956
msgid "Enable control flow integrity (CFI) checks for cross-DSO calls."
msgstr ""

#: ../../../ClangCommandLineReference.rst:960
msgid "Generalize pointers in CFI indirect call type signature checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:964
msgid ""
"Restrict sanitizer coverage instrumentation exclusively to modules and "
"functions that match the provided special case list, except the blocked ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:968
msgid ""
"Disable sanitizer coverage instrumentation for modules and functions that "
"match the provided special case list, even the allowed ones"
msgstr ""

#: ../../../ClangCommandLineReference.rst:972
msgid "Specify the type of coverage instrumentation for Sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:976
msgid ""
"Select the HWAddressSanitizer ABI to target (interceptor or platform, "
"default interceptor). This option is currently unused."
msgstr ""

#: ../../../ClangCommandLineReference.rst:980
msgid "Enable aliasing mode in HWAddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:984
msgid "Path to ignorelist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:992
#: ../../../ClangCommandLineReference.rst:998
msgid "Enable origins tracking in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1002
msgid "Enable use-after-destroy detection in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1008
msgid "Enable recovery for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1012
msgid "Enable sanitizer statistics gathering."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1016
msgid "Enable atomic operations instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1020
msgid "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1024
msgid "Enable memory access instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1028
msgid "Enable trapping for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1032
msgid ""
"Strip (or keep only, if negative) a given number of path components when "
"emitting check metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1036
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious "
"behavior. See user manual for available checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1040
msgid "Enable function outlining (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1044
msgid "Generate local calls to out-of-line atomic operations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1050
msgid ""
"Print supported cpu models for the given target (if target is not specified, "
"it will print the supported cpus for the default target)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1054
msgid "Language standard to compile for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1057
msgid "Preprocessor flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1059
msgid "Flags controlling the behavior of the Clang preprocessor."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1063
msgid "Include comments in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1067
msgid "Include comments from within macros in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1071
msgid "Define <macro> to <value> (or 1 if <value> omitted)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1075
msgid "Show header includes and nesting depth"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1079
msgid "Disable linemarker output in -E mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1083
msgid "Undefine macro <macro>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1087
msgid "Pass the comma separated arguments in <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1091
msgid "Pass <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1094
msgid "Include path management"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1096
msgid "Flags controlling how ``#include``\\s are resolved to files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1100
msgid ""
"Add directory to include search path. For C++ inputs, if there are multiple -"
"I options, these directories are searched in the order they are given before "
"the standard system directories are searched. If the same directory is in "
"the SYSTEM include search paths, for example if also specified with -"
"isystem, the -I option will be ignored"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1109
msgid ""
"Restrict all prior -I flags to double-quoted inclusion and remove current "
"directory from include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1113
msgid "Tool used for detecting AMD GPU arch in the system."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1117
msgid "Ignore environment variables to detect CUDA installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1121
msgid "CUDA installation path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1125
msgid "Add directory to the C++ SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1129
msgid "Use the last modification time of <file> as the build session timestamp"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1133
msgid "Time when the current build session started"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1137
msgid ""
"Specify the mapping of module name to precompiled module file, or load a "
"module file if name is omitted."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1141
msgid "Specify the module cache path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1145
msgid "Disable validation of the diagnostic options when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1149
msgid ""
"Specify the interval (in seconds) after which a module file will be "
"considered unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1153
msgid ""
"Specify the interval (in seconds) between attempts to prune the module cache"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1157
msgid "Specify the module user build path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1161
msgid ""
"Don't verify input files for the modules if the module has been successfully "
"validated or loaded during this build session"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1165
msgid ""
"Validate the system headers that a module depends on when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1169
msgid "Specify the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1173
msgid ""
"HIP runtime installation path, used for finding HIP version and adding HIP "
"include path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1177
msgid "Add directory to AFTER include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1181
msgid "Add directory to SYSTEM framework search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1185
msgid ""
"Add directory to SYSTEM framework search path, absolute paths are relative "
"to -isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1189
msgid "Include macros from file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1193
msgid "Include file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1197
msgid "Include precompiled header file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1201
msgid "Set the -iwithprefix/-iwithprefixbefore prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1205
msgid "Add directory to QUOTE include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1209
msgid "Set the system root directory (usually /)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1213
msgid "Add directory to SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1217
msgid "Add directory to end of the SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1221
msgid ""
"Overlay the virtual filesystem described by file over the real file system"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1225
msgid "Set directory to SYSTEM include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1229
msgid "Set directory to include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1233
msgid ""
"Add directory to SYSTEM include search path, absolute paths are relative to -"
"isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1237
msgid "Path to libomptarget-amdgcn bitcode library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1241
msgid "Path to libomptarget-nvptx bitcode library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1245
msgid "Path to ptxas (used for compiling CUDA code)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1249
msgid ""
"ROCm installation path, used for finding and automatically linking required "
"bitcode libraries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1255
msgid "Use directory as the C++ standard library include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1259
msgid ""
"Treat all #include paths starting with <prefix> as including a system header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1262
msgid "Dependency file generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1264
msgid ""
"Flags controlling generation of a dependency file for ``make``-like build "
"systems."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1269
msgid "Like -MD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1273
msgid "Write a depfile containing user and system headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1277
msgid "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1281
msgid "Add missing headers to depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1285
msgid "Write a compilation database entry per input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1289
msgid "Like -MMD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1293
msgid "Write a depfile containing user headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1297
msgid "Create phony target for each dependency (other than main file)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1301
msgid "Specify name of main file output to quote in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1305
msgid "Specify name of main file output in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1309
msgid "Use NMake/Jom format for the depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1312
msgid "Dumping preprocessor state"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1314
msgid ""
"Flags allowing the state of the preprocessor to be dumped in various ways."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1324
msgid "Print macro definitions in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1328
msgid "Print include directives in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1332
msgid "Print macro definitions in -E mode instead of normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1335
msgid "Diagnostic flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1337
msgid ""
"Flags controlling which warnings, errors, and remarks Clang will generate. "
"See the :doc:`full list of warning and remark flags <DiagnosticsReference>`."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1342
msgid "Enable the specified remark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1346
msgid ""
"Report transformation analysis from optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1350
msgid ""
"Report missed transformations by optimization passes whose name matches the "
"given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1354
msgid ""
"Report transformations performed by optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1358
msgid "Enable the specified warning"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1362
msgid "Enable warnings for deprecated constructs and define \\_\\_DEPRECATED"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1369
msgid "Target-independent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1378
msgid "Emit an address-significance table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1388
msgid "N must be a power of two. Align loops to the boundary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1394
msgid "Enable C++17 aligned allocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1398
msgid "Treat editor placeholders as valid source code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1406
msgid ""
"Source-level compatibility for Altivec vectors (for PowerPC targets). This "
"includes results of vector comparison (scalar for 'xl', vector for 'gcc') as "
"well as behavior when initializing with a scalar (splatting for 'xl', "
"element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for "
"'vector bool/vector pixel' and as 'xl' for other types. Current default is "
"'mixed'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1410
msgid "Use ANSI escape codes for diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1414
msgid "Use Apple's kernel extensions ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1418
msgid "Force linking the clang builtins runtime library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1422
msgid "Enable Apple gcc-compatible #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1426
msgid "Restrict code to those available for App Extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1430
msgid ""
"Allow certain math function calls to be replaced with an approximately "
"equivalent calculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1448
msgid "Enable EH Asynchronous exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1456
msgid ""
"Generate labels for each basic block or place each basic block or a subset "
"of basic blocks in its own section."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1460
msgid ""
"Produced object files can use all ELF features supported by this binutils "
"version and newer. If -fno-integrated-as is specified, the generated "
"assembly will consider GNU as support. 'none' means that all ELF features "
"can be used, regardless of binutils support. Defaults to 2.26."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1464
msgid "Enable the 'blocks' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1470
msgid "Accept non-standard constructs supported by the Borland compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1478
msgid "Load the clang builtins module map file."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1488
msgid ""
"Instrument control-flow architecture protection. Options: return, branch, "
"full, none."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1494
msgid "Enable C++ builtin type char8\\_t"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1500
msgid "Enable colors in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1504
msgid "Place uninitialized global variables in a common block"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1520
msgid "Assume functions may be convergent"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1524
msgid "Enable support for the C++ Coroutines TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1528
msgid "The compilation directory to embed in the coverage mapping."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1532
msgid "Generate coverage mapping to enable code coverage analysis"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1536
msgid "remap file source paths in coverage mapping"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1542
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1548
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into <directory>/default.profraw (overridden by LLVM\\_PROFILE\\_FILE env "
"var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1552
msgid "Use approximate transcendental functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1556
msgid "Use 32-bit pointers for accessing const/local/shared address spaces"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1560
msgid "Enable C++ exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1564
msgid "Enable modules for C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1568
msgid "Place each data in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1572
msgid "The compilation directory to embed in the debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1576
msgid ""
"Default DWARF version to use, if a -g option caused DWARF debug info to be "
"produced"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1580
msgid "Emit extra debug info to make sample profile more accurate"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1584
msgid "Emit macro debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1592
msgid "remap file source paths in debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1596
msgid "Use DWARF base address selection entries in .debug\\_ranges"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1600
msgid "Place debug types in their own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1604
msgid "Parse templated function definitions at the end of the translation unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1608
msgid "Treat usage of null pointers as undefined behavior (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1614
msgid "Print absolute paths in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1624
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this profile count. Use 'auto' to apply the threshold from profile summary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1628
msgid "Enable profile hotness information in diagnostic line"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1632
msgid "Display include stacks for diagnostic notes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1636
msgid "Print option name with mappable diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1640
msgid "Print a template comparison tree for differing templates"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1644
msgid ""
"Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:"
"%:' (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1648
msgid "Don't use GOT indirection to reference external data symbols"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1652
msgid "Allow '$' in identifiers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1656
msgid "Enable '\\[\\[\\]\\]' attributes in all C and C++ language modes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1662
msgid "Use DWARF style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1670
msgid "Do not emit  debug info for defined but unused types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1674
msgid "Embed LLVM bitcode (option: off, all, bitcode, marker)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1678
msgid "Emit all declarations, even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1682
msgid "Use emutls functions to access thread\\_local variables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1686
msgid "Enable matrix data type and related builtin functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1696
msgid "Enable support for exception handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1702
msgid "Enable the experimental new constant interpreter"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1708
msgid ""
"Controls how scalar integer arguments are extended in calls to unprototyped "
"and varargs functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1712
msgid "Allow aggressive, lossy floating-point optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1716
msgid ""
"The compilation directory to embed in the debug info and coverage mapping."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1720
msgid ""
"remap file source paths in debug info, predefined preprocessor macros and "
"\\_\\_builtin\\_FILE()"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1724
msgid "Assume all loops are finite."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1730
msgid "Enable fixed point types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1736
msgid "Always emit a debug frame section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1740
msgid "Emits more virtual tables to improve devirtualization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1744
msgid "Enable support for int128\\_t type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1748
msgid ""
"Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding "
"pragmas) \\| on (only fuses in the same statement unless dictated by "
"pragmas) \\| off (never fuses) \\| fast-honor-pragmas (fuses across "
"statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-"
"honor-pragmas' for HIP, and 'on' otherwise."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1752
msgid "Specifies the exception behavior of floating-point operations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1756
msgid "Controls the semantics of floating-point calculations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1760
msgid "Assert that the compilation takes place in a freestanding environment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1764
msgid "Place each function in its own section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1770
msgid "Allow GNU-extension keywords regardless of language standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1774
msgid "Generate output compatible with the standard GNU Objective-C runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1778
msgid "Use the gnu89 inline semantics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1782
msgid ""
"Sets various macros to claim compatibility with the given GCC version "
"(default is 4.2.1)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1786
msgid "Allow device side init function in HIP (experimental)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1790
msgid "Defer host/device related diagnostic messages for CUDA/HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1794
msgid ""
"Generate relocatable device code, also known as separate compilation mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1798
msgid "Enable sanitizer for AMDGPU target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1802
msgid ""
"Specify that single precision floating-point divide and sqrt used in the "
"program source are correctly rounded (HIP device compilation only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1806
msgid "Use new kernel launching API for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1816
msgid "Enable support for ignoring exception handling constructs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1820
msgid "Implicitly search the file system for module map files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1826
msgid "Specify the default character set for source files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1830
msgid ""
"Instrument function entry only, after inlining, without arguments to the "
"instrumentation call"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1834
msgid "Generate calls to instrument function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1838
msgid "Like -finstrument-functions, but insert the calls after inlining"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1842
msgid "Enable the integrated assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1846
msgid "Run cc1 in-process"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1850
msgid "Use jump tables for lowering switches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1854
msgid "Keep static const variables if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1858
msgid "Enable implicit vector bit-casts"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1864
msgid ""
"Controls the backend parallelism of -flto=thin (default of 0 means the "
"number of threads will be derived from the number of CPUs detected)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1868
msgid "Set LTO mode to either 'full' or 'thin'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1874
msgid ""
"remap file source paths in predefined preprocessor macros and "
"\\_\\_builtin\\_FILE()"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1878
msgid "Require math functions to indicate errors by setting errno"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1882
msgid "Max total number of preprocessed tokens for -Wmax-tokens."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1886
msgid ""
"Specify the maximum alignment to enforce on pointers lacking an explicit "
"alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1890
msgid "Enable heap memory profiling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1896
msgid "Enable heap memory profiling and dump results into <directory>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1900
msgid "Allow merging of constants"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1904
msgid "Format message diagnostics so that they fit within N columns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1908
msgid "Minimize whitespace when emitting preprocessor output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1914
msgid "Load this module map file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1918
msgid "Specify the name of the module to build"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1922
msgid "Enable the 'modules' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1926
msgid "Require declaration of modules used within a module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1930
msgid ""
"Ignore the definition of the given macro when building and loading modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1934
msgid "Search even non-imported modules to resolve references"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1938
msgid "Like -fmodules-decluse but requires all headers to be in modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1942
msgid "Enable support for the C++ Modules TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1946
msgid "Validate PCM input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1950
msgid "Enable full Microsoft Visual C++ compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1954
msgid ""
"Dot-separated value representing the Microsoft compiler version number to "
"report in \\_MSC\\_VER (0 = don't define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1958
msgid "Accept some non-standard constructs supported by the Microsoft compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1966
msgid ""
"Microsoft compiler version number to report in \\_MSC\\_VER (0 = don't "
"define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1976
msgid ""
"Specifies the largest alignment guaranteed by '::operator new(size\\_t)'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1980
msgid ""
"Enable treating throwing global C++ operator new as always returning valid "
"memory (annotates with \\_\\_attribute\\_\\_((returns\\_nonnull)) and "
"throw()). This is detectable in source."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1986
msgid "Disable implicit builtin knowledge of a specific function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1990
msgid "Do not elide types when printing diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1998
msgid ""
"Directly create compilation output files. This may lead to incorrect "
"incremental builds if the compiler crashes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2014
msgid "Synthesize retain and release calls for Objective-C pointers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2018
msgid "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2024
msgid "Ignore attribute objc\\_direct so that direct methods can be tested"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2028
msgid "Fully encode c++ class template specialization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2032
msgid "Enable Objective-C exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2046
msgid "Specify the target Objective-C runtime kind and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2052
msgid "Enable ARC-style weak references in Objective-C"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2056
msgid "Set LTO mode to either 'full' or 'thin' for offload compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2062
msgid "Parse OpenMP pragmas and generate parallel code."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2066
msgid "Enable all Clang extensions for OpenMP directives and clauses"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2070
msgid "Emit OpenMP code only for SIMD-based constructs."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2074
msgid "Enable debugging in the OpenMP offloading device RTL"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2078
msgid "Use the new bitcode library for OpenMP offloading"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2082
msgid ""
"Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default "
"value is 50."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2094
msgid ""
"Specify the output name of the file containing the optimization remarks. "
"Implies -fsave-optimization-record. On Darwin platforms, this cannot be used "
"with multiple -arch <arch> options."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2098
msgid ""
"Only include passes which match a specified regular expression in the "
"generated optimization record (by default, include all passes)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2104
msgid ""
"Generate instrumented code to collect order file into default.profraw file "
"(overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2114
msgid "Specify the default maximum struct packing alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2118
msgid "Recognize and construct Pascal-style string literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2122
msgid ""
"Load pass plugin from a dynamic shared object file (only with new pass "
"manager)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2126
msgid "Generate M NOPs before function entry and N-M NOPs after function entry"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2130
msgid "Override the default ABI to return all structs on the stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2134
msgid ""
"Generate code for uses of this PCH that assumes an explicit object file will "
"be built for the PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2138
msgid ""
"Generate debug info for types in an object file built from this PCH and do "
"not generate them elsewhere"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2142
msgid "Instantiate templates already while building a PCH"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2148
msgid "Validate PCH input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2158
msgid "Load the named plugin (dynamic shared object)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2162
msgid "Look up implicit modules in the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2168
msgid "Print subprocess statistics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2174
msgid "Save subprocess statistics to the given file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2182
msgid ""
"Instrument only functions from files where names don't match all the regexes "
"separated by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2186
msgid ""
"Instrument only functions from files where names match any regex separated "
"by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2190
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2196
msgid ""
"Generate instrumented code to collect execution counts into <directory>/"
"default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2200
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"file (overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2206
msgid ""
"Generate instrumented code to collect execution counts into <file> "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2214
msgid "Use instrumentation data for profile-guided optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2218
msgid "Filename defining the list of functions/files to instrument"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2222
msgid ""
"Use the remappings described in <file> to match the profile data against "
"names in the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2229
msgid "Specifies that the sample profile is accurate. If the sample"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2227
msgid ""
"profile is accurate, callsites without profile samples are marked as cold. "
"Otherwise, treat callsites without profile samples as if we have no profile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2237
msgid "Enable sample-based profile guided optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2241
msgid "Set update method of profile counters (atomic,prefer-atomic,single)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2247
msgid ""
"Use instrumentation data for profile-guided optimization. If pathname is a "
"directory, it reads from <pathname>/default.profdata. Otherwise, it reads "
"from file <pathname>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2251
msgid ""
"Determines whether the optimizer honors parentheses when floating-point "
"expressions are evaluated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2255
msgid "Emit pseudo probes for sample profiling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2259
msgid "Allow division operations to be reassociated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2263
msgid "Override the default ABI to return small structs in registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2267
msgid "Use atexit or \\_\\_cxa\\_atexit to register global destructors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2271
msgid "Enable C++17 relaxed template template argument matching"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2275
msgid "Turn on loop reroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2287
msgid "Generate read-only position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2297
msgid "Generate read-write position independent code (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2301
msgid "Generate a YAML optimization record file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2307
msgid "Generate an optimization record file in a specific format"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2311
msgid "Use SEH style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2317
msgid ""
"Allocate to an enum type only as many bytes as it needs for the declared "
"range of possible values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2321
msgid "Force wchar\\_t to be a short unsigned int"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2327
msgid ""
"Which overload candidates to show when overload resolution fails: best\\|"
"all; defaults to all"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2337
msgid "char is signed"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2343
msgid "Enable C++14 sized global deallocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2347
msgid "Use SjLj style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2351
msgid "Enable the superword-level parallelism vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2359
msgid ""
"Provide minimal debug info in the object/executable to facilitate online "
"symbolication/stack traces in the absence of .dwo/.dwp files when using "
"Split DWARF"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2363
msgid "Enables splitting of the LTO unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2367
msgid "Enable late function splitting using profile information (x86 ELF)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2371
msgid "Use segmented stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2375
msgid "Enable stack clash protection"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2379
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"This uses a loose heuristic which considers functions vulnerable if they "
"contain a char (or 8bit integer) array or constant sized calls to alloca , "
"which are of greater size than ssp-buffer-size (default: 8 bytes). All "
"variable sized calls to alloca are considered vulnerable. A function with a "
"stack protector has a guard value added to the stack frame that is checked "
"on function exit. The guard value must be positioned in the stack frame such "
"that a buffer overflow from a vulnerable variable will overwrite the guard "
"value before overwriting the function's return address. The reference stack "
"guard value is stored in a global variable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2383
msgid "Enable stack protectors for all functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2387
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"Compared to -fstack-protector, this uses a stronger heuristic that includes "
"functions containing arrays of any size (and any type), as well as any calls "
"to alloca or the taking of an address from a local variable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2391
msgid "Emit section containing metadata on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2395
msgid "Emit .su file containing information on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2399
msgid "Emit full debug info for all types used by the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2405
msgid ""
"Enable optimizations based on the strict definition of an enum's value range"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2409
msgid "Assume that overflowing float-to-int casts are undefined (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2417
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2423
msgid ""
"Control emission of Swift async extended frame info (option: auto, always, "
"never)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2439
msgid "Write minimized bitcode to <file> for the ThinLTO thin link only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2443
msgid "Perform ThinLTO importing using provided function summary index"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2453
msgid ""
"(For new pass manager) \"per-pass\": one report for each pass; \"per-pass-"
"run\": one report for each pass invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2458
msgid ""
"Turn on time profiler. Generates JSON file based on output filename. Results "
"can be analyzed with chrome://tracing or `Speedscope App <https://www."
"speedscope.app>`_ for flamegraph visualization."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2464
msgid "Minimum time granularity (in microseconds) traced by time profiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2470
msgid "Issue call to specified function rather than a trap instruction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2476
msgid "Trap on integer overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2484
msgid "Specify the function to be called on overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2488
msgid "Process trigraph sequences"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2492
msgid ""
"Stop initializing trivial automatic stack variables after the specified "
"number of instances"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2496
msgid ""
"Initialize trivial automatic stack variables: uninitialized (default) \\| "
"pattern"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2500
msgid "Use unique names for basic block sections (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2504
msgid ""
"Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the "
"module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2512
msgid "Turn on loop unroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2530
msgid "Use #line in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2534
msgid ""
"Compute and store the hash of input files used to build an AST. Files with "
"mismatching mtime's are considered valid if both contents is identical"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2538
msgid "Use the given vector functions library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2542
msgid "Enable the loop vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2546
msgid "Generate verbose assembly output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2550
msgid ""
"Enables dead virtual function elimination optimization. Requires -flto=full"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2554
msgid ""
"The visibility for dllexport definitions \\[-fvisibility-from-"
"dllstorageclass\\]"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2558
msgid ""
"The visibility for dllimport external declarations \\[-fvisibility-from-"
"dllstorageclass\\]"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2562
msgid ""
"The visibility for external declarations without an explicit DLL "
"dllstorageclass \\[-fvisibility-from-dllstorageclass\\]"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2566
msgid ""
"Set the visibility of symbols in the generated code from their DLL storage "
"class"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2570
msgid "Give global C++ operator new and delete declarations hidden visibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2574
msgid "Give inline C++ member functions hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2578
msgid ""
"When -fvisibility-inlines-hidden is enabled, static variables in inline C++ "
"member functions will also be given hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2582
msgid ""
"Give global types 'default' visibility and global functions and variables "
"'hidden' visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2586
msgid ""
"The visibility for defintiions without an explicit DLL export class \\[-"
"fvisibility-from-dllstorageclass\\]"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2590
msgid "Set the default symbol visibility for all global declarations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2594
msgid "Use WebAssembly style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2598
msgid "Enables whole-program vtable optimization. Requires -flto"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2602
msgid "Treat signed integer overflow as two's complement"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2606
msgid "Store string literals as writable data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2610
msgid "Enable IBM XL #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2614
msgid ""
"Always emit \\_\\_xray\\_customevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2618
msgid ""
"Always emit \\_\\_xray\\_typedevent(...) calls even if the containing "
"function is not always instrumented"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2622
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'always "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2626
msgid ""
"Filename defining the list of functions/types for imbuing XRay attributes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2630
msgid "Only instrument 1 of N groups"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2636
msgid ""
"Don't instrument functions with loops unless they also meet the minimum "
"function size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2644
msgid "Sets the minimum function size to instrument with XRay"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2648
msgid "Generate XRay instrumentation sleds on function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2652
msgid ""
"Select which XRay instrumentation points to emit. Options: all, none, "
"function-entry, function-exit, function, custom. Default is 'all'.  "
"'function' includes both 'function-entry' and 'function-exit'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2656
msgid "Tells clang to add the link dependencies for XRay."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2660
msgid "List of modes to link in by default into XRay instrumented binaries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2664
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'never "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2668
msgid ""
"When using -fxray-function-groups, select which group of functions to "
"instrument. Valid range is 0 to fxray-function-groups - 1"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2674
msgid "Enable System z vector language extension"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2678
msgid "Bundle output files of HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2682
msgid "Warn on language extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2687
msgid "OpenCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2690
msgid "OpenCL only. Allow denormals to be flushed to zero."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2694
msgid ""
"OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, "
"and defines \\_\\_FAST\\_RELAXED\\_MATH\\_\\_."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2698
msgid ""
"OpenCL only. Allow floating-point optimizations that assume arguments and "
"results are not NaNs or +-Inf."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2702
msgid ""
"OpenCL only. Specify that single precision floating-point divide and sqrt "
"used in the program source are correctly rounded."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2706
msgid "OpenCL only. Generate kernel argument metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2710
msgid ""
"OpenCL only. Allow use of less precise MAD computations in the generated "
"binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2714
msgid ""
"OpenCL only. Allow use of less precise no signed zeros computations in the "
"generated binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2718
msgid ""
"OpenCL only. Disables all standard includes containing non-native compiler "
"types and functions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2722
msgid ""
"OpenCL only. This option disables all optimizations. By default "
"optimizations are enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2726
msgid ""
"OpenCL only. Treat double precision floating-point constant as single "
"precision constant."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2730
msgid "OpenCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2734
msgid "OpenCL only. This option is added for compatibility with OpenCL 1.0."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2738
msgid ""
"OpenCL only. Defines that the global work-size be a multiple of the work-"
"group size specified to clEnqueueNDRangeKernel"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2742
msgid ""
"OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-"
"signed-zeros and -cl-mad-enable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2745
msgid "SYCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2748
msgid "Enables SYCL kernels compilation for device"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2752
msgid "SYCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2755
msgid "Target-dependent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2758
msgid ""
"Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2762
msgid "Reserve the x1 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2766
msgid "Reserve the x10 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2770
msgid "Reserve the x11 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2774
msgid "Reserve the x12 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2778
msgid "Reserve the x13 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2782
msgid "Reserve the x14 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2786
msgid "Reserve the x15 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2790
msgid "Reserve the x16 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2794
msgid "Reserve the x17 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2798
msgid "Reserve the x18 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2802
msgid "Reserve the x19 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2806
msgid "Reserve the x2 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2810
msgid "Reserve the x20 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2814
msgid "Reserve the x21 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2818
msgid "Reserve the x22 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2822
msgid "Reserve the x23 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2826
msgid "Reserve the x24 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2830
msgid "Reserve the x25 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2834
msgid "Reserve the x26 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2838
msgid "Reserve the x27 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2842
msgid "Reserve the x28 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2846
msgid "Reserve the x29 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2850
msgid "Reserve the x3 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2854
msgid "Reserve the x30 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2858
msgid "Reserve the x31 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2862
msgid "Reserve the x4 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2866
msgid "Reserve the x5 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2870
msgid "Reserve the x6 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2874
msgid "Reserve the x7 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2878
msgid "Reserve the x8 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2882
msgid "Reserve the x9 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2886
msgid "Set Fuchsia API level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2902
msgid ""
"Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector "
"registers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2908
msgid ""
"Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and "
"nonvolatile vector registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2912
msgid "Return all structs in memory (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2916
msgid "Specify the boundary's size to align branches"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2920
msgid "Specify types of branches to align"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2924
msgid "Align doubles to two words in structs (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2928
msgid ""
"Sets the IEEE bit in the expected default floating point  mode register. "
"Floating point opcodes that support exception flag gathering quiet and "
"propagate signaling NaN inputs per IEEE 754-2008. This option changes the "
"ABI. (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2936
msgid "Link stack frames through backchain on System Z"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2940
msgid "Align selected branches (fused, jcc, jmp) within 32-byte boundary"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2946
msgid "Legacy option to specify code object ABI V3 (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2950
msgid "Specify code object ABI version. Defaults to 3. (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2960
msgid "Allow use of CRC instructions (ARM/Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2968
msgid "Force double to be 32 bits or 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2974
msgid "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2978
msgid "Enable use of experimental RISC-V extensions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2982
msgid "Insert calls to fentry at function entry (x86/SystemZ only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2992
msgid ""
"Generate code which only uses the general purpose registers (AArch64/x86 "
"only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2996
msgid "Enable merging of globals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3006
msgid "Use Intel MCU ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3010
msgid ""
"Not emit the visibility attribute for asm in AIX OS or give all symbols "
"'unspecified' visibility in XCOFF object file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3018
msgid ""
"(integrated-as) Emit an object file which can be used with an incremental "
"linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3026
msgid ""
"Generate branches with extended addressability, usually via indirect jumps."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3030
msgid "Enable only control-flow mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3034
msgid "Enable all mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3038
msgid "Set Mac OS X deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3044
msgid ""
"Set the default structure layout to be compatible with the Microsoft "
"compiler standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3048
msgid ""
"Generate mcount/\\_\\_fentry\\_\\_ calls as nops. To activate they need to "
"be patched in."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3052
msgid "Omit frame pointer setup for leaf functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3058
msgid "Use packed stack layout (SystemZ only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3062
msgid "Specify maximum number of prefixes to use for padding"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3066
msgid ""
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' "
"which allows target specific decisions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3070
msgid "Enable hexagon-qdsp6 backward compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3080
msgid ""
"Generate a \\_\\_mcount\\_loc section entry for each \\_\\_fentry\\_\\_ call."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3088
msgid "Enable linker relaxation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3092
msgid "(integrated-as) Relax all machine instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3098
msgid "Make StdCall calling convention the default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3102
msgid ""
"Enable speculative execution side effect suppression (SESES). Includes LVI "
"control flow integrity mitigations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3106
msgid "Select return address signing scope"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3112
msgid "Skip setting up RAX register when passing variable arguments (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3116
msgid "Use software floating point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3122
msgid "Set the stack alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3126
msgid "Enable stack probes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3130
msgid "Set the stack probe size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3134
msgid "Use the given offset for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3138
msgid "Use the given reg for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3142
msgid ""
"Use the given guard (global, tls) for addressing the stack-protector guard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3146
msgid "Force realign the stack at entry to every function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3150
msgid "Return small structs in registers (PPC32 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3154
msgid "Set the deployment target to be the specified OS and OS version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3158
msgid "The thread model to use, e.g. posix, single (posix by default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3166
msgid "Enable direct TLS access through segment registers (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3170
msgid ""
"Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) "
"\\| 24 (for 16MB, default) \\| 32 (for 4GB) \\| 48 (for 256TB, needs -"
"mcmodel=large)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3176
msgid ""
"Only supported on X86 and RISC-V. Otherwise accepted for compatibility with "
"GCC."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3184
msgid "Enable unsafe floating point atomic instructions (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3194
msgid "Specify wavefront size 64 mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3201
msgid "AARCH64"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3204
msgid "Make the x10 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3208
msgid "Make the x11 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3212
msgid "Make the x12 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3216
msgid "Make the x13 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3220
msgid "Make the x14 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3224
msgid "Make the x15 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3228
msgid "Make the x18 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3232
msgid "Make the x8 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3236
msgid "Make the x9 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3240
msgid "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3244
msgid "Add .note.gnu.property with BTI to assembly files (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3248
msgid ""
"Specify the size in bits of an SVE vector register. Defaults to the vector "
"length agnostic value of \"scalable\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3252
msgid ""
"Specify the vscale maximum. Defaults to the vector length agnostic value of "
"\"0\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3256
msgid "Specify the vscale minimum. Defaults to \"1\". (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3259
msgid "AMDGPU"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3262
msgid "Specify CU wavefront execution mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3266
msgid "Enable threadgroup split execution mode (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3269
msgid "ARM"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3272
msgid ""
"Follows the AAPCS standard that all volatile bit-field write generates at "
"least one load. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3276
msgid ""
"Follow the AAPCS standard requirement stating that volatile bit-field width "
"is dictated by the field container type. (ARM only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3280
msgid "Reserve the r9 register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3284
msgid "Allow use of CMSE (Armv8-M Security Extensions)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3288
msgid "Disallow generation of data access to code sections (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3292
msgid "Work around VLLDM erratum CVE-2021-35465 (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3296
msgid ""
"Do not add a BTI instruction after a setjmp or other return-twice construct "
"(AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3300
msgid "Disallow use of movt/movw pairs (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3304
msgid ""
"Disallow converting instructions with negative immediates to their negation "
"or inversion."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3308
msgid "Disallow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3312
msgid ""
"Disallow generation of deprecated IT blocks for ARMv8. It is on by default "
"for ARMv8 Thumb mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3316
msgid "Thread pointer access method (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3320
msgid "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3323
#: ../../../ClangCommandLineReference.rst:3347
msgid "Hexagon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3326
msgid "Enable Hexagon HVX IEEE floating-point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3332
msgid "Enable generation of memop instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3336
msgid "Enable generation of new-value jumps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3340
msgid "Enable generation of new-value stores"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3344
msgid "Enable generation of instruction packets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3350
#: ../../../ClangCommandLineReference.rst:3364
msgid "Enable Hexagon Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3354
msgid "Set Hexagon Vector Length"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3358
msgid "Enable Hexagon HVX QFloat instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3367
msgid "M68k"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3370
msgid "Reserve the a0 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3374
msgid "Reserve the a1 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3378
msgid "Reserve the a2 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3382
msgid "Reserve the a3 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3386
msgid "Reserve the a4 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3390
msgid "Reserve the a5 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3394
msgid "Reserve the a6 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3398
msgid "Reserve the d0 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3402
msgid "Reserve the d1 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3406
msgid "Reserve the d2 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3410
msgid "Reserve the d3 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3414
msgid "Reserve the d4 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3418
msgid "Reserve the d5 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3422
msgid "Reserve the d6 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3426
msgid "Reserve the d7 register (M68k only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3441
msgid "MIPS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3444
msgid "Enable SVR4-style position-independent code (Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3460
msgid ""
"Place constants in the .rodata section instead of the .sdata section even if "
"they meet the -G <size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3464
msgid ""
"Assume that externally defined data is in the small data if it meets the -G "
"<size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3470
msgid "Use 32-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3474
msgid "Use 64-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3480
msgid ""
"Use GP relative accesses for symbols known to be in a small data section "
"(MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3484
msgid "Change indirect jump instructions to inhibit speculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3492
msgid "Extend the -G behaviour to object local data (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3496
msgid ""
"Enable the generation of 4-operand madd.s, madd.d and related instructions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3502
msgid "Enable MSA ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3506
msgid "Enable MT ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3519
msgid "PowerPC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3573
msgid "WebAssembly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3597
msgid "WebAssembly Driver"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3600
msgid "Execution model (WebAssembly only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3603
msgid "X86"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3787
msgid "RISCV"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3790
msgid "Enable using library calls for save and restore"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3793
msgid "Long double flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3794
msgid "Selects the long double implementation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3798
msgid "Force long double to be 128 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3802
msgid "Force long double to be 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3806
msgid "Force long double to be 80 bits, padded to 128 bits for storage"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3809
msgid "Optimization level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3811
msgid "Flags controlling how much optimization should be performed."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3818
msgid "Debug information generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3820
msgid ""
"Flags controlling how much and what kind of debug information should be "
"generated."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3824
msgid "Kind and level of debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3827
msgid "Generate source-level debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3831
msgid "Generate source-level debug information with the default dwarf version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3835
msgid "Generate source-level debug information with dwarf version 2"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3839
msgid "Generate source-level debug information with dwarf version 3"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3843
msgid "Generate source-level debug information with dwarf version 4"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3847
msgid "Generate source-level debug information with dwarf version 5"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3851
msgid ""
"Enables DWARF32 format for ELF binaries, if debug information emission is "
"enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3855
msgid ""
"Enables DWARF64 format for ELF binaries, if debug information emission is "
"enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3864
msgid "Debug level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3881
msgid "Emit debug line info directives only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3885
msgid "Emit debug line number tables only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3889
msgid ""
"Generate debug info with external references to clang modules or precompiled "
"headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3892
msgid "Debugger to tune debug information for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3902
msgid "Debug information flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3909
msgid "Embed source text in DWARF debug sections"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3925
msgid "Set DWARF fission mode to either 'split' or 'single'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3931
msgid "DWARF debug sections compression type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3934
msgid "Static analyzer flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3936
msgid "Flags controlling the behavior of the Clang Static Analyzer."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3940
msgid "Pass <arg> to the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3943
msgid "Fortran compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3945
msgid ""
"Flags that will be passed onto the ``gfortran`` compiler when Clang is given "
"a Fortran input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4059
msgid "Linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4060
msgid "Flags that are passed on to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4064
msgid "Add directory to library search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4070
msgid "Specify <script> as linker script"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4074
msgid "Set starting address of BSS to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4078
msgid "Set starting address of DATA to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4082
msgid "Set starting address of TEXT to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4086
msgid "Pass the comma separated arguments in <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4092
msgid "Pass <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4100
msgid "Pass -b <arg> to the linker on AIX (only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4110
msgid "HIP device library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4114
msgid "path to a pass plugin for HIP to SPIR-V passes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4134
msgid "ROCm device library path. Alternative to rocm-path."
msgstr ""

#: ../../../ClangCommandLineReference.rst:4154
msgid "undef all system defines"
msgstr ""

#: ../../../ClangCommandLineReference.rst:4160
msgid "Pass -z <arg> to the linker"
msgstr ""
