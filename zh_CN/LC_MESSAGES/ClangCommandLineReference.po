# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, The Clang Team
# This file is distributed under the same license as the Clang package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clang 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 13:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ClangCommandLineReference.rst:9
msgid "Clang command line argument reference"
msgstr ""

#: ../../../ClangCommandLineReference.rst:14
msgid "Introduction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:16
msgid ""
"This page lists the command line arguments currently supported by the GCC-"
"compatible ``clang`` and ``clang++`` drivers."
msgstr ""

#: ../../../ClangCommandLineReference.rst:23
msgid "Add <dir> to search path for binaries and object files used implicitly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:27
msgid "Add directory to framework include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:31
msgid "Treat source input files as Objective-C inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:37
msgid "Treat source input files as Objective-C++ inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:41
msgid "Do not emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:45
msgid "Don't emit warning for unused driver arguments"
msgstr ""

#: ../../../ClangCommandLineReference.rst:49
msgid "Emit metadata containing compiler name and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:53
msgid "Pass the comma separated arguments in <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:61
msgid "Pass <arg> to fatbinary invocation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:65
msgid "Pass <arg> to the ptxas assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:69
msgid "Pass <arg> to the target offloading toolchain."
msgstr ""

#: ../../../ClangCommandLineReference.rst:75
msgid "Pass <arg> to the target offloading toolchain identified by <triple>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:87
msgid "Run the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:93
msgid ""
"Static analyzer report output format (html\\|plist\\|plist-multi-file\\|"
"plist-html\\|sarif\\|text)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:109
msgid "Emit ARC errors even if the migrator can fix them"
msgstr ""

#: ../../../ClangCommandLineReference.rst:113
msgid "Output path for the plist report"
msgstr ""

#: ../../../ClangCommandLineReference.rst:131
msgid "Specifies configuration file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:139
msgid ""
"Compile CUDA code for both host and device (default).  Has no effect on non-"
"CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:143
msgid "Compile CUDA code for device only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:147
msgid "CUDA GPU architecture (e.g. sm\\_35).  May be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:151
msgid ""
"Compile CUDA code for host only.  Has no effect on non-CUDA compilations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:155
msgid ""
"Include PTX for the following GPU architecture (e.g. sm\\_35) or 'all'. May "
"be specified more than once."
msgstr ""

#: ../../../ClangCommandLineReference.rst:159
msgid "Enable device-side debug info generation. Disables ptxas optimizations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:167
msgid "Filename to write DOT-formatted header dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:171
msgid "Filename (or -) to write dependency output to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:193
msgid "Emit Clang AST files for source inputs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:197
msgid ""
"Trivial automatic variable initialization to zero is only here for "
"benchmarks, it'll eventually be removed, and I'm OK with that because I'm "
"only using it to benchmark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:205
msgid "Use approximate transcendental functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:209
msgid "Flush denormal floating point values to zero in CUDA device mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:213
msgid "Use 32-bit pointers for accessing const/local/shared address spaces."
msgstr ""

#: ../../../ClangCommandLineReference.rst:217
msgid "Reserve register r19 (Hexagon only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:221
msgid "Allow device side init function in HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:225
msgid ""
"Generate relocatable device code, also known as separate compilation mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:231
msgid "Use new kernel launching API for HIP."
msgstr ""

#: ../../../ClangCommandLineReference.rst:237
msgid ""
"Specify comma-separated list of triples OpenMP offloading targets to be "
"supported"
msgstr ""

#: ../../../ClangCommandLineReference.rst:253
msgid ""
"Add -rpath with architecture-specific resource directory to the linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:257
msgid "Path to system blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:261
msgid "Use the gcc toolchain at the given directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:265
msgid "Generate CodeView debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:269
msgid "Emit type record hashes in a .debug$H section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:275
msgid "Default max threads per block for kernel launch bounds for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:281
msgid "Display available options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:285
msgid "Display help for hidden options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:289
msgid "Link clang-offload-bundler bundles for HIP"
msgstr ""

#: ../../../ClangCommandLineReference.rst:295
msgid "Make the next included directory (-I or -F) an indexer header map"
msgstr ""

#: ../../../ClangCommandLineReference.rst:315
msgid "Enforce targets of indirect branches and function returns"
msgstr ""

#: ../../../ClangCommandLineReference.rst:319
msgid "Run the migrator"
msgstr ""

#: ../../../ClangCommandLineReference.rst:329
msgid "Additional arguments to forward to LLVM's option processing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:333
msgid "Directory to dump module dependencies to"
msgstr ""

#: ../../../ClangCommandLineReference.rst:349
msgid ""
"Don't error out if the detected version of the CUDA install is too low for "
"the requested CUDA gpu architecture."
msgstr ""

#: ../../../ClangCommandLineReference.rst:357
msgid "Disable builtin #include directories"
msgstr ""

#: ../../../ClangCommandLineReference.rst:367
msgid "Do not link device library for CUDA/HIP device compilation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:389
msgid "Disable standard #include directories for the C++ standard library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:401
msgid "Write output to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:405
msgid "Make migration to 'atomic' properties"
msgstr ""

#: ../../../ClangCommandLineReference.rst:409
msgid "Enable migration to modern ObjC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:413
msgid "Enable migration to property and method annotations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:417
msgid ""
"Enable migration to infer NS\\_DESIGNATED\\_INITIALIZER for initializer "
"methods"
msgstr ""

#: ../../../ClangCommandLineReference.rst:421
msgid "Enable migration to infer instancetype for method result type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:425
msgid "Enable migration to modern ObjC literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:429
msgid "Enable migration to NS\\_ENUM/NS\\_OPTIONS macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:433
msgid "Enable migration to modern ObjC property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:437
msgid "Enable migration of setter/getter messages to property-dot syntax"
msgstr ""

#: ../../../ClangCommandLineReference.rst:441
msgid "Enable migration to add protocol conformance on classes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:445
msgid "Enable migration to modern ObjC readonly property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:449
msgid "Enable migration to modern ObjC readwrite property"
msgstr ""

#: ../../../ClangCommandLineReference.rst:453
msgid "Enable migration to modern ObjC subscripting"
msgstr ""

#: ../../../ClangCommandLineReference.rst:457
msgid ""
"Enable migration to use NS\\_NONATOMIC\\_IOSONLY macro for setting "
"property's 'atomic' attribute"
msgstr ""

#: ../../../ClangCommandLineReference.rst:461
msgid ""
"Enable migration to annotate property with NS\\_RETURNS\\_INNER\\_POINTER"
msgstr ""

#: ../../../ClangCommandLineReference.rst:465
msgid ""
"Only modify files with a filename contained in the provided directory path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:475
msgid "Enable mcount instrumentation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:481
msgid "Use pipes between commands, when possible"
msgstr ""

#: ../../../ClangCommandLineReference.rst:495
msgid "Print the effective target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:499
msgid "Print the full library path of <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:503
msgid "Enable Objective-C Ivar layout bitmap print trace"
msgstr ""

#: ../../../ClangCommandLineReference.rst:507
msgid ""
"Print the library path for the currently used compiler runtime library "
"(\"libgcc.a\" or \"libclang\\_rt.builtins.\\*.a\")"
msgstr ""

#: ../../../ClangCommandLineReference.rst:515
msgid "Print the full program path of <name>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:519
msgid "Print the resource directory pathname"
msgstr ""

#: ../../../ClangCommandLineReference.rst:523
msgid "Print the paths used for finding libraries and programs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:527
msgid "Print the normalized target triple"
msgstr ""

#: ../../../ClangCommandLineReference.rst:533
msgid "Support POSIX threads in generated code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:543
msgid "Whether to build a relocatable precompiled header"
msgstr ""

#: ../../../ClangCommandLineReference.rst:549
msgid "Rewrite Legacy Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:553
msgid "Compiler runtime library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:557
msgid "Save llvm statistics."
msgstr ""

#: ../../../ClangCommandLineReference.rst:561
msgid "Save intermediate compilation results."
msgstr ""

#: ../../../ClangCommandLineReference.rst:599
msgid "Serialize compiler diagnostics to a file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:607
msgid "Dynamically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:619
msgid "Statically link the sanitizer runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:625
msgid "Use the static host OpenMP runtime while linking."
msgstr ""

#: ../../../ClangCommandLineReference.rst:633
msgid "C++ standard library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:647
msgid "Generate code for the given target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:651
msgid "Time individual commands"
msgstr ""

#: ../../../ClangCommandLineReference.rst:657
msgid "Enable some traditional CPP emulation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:671
msgid "Unwind library to use"
msgstr ""

#: ../../../ClangCommandLineReference.rst:675
msgid "Show commands to run and use verbose output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:679
msgid "Verify the binary representation of debug output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:683
msgid "Print version information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:687
msgid "Suppress all warnings"
msgstr ""

#: ../../../ClangCommandLineReference.rst:707
msgid "Resolve file paths relative to the specified directory"
msgstr ""

#: ../../../ClangCommandLineReference.rst:711
msgid "Treat subsequent input files as having type <language>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:716
msgid "Actions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:717
msgid "The action to perform on the input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:721
msgid "Only run the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:725
msgid "Only run preprocess and compilation steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:729
msgid "Only run preprocess, compile, and assemble steps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:733
msgid "Generate Inteface Stub Files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:737
msgid "Use the LLVM representation for assembler and object files"
msgstr ""

#: ../../../ClangCommandLineReference.rst:741
msgid "Generate Interface Stub Files, emit merged text not binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:747
msgid "Provide information about a particular module file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:751
msgid "Only precompile the input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:755
msgid "Rewrite Objective-C source to C++"
msgstr ""

#: ../../../ClangCommandLineReference.rst:759
msgid "Load and verify that a pre-compiled header file is not stale"
msgstr ""

#: ../../../ClangCommandLineReference.rst:762
msgid "Compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:764
msgid ""
"Flags controlling the behavior of Clang during compilation. These flags have "
"no effect during actions that do not perform compilation."
msgstr ""

#: ../../../ClangCommandLineReference.rst:769
msgid "Pass <arg> to the assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:773
msgid "Pass <arg> to the clang compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:777
msgid "Attempt to match the ABI of Clang <version>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:781
msgid ""
"Treat each comma separated argument in <arg> as a documentation comment "
"block command"
msgstr ""

#: ../../../ClangCommandLineReference.rst:785
msgid ""
"Require member pointer base types to be complete if they would be "
"significant under the Microsoft ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:791
msgid "Allow \\_\\_declspec as a keyword"
msgstr ""

#: ../../../ClangCommandLineReference.rst:801
msgid "Print fix-its in machine parseable form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:805
msgid "Print source range spans in numeric form"
msgstr ""

#: ../../../ClangCommandLineReference.rst:811
msgid "Discard value names in LLVM IR"
msgstr ""

#: ../../../ClangCommandLineReference.rst:815
msgid "Enables the experimental global instruction selector"
msgstr ""

#: ../../../ClangCommandLineReference.rst:819
msgid "Enables an experimental new pass manager in LLVM."
msgstr ""

#: ../../../ClangCommandLineReference.rst:823
msgid ""
"Use separate accesses for consecutive bitfield runs with legal widths and "
"alignments."
msgstr ""

#: ../../../ClangCommandLineReference.rst:827
msgid "Inline suitable functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:831
msgid "Inline functions which are (explicitly or implicitly) marked inline"
msgstr ""

#: ../../../ClangCommandLineReference.rst:835
msgid ""
"Disable auto-generation of preprocessed source files and a script for "
"reproduction during a clang crash"
msgstr ""

#: ../../../ClangCommandLineReference.rst:839
msgid "Don't use blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:847
msgid "Level of field padding for AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:851
msgid "Enable linker dead stripping of globals in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:855
msgid ""
"Enable poisoning array cookies when using custom operator new\\[\\] in "
"AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:859
msgid "Enable use-after-scope detection in AddressSanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:863
msgid ""
"Enable ODR indicator globals to avoid false ODR violation reports in "
"partially sanitized programs at the cost of an increase in binary size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:867
msgid "Path to blacklist file for sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:871
msgid "Make the jump table addresses canonical in the symbol table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:875
msgid "Enable control flow integrity (CFI) checks for cross-DSO calls."
msgstr ""

#: ../../../ClangCommandLineReference.rst:879
msgid "Generalize pointers in CFI indirect call type signature checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:883
msgid "Specify the type of coverage instrumentation for Sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:887
msgid ""
"Select the HWAddressSanitizer ABI to target (interceptor or platform, "
"default interceptor). This option is currently unused."
msgstr ""

#: ../../../ClangCommandLineReference.rst:895
#: ../../../ClangCommandLineReference.rst:901
msgid "Enable origins tracking in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:905
msgid "Enable use-after-destroy detection in MemorySanitizer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:915
msgid "Enable recovery for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:919
msgid "Enable sanitizer statistics gathering."
msgstr ""

#: ../../../ClangCommandLineReference.rst:923
msgid "Enable atomic operations instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:927
msgid "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:931
msgid "Enable memory access instrumentation in ThreadSanitizer (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:935
msgid "Enable trapping for specified sanitizers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:939
msgid ""
"Strip (or keep only, if negative) a given number of path components when "
"emitting check metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:945
msgid ""
"Turn on runtime checks for various forms of undefined or suspicious "
"behavior. See user manual for available checks"
msgstr ""

#: ../../../ClangCommandLineReference.rst:949
msgid "Enable function outlining (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:955
msgid ""
"Print supported cpu models for the given target (if target is not specified, "
"it will print the supported cpus for the default target)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:959
msgid "Language standard to compile for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:962
msgid "Preprocessor flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:964
msgid "Flags controlling the behavior of the Clang preprocessor."
msgstr ""

#: ../../../ClangCommandLineReference.rst:968
msgid "Include comments in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:972
msgid "Include comments from within macros in preprocessed output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:976
msgid "Define <macro> to <value> (or 1 if <value> omitted)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:980
msgid "Show header includes and nesting depth"
msgstr ""

#: ../../../ClangCommandLineReference.rst:984
msgid "Disable linemarker output in -E mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:988
msgid "Undefine macro <macro>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:992
msgid "Pass the comma separated arguments in <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:996
msgid "Pass <arg> to the preprocessor"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1000
msgid "remap file source paths in predefined preprocessor macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1003
msgid "Include path management"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1005
msgid "Flags controlling how ``#include``\\s are resolved to files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1009
msgid "Add directory to include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1013
msgid ""
"Restrict all prior -I flags to double-quoted inclusion and remove current "
"directory from include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1017
msgid "Ignore environment variables to detect CUDA installation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1021
msgid "CUDA installation path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1025
msgid "Add directory to the C++ SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1029
msgid "Use the last modification time of <file> as the build session timestamp"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1033
msgid "Time when the current build session started"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1037
msgid ""
"Specify the mapping of module name to precompiled module file, or load a "
"module file if name is omitted."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1041
msgid "Specify the module cache path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1045
msgid "Disable validation of the diagnostic options when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1049
msgid ""
"Specify the interval (in seconds) after which a module file will be "
"considered unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1053
msgid ""
"Specify the interval (in seconds) between attempts to prune the module cache"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1057
msgid "Specify the module user build path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1061
msgid ""
"Don't verify input files for the modules if the module has been successfully "
"validated or loaded during this build session"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1065
msgid ""
"Validate the system headers that a module depends on when loading the module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1069
msgid "Specify the prebuilt module path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1073
msgid "Add directory to AFTER include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1077
msgid "Add directory to SYSTEM framework search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1081
msgid ""
"Add directory to SYSTEM framework search path, absolute paths are relative "
"to -isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1085
msgid "Include macros from file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1089
msgid "Include file before parsing"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1093
msgid "Include precompiled header file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1097
msgid "Set the -iwithprefix/-iwithprefixbefore prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1101
msgid "Add directory to QUOTE include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1105
msgid "Set the system root directory (usually /)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1109
msgid "Add directory to SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1113
msgid "Add directory to end of the SYSTEM include search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1117
msgid ""
"Overlay the virtual filesystem described by file over the real file system"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1121
msgid "Set directory to SYSTEM include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1125
msgid "Set directory to include search path with prefix"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1129
msgid ""
"Add directory to SYSTEM include search path, absolute paths are relative to -"
"isysroot"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1133
msgid "Path to libomptarget-nvptx libraries"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1137
msgid "Path to ptxas (used for compiling CUDA code)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1143
msgid "Use directory as the C++ standard library include path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1147
msgid ""
"Treat all #include paths starting with <prefix> as including a system header."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1150
msgid "Dependency file generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1152
msgid ""
"Flags controlling generation of a dependency file for ``make``-like build "
"systems."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1157
msgid "Like -MD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1161
msgid "Write a depfile containing user and system headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1165
msgid "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1169
msgid "Add missing headers to depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1173
msgid "Write a compilation database entry per input"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1177
msgid "Like -MMD, but also implies -E and writes to stdout by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1181
msgid "Write a depfile containing user headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1185
msgid "Create phony target for each dependency (other than main file)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1189
msgid "Specify name of main file output to quote in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1193
msgid "Specify name of main file output in depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1197
msgid "Use NMake/Jom format for the depfile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1200
msgid "Dumping preprocessor state"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1202
msgid ""
"Flags allowing the state of the preprocessor to be dumped in various ways."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1212
msgid "Print macro definitions in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1216
msgid "Print include directives in -E mode in addition to normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1220
msgid "Print macro definitions in -E mode instead of normal output"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1223
msgid "Diagnostic flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1225
msgid ""
"Flags controlling which warnings, errors, and remarks Clang will generate. "
"See the :doc:`full list of warning and remark flags <DiagnosticsReference>`."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1230
msgid "Enable the specified remark"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1234
msgid ""
"Report transformation analysis from optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1238
msgid ""
"Report missed transformations by optimization passes whose name matches the "
"given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1242
msgid ""
"Report transformations performed by optimization passes whose name matches "
"the given POSIX regular expression"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1246
msgid "Enable the specified warning"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1250
msgid "Enable warnings for deprecated constructs and define \\_\\_DEPRECATED"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1255
msgid "Target-independent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1266
msgid "Emit an address-significance table"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1278
msgid "Enable C++17 aligned allocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1282
msgid "Treat editor placeholders as valid source code"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1290
msgid "Use ANSI escape codes for diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1294
msgid "Use Apple's kernel extensions ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1298
msgid "Force linking the clang builtins runtime library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1302
msgid "Enable Apple gcc-compatible #pragma pack handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1306
msgid "Restrict code to those available for App Extensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1328
msgid "Enable the 'blocks' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1334
msgid "Accept non-standard constructs supported by the Borland compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1342
msgid "Load the clang builtins module map file."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1346
msgid "Enable C++ static destructor registration (the default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1352
msgid ""
"Instrument control-flow architecture protection. Options: return, branch, "
"full, none."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1358
msgid "Enable C++ builtin type char8\\_t"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1364
msgid "Use colors in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1382
msgid "Assume functions may be convergent"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1386
msgid "Enable support for the C++ Coroutines TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1390
msgid "Generate coverage mapping to enable code coverage analysis"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1396
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1402
msgid ""
"Generate instrumented code to collect context sensitive execution counts "
"into <directory>/default.profraw (overridden by LLVM\\_PROFILE\\_FILE env "
"var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1406
msgid "Enable C++ exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1412
msgid "Place each data in its own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1416
msgid "The compilation directory to embed in the debug info."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1420
msgid ""
"Default DWARF version to use, if a -g option caused DWARF debug info to be "
"produced"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1424
msgid "Emit extra debug info to make sample profile more accurate."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1428
msgid "Emit macro debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1436
msgid "remap file source paths in debug info"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1440
msgid "Use DWARF base address selection entries in debug\\_ranges"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1444
msgid "Place debug types in their own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1448
msgid "Parse templated function definitions at the end of the translation unit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1452
msgid "Treat usage of null pointers as undefined behavior."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1458
msgid "Print absolute paths in diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1468
msgid ""
"Prevent optimization remarks from being output if they do not have at least "
"this profile count"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1472
msgid "Enable profile hotness information in diagnostic line"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1476
msgid "Display include stacks for diagnostic notes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1480
msgid "Print option name with mappable diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1484
msgid "Print a template comparison tree for differing templates"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1488
msgid ""
"Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:"
"%:' (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1492
msgid "Allow '$' in identifiers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1496
msgid "Enable '\\[\\[\\]\\]' attributes in all C and C++ language modes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1502
msgid "Use DWARF style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1510
msgid "Embed LLVM bitcode (option: off, all, bitcode, marker)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1514
msgid "Emit all declarations, even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1518
msgid "Use emutls functions to access thread\\_local variables"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1528
msgid "Enable support for exception handling"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1534
msgid "Enable the experimental new constant interpreter"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1540
msgid "Allow aggressive, lossy floating-point optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1544
msgid ""
"remap file source paths in debug info and predefined preprocessor macros"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1550
msgid "Enable fixed point types"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1556
msgid "Always emit a debug frame section"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1560
msgid "Emits more virtual tables to improve devirtualization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1564
msgid "Enable support for int128\\_t type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1568
msgid ""
"Form fused FP ops (e.g. FMAs): fast (everywhere) \\| on (according to "
"FP\\_CONTRACT pragma) \\| off (never fuse). Default is 'fast' for CUDA/HIP "
"and 'on' otherwise."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1572
msgid "Specifies the exception behavior of floating-point operations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1576
msgid "Controls the semantics of floating-point calculations."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1580
msgid "Assert that the compilation takes place in a freestanding environment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1584
msgid "Place each function in its own section (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1590
msgid "Allow GNU-extension keywords regardless of language standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1594
msgid "Generate output compatible with the standard GNU Objective-C runtime"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1598
msgid "Use the gnu89 inline semantics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1602
msgid ""
"Sets various macros to claim compatibility with the given GCC version "
"(default is 4.2.1)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1612
msgid "Implicitly search the file system for module map files."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1620
msgid ""
"Instrument function entry only, after inlining, without arguments to the "
"instrumentation call"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1624
msgid "Generate calls to instrument function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1628
msgid "Like -finstrument-functions, but insert the calls after inlining"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1632
msgid "Enable the integrated assembler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1636
msgid "Run cc1 in-process"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1642
msgid "Keep static const variables even if unused"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1646
msgid "Enable implicit vector bit-casts"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1652
msgid "Enable LTO in 'full' mode"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1656
msgid ""
"Controls the backend parallelism of -flto=thin (default of 0 means the "
"number of threads will be derived from the number of CPUs detected)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1662
msgid "Set LTO mode to either 'full' or 'thin'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1668
msgid "Require math functions to indicate errors by setting errno"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1672
msgid ""
"Specify the maximum alignment to enforce on pointers lacking an explicit "
"alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1676
msgid "Allow merging of constants"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1684
msgid "Load this module map file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1688
msgid "Specify the name of the module to build"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1692
msgid "Enable the 'modules' language feature"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1696
msgid "Require declaration of modules used within a module"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1700
msgid ""
"Ignore the definition of the given macro when building and loading modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1704
msgid "Search even non-imported modules to resolve references"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1708
msgid "Like -fmodules-decluse but requires all headers to be in modules"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1712
msgid "Enable support for the C++ Modules TS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1716
msgid "Validate PCM input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1720
msgid "Enable full Microsoft Visual C++ compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1724
msgid ""
"Dot-separated value representing the Microsoft compiler version number to "
"report in \\_MSC\\_VER (0 = don't define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1728
msgid "Accept some non-standard constructs supported by the Microsoft compiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1736
msgid ""
"Microsoft compiler version number to report in \\_MSC\\_VER (0 = don't "
"define it (default))"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1746
msgid ""
"Specifies the largest alignment guaranteed by '::operator new(size\\_t)'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1752
msgid "Disable implicit builtin knowledge of a specific function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1756
msgid "Do not elide types when printing diagnostics"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1762
msgid "Do not treat C++ operator name keywords as synonyms for operators"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1766
msgid "Control emission of RTTI data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1772
msgid ""
"Directly create compilation output files. This may lead to incorrect "
"incremental builds if the compiler crashes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1790
msgid "Synthesize retain and release calls for Objective-C pointers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1794
msgid "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1800
msgid "Enable Objective-C exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1814
msgid "Specify the target Objective-C runtime kind and version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1820
msgid "Enable ARC-style weak references in Objective-C"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1826
msgid "Parse OpenMP pragmas and generate parallel code."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1830
msgid "Emit OpenMP code only for SIMD-based constructs."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1842
msgid ""
"Specify the output name of the file containing the optimization remarks. "
"Implies -fsave-optimization-record. On Darwin platforms, this cannot be used "
"with multiple -arch <arch> options."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1846
msgid ""
"Only include passes which match a specified regular expression in the "
"generated optimization record (by default, include all passes)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1852
msgid ""
"Generate instrumented code to collect order file into default.profraw file "
"(overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1862
msgid "Specify the default maximum struct packing alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1866
msgid "Recognize and construct Pascal-style string literals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1870
msgid ""
"Load pass plugin from a dynamic shared object file (only with new pass "
"manager)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1874
msgid "Generate M NOPs before function entry and N-M NOPs after function entry"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1878
msgid "Override the default ABI to return all structs on the stack"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1884
msgid "Validate PCH input files based on content if mtime differs"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1892
msgid "Use the PLT to make function calls"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1896
msgid "Load the named plugin (dynamic shared object)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1906
msgid ""
"Instrument only functions from files where names don't match all the regexes "
"separated by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1910
msgid ""
"Instrument only functions from files where names match any regex separated "
"by a semi-colon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1914
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1920
msgid ""
"Generate instrumented code to collect execution counts into <directory>/"
"default.profraw (overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1924
msgid ""
"Generate instrumented code to collect execution counts into default.profraw "
"file (overridden by '=' form of option or LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1930
msgid ""
"Generate instrumented code to collect execution counts into <file> "
"(overridden by LLVM\\_PROFILE\\_FILE env var)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1938
msgid "Use instrumentation data for profile-guided optimization"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1942
msgid ""
"Use the remappings described in <file> to match the profile data against "
"names in the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1949
msgid "Specifies that the sample profile is accurate. If the sample"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1947
msgid ""
"profile is accurate, callsites without profile samples are marked as cold. "
"Otherwise, treat callsites without profile samples as if we have no profile"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1957
msgid "Enable sample-based profile guided optimizations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1963
msgid ""
"Use instrumentation data for profile-guided optimization. If pathname is a "
"directory, it reads from <pathname>/default.profdata. Otherwise, it reads "
"from file <pathname>."
msgstr ""

#: ../../../ClangCommandLineReference.rst:1967
msgid "Allow division operations to be reassociated"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1971
msgid "Override the default ABI to return small structs in registers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1975
msgid "Use atexit or \\_\\_cxa\\_atexit to register global destructors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1979
msgid "Enable C++17 relaxed template template argument matching"
msgstr ""

#: ../../../ClangCommandLineReference.rst:1983
msgid "Turn on loop reroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2007
msgid "Generate a YAML optimization record file"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2013
msgid "Generate an optimization record file in a specific format"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2017
msgid "Use SEH style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2021
msgid ""
"Allocate to an enum type only as many bytes as it needs for the declared "
"range of possible values"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2025
msgid "Force wchar\\_t to be a short unsigned int"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2031
msgid ""
"Which overload candidates to show when overload resolution fails: best\\|"
"all; defaults to all"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2045
msgid "Enable C++14 sized global deallocation functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2049
msgid "Use SjLj style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2053
msgid "Enable the superword-level parallelism vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2061
msgid ""
"Provide minimal debug info in the object/executable to facilitate online "
"symbolication/stack traces in the absence of .dwo/.dwp files when using "
"Split DWARF"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2065
msgid "Enables splitting of the LTO unit."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2071
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"This uses a loose heuristic which considers functions vulnerable if they "
"contain a char (or 8bit integer) array or constant sized calls to alloca, "
"which are of greater size than ssp-buffer-size (default: 8 bytes). All "
"variable sized calls to alloca are considered vulnerable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2075
msgid "Enable stack protectors for all functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2079
msgid ""
"Enable stack protectors for some functions vulnerable to stack smashing. "
"Compared to -fstack-protector, this uses a stronger heuristic that includes "
"functions containing arrays of any size (and any type), as well as any calls "
"to alloca or the taking of an address from a local variable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2083
msgid "Emit section containing metadata on function stack sizes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2087
msgid "Emit full debug info for all types used by the program"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2093
msgid ""
"Enable optimizations based on the strict definition of an enum's value range"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2097
msgid "Assume that overflowing float-to-int casts are undefined (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2103
msgid ""
"Always treat control flow paths that fall off the end of a non-void function "
"as unreachable"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2107
msgid ""
"Enable optimizations based on the strict rules for overwriting polymorphic C+"
"+ objects"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2125
msgid "Write minimized bitcode to <file> for the ThinLTO thin link only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2129
msgid "Perform ThinLTO importing using provided function summary index"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2138
msgid ""
"Turn on time profiler. Generates JSON file based on output filename. Results "
"can be analyzed with chrome://tracing or `Speedscope App <https://www."
"speedscope.app>`_ for flamegraph visualization."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2144
msgid "Minimum time granularity (in microseconds) traced by time profiler"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2150
msgid "Issue call to specified function rather than a trap instruction"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2156
msgid "Trap on integer overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2164
msgid "Specify the function to be called on overflow"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2168
msgid "Process trigraph sequences"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2172
msgid ""
"Initialize trivial automatic stack variables: uninitialized (default) \\| "
"pattern"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2176
msgid "Use unique names for text and data sections (ELF Only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2182
msgid "Turn on loop unroller"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2196
msgid "Use .init\\_array instead of .ctors"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2204
msgid ""
"Compute and store the hash of input files used to build an AST. Files with "
"mismatching mtime's are considered valid if both contents is identical"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2208
msgid "Use the given vector functions library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2212
msgid "Enable the loop vectorization passes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2218
msgid ""
"Enables dead virtual function elimination optimization. Requires -flto=full"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2222
msgid "Give global C++ operator new and delete declarations hidden visibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2226
msgid "Give inline C++ member functions hidden visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2230
msgid ""
"Give global types 'default' visibility and global functions and variables "
"'hidden' visibility by default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2234
msgid "Set the default symbol visibility for all global declarations"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2238
msgid "Use WebAssembly style exceptions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2242
msgid "Enables whole-program vtable optimization. Requires -flto"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2246
msgid "Treat signed integer overflow as two's complement"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2250
msgid "Store string literals as writable data"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2254
msgid ""
"Determine whether to always emit \\_\\_xray\\_customevent(...) calls even if "
"the function it appears in is not always instrumented."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2258
msgid ""
"Determine whether to always emit \\_\\_xray\\_typedevent(...) calls even if "
"the function it appears in is not always instrumented."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2262
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'always "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2266
msgid ""
"Filename defining the list of functions/types for imbuing XRay attributes."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2274
msgid "Sets the minimum function size to instrument with XRay"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2278
msgid "Generate XRay instrumentation sleds on function entry and exit"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2282
msgid ""
"Select which XRay instrumentation points to emit. Options: all, none, "
"function, custom. Default is 'all'."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2286
msgid "Tells clang to add the link dependencies for XRay."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2290
msgid "List of modes to link in by default into XRay instrumented binaries."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2294
msgid ""
"DEPRECATED: Filename defining the whitelist for imbuing the 'never "
"instrument' XRay attribute."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2300
msgid "Enable System z vector language extension"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2307
msgid "OpenCL flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2310
msgid "OpenCL only. Allow denormals to be flushed to zero."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2314
msgid ""
"OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, "
"and defines \\_\\_FAST\\_RELAXED\\_MATH\\_\\_."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2318
msgid ""
"OpenCL only. Allow floating-point optimizations that assume arguments and "
"results are not NaNs or +-Inf."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2322
msgid ""
"OpenCL only. Specify that single precision floating-point divide and sqrt "
"used in the program source are correctly rounded."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2326
msgid "OpenCL only. Generate kernel argument metadata."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2330
msgid ""
"OpenCL only. Allow use of less precise MAD computations in the generated "
"binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2334
msgid ""
"OpenCL only. Allow use of less precise no signed zeros computations in the "
"generated binary."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2338
msgid ""
"OpenCL only. This option disables all optimizations. By default "
"optimizations are enabled."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2342
msgid ""
"OpenCL only. Treat double precision floating-point constant as single "
"precision constant."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2346
msgid "OpenCL language standard to compile for."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2350
msgid "OpenCL only. This option is added for compatibility with OpenCL 1.0."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2354
msgid ""
"OpenCL only. Defines that the global work-size be a multiple of the work-"
"group size specified to clEnqueueNDRangeKernel"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2358
msgid ""
"OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-"
"signed-zeros and -cl-mad-enable."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2361
msgid "Target-dependent compilation options"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2364
msgid ""
"Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2368
msgid "Reserve the 1 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2372
msgid "Reserve the 10 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2376
msgid "Reserve the 11 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2380
msgid "Reserve the 12 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2384
msgid "Reserve the 13 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2388
msgid "Reserve the 14 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2392
msgid "Reserve the 15 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2396
msgid "Reserve the 16 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2400
msgid "Reserve the 17 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2404
msgid "Reserve the 18 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2408
msgid "Reserve the 19 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2412
msgid "Reserve the 2 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2416
msgid "Reserve the 20 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2420
msgid "Reserve the 21 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2424
msgid "Reserve the 22 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2428
msgid "Reserve the 23 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2432
msgid "Reserve the 24 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2436
msgid "Reserve the 25 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2440
msgid "Reserve the 26 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2444
msgid "Reserve the 27 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2448
msgid "Reserve the 28 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2452
msgid "Reserve the 29 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2456
msgid "Reserve the 3 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2460
msgid "Reserve the 30 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2464
msgid "Reserve the 31 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2468
msgid "Reserve the 4 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2472
msgid "Reserve the 5 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2476
msgid "Reserve the 6 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2480
msgid "Reserve the 7 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2484
msgid "Reserve the 8 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2488
msgid "Reserve the 9 register (AArch64/RISC-V only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2506
msgid "Align doubles to two words in structs (x86 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2514
msgid "Link stack frames through backchain on System Z"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2528
msgid "Allow use of CRC instructions (ARM/Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2538
msgid "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2542
msgid "Insert calls to fentry at function entry (x86/SystemZ only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2552
msgid "Enable merging of globals"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2562
msgid "Use Intel MCU ABI"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2570
msgid ""
"(integrated-as) Emit an object file which can be used with an incremental "
"linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2578
msgid ""
"Generate branches with extended addressability, usually via indirect jumps."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2582
msgid "Enable only control-flow mitigations for Load Value Injection (LVI)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2586
msgid "Set Mac OS X deployment target"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2592
msgid ""
"Set the default structure layout to be compatible with the Microsoft "
"compiler standard"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2596
msgid ""
"Generate mcount/\\_\\_fentry\\_\\_ calls as nops. To activate they need to "
"be patched in."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2600
msgid "Omit frame pointer setup for leaf functions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2606
msgid "Use packed stack layout (SystemZ only)."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2610
msgid "Use copy relocations support for PIE builds"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2614
msgid ""
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' "
"which allows target specific decisions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2618
msgid "Enable hexagon-qdsp6 backward compatibility"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2628
msgid ""
"Generate a \\_\\_mcount\\_loc section entry for each \\_\\_fentry\\_\\_ call."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2636
msgid "(integrated-as) Relax all machine instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2642
msgid "Make StdCall calling convention the default"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2646
msgid "Select return address signing scope"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2650
msgid "Use software floating point"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2656
msgid "Set the stack alignment"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2660
msgid "Enable stack probes"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2664
msgid "Set the stack probe size"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2668
msgid "Force realign the stack at entry to every function"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2672
msgid "The thread model to use, e.g. posix, single (posix by default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2680
msgid "Enable direct TLS access through segment registers (default)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2684
msgid ""
"Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) "
"\\| 24 (for 16MB, default) \\| 32 (for 4GB) \\| 48 (for 256TB, needs -"
"mcmodel=large)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2702
msgid "Wavefront size 64 is used"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2709
msgid "AARCH64"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2712
msgid "Make the x10 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2716
msgid "Make the x11 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2720
msgid "Make the x12 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2724
msgid "Make the x13 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2728
msgid "Make the x14 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2732
msgid "Make the x15 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2736
msgid "Make the x18 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2740
msgid "Make the x8 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2744
msgid "Make the x9 register call-saved (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2748
msgid "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2752
msgid ""
"Generate code which only uses the general purpose registers (AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2755
msgid "AMDGPU"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2758
msgid "Enable code object v3 (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2762
msgid "CU wavefront execution mode is used (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2766
msgid "Enable SRAM ECC (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2770
msgid "Enable XNACK (AMDGPU only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2773
msgid "ARM"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2776
msgid "Reserve the r9 register (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2780
msgid "Allow use of CMSE (Armv8-M Security Extensions)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2784
msgid "Disallow generation of data access to code sections (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2788
msgid "Disallow use of movt/movw pairs (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2792
msgid ""
"Disallow converting instructions with negative immediates to their negation "
"or inversion."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2796
msgid "Disallow use of CRC instructions (ARM only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2800
msgid ""
"Disallow generation of deprecated IT blocks for ARMv8. It is on by default "
"for ARMv8 Thumb mode."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2804
msgid "Thread pointer access method (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2808
msgid "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2811
#: ../../../ClangCommandLineReference.rst:2831
msgid "Hexagon"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2816
msgid "Enable generation of memop instructions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2820
msgid "Enable generation of new-value jumps"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2824
msgid "Enable generation of new-value stores"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2828
msgid "Enable generation of instruction packets"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2834
#: ../../../ClangCommandLineReference.rst:2844
msgid "Enable Hexagon Vector eXtensions"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2838
msgid "Set Hexagon Vector Length"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2847
msgid "MIPS"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2850
msgid "Enable SVR4-style position-independent code (Mips only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2866
msgid ""
"Place constants in the .rodata section instead of the .sdata section even if "
"they meet the -G <size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2870
msgid ""
"Assume that externally defined data is in the small data if it meets the -G "
"<size> threshold (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2874
msgid "Use 32-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2878
msgid "Use 64-bit floating point registers (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2884
msgid ""
"Use GP relative accesses for symbols known to be in a small data section "
"(MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2888
msgid "Change indirect jump instructions to inhibit speculation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2896
msgid "Extend the -G behaviour to object local data (MIPS)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2900
msgid ""
"Enable the generation of 4-operand madd.s, madd.d and related instructions."
msgstr ""

#: ../../../ClangCommandLineReference.rst:2906
msgid "Enable MSA ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2910
msgid "Enable MT ASE (MIPS only)"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2923
msgid "PowerPC"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2963
msgid "WebAssembly"
msgstr ""

#: ../../../ClangCommandLineReference.rst:2987
msgid "X86"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3147
msgid "RISCV"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3150
msgid "Enable linker relaxation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3154
msgid "Enable using library calls for save and restore"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3157
msgid "Long double flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3158
msgid "Selects the long double implementation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3162
msgid "Force long double to be 128 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3166
msgid "Force long double to be 64 bits"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3170
msgid "Force long double to be 80 bits, padded to 128 bits for storage"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3173
msgid "Optimization level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3175
msgid "Flags controlling how much optimization should be performed."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3182
msgid "Debug information generation"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3184
msgid ""
"Flags controlling how much and what kind of debug information should be "
"generated."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3188
msgid "Kind and level of debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3191
msgid "Generate source-level debug information"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3195
msgid "Generate source-level debug information with the default dwarf version"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3199
msgid "Generate source-level debug information with dwarf version 2"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3203
msgid "Generate source-level debug information with dwarf version 3"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3207
msgid "Generate source-level debug information with dwarf version 4"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3211
msgid "Generate source-level debug information with dwarf version 5"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3218
msgid "Debug level"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3235
msgid "Emit debug line info directives only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3239
msgid "Emit debug line number tables only"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3243
msgid ""
"Generate debug info with external references to clang modules or precompiled "
"headers"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3246
msgid "Debugger to tune debug information for"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3254
msgid "Debug information flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3261
msgid "Embed source text in DWARF debug sections"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3275
msgid "Set DWARF fission mode to either 'split' or 'single'"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3281
#: ../../../ClangCommandLineReference.rst:3287
msgid "DWARF debug sections compression type"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3290
msgid "Static analyzer flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3292
msgid "Flags controlling the behavior of the Clang Static Analyzer."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3296
msgid "Pass <arg> to the static analyzer"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3299
msgid "Fortran compilation flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3301
msgid ""
"Flags that will be passed onto the ``gfortran`` compiler when Clang is given "
"a Fortran input."
msgstr ""

#: ../../../ClangCommandLineReference.rst:3443
msgid "Linker flags"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3444
msgid "Flags that are passed on to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3448
msgid "Add directory to library search path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3454
msgid "Specify <script> as linker script"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3458
msgid "Set starting address of BSS to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3462
msgid "Set starting address of DATA to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3466
msgid "Set starting address of TEXT to <addr>"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3470
msgid "Pass the comma separated arguments in <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3476
msgid "Pass <arg> to the linker"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3488
msgid "HIP device library path"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3492
msgid "HIP device library"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3508
msgid "undef all system defines"
msgstr ""

#: ../../../ClangCommandLineReference.rst:3514
msgid "Pass -z <arg> to the linker"
msgstr ""
